close all; delete(findall(0, 'type', 'figure')); clear all; clc

%% neural network
el_path = '/neuralnetworks';
el_class_list = {'NNFeatureImportanceBrainSurface', 'NNFeatureImportanceBrainSurfacePP_FI_Data', 'NNFeatureImportanceBrainSurfacePP_FI_Graph', 'NNFeatureImportanceBrainSurfacePP_FI_Measure'}; 
for i = 1:1:length(el_class_list)
    el_class = el_class_list{i};
    delete([fileparts(which('braph2')) el_path filesep() el_class '.m'])
    delete([fileparts(which('braph2')) filesep() 'src' filesep() 'gui' filesep() 'layouts' filesep() el_class '.layout'])
    create_Element([fileparts(which('braph2genesis')) el_path filesep() '_' el_class '.gen.m'], [fileparts(which('braph2')) el_path])
    %create_Element([fileparts(which('braph2genesis')) el_path filesep() '_' el_class '.gen.m'], [fileparts(which('braph2')) el_path])
    create_layout([fileparts(which('braph2genesis')) el_path filesep() '_' el_class '.gen.m'], [fileparts(which('braph2')) el_path])
    create_test_Element([fileparts(which('braph2genesis')) el_path filesep() '_' el_class '.gen.m'], [fileparts(which('braph2')) el_path])
    ['test_' el_class]
    %eval(['test_' el_class])
end

%%
clc; clear;
load('test_file_yc_fi.mat')

%% Measure FI Visualization
gui = GUIElement('PE', nnfibs_measure);
gui.get('DRAW');
gui.get('SHOW')

%% Graph FI Visualization
gui = GUIElement('PE', nnfibs_graph);
gui.get('DRAW');
gui.get('SHOW')

%% GUI test
% ensure the example data is generated
if ~isfile([fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'atlas.xlsx'])
    test_NNDataPoint_CON_CLA % create example files
end

%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS( ...
    'FILE', [fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'atlas.xlsx'], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%% Load Groups of SubjectCON
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'CON_Group_1_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1 = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'CON_Group_2_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2 = im_gr2.get('GR');

%% Analysis CON BUD
densities = 5:1:6;
graph_temp = MultigraphBUD('DENSITIES', densities);
a_BUD1 = AnalyzeEnsemble_CON_BUD( ...
    'GRAPH_TEMPLATE', graph_temp, ...
    'GR', gr1 ...
    );

a_BUD2 = AnalyzeEnsemble_CON_BUD( ...
    'TEMPLATE', a_BUD1, ...
    'GR', gr2 ...
    );

a_BUD1.get('MEASUREENSEMBLE', 'Degree').get('M');
a_BUD1.get('MEASUREENSEMBLE', 'DegreeAv').get('M');
a_BUD1.get('MEASUREENSEMBLE', 'Distance').get('M');

a_BUD2.get('MEASUREENSEMBLE', 'Degree').get('M');
a_BUD2.get('MEASUREENSEMBLE', 'DegreeAv').get('M');
a_BUD2.get('MEASUREENSEMBLE', 'Distance').get('M');

%% Create NNData composed of corresponding NNDataPoints
[~, group_folder_name] = fileparts(im_gr1.get('DIRECTORY'));
it_list1 = cellfun(@(x) NNDataPoint_Measure_CLA( ...
    'ID', x.get('ID'), ...
    'G', x, ...
    'M_LIST', a_BUD1.get('ME_DICT').get('KEYS'), ...
    'TARGET_IDS', {group_folder_name}), ...
    a_BUD1.get('G_DICT').get('IT_LIST'), ...
    'UniformOutput', false);

[~, group_folder_name] = fileparts(im_gr2.get('DIRECTORY'));
it_list2 = cellfun(@(x) NNDataPoint_Measure_CLA( ...
    'ID', x.get('ID'), ...
    'G', x, ...
    'M_LIST', a_BUD2.get('ME_DICT').get('KEYS'), ...
    'TARGET_IDS', {group_folder_name}), ...
    a_BUD2.get('G_DICT').get('IT_LIST'), ...
    'UniformOutput', false);

% create NNDataPoint_Graph_CLA DICT items
dp_list1 = IndexedDictionary(...
        'IT_CLASS', 'NNDataPoint_Measure_CLA', ...
        'IT_LIST', it_list1 ...
        );

dp_list2 = IndexedDictionary(...
        'IT_CLASS', 'NNDataPoint_Measure_CLA', ...
        'IT_LIST', it_list2 ...
        );

% create a NNDataset containing the NNDataPoint_Measure_CLA DICT
d1_measure = NNDataset( ...
    'DP_CLASS', 'NNDataPoint_Measure_CLA', ...
    'DP_DICT', dp_list1 ...
    );

d2_measure = NNDataset( ...
    'DP_CLASS', 'NNDataPoint_Measure_CLA', ...
    'DP_DICT', dp_list2 ...
    );

%% Create NNData composed of corresponding NNDataPoints for Graph Adj
[~, group_folder_name] = fileparts(im_gr1.get('DIRECTORY'));
it_list1 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
    'ID', x.get('ID'), ...
    'G', x, ...
    'TARGET_IDS', {group_folder_name}), ...
    a_BUD1.get('G_DICT').get('IT_LIST'), ...
    'UniformOutput', false);

[~, group_folder_name] = fileparts(im_gr2.get('DIRECTORY'));
it_list2 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
    'ID', x.get('ID'), ...
    'G', x, ...
    'TARGET_IDS', {group_folder_name}), ...
    a_BUD2.get('G_DICT').get('IT_LIST'), ...
    'UniformOutput', false);

% create NNDataPoint_Graph_CLA DICT items
dp_list1 = IndexedDictionary(...
        'IT_CLASS', 'NNDataPoint_Graph_CLA', ...
        'IT_LIST', it_list1 ...
        );

dp_list2 = IndexedDictionary(...
        'IT_CLASS', 'NNDataPoint_Graph_CLA', ...
        'IT_LIST', it_list2 ...
        );

% create a NNDataset containing the NNDataPoint_Measure_CLA DICT
d1_graph = NNDataset( ...
    'DP_CLASS', 'NNDataPoint_Graph_CLA', ...
    'DP_DICT', dp_list1 ...
    );

d2_graph = NNDataset( ...
    'DP_CLASS', 'NNDataPoint_Graph_CLA', ...
    'DP_DICT', dp_list2 ...
    );

%% Create a classifier cross-validation measure
nne_template = NNClassifierMLP_Evaluator('P', 2);
nncv_measure = NNClassifierMLP_CrossValidation('D', {d1_measure, d2_measure}, 'KFOLDS', 2, 'NNEVALUATOR_TEMPLATE', nne_template);
nncv_measure.get('TRAIN');
nncv_measure.memorize('AV_FEATURE_IMPORTANCE')

%% Create a classifier cross-validation graph
nne_template = NNClassifierMLP_Evaluator('P', 2);
nncv_graph = NNClassifierMLP_CrossValidation('D', {d1_graph, d2_graph}, 'KFOLDS', 2, 'NNEVALUATOR_TEMPLATE', nne_template);
nncv_graph.get('TRAIN');
nncv_graph.memorize('AV_FEATURE_IMPORTANCE');

%% init the brain surface element
nnfibs_measure = NNFeatureImportanceBrainSurface('BA', ba, 'D', d1_measure, 'FEATURE_IMPORTANCE', nncv_measure.get('AV_FEATURE_IMPORTANCE'));
nnfibs_graph = NNFeatureImportanceBrainSurface('BA', ba, 'D', d1_graph, 'FEATURE_IMPORTANCE', nncv_graph.get('AV_FEATURE_IMPORTANCE'));

%%
save('test_file_yc_fi.mat')