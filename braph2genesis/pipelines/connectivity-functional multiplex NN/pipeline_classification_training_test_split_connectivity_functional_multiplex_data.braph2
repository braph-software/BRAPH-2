%% Pipeline Classification Training-Test Split Connectivity-Functional Multiplex Data

% This is the pipeline script to train a multi-layer perceptron classifier using connectivity-functional multiplex data.
% The connectivity data can be derived from imaging modalities like diffusion weighted imaging (DWI). 
% The functional data can be derived from imaging modalities like functional MRI (fMRI), electroencephalography (EEG) or magnetoencephalography (MEG).
% 1. It loads a brain atlas from an XLS file (e.g., aal90_atlas.xlsx).
% 2.1 It loads the connectivity data of two groups of subjects from three directories (e.g., CON_Group1_XLS, CON_Group2_XLS, and CON_Group3_XLS) containing XLS files of each subject.
% 2.2 It loads the functional data of two groups of subjects from three directories (e.g., CON_Group1_XLS, CON_Group2_XLS, and CON_Group3_XLS) containing XLS files of each subject.
% 3. It splits the dataset into training and test datasets for all of the groups, respectively.
% 4. It trains the classifier using the training dataset.
% 5. It evaluates the performance of the trained classifier using both the training and test dataset.

% PDF: 
% README: 

%% Brain Atlas
ba = ImporterBrainAtlasXLS('WAITBAR', true).get('GET_FILE').get('BA'); % Load a Brain Atlas XLS % Brain Atlas

%% Connectivity Groups
gr1_CON = ImporterGroupSubjectCON_XLS('BA', ba, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group CON 1 from XLS % Group CON 1
gr2_CON = ImporterGroupSubjectCON_XLS('BA', ba, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group CON 2 from XLS % Group CON 2
gr3_CON = ImporterGroupSubjectCON_XLS('BA', ba, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group CON 3 from XLS % Group CON 3

%% Functional Groups
gr1_FUN = ImporterGroupSubjectFUN_XLS('BA', ba, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group FUN 1 from XLS % Group FUN 1
gr2_FUN = ImporterGroupSubjectFUN_XLS('BA', ba, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group FUN 2 from XLS % Group FUN 2
gr3_FUN = ImporterGroupSubjectFUN_XLS('BA', ba, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group FUN 3 from XLS % Group FUN 3

%% Group Combination
gr1 = CombineGroups_CON_FUN_MP('GR_CON', gr1_CON, 'GR_FUN', gr1_FUN, 'WAITBAR', true).get('GR_CON_FUN_MP'); % Combine Groups 1 % Group CON-FUN_MP 1
gr2 = CombineGroups_CON_FUN_MP('GR_CON', gr2_CON, 'GR_FUN', gr2_FUN, 'WAITBAR', true).get('GR_CON_FUN_MP'); % Combine Groups 2 % Group CON-FUN_MP 2
gr3 = CombineGroups_CON_FUN_MP('GR_CON', gr3_CON, 'GR_FUN', gr3_FUN, 'WAITBAR', true).get('GR_CON_FUN_MP'); % Combine Groups 3 % Group CON-FUN_MP 3

%% Training-Test Split
d_split1 = NNDatasetSplit('D', NNDataset('DP_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', 'DP_DICT', IndexedDictionary('IT_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', 'IT_LIST', cellfun(@(x) NNDataPoint_CON_FUN_MP_CLA('ID', x.get('ID'), 'SUB', x, 'TARGET_IDS', {gr1.get('ID')}), gr1.get('SUB_DICT').get('IT_LIST'), 'UniformOutput', false))), 'SPLIT', {0.7, 0.3}); % Split Dataset for Group 1 % Dataset 1 Splitter
d_split2 = NNDatasetSplit('D', NNDataset('DP_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', 'DP_DICT', IndexedDictionary('IT_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', 'IT_LIST', cellfun(@(x) NNDataPoint_CON_FUN_MP_CLA('ID', x.get('ID'), 'SUB', x, 'TARGET_IDS', {gr2.get('ID')}), gr2.get('SUB_DICT').get('IT_LIST'), 'UniformOutput', false))), 'SPLIT', {0.7, 0.3}); % Split Dataset for Group 2 % Dataset 2 Splitter
d_split3 = NNDatasetSplit('D', NNDataset('DP_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', 'DP_DICT', IndexedDictionary('IT_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', 'IT_LIST', cellfun(@(x) NNDataPoint_CON_FUN_MP_CLA('ID', x.get('ID'), 'SUB', x, 'TARGET_IDS', {gr3.get('ID')}), gr3.get('SUB_DICT').get('IT_LIST'), 'UniformOutput', false))), 'SPLIT', {0.7, 0.3}); % Split Dataset for Group 3 % Dataset 3 Splitter

%% Neural Network
nn = NNClassifierMLP('D', NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D'), 'LAYERS', [20 20]); % Train Neural Network % Trained Neural Network

%% NN Evaluator
nne_training = NNClassifierMLP_Evaluator('D', NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D'), 'NN', nn); % Evaluate on Training Dataset % Training Dataset Evaluation
nne_test = NNClassifierMLP_Evaluator('D', NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 2), d_split2.get('D_LIST_IT', 2), d_split3.get('D_LIST_IT', 2)}).get('D'), 'NN', nn); % Evaluate on Test Dataset % Test Dataset Evaluation