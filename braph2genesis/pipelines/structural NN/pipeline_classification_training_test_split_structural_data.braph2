%% Pipeline Classification Training-Test Split Structural Data

% This is the pipeline script to train a multi-layer perceptron classifier using structural data.
% The structural data can be derived from imaging modalities like T1 weighted MRI (T1-W), static positron emission tomography (PET), or arterial spin labeling (ASL).
% 1. It loads a brain atlas from an XLS file (e.g., destrieux_atlas.xlsx).
% 2. It loads data for three groups of subjects from the directories (e.g., ST_Group_1_XLS, ST_Group_2_XLS, and ST_Group_3_XLS) containing XLS files for each subject.
% 3. It splits the dataset into training and test datasets for all of the groups, respectively.
% 4. It trains the classifier using the training dataset.
% 5. It evaluates the performance of the trained classifier using both the training and test dataset.

% PDF: 
% README: 

%% Brain Atlas
ba = ImporterBrainAtlasXLS('WAITBAR', true).get('GET_FILE').get('BA'); % Load a Brain Atlas XLS % Brain Atlas

%% Groups
gr1 = ImporterGroupSubjectST_XLS('BA', ba, 'WAITBAR', true).get('GET_FILE').get('GR'); % Load Group ST 1 from XLS % Group ST 1
gr2 = ImporterGroupSubjectST_XLS('BA', ba, 'WAITBAR', true).get('GET_FILE').get('GR'); % Load Group ST 2 from XLS % Group ST 2
gr3 = ImporterGroupSubjectST_XLS('BA', ba, 'WAITBAR', true).get('GET_FILE').get('GR'); % Load Group ST 3 from XLS % Group ST 3

%% Training-Test Split
d_split1 = NNDatasetSplit('D', NNDataset('DP_CLASS', 'NNDataPoint_ST_CLA', 'DP_DICT', IndexedDictionary('IT_CLASS', 'NNDataPoint_ST_CLA', 'IT_LIST', cellfun(@(x) NNDataPoint_ST_CLA('ID', x.get('ID'), 'SUB', x, 'TARGET_IDS', {gr1.get('ID')}), gr1.get('SUB_DICT').get('IT_LIST'), 'UniformOutput', false))), 'SPLIT', {0.7, 0.3}); % Split Dataset for Group 1 % Dataset 1 Splitter
d_split2 = NNDatasetSplit('D', NNDataset('DP_CLASS', 'NNDataPoint_ST_CLA', 'DP_DICT', IndexedDictionary('IT_CLASS', 'NNDataPoint_ST_CLA', 'IT_LIST', cellfun(@(x) NNDataPoint_ST_CLA('ID', x.get('ID'), 'SUB', x, 'TARGET_IDS', {gr2.get('ID')}), gr2.get('SUB_DICT').get('IT_LIST'), 'UniformOutput', false))), 'SPLIT', {0.7, 0.3}); % Split Dataset for Group 2 % Dataset 2 Splitter
d_split3 = NNDatasetSplit('D', NNDataset('DP_CLASS', 'NNDataPoint_ST_CLA', 'DP_DICT', IndexedDictionary('IT_CLASS', 'NNDataPoint_ST_CLA', 'IT_LIST', cellfun(@(x) NNDataPoint_ST_CLA('ID', x.get('ID'), 'SUB', x, 'TARGET_IDS', {gr3.get('ID')}), gr3.get('SUB_DICT').get('IT_LIST'), 'UniformOutput', false))), 'SPLIT', {0.7, 0.3}); % Split Dataset for Group 3 % Dataset 3 Splitter

%% Neural Network
nn = NNClassifierMLP('D', NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D'), 'LAYERS', [20 20]); % Train Neural Network % Trained Neural Network

%% NN Evaluator
nne_training = NNClassifierMLP_Evaluator('BA', ba, 'D', NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D'), 'NN', nn); % Evaluate on Training Dataset % Training Dataset Evaluation
nne_test = NNClassifierMLP_Evaluator('BA', ba, 'D', NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 2), d_split2.get('D_LIST_IT', 2), d_split3.get('D_LIST_IT', 2)}).get('D'), 'NN', nn); % Evaluate on Test Dataset % Test Dataset Evaluation