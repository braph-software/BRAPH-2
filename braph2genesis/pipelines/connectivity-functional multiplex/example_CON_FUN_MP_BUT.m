%EXAMPLE_CON_FUN_MP_BUT
% Script example pipeline CON FUN MP BUT

clear variables %#ok<*NASGU>

%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS( ...
    'FILE', [fileparts(which('example_CON_FUN_MP_BUT')) filesep 'example data CON-FUN_MP' filesep 'aal90_atlas.xlsx'], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%% Load Groups of SubjectCON
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_FUN_MP_BUT')) filesep 'example data CON-FUN_MP' filesep 'xls' filesep 'connectivity' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_CON = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_FUN_MP_BUT')) filesep 'example data CON-FUN_MP' filesep 'xls' filesep 'connectivity' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_CON = im_gr2.get('GR');

%% Load Groups of SubjectFUN
im_gr1 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_FUN_MP_BUT')) filesep 'example data CON-FUN_MP' filesep 'xls' filesep 'functional' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_FUN = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_FUN_MP_BUT')) filesep 'example data CON-FUN_MP' filesep 'xls' filesep 'functional' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_FUN = im_gr2.get('GR');

%% Combine Groups of SubjectCON with Groups of SubjectFUN
co_gr1 = CombineGroups_CON_FUN( ...
    'GR1', gr1_CON, ...
    'GR2', gr1_FUN, ...
    'WAITBAR', true ...
    );

gr1 = co_gr1.get('GR');

co_gr2 = CombineGroups_CON_FUN( ...
    'GR1', gr2_CON, ...
    'GR2', gr2_FUN, ...
    'WAITBAR', true ...
    );

gr2 = co_gr2.get('GR');

%% Analysis CON FUN MP BUT
thresholds = .7:.1:.9;

a_BUT1 = AnalyzeEnsemble_CON_FUN_MP_BUT( ...
    'GR', gr1, ...
    'THRESHOLDS', thresholds ...
    );

a_BUT2 = AnalyzeEnsemble_CON_FUN_MP_BUT( ...
    'GR', gr2, ...
    'THRESHOLDS', thresholds ...
    );

% measure calculation
multiplexparticipation_BUT1 = a_BUT1.getMeasureEnsemble('MultiplexParticipation').get('M');
ovdegree_av_BUT1 = a_BUT1.getMeasureEnsemble('OverlappingDegreeAv').get('M');
edgeov_BUT1 = a_BUT1.getMeasureEnsemble('EdgeOverlap').get('M');

multiplexparticipation_BUT2 = a_BUT2.getMeasureEnsemble('MultiplexParticipation').get('M');
ovdegree_av_BUT2 = a_BUT2.getMeasureEnsemble('OverlappingDegreeAv').get('M');
edgeov_BUT2 = a_BUT2.getMeasureEnsemble('EdgeOverlap').get('M');

% comparison
c_BUT = CompareEnsemble( ...
    'P', 10, ...
    'A1', a_BUT1, ...
    'A2', a_BUT2, ...
    'WAITBAR', true, ...
    'VERBOSE', false, ...
    'MEMORIZE', true ...
    );

multiplexparticipation_BUT_diff = c_BUT.getComparison('MultiplexParticipation').get('DIFF');
multiplexparticipation_BUT_p1 = c_BUT.getComparison('MultiplexParticipation').get('P1');
multiplexparticipation_BUT_p2 = c_BUT.getComparison('MultiplexParticipation').get('P2');
multiplexparticipation_BUT_cil = c_BUT.getComparison('MultiplexParticipation').get('CIL');
multiplexparticipation_BUT_ciu = c_BUT.getComparison('MultiplexParticipation').get('CIU');

ovdegree_av_BUT_diff = c_BUT.getComparison('OverlappingDegreeAv').get('DIFF');
ovdegree_av_BUT_p1 = c_BUT.getComparison('OverlappingDegreeAv').get('P1');
ovdegree_av_BUT_p2 = c_BUT.getComparison('OverlappingDegreeAv').get('P2');
ovdegree_av_BUT_cil = c_BUT.getComparison('OverlappingDegreeAv').get('CIL');
ovdegree_av_BUT_ciu = c_BUT.getComparison('OverlappingDegreeAv').get('CIU');