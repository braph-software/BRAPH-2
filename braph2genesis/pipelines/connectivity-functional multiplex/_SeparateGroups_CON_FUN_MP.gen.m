%% ¡header!
SeparateGroups_CON_FUN_MP < ConcreteElement (se, separator of a CON_FUN_MP subject group) separates a group of subjects with connectivity and functiona data.

%%% ¡description!
SeparateGroups_CON_FUN_MP separates a group of subjects with connectivity 
 and functional data (SubjectCON_FUN_MP) into groups of SubjectCON and 
 SubjectCON_FUN.

%%% ¡seealso!
SubjectCON_FUN_MP, SubjectCON, SubjectFUN, CombineGroups_CON_FUN

%% ¡props_update!

%%% ¡prop!
ELCLASS (constant, string) is the class of the separator of a CON_FUN_MP subject group.
%%%% ¡default!
'SeparateGroups_CON_FUN_MP'

%%% ¡prop!
NAME (constant, string) is the name of the separator of a CON_FUN_MP subject group.
%%%% ¡default!
'Multiplex Connectivity-Functional Group Separator'

%%% ¡prop!
DESCRIPTION (constant, string) is the description of the separator of a CON_FUN_MP subject group.
%%%% ¡default!
'SeparateGroups_CON_FUN_MP separates a group of subjects with connectivity and functional data (SubjectCON_FUN_MP) into groups of SubjectCON and SubjectCON_FUN.'

%%% ¡prop!
TEMPLATE (parameter, item) is the template of the separator of a CON_FUN_MP subject group.
%%% ¡settings!
'SeparateGroups_CON_FUN_MP'

%%% ¡prop!
ID (data, string) is a few-letter code for the separator of a CON_FUN_MP subject group.
%%%% ¡default!
'SeparateGroups_CON_FUN_MP ID'

%%% ¡prop!
LABEL (metadata, string) is an extended label of the separator of a CON_FUN_MP subject group.
%%%% ¡default!
'SeparateGroups_CON_FUN_MP label'

%%% ¡prop!
NOTES (metadata, string) are some specific notes about the separator of a CON_FUN_MP subject group.
%%%% ¡default!
'SeparateGroups_CON_FUN_MP notes'

%% ¡props!

%%% ¡prop!
WAITBAR (metadata, logical) determines whether to show the waitbar.

%%% ¡prop!
GR_CON_FUN_MP (data, item) is a group of subjects with functional and connectivity data.
%%%% ¡settings!
'Group'
%%%% ¡check_prop!
check = any(strcmp(value.get('SUB_CLASS'), SubjectCON_FUN_MP.getSubclasses()));
%%%% ¡default!
Group('SUB_CLASS', 'SubjectCON_FUN_MP', 'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON_FUN_MP'))

%%% ¡prop!
GR_CON (result, item) is a group of subjects with connectivity data.
%%%% ¡settings!
'Group'
%%%% ¡default!
Group('SUB_CLASS', 'SubjectCON', 'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON'))
%%%% ¡check_value!
check = any(strcmp(value.get('SUB_CLASS'), SubjectCON.getSubclasses()));
%%%% ¡calculate!
wb = braph2waitbar(se.get('WAITBAR'), 0, 'Extracting the connectivity group ...');

gr_CON = Group( ...
    'SUB_CLASS', 'SubjectCON', ...
    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON'), ...
    'ID', 'SubjectCON' ...
    );
sub_dict_CON = gr_CON.get('SUB_DICT');

sub_dict = se.get('GR_CON_FUN_MP').get('SUB_DICT');
for i = 1:1:sub_dict.get('LENGTH')
    braph2waitbar(wb, .15 + .85 * i / sub_dict.get('LENGTH'), ['Separating subject ' num2str(i) ' of ' num2str(sub_dict.get('LENGTH')) ' ...'])

	sub = sub_dict.get('IT', i);
    
    sub_CON = SubjectCON( ...
        'ID', sub.get('ID'), ...
        'BA', sub.get('BA'), ...
        'VOI_DICT', sub.get('VOI_DICT').copy(), ...
        'CON', sub.get('CON') ...
        );
    sub_dict_CON.get('ADD', sub_CON);    
end

value = gr_CON;

braph2waitbar(wb, 'close')

%%% ¡prop!
GR_FUN (result, item) is a group of subjects with functional data.
%%%% ¡settings!
'Group'
%%%% ¡default!
Group('SUB_CLASS', 'SubjectFUN', 'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectFUN'))
%%%% ¡check_value!
check = any(strcmp(value.get('SUB_CLASS'), SubjectFUN.getSubclasses()));
%%%% ¡calculate!
wb = braph2waitbar(se.get('WAITBAR'), 0, 'Extracting the functional group ...');

gr_FUN = Group( ...
    'SUB_CLASS', 'SubjectFUN', ...
    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectFUN'), ...
    'ID', 'SubjectFUN' ...
    );
sub_dict_FUN = gr_FUN.get('SUB_DICT');

sub_dict = se.get('GR_CON_FUN_MP').get('SUB_DICT');
for i = 1:1:sub_dict.get('LENGTH')
    braph2waitbar(wb, .15 + .85 * i / sub_dict.get('LENGTH'), ['Separating subject ' num2str(i) ' of ' num2str(sub_dict.get('LENGTH')) ' ...'])

	sub = sub_dict.get('IT', i);
    
    sub_FUN = SubjectFUN( ...
        'ID', sub.get('ID'), ...
        'BA', sub.get('BA'), ...
        'VOI_DICT', sub.get('VOI_DICT').copy(), ...
        'FUN', sub.get('FUN') ...
        );
    sub_dict_FUN.get('ADD', sub_FUN);
end

value = gr_FUN;

braph2waitbar(wb, 'close')

%% ¡tests!

%%% ¡test!
%%%% ¡name!
Basic functioning
%%%% ¡probability!
.01
%%%% ¡code!
% im_ba = ImporterBrainAtlasTXT('FILE', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'atlas.txt']);
% ba = im_ba.get('BA');

br1 = BrainRegion( ...
    'ID', 'ISF', ...
    'LABEL', 'superiorfrontal', ...
    'NOTES', 'notes1', ...
    'X', -12.6, ...
    'Y', 22.9, ...
    'Z', 42.4 ...
    );
br2 = BrainRegion( ...
    'ID', 'lFP', ...
    'LABEL', 'frontalpole', ...
    'NOTES', 'notes2', ...
    'X', -8.6, ...
    'Y', 61.7, ...
    'Z', -8.7 ...
    );
br3 = BrainRegion( ...
    'ID', 'lRMF', ...
    'LABEL', 'rostralmiddlefrontal', ...
    'NOTES', 'notes3', ...
    'X', -31.3, ...
    'Y', 41.2, ...
    'Z', 16.5 ...
    );
br4 = BrainRegion( ...
    'ID', 'lCMF', ...
    'LABEL', 'caudalmiddlefrontal', ...
    'NOTES', 'notes4', ...
    'X', -34.6, ...
    'Y', 10.2, ...
    'Z', 42.8 ...
    );
br5 = BrainRegion( ...
    'ID', 'lPOB', ...
    'LABEL', 'parsorbitalis', ...
    'NOTES', 'notes5', ...
    'X', -41, ...
    'Y', 38.8, ...
    'Z', -11.1 ...
    );

ba = BrainAtlas( ...
    'ID', 'TestToSaveCoolID', ...
    'LABEL', 'Brain Atlas', ...
    'NOTES', 'Brain atlas notes', ...
    'BR_DICT', IndexedDictionary('IT_CLASS', 'BrainRegion', 'IT_LIST', {br1, br2, br3, br4, br5}) ...
    );

% copyfile( ...
%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.vois.txt'], ...
%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.CON.vois.txt'] ...
%     )
% im_gr_CON = ImporterGroupSubjectCON_TXT( ...
%     'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.CON'], ...
%     'BA', ba, ...
%     'WAITBAR', true ...
%     );
% gr_CON = im_gr_CON.get('GR');
% delete([fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.CON.vois.txt'])

sub_CON_1 = SubjectCON( ...
    'ID', 'SUB 1', ...
    'LABEL', 'Subejct CON 1', ...
    'NOTES', 'Notes on subject CON 1', ...
    'BA', ba, ...
    'CON', rand(ba.get('BR_DICT').get('LENGTH')) ...
    );
sub_CON_1.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 75))
sub_CON_1.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))

sub_CON_2 = SubjectCON( ...
    'ID', 'SUB 2', ...
    'LABEL', 'Subejct CON 2', ...
    'NOTES', 'Notes on subject CON 2', ...
    'BA', ba, ...
    'CON', rand(ba.get('BR_DICT').get('LENGTH')) ...
    );
sub_CON_2.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 70))
sub_CON_2.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Male', {'Female', 'Male'}))))

sub_CON_3 = SubjectCON( ...
    'ID', 'SUB 3', ...
    'LABEL', 'Subejct CON 3', ...
    'NOTES', 'Notes on subject CON 3', ...
    'BA', ba, ...
    'CON', rand(ba.get('BR_DICT').get('LENGTH')) ...
    );
sub_CON_3.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 50))
sub_CON_3.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))

gr_CON = Group( ...
    'ID', 'GR CON', ...
    'LABEL', 'Group label', ...
    'NOTES', 'Group notes', ...
    'SUB_CLASS', 'SubjectCON', ...
    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON', 'IT_LIST', {sub_CON_1, sub_CON_2, sub_CON_3}) ...
    );

% copyfile( ...
%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.vois.txt'], ...
%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.FUN.vois.txt'] ...
%     )
% im_gr_FUN = ImporterGroupSubjectFUN_TXT( ...
%     'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.FUN'], ...
%     'BA', ba, ...
%     'WAITBAR', true ...
%     );
% gr_FUN = im_gr_FUN.get('GR');
% delete([fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.FUN.vois.txt'])

sub_FUN_1 = SubjectFUN( ...
    'ID', 'SUB 1', ...
    'LABEL', 'Subejct FUN 1', ...
    'NOTES', 'Notes on subject FUN 1', ...
    'BA', ba, ...
    'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
    );
sub_FUN_1.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 75))
sub_FUN_1.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))

sub_FUN_2 = SubjectFUN( ...
    'ID', 'SUB 2', ...
    'LABEL', 'Subejct FUN 2', ...
    'NOTES', 'Notes on subject FUN 2', ...
    'BA', ba, ...
    'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
    );
sub_FUN_2.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 70))
sub_FUN_2.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Male', {'Female', 'Male'}))))

sub_FUN_3 = SubjectFUN( ...
    'ID', 'SUB 3', ...
    'LABEL', 'Subejct FUN 3', ...
    'NOTES', 'Notes on subject FUN 3', ...
    'BA', ba, ...
    'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
    );
sub_FUN_3.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 50))
sub_FUN_3.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))

gr_FUN = Group( ...
    'ID', 'GR FUN', ...
    'LABEL', 'Group label', ...
    'NOTES', 'Group notes', ...
    'SUB_CLASS', 'SubjectFUN', ...
    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectFUN', 'IT_LIST', {sub_FUN_1, sub_FUN_2, sub_FUN_3}) ...
    );

co = CombineGroups_CON_FUN_MP( ...
    'GR_CON', gr_CON, ...
    'GR_FUN', gr_FUN ...
    );
gr = co.get('GR_CON_FUN_MP');

se = SeparateGroups_CON_FUN_MP('GR_CON_FUN_MP', gr);

gr_CON_separated = se.get('GR_CON');
assert(gr_CON.get('SUB_DICT').get('LENGTH') == gr_CON_separated.get('SUB_DICT').get('LENGTH'), ...
	[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
    'Problems acombining and separatingthe groups.')
for i = 1:1:gr_CON.get('SUB_DICT').get('LENGTH')
    sub_CON = gr_CON.get('SUB_DICT').get('IT', i);
    sub_CON_separated = gr_CON_separated.get('SUB_DICT').get('IT', i);
    
    assert( ...
        isequal(sub_CON.get('ID'), sub_CON_separated.get('ID')) & ...
        isequal(sub_CON.get('BA').get('ID'), sub_CON_separated.get('BA').get('ID')) & ...
        isequal(sub_CON.get('VOI_DICT').get('IT', 'Age').get('V'), sub_CON_separated.get('VOI_DICT').get('IT', 'Age').get('V')) & ... 
        isequal(sub_CON.get('VOI_DICT').get('IT', 'Sex').get('V'), sub_CON_separated.get('VOI_DICT').get('IT', 'Sex').get('V')) & ...
        isequal(sub_CON.get('CON'), sub_CON_separated.get('CON')), ...
        [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
        'Problems acombining and separatingthe groups.')    
end

gr_FUN_separated = se.get('GR_FUN');
assert(gr_FUN.get('SUB_DICT').get('LENGTH') == gr_FUN_separated.get('SUB_DICT').get('LENGTH'), ...
	[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
    'Problems acombining and separatingthe groups.')
for i = 1:1:gr_FUN.get('SUB_DICT').get('LENGTH')
    sub_FUN = gr_FUN.get('SUB_DICT').get('IT', i);
    sub_FUN_separated = gr_FUN_separated.get('SUB_DICT').get('IT', i);
    
    assert( ...
        isequal(sub_FUN.get('ID'), sub_FUN_separated.get('ID')) & ...
        isequal(sub_FUN.get('BA').get('ID'), sub_FUN_separated.get('BA').get('ID')) & ...
        isequal(sub_FUN.get('VOI_DICT').get('IT', 'Age').get('V'), sub_FUN_separated.get('VOI_DICT').get('IT', 'Age').get('V')) & ... 
        isequal(sub_FUN.get('VOI_DICT').get('IT', 'Sex').get('V'), sub_FUN_separated.get('VOI_DICT').get('IT', 'Sex').get('V')) & ...
        isequal(sub_FUN.get('FUN'), sub_FUN_separated.get('FUN')), ...
        [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
        'Problems acombining and separatingthe groups.')    
end
