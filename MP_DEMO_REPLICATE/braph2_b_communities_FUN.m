%%%%%%%%%%%%%%%% CALCULATION OF COMMUNITIES - FUNCTIONAL SL %%%%%%%%%%%%%%%%

clear variables %#ok<*NASGU>

%% Load BrainAtlas
%dir_root = '/Users/anna.canal.garcia/Documents/PhD/BRAPH 2.0/HCP_100U';
dir_root = '/Users/iok-ui/Documents/GitHub/BRAPH-2/MP_DEMO_REPLICATE/HCP_100U_braph2format';
im_ba = ImporterBrainAtlasXLS('FILE', [dir_root filesep 'bna_atlas.xlsx']);
ba = im_ba.get('BA');

%% Load Groups of SubjectFUN
im_gr1 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [dir_root filesep 'fMRI/Women'], ...
    'BA', ba ...
    );

gr1_women_FUN = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [dir_root filesep 'fMRI/Men'], ...
    'BA', ba ...
    );

gr2_men_FUN = im_gr2.get('GR');

%% Pipeline Functional Group Average Analysis WU 
% ITERATING COMMUNITIES
gamma = 1.1; %[1, 1.01, 1.02];
N = 246;
cs_combination_women_FUN = zeros(N, 1);
cs_combination_men_FUN = zeros(N, 1);

count = 1;
for i = gamma

        analysis_women = AnalyzeGroup_FUN_GA_WU( ...
            'GR', gr1_women_FUN);

        analysis_men = AnalyzeGroup_FUN_GA_WU( ...
            'GR', gr2_men_FUN);
        
        g1 = analysis_women.memorize('G');
        measurement_mcs1 = g1.get('MEASURE', 'CommunityStructure', 'GAMMA', gamma, 'RULE', 'louvain');
        S1 = cell2mat(measurement_mcs1.memorize('M'));
        
        g2 = analysis_men.memorize('G');
        measurement_mcs2 = g2.get('MEASURE', 'CommunityStructure', 'GAMMA', gamma, 'RULE', 'louvain');
        S2 = cell2mat(measurement_mcs2.memorize('M'));

        cs_combination_women_FUN(:, count) = S1;
        cs_combination_men_FUN(:, count) = S2;
        count = count + 1;
end

save('FUN_communities.mat')

% % % %% create a pipeline
% % % pipeline = Pipeline();
% % % pipeline.set('LABEL', 'Pipeline Functional Group Average WU');
% % % pipeline.set('NOTES', 'Pipeline Functional Group Average WU to calculate the functional group communities');
% % % pipeline.set('PS_DICT', Pipeline.getPropDefault('PS_DICT'))
% % % 
% % % % atlas
% % % ps1 = PipelineSection('ID', int2str(1), 'LABEL', 'Brain Atlas');
% % % pipeline.get('PS_DICT').get('ADD', ps1);
% % % ps1.set('PC_DICT', PipelineSection.getPropDefault('PC_DICT'));
% % % pc1 = PipelineCode( ...
% % %     'ID', int2str(1), ...
% % %     'MONIKER', 'ba', ...
% % %     'TEXT_BEFORE_EXEC', 'Load Brain Atlas', ...
% % %     'TEXT_AFTER_EXEC', 'Brain Atlas', ...
% % %     'EL', ba ...
% % %     );
% % % ps1.get('PC_DICT').get('ADD', pc1);
% % % 
% % % % groups
% % % ps2 = PipelineSection('ID', int2str(2), 'LABEL', 'Group');
% % % 
% % % pipeline.get('PS_DICT').get('ADD', ps2);
% % % ps2.set('PC_DICT', PipelineSection.getPropDefault('PC_DICT'));
% % % pc2 = PipelineCode( ...
% % %     'ID', int2str(1), ...
% % %     'MONIKER', 'gr1', ...
% % %     'TEXT_BEFORE_EXEC', 'Load Group 1', ...
% % %     'TEXT_AFTER_EXEC', 'Women Group', ...
% % %     'EL', gr1_women_FUN ...
% % %     );
% % % ps2.get('PC_DICT').get('ADD', pc2);
% % % 
% % % pc3 = PipelineCode( ...
% % %     'ID', int2str(2), ...
% % %     'MONIKER', 'gr2', ...
% % %     'TEXT_BEFORE_EXEC', 'Load Group 2', ...
% % %     'TEXT_AFTER_EXEC', 'Men Group', ...
% % %     'EL', gr2_men_FUN ...
% % %     );
% % % ps2.get('PC_DICT').get('ADD', pc3);
% % % 
% % % % analysis
% % % ps3 = PipelineSection('ID', int2str(3), 'LABEL', 'Analysis');
% % % 
% % % pipeline.get('PS_DICT').get('ADD', ps3);
% % % ps3.set('PC_DICT', PipelineSection.getPropDefault('PC_DICT'));
% % % pc4 = PipelineCode( ...
% % %     'ID', int2str(1), ...
% % %     'MONIKER', 'A1', ...
% % %     'TEXT_BEFORE_EXEC', 'Analyze Group 1', ...
% % %     'TEXT_AFTER_EXEC', 'Analysis Women', ...
% % %     'EL', analysis_women ...
% % %     );
% % % ps3.get('PC_DICT').get('ADD', pc4);
% % % 
% % % pc5 = PipelineCode( ...
% % %     'ID', int2str(2), ...
% % %     'MONIKER', 'A2', ...
% % %     'TEXT_BEFORE_EXEC', 'Analyze Group 2', ...
% % %     'TEXT_AFTER_EXEC', 'Analysis Men', ...
% % %     'EL', analysis_men ...
% % %     );
% % % ps3.get('PC_DICT').get('ADD', pc5);
% % % 
% % % %% Save the pipeline
% % % %BRAPH2.save(pipeline, 'pipeline_communities_FUN_GA_WU_beta.b2')
% % % Element.save(pipeline, 'pipeline_communities_FUN_GA_WU_beta.b2', [])
% % % 
% % % %% Open the GUI with this pipeline
% % % gui = GUIElement( ...
% % %     'PE', pipeline, ...
% % %     'WAITBAR', true, ...
% % %     'CLOSEREQ', true ...
% % %     );
% % % 
% % % gui.get('DRAW')
% % % gui.get('SHOW')
% % % 
% % % %% Load the pipeline
% % % [file, path, filterindex] = uigetfile(BRAPH2.EXT_PIPELINE, 'Select BRAPH2 file');
% % % if filterindex
% % %     pip_load = ImporterPipelineBRAPH2( ...
% % %         'FILE', fullfile(path, file), ...
% % %         'WAITBAR', true ...
% % %         ).get('PIP');
% % % end