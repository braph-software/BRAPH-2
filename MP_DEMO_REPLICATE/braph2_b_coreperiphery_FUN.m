%%%%%%%%%%%%%%%% CALCULATION OF CORE-PERIPHERY - FUNCTIONAL SL %%%%%%%%%%%%%%%%

clear variables %#ok<*NASGU>

%% Load BrainAtlas
%dir_root = '/Users/anna.canal.garcia/Documents/PhD/BRAPH 2.0/HCP_100U';
dir_root = '/Users/iok-ui/Documents/GitHub/BRAPH-2/MP_DEMO_REPLICATE/HCP_100U_braph2format';
im_ba = ImporterBrainAtlasXLS('FILE', [dir_root filesep 'bna_atlas.xlsx']);
ba = im_ba.get('BA');

%% Load Groups of SubjectFUN
im_gr1 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [dir_root filesep 'fMRI/Women'], ...
    'BA', ba ...
    );

gr1_women_FUN = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [dir_root filesep 'fMRI/Men'], ...
    'BA', ba ...
    );

gr2_men_FUN = im_gr2.get('GR');

%% Pipeline Functional BUD Analysis
% Core-Periphery calculation
densities = 5:0.5:9; % the results figure show results at density 9%

analysis_women = AnalyzeEnsemble_FUN_BUD( ...
    'GR', gr1_women_FUN, 'DENSITIES', densities);
analysis_men = AnalyzeEnsemble_FUN_BUD( ...
    'GR', gr2_men_FUN, 'DENSITIES', densities);

coreperiphery_FUN_women_ensemble_bud = analysis_women.get('MEASUREENSEMBLE', 'CorePeriphery').memorize('M');
coreperiphery_FUN_men_ensemble_bud = analysis_men.get('MEASUREENSEMBLE', 'CorePeriphery').memorize('M');

%% Pipeline Connectivity BUD Comparison 
c_FUN_BUD = CompareEnsemble( ...
    'P', 10000, ...
    'A1', analysis_women, ...
    'A2', analysis_men, ...
    'VERBOSE', false, ...
    'MEMORIZE', true ...
    );

% CORE-PERIPHERY
core_FUN_BUD_p1 = c_FUN_BUD.get('COMPARISON', 'CorePeriphery').memorize('P1');
core_FUN_BUD_p2 = c_FUN_BUD.get('COMPARISON', 'CorePeriphery').memorize('P2');
core_FUN_BUD_cil = c_FUN_BUD.get('COMPARISON', 'CorePeriphery').memorize('CIL');
core_FUN_BUD_ciu = c_FUN_BUD.get('COMPARISON', 'CorePeriphery').memorize('CIU');
core_FUN_BUD_diff = c_FUN_BUD.get('COMPARISON', 'CorePeriphery').memorize('DIFF');

save('FUN_coreperiphery.mat')

% % % %% create a pipeline
% % % pipeline = Pipeline();
% % % pipeline.set('LABEL', 'Pipeline Functional BUD');
% % % pipeline.set('NOTES', 'Pipeline Functional BUD with the comparison of Core-Periphery for BRAPH 2 publication');
% % % pipeline.set('PS_DICT', Pipeline.getPropDefault('PS_DICT'))
% % % 
% % % % atlas
% % % ps1 = PipelineSection('ID', int2str(1), 'LABEL', 'Brain Atlas');
% % % pipeline.get('PS_DICT').get('ADD', ps1);
% % % ps1.set('PC_DICT', PipelineSection.getPropDefault('PC_DICT'));
% % % pc1 = PipelineCode( ...
% % %     'ID', int2str(1), ...
% % %     'MONIKER', 'ba', ...
% % %     'TEXT_BEFORE_EXEC', 'Load Brain Atlas', ...
% % %     'TEXT_AFTER_EXEC', 'Brain Atlas', ...
% % %     'EL', ba ...
% % %     );
% % % ps1.get('PC_DICT').get('ADD', pc1);
% % % 
% % % % groups
% % % ps2 = PipelineSection('ID', int2str(2), 'LABEL', 'Group');
% % % 
% % % pipeline.get('PS_DICT').get('ADD', ps2);
% % % ps2.set('PC_DICT', PipelineSection.getPropDefault('PC_DICT'));
% % % pc2 = PipelineCode( ...
% % %     'ID', int2str(1), ...
% % %     'MONIKER', 'gr1', ...
% % %     'TEXT_BEFORE_EXEC', 'Load Group 1', ...
% % %     'TEXT_AFTER_EXEC', 'Women Group', ...
% % %     'EL', gr1_women_CON ...
% % %     );
% % % ps2.get('PC_DICT').get('ADD', pc2);
% % % 
% % % pc3 = PipelineCode( ...
% % %     'ID', int2str(2), ...
% % %     'MONIKER', 'gr2', ...
% % %     'TEXT_BEFORE_EXEC', 'Load Group 2', ...
% % %     'TEXT_AFTER_EXEC', 'Men Group', ...
% % %     'EL', gr2_men_CON ...
% % %     );
% % % ps2.get('PC_DICT').get('ADD', pc3);
% % % 
% % % % analysis
% % % ps3 = PipelineSection('ID', int2str(3), 'LABEL', 'Analysis');
% % % 
% % % pipeline.get('PS_DICT').get('ADD', ps3);
% % % ps3.set('PC_DICT', PipelineSection.getPropDefault('PC_DICT'));
% % % pc4 = PipelineCode( ...
% % %     'ID', int2str(1), ...
% % %     'MONIKER', 'A1', ...
% % %     'TEXT_BEFORE_EXEC', 'Analyze Group 1', ...
% % %     'TEXT_AFTER_EXEC', 'Analysis Women', ...
% % %     'EL', analysis_women ...
% % %     );
% % % ps3.get('PC_DICT').get('ADD', pc4);
% % % 
% % % pc5 = PipelineCode( ...
% % %     'ID', int2str(2), ...
% % %     'MONIKER', 'A2', ...
% % %     'TEXT_BEFORE_EXEC', 'Analyze Group 2', ...
% % %     'TEXT_AFTER_EXEC', 'Analysis Men', ...
% % %     'EL', analysis_men ...
% % %     );
% % % ps3.get('PC_DICT').get('ADD', pc5);
% % % 
% % % % comparison
% % % ps4 = PipelineSection('ID', int2str(4), 'LABEL', 'Comparison');
% % % 
% % % pipeline.get('PS_DICT').get('ADD', ps4);
% % % ps4.set('PC_DICT', PipelineSection.getPropDefault('PC_DICT'));
% % % pc6 = PipelineCode( ...
% % %     'ID', int2str(1), ...
% % %     'MONIKER', 'C', ...
% % %     'TEXT_BEFORE_EXEC', 'Compare Groups', ...
% % %     'TEXT_AFTER_EXEC', 'Groups comparison', ...
% % %     'EL', c_CON_BUD ...
% % %     );
% % % ps4.get('PC_DICT').get('ADD', pc6);
% % % 
% % % %% Save the pipeline
% % % Element.save(pipeline, 'pipeline_coreperiphery_FUN_BUD_beta.b2', [])

% %% Open the GUI with this pipeline
% gui = GUIElement( ...
%     'PE', pipeline, ...
%     'WAITBAR', true, ...
%     'CLOSEREQ', true ...
%     );
% 
% gui.get('DRAW')
% gui.get('SHOW')
% 
% %% Load the pipeline
% [file, path, filterindex] = uigetfile(BRAPH2.EXT_PIPELINE, 'Select BRAPH2 file');
% if filterindex
%     pip_load = ImporterPipelineBRAPH2( ...
%         'FILE', fullfile(path, file), ...
%         'WAITBAR', true ...
%         ).get('PIP');
% end