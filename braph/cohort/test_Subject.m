% test Subject
subject_class_list = Subject.getList();

%% Test 1: All subjects not abstract
br1 = BrainRegion('BR1', 'brain region 1', 1, 11, 111);
br2 = BrainRegion('BR2', 'brain region 2', 2, 22, 222);
br3 = BrainRegion('BR3', 'brain region 3', 3, 33, 333);
br4 = BrainRegion('BR4', 'brain region 4', 4, 44, 444);
br5 = BrainRegion('BR5', 'brain region 5', 5, 55, 555);
atlas = BrainAtlas('brain atlas', {br1, br2, br3, br4, br5});

for i = 1:1:length(subject_class_list)
    subject_class = subject_class_list{i};
    sub = eval(['Subject.getSubject(subject_class' repmat(', atlas', 1, Subject.getBrainAtlasNumber(subject_class)) ')']);
end

%% Test 2: Implementation static methods
for i = 1:1:length(subject_class_list)
    subject_class = subject_class_list{i};
    
    sub = eval(['Subject.getSubject(subject_class' repmat(', atlas', 1, Subject.getBrainAtlasNumber(subject_class)) ')']);
    
    assert(isequal(sub.getClass(), subject_class), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getClass() should return ''' subject_class ''''])
    
    assert(ischar(sub.getClass()), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getClass() should return a char array'])
    
    assert(ischar(sub.getName()), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getName() should return a char array'])
    
    assert(ischar(sub.getDescription()), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getDescription() should return a char array'])
    
    assert(isnumeric(sub.getBrainAtlasNumber()) ...
        && sub.getBrainAtlasNumber() > 0, ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getBrainAtlasNumber() should return positive integer'])
    
    assert(isa(sub.getDataList(), 'containers.Map'), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getDataList() should return a containers.Map'])
    
    assert(sub.getDataNumber() == length(sub.getDataList()), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getDataNumber() should return an integer equal to the number of data'])
    
    assert(iscell(sub.getDataCodes()) ...
        && length(sub.getDataCodes()) == sub.getDataNumber(), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getDataCodes() should return a cell array as long as the number of data'])
    
    assert(iscell(sub.getDataClasses()) ...
        && length(sub.getDataClasses()) == sub.getDataNumber(), ...
        ['BRAPH:' subject_class ':StaticFuncImplementation'], ...
        [subject_class '.getDataClasses() should return a cell array as long as the number of data'])
    
end