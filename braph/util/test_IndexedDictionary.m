% test IndexDictionary

keys = {'key1', 'key2', 'key3', 'key4'};

A = Graph.getGraph('GraphWU', rand(3));
B = Graph.getGraph('GraphWU', rand(3));
C = Graph.getGraph('GraphWU', rand(3));
D = Graph.getGraph('GraphWU', rand(3));
E = Graph.getGraph('GraphWU', rand(3));
F = Graph.getGraph('GraphWU', rand(3));
G = Graph.getGraph('GraphWU', rand(3));
H = Graph.getGraph('GraphWU', rand(3));
values = {A, B, C, D};

%% Test 1: Instantiation
idict = IndexedDictionary('GraphWU', keys, values);
assert(~isempty(idict), ...
    'BRAPH:IndexDictionary:Bug', ...
    'Not Instantiating.')

%% Test 2: Basic Functions
idict = IndexedDictionary('GraphWU', keys, values);
assert(ischar(idict.tostring()), ...
    'BRAPH:IndexDictionary:Bug', ...
    'tostring() Bug.')
assert(isequal(idict.length(), 4), ...
    'BRAPH:IndexDictionary:Bug', ...
    'length() Bug.')
assert(isequal(idict.getValueClass(), 'GraphWU'), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getValueClass() Bug.')

%% Test 3: Get Information Functions
idict = IndexedDictionary('GraphWU', keys, values);
assert(isequal(idict.containsIndex(2), 1), ...
    'BRAPH:IndexDictionary:Bug', ...
    'containsIndex() Bug.')
assert(isequal(idict.containsValue(D), 1), ...
    'BRAPH:IndexDictionary:Bug', ...
    'constainsValue() Bug.')
assert(isequal(idict.containsKey('key3'), 1), ...
    'BRAPH:IndexDictionary:Bug', ...
    'containsKey() Bug.')
assert(isequal(idict.contains(D), 1), ...
    'BRAPH:IndexDictionary:Bug', ...
    'contains() Bug.')
assert(isequal(idict.getIndexFromValue(D), 4), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getValueIndex() Bug.')
assert(isequal(idict.getIndexFromKey('key1'), 1), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getKeyIndex() Bug.')
assert(isequal(idict.getValue(4), D), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getValue() Bug.')
assert(isequal(idict.getKey(3), 'key3'), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getKey() Bug.')
assert(isequal(idict.getValueFromKey('key3'), C), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getValueFromKey() Bug.')
assert(isequal(idict.getKeyFromValue(B), 'key2'), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getKeyFromValue() Bug.')
assert(isequal(idict.getValues(), {A, B, C, D}), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getValues() Bug.')
assert(isequal(idict.getKeys(), {'key1', 'key2', 'key3', 'key4'}), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getKeys() Bug.')

%% Test 4: Add
idict = IndexedDictionary('GraphWU', keys, values);
idict.add('key5', F);
assert(isequal(idict.length(), 5), ...
    'BRAPH:IndexDictionary:Bug', ...
    'add() Bug.')
assert(isequal(idict.getValue(5),F), ...
    'BRAPH:IndexDictionary:Bug', ...
    'add() Bug.')

%% Test 5: Remove
idict = IndexedDictionary('GraphWU', keys, values);
idict.remove(4);
assert(isequal(idict.length(), 3), ...
    'BRAPH:IndexDictionary:Bug', ...
    'remove() Bug.')
assert(isequal(idict.getValue(idict.length()), C), ...
    'BRAPH:IndexDictionary:Bug', ...
    'remove() Bug.')

%% Test 6: Replace
idict = IndexedDictionary('GraphWU', keys, values);

idict.replace('key5', F, 4);
assert(isequal(idict.length(), 4), ...
    'BRAPH:IndexDictionary:Bug', ...
    'replace() Bug.')
assert(isequal(idict.getValue(idict.length()), F), ...
    'BRAPH:IndexDictionary:Bug', ...
    'replace() Bug.')

idict.replaceKey('key5', 'keyF');
assert(isequal(idict.getKeyFromIndex(4), 'keyF'), ...
    'BRAPH:IndexDictionary:Bug', ...
    'replace() Bug.')

idict.replaceValue(F, G)
assert(isequal(idict.getValueFromIndex(4), G), ...
    'BRAPH:IndexDictionary:Bug', ...
    'replace() Bug.')

%% Test 7: Invert
idict = IndexedDictionary('GraphWU', keys, values);
idict.invert(1, 2);
assert(isequal(idict.getKeyFromIndex(2), 'key1'), ...
    'BRAPH:IndexDictionary:Bug', ...
    'invert() Bug.')
assert(isequal(idict.getValue(2), A), ...
    'BRAPH:IndexDictionary:Bug', ...
    'invert() Bug.')

%% Test 8: MoveTo
idict = IndexedDictionary('GraphWU', keys, values);
idict.move_to(3, 1);
assert(isequal(idict.getKeyFromIndex(1), 'key3'), ...
    'BRAPH:IndexDictionary:Bug', ...
    'moveTo() Bug.')
assert(isequal(idict.getValue(1), C), ...
    'BRAPH:IndexDictionary:Bug', ...
    'moveTo() Bug.')

%% Test 9: RemoveAll
idict = IndexedDictionary('GraphWU', keys, values);
selected = idict.remove_all([3, 4]);
assert(isequal(idict.length(), 2), ...
    'BRAPH:IndexDictionary:Bug', ...
    'removeAll does not work')
assert(isequal(idict.getValue(idict.length()), B), ...
    'BRAPH:IndexDictionary:Bug', ...
    'removeAll does not work')

%% Test 10: Moveup
idict = IndexedDictionary('GraphWU', keys, values);
idict.move_up(2);
assert(isequal(idict.length(), 4), ...
    'BRAPH:IndexDictionary:Bug', ...
    'moveUp does not work')
assert(isequal(idict.getValueFromIndex(1), B), ...
    'BRAPH:IndexDictionary:Bug', ...
    'moveUp does not work')

%% Test 11: MoveDown
idict = IndexedDictionary('GraphWU', keys, values);
idict.move_down(1);
assert(isequal(idict.length(), 4), ...
    'BRAPH:IndexDictionary:Bug', ...
    'moveDown does not work')
assert(isequal(idict.getValueFromIndex(2), A), ...
    'BRAPH:IndexDictionary:Bug', ...
    'moveDown does not work')

%% Test 12: Move2Top
idict = IndexedDictionary('GraphWU', keys, values);
idict.add('key8', H)
idict.move_to_top(5);
assert(isequal(idict.length(), 5), ...
    'BRAPH:IndexDictionary:Bug', ...
    'move2Top does not work')
assert(isequal(idict.getValueFromIndex(1), H), ...
    'BRAPH:IndexDictionary:Bug', ...
    'move2Top does not work')

%% Test 13: Move2Bottom
idict = IndexedDictionary('GraphWU', keys, values);
idict.move_to_bottom(1);
assert(isequal(idict.length(), 4), ...
    'BRAPH:IndexDictionary:Bug', ...
    'move2Bottom does not work')
assert(isequal(idict.getValue(4), A), ...
    'BRAPH:IndexDictionary:Bug', ...
    'move2Top does not work')

%% Test 14: Multiple values are the same.
values = {A, B, C, D, D, B};
keys = {'key1', 'key2', 'key3', 'key4', 'key5', 'key6'};
idict = IndexedDictionary('GraphWU', keys, values);
assert(isequal(idict.length(), 6), ...
    'BRAPH:IndexDictionary:Bug', ...
    'length() Bug.')
assert(isequal(idict.getIndexFromValueAll(B), {2, 6}), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getIndexFromValueAll() Bug.')
assert(isequal(idict.getKeyFromValueAll(D), {'key4', 'key5'}), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getIndexFromValueAll() Bug.')
idict.replaceValueAll(D, E);
assert(isequal(idict.getIndexFromValueAll(E), {4, 5}), ...
    'BRAPH:IndexDictionary:Bug', ...
    'getIndexFromValueAll() Bug.')