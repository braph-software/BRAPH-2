% test Measure
graph_class_list = Graph.getList();

%% Test 1: Check all graphs are not abstract
for i = 1:1:length(graph_class_list)
    graph_class = graph_class_list{i};
	A = rand(randi(10));
    g = Graph.getGraph(graph_class, A);
end

%% Test 2: Check implementation of static functions
for i = 1:1:length(graph_class_list)
    graph_class = graph_class_list{i};
	A = rand(randi(10));
    g = Graph.getGraph(graph_class, A);

    assert(isequal(g.getClass(), graph_class), ...
    'BRAPH:Graph:StaticFuncImplementation', ...
    [graph_class '.getClass() should return ''' graph_class ''''])
    
    assert(ischar(g.getClass()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.getClass() should return a char array'])

    assert(ischar(g.getName()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.getName() should return a char array'])

    assert(ischar(g.getDescription()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.getDescription() should return a char array'])

    assert(islogical(g.is_weighted()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.is_weighted() should return a logical'])

    assert(islogical(g.is_binary()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.is_binary() should return a logical'])

    assert(islogical(g.is_directed()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.is_directed() should return a logical'])

    assert(islogical(g.is_undirected()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.is_undirected() should return a logical'])

    assert(islogical(g.is_selfconnected()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.is_selfconnected() should return a logical'])

    assert(islogical(g.is_nonnegative()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.is_nonnegative() should return a logical'])

    assert(iscell(g.getCompatibleMeasureList()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.getCompatibleMeasureList() should return a cell array'])

    assert(isnumeric(g.getCompatibleMeasureNumber()), ...
        'BRAPH:Graph:StaticFuncImplementation', ...
        [graph_class '.getCompatibleMeasureNumber() should return a number'])
end

%% Test 3: Either weighted or binary
for i = 1:1:length(graph_class_list)
    graph_class = graph_class_list{i};
    assert(Graph.is_weighted(graph_class) ~= Graph.is_binary(graph_class), ...
        'BRAPH:Graph:WeightedOrBinary', ...
        [graph_class '.is_weighted() == ' graph_class '.is_binary()'])
end

%% Test 4: Either directed or undirected
for i = 1:1:length(graph_class_list)
    graph_class = graph_class_list{i};
    assert(Graph.is_directed(graph_class) ~= Graph.is_undirected(graph_class), ...
        'BRAPH:Graph:DirectedOrUndirected', ...
        [graph_class '.is_directed() == ' graph_class '.is_undirected()'])
end