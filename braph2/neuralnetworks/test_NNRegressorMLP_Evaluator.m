%TEST_NNREGRESSORMLP_EVALUATOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	nne = NNRegressorMLP_Evaluator();
	 
	% get('ELCLASS')
	if isa(NNRegressorMLP_Evaluator, 'ConcreteElement')
		assert(strcmp(NNRegressorMLP_Evaluator().get('ELCLASS'), 'NNRegressorMLP_Evaluator'), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator().get(''ELCLASS'') should return ''NNRegressorMLP_Evaluator''.')
	end
	 
	% getBuild()
	assert(NNRegressorMLP_Evaluator.getBuild() == 1 && NNRegressorMLP_Evaluator.getBuild() > 0, ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.getBuild() should return the NNRegressorMLP_Evaluator build number.')
	assert(nne.getBuild() == 1 && nne.getBuild() > 0 , ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.getBuild() should return the NNRegressorMLP_Evaluator build number.')
	assert(Element.getBuild(nne) == 1 && Element.getBuild(nne) > 0, ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(nne) should return the NNRegressorMLP_Evaluator build number.')
	assert(Element.getBuild('NNRegressorMLP_Evaluator') == 1 && Element.getBuild('NNRegressorMLP_Evaluator') > 0, ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNRegressorMLP_Evaluator'') should return the NNRegressorMLP_Evaluator build number.')
	 
	% getClass()
	assert(strcmp(NNRegressorMLP_Evaluator.getClass(), 'NNRegressorMLP_Evaluator'), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.getClass() should return ''NNRegressorMLP_Evaluator''.')
	assert(strcmp(nne.getClass(), 'NNRegressorMLP_Evaluator'), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.getClass() should return ''NNRegressorMLP_Evaluator''.')
	assert(strcmp(Element.getClass(nne), 'NNRegressorMLP_Evaluator'), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nne) should return ''NNRegressorMLP_Evaluator''.')
	assert(strcmp(Element.getClass('NNRegressorMLP_Evaluator'), 'NNRegressorMLP_Evaluator'), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNRegressorMLP_Evaluator'') should return ''NNRegressorMLP_Evaluator''.')
	 
	% getSubclasses()
	assert(isequal(NNRegressorMLP_Evaluator.getSubclasses(), subclasses('NNRegressorMLP_Evaluator', [], [], true)), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.getSubclasses() should return the same result as subclasses(''NNRegressorMLP_Evaluator'', [], [], true).')
	assert(isequal(nne.getSubclasses(), subclasses('NNRegressorMLP_Evaluator', [], [], true)), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNRegressorMLP_Evaluator'', [], [], true).')
	assert(isequal(Element.getSubclasses(nne), subclasses('NNRegressorMLP_Evaluator', [], [], true)), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nne) should return the same result as subclasses(''NNRegressorMLP_Evaluator'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNRegressorMLP_Evaluator'), subclasses('NNRegressorMLP_Evaluator', [], [], true)), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNRegressorMLP_Evaluator'') should return the same result as subclasses(''NNRegressorMLP_Evaluator'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(NNRegressorMLP_Evaluator.getProps(), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(nne.getProps(), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(Element.getProps(nne), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nne) should return a row vector [1:1:N].')
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(Element.getProps('NNRegressorMLP_Evaluator'), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNRegressorMLP_Evaluator'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNRegressorMLP_Evaluator.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.getProps(category) does not work.')
	tmp = cellfun(@(category) nne.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nne, category), categories, 'UniformOutput', false);
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nne, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNRegressorMLP_Evaluator', category), categories, 'UniformOutput', false);
	assert(isempty(NNRegressorMLP_Evaluator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNRegressorMLP_Evaluator.getProps())), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNRegressorMLP_Evaluator'', category) does not work.')
	 
	% getPropNumber()
	assert(NNRegressorMLP_Evaluator.getPropNumber() == length(NNRegressorMLP_Evaluator.getProps()), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.getPropNumber() should return the number of properties.')
	assert(nne.getPropNumber() == length(NNRegressorMLP_Evaluator.getProps()), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nne) == length(NNRegressorMLP_Evaluator.getProps()), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nne) should return the number of properties.')
	assert(Element.getPropNumber('NNRegressorMLP_Evaluator') == length(NNRegressorMLP_Evaluator.getProps()), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNRegressorMLP_Evaluator'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNRegressorMLP_Evaluator.getPropNumber(category), categories)) == NNRegressorMLP_Evaluator.getPropNumber(), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nne.getPropNumber(category), categories)) == NNRegressorMLP_Evaluator.getPropNumber(), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nne, category), categories)) == NNRegressorMLP_Evaluator.getPropNumber(), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nne, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNRegressorMLP_Evaluator', category), categories)) == NNRegressorMLP_Evaluator.getPropNumber(), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNRegressorMLP_Evaluator'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNRegressorMLP_Evaluator.existsProp(NaN), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.existsProp(prop) does not work.')
	assert(~nne.existsProp(NaN), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.existsProp(prop) does not work.')
	assert(~Element.existsProp(nne, NaN), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nne, prop) does not work.')
	assert(~Element.existsProp('NNRegressorMLP_Evaluator', NaN), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNRegressorMLP_Evaluator'', prop) does not work.')
	 
	assert_with_error('NNRegressorMLP_Evaluator.existsProp(NaN)', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], nne)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], nne)
	assert_with_error('Element.existsProp(''NNRegressorMLP_Evaluator'', NaN)', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		assert(NNRegressorMLP_Evaluator.existsProp(prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.existsProp(prop) does not work.')
		assert(nne.existsProp(prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.existsProp(prop) does not work.')
		assert(Element.existsProp(nne, prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nne, prop) does not work.')
		assert(Element.existsProp('NNRegressorMLP_Evaluator', prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNRegressorMLP_Evaluator'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNRegressorMLP_Evaluator.existsTag(''), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.existsTag(tag) does not work.')
	assert(~nne.existsTag(''), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'nne.existsTag(tag) does not work.')
	assert(~Element.existsTag(nne, ''), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nne, tag) does not work.')
	assert(~Element.existsTag('NNRegressorMLP_Evaluator', ''), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNRegressorMLP_Evaluator'', tag) does not work.')
	 
	assert_with_error('NNRegressorMLP_Evaluator.existsTag('''')', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], nne)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], nne)
	assert_with_error('Element.existsTag(''NNRegressorMLP_Evaluator'', '''')', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
		assert(NNRegressorMLP_Evaluator.existsTag(tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.existsTag(tag) does not work.')
		assert(nne.existsTag(tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.existsTag(tag) does not work.')
		assert(Element.existsTag(nne, tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nne, tga) does not work.')
		assert(Element.existsTag('NNRegressorMLP_Evaluator', tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNRegressorMLP_Evaluator'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		assert(NNRegressorMLP_Evaluator.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropProp(prop) does not work.')
		assert(nne.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nne, prop) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nne, prop) does not work.')
		assert(Element.getPropProp('NNRegressorMLP_Evaluator', prop) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNRegressorMLP_Evaluator'', prop) does not work.')
	 
		tag = nne.getPropTag(prop);
		assert(NNRegressorMLP_Evaluator.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropProp(tag) does not work.')
		assert(nne.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nne, tag) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nne, tag) does not work.')
		assert(Element.getPropProp('NNRegressorMLP_Evaluator', prop) == prop, ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNRegressorMLP_Evaluator'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		assert(strcmp(NNRegressorMLP_Evaluator.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropTag(prop) does not work.')
		assert(strcmp(nne.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nne, prop), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nne, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNRegressorMLP_Evaluator', prop), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNRegressorMLP_Evaluator'', prop) does not work.')
	 
		assert(strcmp(NNRegressorMLP_Evaluator.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropTag(tag) does not work.')
		assert(strcmp(nne.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nne, tag), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nne, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNRegressorMLP_Evaluator', prop), tag), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNRegressorMLP_Evaluator'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		assert(Category.existsCategory(NNRegressorMLP_Evaluator.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nne.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nne, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nne, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nne, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNRegressorMLP_Evaluator'', prop) does not work.')
	 
		assert(Category.existsCategory(NNRegressorMLP_Evaluator.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nne.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nne, tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nne, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nne, tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNRegressorMLP_Evaluator'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		assert(Format.existsFormat(NNRegressorMLP_Evaluator.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nne.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nne, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nne, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nne, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNRegressorMLP_Evaluator'', prop) does not work.')
	 
		assert(Format.existsFormat(NNRegressorMLP_Evaluator.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nne.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nne, tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nne, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nne, tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNRegressorMLP_Evaluator'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		assert(ischar(NNRegressorMLP_Evaluator.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropDescription(prop) does not work.')
		assert(ischar(nne.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nne, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nne, prop) does not work.')
		assert(ischar(Element.getPropDescription(nne, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNRegressorMLP_Evaluator'', prop) does not work.')
	 
		assert(ischar(NNRegressorMLP_Evaluator.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.getPropDescription(tag) does not work.')
		assert(ischar(nne.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nne, tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nne, tag) does not work.')
		assert(ischar(Element.getPropDescription(nne, tag)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNRegressorMLP_Evaluator'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		settings = NNRegressorMLP_Evaluator.getPropSettings(prop);
		settings = nne.getPropSettings(prop);
		settings = Element.getPropSettings(nne, prop);
		settings = Element.getPropSettings('NNRegressorMLP_Evaluator', prop);
	 
		settings = NNRegressorMLP_Evaluator.getPropSettings(tag);
		settings = nne.getPropSettings(tag);
		settings = Element.getPropSettings(nne, tag);
		settings = Element.getPropSettings('NNRegressorMLP_Evaluator', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		default = NNRegressorMLP_Evaluator.getPropDefault(prop);
		default = nne.getPropDefault(prop);
		default = Element.getPropDefault(nne, prop);
		default = Element.getPropDefault('NNRegressorMLP_Evaluator', prop);
	 
		default = NNRegressorMLP_Evaluator.getPropDefault(tag);
		default = nne.getPropDefault(tag);
		default = Element.getPropDefault(nne, tag);
		default = Element.getPropDefault('NNRegressorMLP_Evaluator', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		conditioned_default = NNRegressorMLP_Evaluator.getPropDefaultConditioned(prop);
		conditioned_default = nne.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nne, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNRegressorMLP_Evaluator', prop);
	 
		conditioned_default = NNRegressorMLP_Evaluator.getPropDefaultConditioned(tag);
		conditioned_default = nne.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nne, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNRegressorMLP_Evaluator', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		tag = nne.getPropTag(prop);
	 
		assert(~NNRegressorMLP_Evaluator.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.checkProp(prop, value) does not work.')
		assert(~nne.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nne, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nne, prop, value) does not work.')
		assert(~Element.checkProp('NNRegressorMLP_Evaluator', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNRegressorMLP_Evaluator'', prop, value) does not work.')
	 
		assert_with_error('NNRegressorMLP_Evaluator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], prop, nne)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], prop, nne)
		assert_with_error('Element.checkProp(''NNRegressorMLP_Evaluator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNRegressorMLP_Evaluator.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.checkProp(tag, value) does not work.')
		assert(~nne.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nne, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nne, tag, value) does not work.')
		assert(~Element.checkProp('NNRegressorMLP_Evaluator', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNRegressorMLP_Evaluator'', tag, value) does not work.')
	 
		assert_with_error('NNRegressorMLP_Evaluator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], tag, nne)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], tag, nne)
		assert_with_error('Element.checkProp(''NNRegressorMLP_Evaluator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNRegressorMLP_Evaluator.checkProp(prop, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.checkProp(prop, <conditioned default value>) does not work.')
		assert(nne.checkProp(prop, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nne, prop, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nne, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNRegressorMLP_Evaluator', prop, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNRegressorMLP_Evaluator'', prop, <conditioned default value>) does not work.')
	 
		assert(NNRegressorMLP_Evaluator.checkProp(tag, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.checkProp(tag, <conditioned default value>) does not work.')
		assert(nne.checkProp(tag, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'nne.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nne, tag, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nne, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNRegressorMLP_Evaluator', tag, Element.getPropDefaultConditioned(NNRegressorMLP_Evaluator, prop)), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNRegressorMLP_Evaluator'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.TEMPLATE), ...
		NNRegressorMLP_Evaluator.ID, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.ID), ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NN), ...
		NNRegressorMLP_Evaluator.D, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.D), ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.PFSP) ...
		);
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
	 
		% excluded props
		if any(prop == [NNRegressorMLP_Evaluator.PFSP])
			continue
		end
	 
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					nne.getr(prop) == NNRegressorMLP_Evaluator.getNoValue(), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNRegressorMLP_Evaluator.getCategoryName(NNRegressorMLP_Evaluator.getPropCategory(prop)) ', NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNRegressorMLP_Evaluator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nne.getr(TAG) == NNRegressorMLP_Evaluator.getNoValue(), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNRegressorMLP_Evaluator.getCategoryName(NNRegressorMLP_Evaluator.getPropCategory(prop)) ', NNRegressorMLP_Evaluator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNRegressorMLP_Evaluator.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(nne.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nne.getPropSettings(prop))
					assert( ...
						nne.checkFormat(nne.getPropFormat(prop), nne.get(prop)), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nne.checkFormat(nne.getPropFormat(prop), nne.get(prop), nne.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					nne.getr(prop) == NNRegressorMLP_Evaluator.getNoValue(), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNRegressorMLP_Evaluator.getCategoryName(NNRegressorMLP_Evaluator.getPropCategory(prop)) ', NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNRegressorMLP_Evaluator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nne.getr(TAG) == NNRegressorMLP_Evaluator.getNoValue(), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNRegressorMLP_Evaluator.getCategoryName(NNRegressorMLP_Evaluator.getPropCategory(prop)) ', NNRegressorMLP_Evaluator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNRegressorMLP_Evaluator.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNRegressorMLP_Evaluator']);
				assert( ...
					~isa(nne.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nne.getPropSettings(prop))
					assert( ...
						nne.checkFormat(nne.getPropFormat(prop), nne.get(prop)), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nne.checkFormat(nne.getPropFormat(prop), nne.get(prop), nne.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(nne.getr(prop), NNRegressorMLP_Evaluator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNRegressorMLP_Evaluator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNRegressorMLP_Evaluator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(nne.getr(TAG), NNRegressorMLP_Evaluator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNRegressorMLP_Evaluator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNRegressorMLP_Evaluator.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.TEMPLATE), ...
		NNRegressorMLP_Evaluator.ID, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.ID), ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NN), ...
		NNRegressorMLP_Evaluator.D, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.D), ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.PFSP) ...
		);
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
	 
		% excluded props
		if any(prop == [NNRegressorMLP_Evaluator.PFSP])
			continue
		end
	 
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(nne.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nne.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nne.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nne.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nne.checkFormat(nne.getPropFormat(prop), nne.getr(prop),nne.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNRegressorMLP_Evaluator']);
				assert( ...
					~isa(nne.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nne.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNRegressorMLP_Evaluator']);
	% 			assert( ...
	% 				~isa(nne.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	% 				['NNRegressorMLP_Evaluator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(nne.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	% 				['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				nne.checkFormat(nne.getPropFormat(prop), nne.getr(prop),nne.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	% 				['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNRegressorMLP_Evaluator']);
				assert( ...
					~isa(nne.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(nne.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nne.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nne.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nne.checkFormat(nne.getPropFormat(prop), nne.getr(prop),nne.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if nne.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNRegressorMLP_Evaluator');
					delete(ancestor(nne.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNRegressorMLP_Evaluator.getProps(Category.RESULT))
		for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
	 
			% excluded props
			if any(prop == [NNRegressorMLP_Evaluator.PFSP])
				continue
			end
	 
			switch NNRegressorMLP_Evaluator.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						nne.isLocked(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~nne.isLocked(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne = NNRegressorMLP_Evaluator();
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		assert( ...
			~nne.isLocked(prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			['NNRegressorMLP_Evaluator.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nne.isLocked(TAG), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			['NNRegressorMLP_Evaluator.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nne.lock()
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nne.isLocked(prop), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nne.isLocked(prop), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne = NNRegressorMLP_Evaluator();
	 
	warning_backup = warning('off', 'BRAPH2:NNRegressorMLP_Evaluator');
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		nne.lock(prop)
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nne.isLocked(prop), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nne.isLocked(prop), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne = NNRegressorMLP_Evaluator();
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		assert( ...
			nne.isChecked(prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			['NNRegressorMLP_Evaluator.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nne.isChecked(TAG), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			['NNRegressorMLP_Evaluator.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nne.unchecked()
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		assert( ...
			~nne.isChecked(prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			['NNRegressorMLP_Evaluator.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nne.checked()
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		assert( ...
			nne.isChecked(prop), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			['NNRegressorMLP_Evaluator.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNRegressorMLP_Evaluator
	nne_0 = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.TEMPLATE), ...
		NNRegressorMLP_Evaluator.ID, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.ID), ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NN), ...
		NNRegressorMLP_Evaluator.D, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.D), ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.PFSP) ...
		);
	 
	% NNRegressorMLP_Evaluator with 1st callbacks
	nne_1 = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, nne_0.getCallback(4), ..., ...
		NNRegressorMLP_Evaluator.ID, nne_0.getCallback(5), ..., ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, nne_0.getCallback(9), ..., ...
		NNRegressorMLP_Evaluator.D, nne_0.getCallback(10), ..., ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, nne_0.getCallback(17) ... ...
		);
	 
	prop_number = NNRegressorMLP_Evaluator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nne_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nne_1.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nne_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNRegressorMLP_Evaluator with 2nd callbacks
	nne_2 = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, nne_1.getCallback(4), ..., ...
		NNRegressorMLP_Evaluator.ID, nne_1.getCallback(5), ..., ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, nne_1.getCallback(9), ..., ...
		NNRegressorMLP_Evaluator.D, nne_1.getCallback(10), ..., ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, nne_1.getCallback(17) ... ...
		);
	 
	prop_number = NNRegressorMLP_Evaluator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nne_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nne_2.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nne_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNRegressorMLP_Evaluator with 3rd callbacks
	nne_3 = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, nne_2.getCallback(4), ..., ...
		NNRegressorMLP_Evaluator.ID, nne_2.getCallback(5), ..., ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, nne_2.getCallback(9), ..., ...
		NNRegressorMLP_Evaluator.D, nne_2.getCallback(10), ..., ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, nne_2.getCallback(17) ... ...
		);
	 
	prop_number = NNRegressorMLP_Evaluator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nne_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nne_3.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nne_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	nne = NNRegressorMLP_Evaluator();
	 
	nne_copy = nne.copy();
	 
	assert(nne_copy ~= nne, ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(nne_copy, nne), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		value = nne.getr(prop);
		value_copy = nne_copy.getr(prop);
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					'NNRegressorMLP_Evaluator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
							'NNRegressorMLP_Evaluator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
							'NNRegressorMLP_Evaluator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					nne_copy.isLocked(prop) == nne.isLocked(prop), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					'NNRegressorMLP_Evaluator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nne_copy.isChecked(prop) == nne.isChecked(prop), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					'NNRegressorMLP_Evaluator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nne_copy.getPropSeed(prop) == nne.getPropSeed(prop), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					'NNRegressorMLP_Evaluator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	nne = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.TEMPLATE), ...
		NNRegressorMLP_Evaluator.ID, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.ID), ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NN), ...
		NNRegressorMLP_Evaluator.D, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.D), ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.PFSP) ...
		);
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		if NNRegressorMLP_Evaluator.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNRegressorMLP_Evaluator']);
			% nne.memorize(prop);
			% warning(warning_backup)
		elseif NNRegressorMLP_Evaluator.getPropCategory(prop) == Category.EVANESCENT && nne.getPropFormat(prop) == Format.HANDLE
			nne.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNRegressorMLP_Evaluator');
			delete(ancestor(nne.get(prop), 'figure'))
			warning(warning_backup)
		else
			nne.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	nne_copy = nne.copy();
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		value = nne.getr(prop);
		value_copy = nne_copy.getr(prop);
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					'NNRegressorMLP_Evaluator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
							'NNRegressorMLP_Evaluator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
							'NNRegressorMLP_Evaluator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						nne_copy.isLocked(prop) == nne.isLocked(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nne_copy.isChecked(prop) == nne.isChecked(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nne_copy.getPropSeed(prop) == nne.getPropSeed(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	nne_0 = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.TEMPLATE), ...
		NNRegressorMLP_Evaluator.ID, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.ID), ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NN), ...
		NNRegressorMLP_Evaluator.D, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.D), ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.PFSP) ...
		);
	 
	nne = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, nne_0.getCallback(4), ..., ...
		NNRegressorMLP_Evaluator.ID, nne_0.getCallback(5), ..., ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, nne_0.getCallback(9), ..., ...
		NNRegressorMLP_Evaluator.D, nne_0.getCallback(10), ..., ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, nne_0.getCallback(17) ... ...
		);
	 
	nne_copy = nne.copy();
	nne_0_copy = nne_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
		value = nne.getr(prop);
		value_copy = nne_copy.getr(prop);
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					'NNRegressorMLP_Evaluator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
							'NNRegressorMLP_Evaluator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
							'NNRegressorMLP_Evaluator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == nne_0.getCallback(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The callback should be obtained from NNRegressorMLP_Evaluator.getCallback().' ...
						)
					assert( ...
						value_copy == nne_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The callback should be obtained from NNRegressorMLP_Evaluator.getCallback().' ...
						)
				end
	 
					assert( ...
						nne_copy.isLocked(prop) == nne.isLocked(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nne_copy.isChecked(prop) == nne.isChecked(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nne_copy.getPropSeed(prop) == nne.getPropSeed(prop), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne_template = NNRegressorMLP_Evaluator();
	nne = NNRegressorMLP_Evaluator('TEMPLATE', nne_template);
	 
	for prop = 1:1:NNRegressorMLP_Evaluator.getPropNumber()
	 
		% excluded props
		if any(prop == [NNRegressorMLP_Evaluator.PFSP])
			continue
		end
	 
		TAG = upper(NNRegressorMLP_Evaluator.getPropTag(prop));
		switch NNRegressorMLP_Evaluator.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNRegressorMLP_Evaluator.TEMPLATE
					assert( ...
						isa(nne.getr(prop), 'NNRegressorMLP_Evaluator'), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator TEMPLATE does not work. NNRegressorMLP_Evaluator.getr(''TEMPLATE'') should be a NNRegressorMLP_Evaluator element.' ...
						)
					assert( ...
						isa(nne_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						'NNRegressorMLP_Evaluator TEMPLATE does not work. NNRegressorMLP_Evaluator_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(nne.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator TEMPLATE does not work. NNRegressorMLP_Evaluator.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						nne.getr(prop).get('EL') == nne_template && nne.getr(prop).get('PROP') == prop && strcmp(nne.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator TEMPLATE does not work. NNRegressorMLP_Evaluator.getr(' TAG ') should be a Callback to nne_template.' TAG '.'] ...
						)
					assert( ...
						isa(nne_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
						['NNRegressorMLP_Evaluator TEMPLATE does not work. NNRegressorMLP_Evaluator_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(nne.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator TEMPLATE does not work. NNRegressorMLP_Evaluator.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(nne_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
					['NNRegressorMLP_Evaluator TEMPLATE does not work. NNRegressorMLP_Evaluator_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.TEMPLATE), ...
		NNRegressorMLP_Evaluator.ID, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.ID), ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NN), ...
		NNRegressorMLP_Evaluator.D, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.D), ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.PFSP) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnregressormlp_evaluator_to_be_erased.b2'];
	 
	Element.save(nne, filename)
	 
	nne_loaded = Element.load(filename);
	 
	assert( ...
		isequal(nne.copy(), nne_loaded), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.save(nne) and/or NNRegressorMLP_Evaluator.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nne = NNRegressorMLP_Evaluator( ...
		NNRegressorMLP_Evaluator.ELCLASS, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NAME, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DESCRIPTION, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.TEMPLATE, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.TEMPLATE), ...
		NNRegressorMLP_Evaluator.ID, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.ID), ...
		NNRegressorMLP_Evaluator.LABEL, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.LABEL), ...
		NNRegressorMLP_Evaluator.NOTES, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NOTES), ...
		NNRegressorMLP_Evaluator.TOSTRING, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.NN, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.NN), ...
		NNRegressorMLP_Evaluator.D, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.D), ...
		NNRegressorMLP_Evaluator.GROUND_TRUTH, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.CORR, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.DET, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MAE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.MSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.RMSE, NNRegressorMLP_Evaluator.getNoValue(), ...
		NNRegressorMLP_Evaluator.PFSP, NNRegressorMLP_Evaluator.getPropDefault(NNRegressorMLP_Evaluator.PFSP) ...
		);
	 
	[json, struct, el_list] = encodeJSON(nne);
	[nne_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(nne_dec ~= nne, ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		'NNRegressorMLP_Evaluator.encodeJSON() or NNRegressorMLP_Evaluator.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNRegressorMLP_Evaluator.getPropFormat(prop), num2cell(NNRegressorMLP_Evaluator.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNRegressorMLP_Evaluator.getPropFormat(prop), num2cell(NNRegressorMLP_Evaluator.getProps())) == Format.NET)
		assert(isequal(nne_dec, nne), ...
			[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
			'NNRegressorMLP_Evaluator.encodeJSON() or NNRegressorMLP_Evaluator.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Evaluate a regressor with the example data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% ensure the example data is generated
	if ~isfile([fileparts(which('NNDataPoint_CON_REG')) filesep 'Example data NN REG CON XLS' filesep 'atlas.xlsx'])
	    create_data_NN_REG_CON_XLS() % create example files
	end
	
	% Load BrainAtlas
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [fileparts(which('NNDataPoint_CON_REG')) filesep 'Example data NN REG CON XLS' filesep 'atlas.xlsx'], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Load Groups of SubjectCON
	im_gr = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_REG')) filesep 'Example data NN REG CON XLS' filesep 'CON_Group_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr = im_gr.get('GR');
	
	% create a item list of NNDataPoint_CON_REG
	it_list = cellfun(@(x) NNDataPoint_CON_REG( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_IDS', x.get('VOI_DICT').get('KEYS')), ...
	    gr.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	% create a NNDataPoint_CON_REG DICT
	dp_list = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_CON_REG', ...
	        'IT_LIST', it_list ...
	        );
	
	% create a NNData containing the NNDataPoint_CON_REG DICT
	d = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_CON_REG', ...
	    'DP_DICT', dp_list ...
	    );
	
	nn = NNRegressorMLP('D', d, 'LAYERS', [20 20]);
	nn.get('TRAIN');
	nne = NNRegressorMLP_Evaluator('NN', nn, 'D', d);
	predictions = cell2mat(nn.get('PREDICT', d));
	
	% Check whether the ground truth are derived as expected
	ground_truth = nne.get('GROUND_TRUTH');
	targets = d.get('TARGETS');
	
	for i = 1:size(ground_truth, 1)
	    check(i) = isequal(cell2mat(targets{i}), ground_truth(i, :));
	end
	assert(all(check), ...
	    [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	    'NNRegressorMLP_Evaluator does not calculate the ground truth correctly.' ...
	    )
	
	% Check whether the correlation coefficients are calculated as expected
	calculated_value = nne.get('CORR');
	for i = 1:size(ground_truth, 2)
	    corr_matrix = corrcoef(predictions(:, i), ground_truth(:, i));
	    known_value(i) = corr_matrix(1, 2);
	end
	assert(isequal(calculated_value, known_value), ...
	    [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	    'NNRegressorMLP_Evaluator does not calculate the correlation coefficients correctly.' ...
	    )
	
	% Check whether the correlation of determination are calculated as expected
	calculated_value = nne.get('DET');
	for i = 1:size(ground_truth, 2)
	    corr_matrix = corrcoef(predictions(:, i), ground_truth(:, i));
	    known_value(i) = corr_matrix(1, 2)^2;
	end
	assert(isequal(calculated_value, known_value), ...
	    [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	    'NNRegressorMLP_Evaluator does not calculate the coefficient of determination correctly.' ...
	    )
	
	% Check whether the mean absolute errors are calculated as expected
	calculated_value = nne.get('MAE');
	for i = 1:size(ground_truth, 2)
	    known_value(i) = mean(abs(predictions(:, i) - ground_truth(:, i)));
	end
	assert(isequal(calculated_value, known_value), ...
	    [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	    'NNRegressorMLP_Evaluator does not calculate the mean absolute errors correctly.' ...
	    )
	
	% Check whether the mean squared errors are calculated as expected
	calculated_value = nne.get('MSE');
	for i = 1:size(ground_truth, 2)
	    known_value(i) = mean((predictions(:, i) - ground_truth(:, i)).^2);
	end
	assert(isequal(calculated_value, known_value), ...
	    [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	    'NNRegressorMLP_Evaluator does not calculate the mean squared errors correctly.' ...
	    )
	
	% Check whether the mean squared errors are calculated as expected
	calculated_value = nne.get('RMSE');
	for i = 1:size(ground_truth, 2)
	    known_value(i) = sqrt(mean((predictions(:, i) - ground_truth(:, i)).^2));
	end
	assert(isequal(calculated_value, known_value), ...
	    [BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
	    'NNRegressorMLP_Evaluator does not calculate the root mean squared errors correctly.' ...
	    )
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNRegressorMLP_Evaluator:' BRAPH2.FAIL_TEST], ...
		[' When testing NNRegressorMLP_Evaluator no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

