%TEST_NNFEATUREIMPORTANCEBRAINSURFACE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	nnfib = NNFeatureImportanceBrainSurface();
	 
	% get('ELCLASS')
	if isa(NNFeatureImportanceBrainSurface, 'ConcreteElement')
		assert(strcmp(NNFeatureImportanceBrainSurface().get('ELCLASS'), 'NNFeatureImportanceBrainSurface'), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface().get(''ELCLASS'') should return ''NNFeatureImportanceBrainSurface''.')
	end
	 
	% getBuild()
	assert(NNFeatureImportanceBrainSurface.getBuild() == 1 && NNFeatureImportanceBrainSurface.getBuild() > 0, ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.getBuild() should return the NNFeatureImportanceBrainSurface build number.')
	assert(nnfib.getBuild() == 1 && nnfib.getBuild() > 0 , ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getBuild() should return the NNFeatureImportanceBrainSurface build number.')
	assert(Element.getBuild(nnfib) == 1 && Element.getBuild(nnfib) > 0, ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(nnfib) should return the NNFeatureImportanceBrainSurface build number.')
	assert(Element.getBuild('NNFeatureImportanceBrainSurface') == 1 && Element.getBuild('NNFeatureImportanceBrainSurface') > 0, ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNFeatureImportanceBrainSurface'') should return the NNFeatureImportanceBrainSurface build number.')
	 
	% getClass()
	assert(strcmp(NNFeatureImportanceBrainSurface.getClass(), 'NNFeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.getClass() should return ''NNFeatureImportanceBrainSurface''.')
	assert(strcmp(nnfib.getClass(), 'NNFeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getClass() should return ''NNFeatureImportanceBrainSurface''.')
	assert(strcmp(Element.getClass(nnfib), 'NNFeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nnfib) should return ''NNFeatureImportanceBrainSurface''.')
	assert(strcmp(Element.getClass('NNFeatureImportanceBrainSurface'), 'NNFeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNFeatureImportanceBrainSurface'') should return ''NNFeatureImportanceBrainSurface''.')
	 
	% getSubclasses()
	assert(isequal(NNFeatureImportanceBrainSurface.getSubclasses(), subclasses('NNFeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.getSubclasses() should return the same result as subclasses(''NNFeatureImportanceBrainSurface'', [], [], true).')
	assert(isequal(nnfib.getSubclasses(), subclasses('NNFeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNFeatureImportanceBrainSurface'', [], [], true).')
	assert(isequal(Element.getSubclasses(nnfib), subclasses('NNFeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nnfib) should return the same result as subclasses(''NNFeatureImportanceBrainSurface'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNFeatureImportanceBrainSurface'), subclasses('NNFeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNFeatureImportanceBrainSurface'') should return the same result as subclasses(''NNFeatureImportanceBrainSurface'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(NNFeatureImportanceBrainSurface.getProps(), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(nnfib.getProps(), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(Element.getProps(nnfib), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfib) should return a row vector [1:1:N].')
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(Element.getProps('NNFeatureImportanceBrainSurface'), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNFeatureImportanceBrainSurface'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNFeatureImportanceBrainSurface.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.getProps(category) does not work.')
	tmp = cellfun(@(category) nnfib.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nnfib, category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfib, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNFeatureImportanceBrainSurface', category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNFeatureImportanceBrainSurface'', category) does not work.')
	 
	% getPropNumber()
	assert(NNFeatureImportanceBrainSurface.getPropNumber() == length(NNFeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.getPropNumber() should return the number of properties.')
	assert(nnfib.getPropNumber() == length(NNFeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nnfib) == length(NNFeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfib) should return the number of properties.')
	assert(Element.getPropNumber('NNFeatureImportanceBrainSurface') == length(NNFeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNFeatureImportanceBrainSurface'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNFeatureImportanceBrainSurface.getPropNumber(category), categories)) == NNFeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nnfib.getPropNumber(category), categories)) == NNFeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nnfib, category), categories)) == NNFeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfib, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNFeatureImportanceBrainSurface', category), categories)) == NNFeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNFeatureImportanceBrainSurface'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNFeatureImportanceBrainSurface.existsProp(NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.existsProp(prop) does not work.')
	assert(~nnfib.existsProp(NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.existsProp(prop) does not work.')
	assert(~Element.existsProp(nnfib, NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nnfib, prop) does not work.')
	assert(~Element.existsProp('NNFeatureImportanceBrainSurface', NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNFeatureImportanceBrainSurface'', prop) does not work.')
	 
	assert_with_error('NNFeatureImportanceBrainSurface.existsProp(NaN)', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsProp(''NNFeatureImportanceBrainSurface'', NaN)', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		assert(NNFeatureImportanceBrainSurface.existsProp(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.existsProp(prop) does not work.')
		assert(nnfib.existsProp(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.existsProp(prop) does not work.')
		assert(Element.existsProp(nnfib, prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nnfib, prop) does not work.')
		assert(Element.existsProp('NNFeatureImportanceBrainSurface', prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNFeatureImportanceBrainSurface'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNFeatureImportanceBrainSurface.existsTag(''), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.existsTag(tag) does not work.')
	assert(~nnfib.existsTag(''), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.existsTag(tag) does not work.')
	assert(~Element.existsTag(nnfib, ''), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nnfib, tag) does not work.')
	assert(~Element.existsTag('NNFeatureImportanceBrainSurface', ''), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNFeatureImportanceBrainSurface'', tag) does not work.')
	 
	assert_with_error('NNFeatureImportanceBrainSurface.existsTag('''')', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsTag(''NNFeatureImportanceBrainSurface'', '''')', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
		assert(NNFeatureImportanceBrainSurface.existsTag(tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.existsTag(tag) does not work.')
		assert(nnfib.existsTag(tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.existsTag(tag) does not work.')
		assert(Element.existsTag(nnfib, tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nnfib, tga) does not work.')
		assert(Element.existsTag('NNFeatureImportanceBrainSurface', tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNFeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		assert(NNFeatureImportanceBrainSurface.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropProp(prop) does not work.')
		assert(nnfib.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nnfib, prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfib, prop) does not work.')
		assert(Element.getPropProp('NNFeatureImportanceBrainSurface', prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNFeatureImportanceBrainSurface'', prop) does not work.')
	 
		tag = nnfib.getPropTag(prop);
		assert(NNFeatureImportanceBrainSurface.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropProp(tag) does not work.')
		assert(nnfib.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nnfib, tag) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfib, tag) does not work.')
		assert(Element.getPropProp('NNFeatureImportanceBrainSurface', prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNFeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(strcmp(NNFeatureImportanceBrainSurface.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropTag(prop) does not work.')
		assert(strcmp(nnfib.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nnfib, prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfib, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNFeatureImportanceBrainSurface', prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNFeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(strcmp(NNFeatureImportanceBrainSurface.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropTag(tag) does not work.')
		assert(strcmp(nnfib.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nnfib, tag), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfib, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNFeatureImportanceBrainSurface', prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNFeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(Category.existsCategory(NNFeatureImportanceBrainSurface.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nnfib.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfib, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNFeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(Category.existsCategory(NNFeatureImportanceBrainSurface.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nnfib.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfib, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNFeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(Format.existsFormat(NNFeatureImportanceBrainSurface.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nnfib.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfib, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNFeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(Format.existsFormat(NNFeatureImportanceBrainSurface.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nnfib.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfib, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNFeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(ischar(NNFeatureImportanceBrainSurface.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropDescription(prop) does not work.')
		assert(ischar(nnfib.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfib, prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNFeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(ischar(NNFeatureImportanceBrainSurface.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.getPropDescription(tag) does not work.')
		assert(ischar(nnfib.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfib, tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNFeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		settings = NNFeatureImportanceBrainSurface.getPropSettings(prop);
		settings = nnfib.getPropSettings(prop);
		settings = Element.getPropSettings(nnfib, prop);
		settings = Element.getPropSettings('NNFeatureImportanceBrainSurface', prop);
	 
		settings = NNFeatureImportanceBrainSurface.getPropSettings(tag);
		settings = nnfib.getPropSettings(tag);
		settings = Element.getPropSettings(nnfib, tag);
		settings = Element.getPropSettings('NNFeatureImportanceBrainSurface', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		default = NNFeatureImportanceBrainSurface.getPropDefault(prop);
		default = nnfib.getPropDefault(prop);
		default = Element.getPropDefault(nnfib, prop);
		default = Element.getPropDefault('NNFeatureImportanceBrainSurface', prop);
	 
		default = NNFeatureImportanceBrainSurface.getPropDefault(tag);
		default = nnfib.getPropDefault(tag);
		default = Element.getPropDefault(nnfib, tag);
		default = Element.getPropDefault('NNFeatureImportanceBrainSurface', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		conditioned_default = NNFeatureImportanceBrainSurface.getPropDefaultConditioned(prop);
		conditioned_default = nnfib.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nnfib, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNFeatureImportanceBrainSurface', prop);
	 
		conditioned_default = NNFeatureImportanceBrainSurface.getPropDefaultConditioned(tag);
		conditioned_default = nnfib.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nnfib, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNFeatureImportanceBrainSurface', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(~NNFeatureImportanceBrainSurface.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.checkProp(prop, value) does not work.')
		assert(~nnfib.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nnfib, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, prop, value) does not work.')
		assert(~Element.checkProp('NNFeatureImportanceBrainSurface', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceBrainSurface'', prop, value) does not work.')
	 
		assert_with_error('NNFeatureImportanceBrainSurface.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop, nnfib)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop, nnfib)
		assert_with_error('Element.checkProp(''NNFeatureImportanceBrainSurface'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNFeatureImportanceBrainSurface.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.checkProp(tag, value) does not work.')
		assert(~nnfib.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nnfib, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, tag, value) does not work.')
		assert(~Element.checkProp('NNFeatureImportanceBrainSurface', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceBrainSurface'', tag, value) does not work.')
	 
		assert_with_error('NNFeatureImportanceBrainSurface.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag, nnfib)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag, nnfib)
		assert_with_error('Element.checkProp(''NNFeatureImportanceBrainSurface'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNFeatureImportanceBrainSurface.checkProp(prop, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.checkProp(prop, <conditioned default value>) does not work.')
		assert(nnfib.checkProp(prop, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfib, prop, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNFeatureImportanceBrainSurface', prop, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceBrainSurface'', prop, <conditioned default value>) does not work.')
	 
		assert(NNFeatureImportanceBrainSurface.checkProp(tag, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.checkProp(tag, <conditioned default value>) does not work.')
		assert(nnfib.checkProp(tag, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfib, tag, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNFeatureImportanceBrainSurface', tag, Element.getPropDefaultConditioned(NNFeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceBrainSurface'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.TEMPLATE), ...
		NNFeatureImportanceBrainSurface.ID, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.ID), ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.BA), ...
		NNFeatureImportanceBrainSurface.D, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.D), ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE), ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					nnfib.getr(prop) == NNFeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceBrainSurface.getCategoryName(NNFeatureImportanceBrainSurface.getPropCategory(prop)) ', NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceBrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfib.getr(TAG) == NNFeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceBrainSurface.getCategoryName(NNFeatureImportanceBrainSurface.getPropCategory(prop)) ', NNFeatureImportanceBrainSurface.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceBrainSurface.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfib.getPropSettings(prop))
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop), nnfib.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					nnfib.getr(prop) == NNFeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceBrainSurface.getCategoryName(NNFeatureImportanceBrainSurface.getPropCategory(prop)) ', NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceBrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfib.getr(TAG) == NNFeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceBrainSurface.getCategoryName(NNFeatureImportanceBrainSurface.getPropCategory(prop)) ', NNFeatureImportanceBrainSurface.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceBrainSurface.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceBrainSurface']);
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfib.getPropSettings(prop))
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop), nnfib.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(nnfib.getr(prop), NNFeatureImportanceBrainSurface.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNFeatureImportanceBrainSurface.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNFeatureImportanceBrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(nnfib.getr(TAG), NNFeatureImportanceBrainSurface.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNFeatureImportanceBrainSurface.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNFeatureImportanceBrainSurface.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.TEMPLATE), ...
		NNFeatureImportanceBrainSurface.ID, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.ID), ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.BA), ...
		NNFeatureImportanceBrainSurface.D, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.D), ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE), ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfib.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.getr(prop),nnfib.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceBrainSurface']);
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceBrainSurface']);
	% 			assert( ...
	% 				~isa(nnfib.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['NNFeatureImportanceBrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(nnfib.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.getr(prop),nnfib.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceBrainSurface']);
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfib.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.getr(prop),nnfib.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if nnfib.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNFeatureImportanceBrainSurface');
					delete(ancestor(nnfib.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNFeatureImportanceBrainSurface.getProps(Category.RESULT))
		for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib = NNFeatureImportanceBrainSurface();
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		assert( ...
			~nnfib.isLocked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nnfib.isLocked(TAG), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceBrainSurface.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nnfib.lock()
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib = NNFeatureImportanceBrainSurface();
	 
	warning_backup = warning('off', 'BRAPH2:NNFeatureImportanceBrainSurface');
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		nnfib.lock(prop)
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib = NNFeatureImportanceBrainSurface();
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		assert( ...
			nnfib.isChecked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceBrainSurface.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nnfib.isChecked(TAG), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceBrainSurface.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nnfib.unchecked()
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		assert( ...
			~nnfib.isChecked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceBrainSurface.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nnfib.checked()
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		assert( ...
			nnfib.isChecked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceBrainSurface.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNFeatureImportanceBrainSurface
	nnfib_0 = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.TEMPLATE), ...
		NNFeatureImportanceBrainSurface.ID, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.ID), ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.BA), ...
		NNFeatureImportanceBrainSurface.D, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.D), ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE), ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	% NNFeatureImportanceBrainSurface with 1st callbacks
	nnfib_1 = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, nnfib_0.getCallback(4), ..., ...
		NNFeatureImportanceBrainSurface.ID, nnfib_0.getCallback(5), ..., ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, nnfib_0.getCallback(9), ..., ...
		NNFeatureImportanceBrainSurface.D, nnfib_0.getCallback(10), ..., ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, nnfib_0.getCallback(11), ..., ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	prop_number = NNFeatureImportanceBrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfib_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfib_1.get(prop), nnfib_0.get(prop)) && ~isa(nnfib_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfib_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNFeatureImportanceBrainSurface with 2nd callbacks
	nnfib_2 = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, nnfib_1.getCallback(4), ..., ...
		NNFeatureImportanceBrainSurface.ID, nnfib_1.getCallback(5), ..., ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, nnfib_1.getCallback(9), ..., ...
		NNFeatureImportanceBrainSurface.D, nnfib_1.getCallback(10), ..., ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, nnfib_1.getCallback(11), ..., ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	prop_number = NNFeatureImportanceBrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfib_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfib_2.get(prop), nnfib_0.get(prop)) && ~isa(nnfib_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfib_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNFeatureImportanceBrainSurface with 3rd callbacks
	nnfib_3 = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, nnfib_2.getCallback(4), ..., ...
		NNFeatureImportanceBrainSurface.ID, nnfib_2.getCallback(5), ..., ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, nnfib_2.getCallback(9), ..., ...
		NNFeatureImportanceBrainSurface.D, nnfib_2.getCallback(10), ..., ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, nnfib_2.getCallback(11), ..., ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	prop_number = NNFeatureImportanceBrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfib_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfib_3.get(prop), nnfib_0.get(prop)) && ~isa(nnfib_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfib_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	nnfib = NNFeatureImportanceBrainSurface();
	 
	nnfib_copy = nnfib.copy();
	 
	assert(nnfib_copy ~= nnfib, ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(nnfib_copy, nnfib), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		value = nnfib.getr(prop);
		value_copy = nnfib_copy.getr(prop);
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceBrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					nnfib_copy.isLocked(prop) == nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceBrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfib_copy.isChecked(prop) == nnfib.isChecked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceBrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfib_copy.getPropSeed(prop) == nnfib.getPropSeed(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceBrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	nnfib = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.TEMPLATE), ...
		NNFeatureImportanceBrainSurface.ID, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.ID), ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.BA), ...
		NNFeatureImportanceBrainSurface.D, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.D), ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE), ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		if NNFeatureImportanceBrainSurface.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceBrainSurface']);
			% nnfib.memorize(prop);
			% warning(warning_backup)
		elseif NNFeatureImportanceBrainSurface.getPropCategory(prop) == Category.EVANESCENT && nnfib.getPropFormat(prop) == Format.HANDLE
			nnfib.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNFeatureImportanceBrainSurface');
			delete(ancestor(nnfib.get(prop), 'figure'))
			warning(warning_backup)
		else
			nnfib.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	nnfib_copy = nnfib.copy();
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		value = nnfib.getr(prop);
		value_copy = nnfib_copy.getr(prop);
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceBrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						nnfib_copy.isLocked(prop) == nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.isChecked(prop) == nnfib.isChecked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.getPropSeed(prop) == nnfib.getPropSeed(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	nnfib_0 = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.TEMPLATE), ...
		NNFeatureImportanceBrainSurface.ID, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.ID), ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.BA), ...
		NNFeatureImportanceBrainSurface.D, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.D), ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE), ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	nnfib = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, nnfib_0.getCallback(4), ..., ...
		NNFeatureImportanceBrainSurface.ID, nnfib_0.getCallback(5), ..., ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, nnfib_0.getCallback(9), ..., ...
		NNFeatureImportanceBrainSurface.D, nnfib_0.getCallback(10), ..., ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, nnfib_0.getCallback(11), ..., ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	nnfib_copy = nnfib.copy();
	nnfib_0_copy = nnfib_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
		value = nnfib.getr(prop);
		value_copy = nnfib_copy.getr(prop);
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceBrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == nnfib_0.getCallback(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The callback should be obtained from NNFeatureImportanceBrainSurface.getCallback().' ...
						)
					assert( ...
						value_copy == nnfib_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The callback should be obtained from NNFeatureImportanceBrainSurface.getCallback().' ...
						)
				end
	 
					assert( ...
						nnfib_copy.isLocked(prop) == nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.isChecked(prop) == nnfib.isChecked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.getPropSeed(prop) == nnfib.getPropSeed(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib_template = NNFeatureImportanceBrainSurface();
	nnfib = NNFeatureImportanceBrainSurface('TEMPLATE', nnfib_template);
	 
	for prop = 1:1:NNFeatureImportanceBrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNFeatureImportanceBrainSurface.getPropTag(prop));
		switch NNFeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNFeatureImportanceBrainSurface.TEMPLATE
					assert( ...
						isa(nnfib.getr(prop), 'NNFeatureImportanceBrainSurface'), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface TEMPLATE does not work. NNFeatureImportanceBrainSurface.getr(''TEMPLATE'') should be a NNFeatureImportanceBrainSurface element.' ...
						)
					assert( ...
						isa(nnfib_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceBrainSurface TEMPLATE does not work. NNFeatureImportanceBrainSurface_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(nnfib.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface TEMPLATE does not work. NNFeatureImportanceBrainSurface.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						nnfib.getr(prop).get('EL') == nnfib_template && nnfib.getr(prop).get('PROP') == prop && strcmp(nnfib.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface TEMPLATE does not work. NNFeatureImportanceBrainSurface.getr(' TAG ') should be a Callback to nnfib_template.' TAG '.'] ...
						)
					assert( ...
						isa(nnfib_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceBrainSurface TEMPLATE does not work. NNFeatureImportanceBrainSurface_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface TEMPLATE does not work. NNFeatureImportanceBrainSurface.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(nnfib_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceBrainSurface TEMPLATE does not work. NNFeatureImportanceBrainSurface_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.TEMPLATE), ...
		NNFeatureImportanceBrainSurface.ID, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.ID), ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.BA), ...
		NNFeatureImportanceBrainSurface.D, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.D), ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE), ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnfeatureimportancebrainsurface_to_be_erased.b2'];
	 
	Element.save(nnfib, filename)
	 
	nnfib_loaded = Element.load(filename);
	 
	assert( ...
		isequal(nnfib.copy(), nnfib_loaded), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.save(nnfib) and/or NNFeatureImportanceBrainSurface.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfib = NNFeatureImportanceBrainSurface( ...
		NNFeatureImportanceBrainSurface.ELCLASS, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.NAME, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.DESCRIPTION, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.TEMPLATE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.TEMPLATE), ...
		NNFeatureImportanceBrainSurface.ID, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.ID), ...
		NNFeatureImportanceBrainSurface.LABEL, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.LABEL), ...
		NNFeatureImportanceBrainSurface.NOTES, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.NOTES), ...
		NNFeatureImportanceBrainSurface.TOSTRING, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.BA, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.BA), ...
		NNFeatureImportanceBrainSurface.D, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.D), ...
		NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getPropDefault(NNFeatureImportanceBrainSurface.FEATURE_IMPORTANCE), ...
		NNFeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNFeatureImportanceBrainSurface.getNoValue(), ...
		NNFeatureImportanceBrainSurface.MAP_TO_CELL, NNFeatureImportanceBrainSurface.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(nnfib);
	[nnfib_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(nnfib_dec ~= nnfib, ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceBrainSurface.encodeJSON() or NNFeatureImportanceBrainSurface.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNFeatureImportanceBrainSurface.getPropFormat(prop), num2cell(NNFeatureImportanceBrainSurface.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNFeatureImportanceBrainSurface.getPropFormat(prop), num2cell(NNFeatureImportanceBrainSurface.getProps())) == Format.NET)
		assert(isequal(nnfib_dec, nnfib), ...
			[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceBrainSurface.encodeJSON() or NNFeatureImportanceBrainSurface.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNFeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		[' When testing NNFeatureImportanceBrainSurface no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

