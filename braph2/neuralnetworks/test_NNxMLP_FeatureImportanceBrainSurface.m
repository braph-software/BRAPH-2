%TEST_NNXMLP_FEATUREIMPORTANCEBRAINSURFACE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	categories = num2cell(Category.getCategories());
	nnfib = NNxMLP_FeatureImportanceBrainSurface();
	 
	% get('ELCLASS')
	if isa(NNxMLP_FeatureImportanceBrainSurface, 'ConcreteElement')
		assert(strcmp(NNxMLP_FeatureImportanceBrainSurface().get('ELCLASS'), 'NNxMLP_FeatureImportanceBrainSurface'), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface().get(''ELCLASS'') should return ''NNxMLP_FeatureImportanceBrainSurface''.')
	end
	 
	% getBuild()
	assert(NNxMLP_FeatureImportanceBrainSurface.getBuild() == 1 && NNxMLP_FeatureImportanceBrainSurface.getBuild() > 0, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.getBuild() should return the NNxMLP_FeatureImportanceBrainSurface build number.')
	assert(nnfib.getBuild() == 1 && nnfib.getBuild() > 0 , ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getBuild() should return the NNxMLP_FeatureImportanceBrainSurface build number.')
	assert(Element.getBuild(nnfib) == 1 && Element.getBuild(nnfib) > 0, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(nnfib) should return the NNxMLP_FeatureImportanceBrainSurface build number.')
	assert(Element.getBuild('NNxMLP_FeatureImportanceBrainSurface') == 1 && Element.getBuild('NNxMLP_FeatureImportanceBrainSurface') > 0, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNxMLP_FeatureImportanceBrainSurface'') should return the NNxMLP_FeatureImportanceBrainSurface build number.')
	 
	% getClass()
	assert(strcmp(NNxMLP_FeatureImportanceBrainSurface.getClass(), 'NNxMLP_FeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.getClass() should return ''NNxMLP_FeatureImportanceBrainSurface''.')
	assert(strcmp(nnfib.getClass(), 'NNxMLP_FeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getClass() should return ''NNxMLP_FeatureImportanceBrainSurface''.')
	assert(strcmp(Element.getClass(nnfib), 'NNxMLP_FeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nnfib) should return ''NNxMLP_FeatureImportanceBrainSurface''.')
	assert(strcmp(Element.getClass('NNxMLP_FeatureImportanceBrainSurface'), 'NNxMLP_FeatureImportanceBrainSurface'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNxMLP_FeatureImportanceBrainSurface'') should return ''NNxMLP_FeatureImportanceBrainSurface''.')
	 
	% getSubclasses()
	assert(isequal(NNxMLP_FeatureImportanceBrainSurface.getSubclasses(), subclasses('NNxMLP_FeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.getSubclasses() should return the same result as subclasses(''NNxMLP_FeatureImportanceBrainSurface'', [], [], true).')
	assert(isequal(nnfib.getSubclasses(), subclasses('NNxMLP_FeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNxMLP_FeatureImportanceBrainSurface'', [], [], true).')
	assert(isequal(Element.getSubclasses(nnfib), subclasses('NNxMLP_FeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nnfib) should return the same result as subclasses(''NNxMLP_FeatureImportanceBrainSurface'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNxMLP_FeatureImportanceBrainSurface'), subclasses('NNxMLP_FeatureImportanceBrainSurface', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNxMLP_FeatureImportanceBrainSurface'') should return the same result as subclasses(''NNxMLP_FeatureImportanceBrainSurface'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(NNxMLP_FeatureImportanceBrainSurface.getProps(), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(nnfib.getProps(), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(Element.getProps(nnfib), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfib) should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(Element.getProps('NNxMLP_FeatureImportanceBrainSurface'), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNxMLP_FeatureImportanceBrainSurface'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNxMLP_FeatureImportanceBrainSurface.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.getProps(category) does not work.')
	tmp = cellfun(@(category) nnfib.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nnfib, category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfib, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNxMLP_FeatureImportanceBrainSurface', category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceBrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceBrainSurface.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNxMLP_FeatureImportanceBrainSurface'', category) does not work.')
	 
	% getPropNumber()
	assert(NNxMLP_FeatureImportanceBrainSurface.getPropNumber() == length(NNxMLP_FeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.getPropNumber() should return the number of properties.')
	assert(nnfib.getPropNumber() == length(NNxMLP_FeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nnfib) == length(NNxMLP_FeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfib) should return the number of properties.')
	assert(Element.getPropNumber('NNxMLP_FeatureImportanceBrainSurface') == length(NNxMLP_FeatureImportanceBrainSurface.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNxMLP_FeatureImportanceBrainSurface'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNxMLP_FeatureImportanceBrainSurface.getPropNumber(category), categories)) == NNxMLP_FeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nnfib.getPropNumber(category), categories)) == NNxMLP_FeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nnfib, category), categories)) == NNxMLP_FeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfib, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNxMLP_FeatureImportanceBrainSurface', category), categories)) == NNxMLP_FeatureImportanceBrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNxMLP_FeatureImportanceBrainSurface'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNxMLP_FeatureImportanceBrainSurface.existsProp(NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.existsProp(prop) does not work.')
	assert(~nnfib.existsProp(NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.existsProp(prop) does not work.')
	assert(~Element.existsProp(nnfib, NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nnfib, prop) does not work.')
	assert(~Element.existsProp('NNxMLP_FeatureImportanceBrainSurface', NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNxMLP_FeatureImportanceBrainSurface'', prop) does not work.')
	 
	assert_with_error('NNxMLP_FeatureImportanceBrainSurface.existsProp(NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsProp(''NNxMLP_FeatureImportanceBrainSurface'', NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		assert(NNxMLP_FeatureImportanceBrainSurface.existsProp(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.existsProp(prop) does not work.')
		assert(nnfib.existsProp(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.existsProp(prop) does not work.')
		assert(Element.existsProp(nnfib, prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nnfib, prop) does not work.')
		assert(Element.existsProp('NNxMLP_FeatureImportanceBrainSurface', prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNxMLP_FeatureImportanceBrainSurface'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNxMLP_FeatureImportanceBrainSurface.existsTag(''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.existsTag(tag) does not work.')
	assert(~nnfib.existsTag(''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'nnfib.existsTag(tag) does not work.')
	assert(~Element.existsTag(nnfib, ''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nnfib, tag) does not work.')
	assert(~Element.existsTag('NNxMLP_FeatureImportanceBrainSurface', ''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNxMLP_FeatureImportanceBrainSurface'', tag) does not work.')
	 
	assert_with_error('NNxMLP_FeatureImportanceBrainSurface.existsTag('''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], nnfib)
	assert_with_error('Element.existsTag(''NNxMLP_FeatureImportanceBrainSurface'', '''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
		assert(NNxMLP_FeatureImportanceBrainSurface.existsTag(tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.existsTag(tag) does not work.')
		assert(nnfib.existsTag(tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.existsTag(tag) does not work.')
		assert(Element.existsTag(nnfib, tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nnfib, tga) does not work.')
		assert(Element.existsTag('NNxMLP_FeatureImportanceBrainSurface', tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNxMLP_FeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		assert(NNxMLP_FeatureImportanceBrainSurface.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropProp(prop) does not work.')
		assert(nnfib.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nnfib, prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfib, prop) does not work.')
		assert(Element.getPropProp('NNxMLP_FeatureImportanceBrainSurface', prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNxMLP_FeatureImportanceBrainSurface'', prop) does not work.')
	 
		tag = nnfib.getPropTag(prop);
		assert(NNxMLP_FeatureImportanceBrainSurface.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropProp(tag) does not work.')
		assert(nnfib.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nnfib, tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfib, tag) does not work.')
		assert(Element.getPropProp('NNxMLP_FeatureImportanceBrainSurface', prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNxMLP_FeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(strcmp(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop) does not work.')
		assert(strcmp(nnfib.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nnfib, prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfib, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNxMLP_FeatureImportanceBrainSurface', prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNxMLP_FeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(strcmp(NNxMLP_FeatureImportanceBrainSurface.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropTag(tag) does not work.')
		assert(strcmp(nnfib.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nnfib, tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfib, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNxMLP_FeatureImportanceBrainSurface', prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNxMLP_FeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(Category.existsCategory(NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nnfib.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfib, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNxMLP_FeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(Category.existsCategory(NNxMLP_FeatureImportanceBrainSurface.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nnfib.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfib, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfib, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNxMLP_FeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(Format.existsFormat(NNxMLP_FeatureImportanceBrainSurface.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nnfib.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfib, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNxMLP_FeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(Format.existsFormat(NNxMLP_FeatureImportanceBrainSurface.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nnfib.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfib, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfib, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNxMLP_FeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(ischar(NNxMLP_FeatureImportanceBrainSurface.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropDescription(prop) does not work.')
		assert(ischar(nnfib.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfib, prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNxMLP_FeatureImportanceBrainSurface'', prop) does not work.')
	 
		assert(ischar(NNxMLP_FeatureImportanceBrainSurface.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.getPropDescription(tag) does not work.')
		assert(ischar(nnfib.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfib, tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfib, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNxMLP_FeatureImportanceBrainSurface'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		settings = NNxMLP_FeatureImportanceBrainSurface.getPropSettings(prop);
		settings = nnfib.getPropSettings(prop);
		settings = Element.getPropSettings(nnfib, prop);
		settings = Element.getPropSettings('NNxMLP_FeatureImportanceBrainSurface', prop);
	 
		settings = NNxMLP_FeatureImportanceBrainSurface.getPropSettings(tag);
		settings = nnfib.getPropSettings(tag);
		settings = Element.getPropSettings(nnfib, tag);
		settings = Element.getPropSettings('NNxMLP_FeatureImportanceBrainSurface', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		default = NNxMLP_FeatureImportanceBrainSurface.getPropDefault(prop);
		default = nnfib.getPropDefault(prop);
		default = Element.getPropDefault(nnfib, prop);
		default = Element.getPropDefault('NNxMLP_FeatureImportanceBrainSurface', prop);
	 
		default = NNxMLP_FeatureImportanceBrainSurface.getPropDefault(tag);
		default = nnfib.getPropDefault(tag);
		default = Element.getPropDefault(nnfib, tag);
		default = Element.getPropDefault('NNxMLP_FeatureImportanceBrainSurface', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		conditioned_default = NNxMLP_FeatureImportanceBrainSurface.getPropDefaultConditioned(prop);
		conditioned_default = nnfib.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nnfib, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNxMLP_FeatureImportanceBrainSurface', prop);
	 
		conditioned_default = NNxMLP_FeatureImportanceBrainSurface.getPropDefaultConditioned(tag);
		conditioned_default = nnfib.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nnfib, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNxMLP_FeatureImportanceBrainSurface', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		tag = nnfib.getPropTag(prop);
	 
		assert(~NNxMLP_FeatureImportanceBrainSurface.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.checkProp(prop, value) does not work.')
		assert(~nnfib.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nnfib, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, prop, value) does not work.')
		assert(~Element.checkProp('NNxMLP_FeatureImportanceBrainSurface', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceBrainSurface'', prop, value) does not work.')
	 
		assert_with_error('NNxMLP_FeatureImportanceBrainSurface.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop, nnfib)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop, nnfib)
		assert_with_error('Element.checkProp(''NNxMLP_FeatureImportanceBrainSurface'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNxMLP_FeatureImportanceBrainSurface.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.checkProp(tag, value) does not work.')
		assert(~nnfib.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nnfib, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, tag, value) does not work.')
		assert(~Element.checkProp('NNxMLP_FeatureImportanceBrainSurface', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceBrainSurface'', tag, value) does not work.')
	 
		assert_with_error('NNxMLP_FeatureImportanceBrainSurface.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag, nnfib)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag, nnfib)
		assert_with_error('Element.checkProp(''NNxMLP_FeatureImportanceBrainSurface'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNxMLP_FeatureImportanceBrainSurface.checkProp(prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.checkProp(prop, <conditioned default value>) does not work.')
		assert(nnfib.checkProp(prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfib, prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNxMLP_FeatureImportanceBrainSurface', prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceBrainSurface'', prop, <conditioned default value>) does not work.')
	 
		assert(NNxMLP_FeatureImportanceBrainSurface.checkProp(tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.checkProp(tag, <conditioned default value>) does not work.')
		assert(nnfib.checkProp(tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'nnfib.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfib, tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfib, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNxMLP_FeatureImportanceBrainSurface', tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceBrainSurface, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceBrainSurface'', tag, <conditioned default value>) does not work.')
	 
	end
	 
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.TEMPLATE), ...
		NNxMLP_FeatureImportanceBrainSurface.ID, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.ID), ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.D), ...
		NNxMLP_FeatureImportanceBrainSurface.NN, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NN), ...
		NNxMLP_FeatureImportanceBrainSurface.P, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.P), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.VERBOSE), ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.WAITBAR), ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceBrainSurface.BA, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.BA) ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [NNxMLP_FeatureImportanceBrainSurface.BA])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					nnfib.getr(prop) == NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceBrainSurface.getCategoryName(NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)) ', NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfib.getr(TAG) == NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceBrainSurface.getCategoryName(NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)) ', NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfib.getPropSettings(prop))
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop), nnfib.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					nnfib.getr(prop) == NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceBrainSurface.getCategoryName(NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)) ', NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfib.getr(TAG) == NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceBrainSurface.getCategoryName(NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)) ', NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface']);
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfib.getPropSettings(prop))
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.get(prop), nnfib.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(nnfib.getr(prop), NNxMLP_FeatureImportanceBrainSurface.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNxMLP_FeatureImportanceBrainSurface.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(nnfib.getr(TAG), NNxMLP_FeatureImportanceBrainSurface.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNxMLP_FeatureImportanceBrainSurface.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ').'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.TEMPLATE), ...
		NNxMLP_FeatureImportanceBrainSurface.ID, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.ID), ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.D), ...
		NNxMLP_FeatureImportanceBrainSurface.NN, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NN), ...
		NNxMLP_FeatureImportanceBrainSurface.P, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.P), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.VERBOSE), ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.WAITBAR), ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceBrainSurface.BA, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.BA) ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [NNxMLP_FeatureImportanceBrainSurface.BA])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfib.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.getr(prop),nnfib.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface']);
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface']);
	% 			assert( ...
	% 				~isa(nnfib.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportanceBrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(nnfib.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.getr(prop),nnfib.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface']);
				assert( ...
					~isa(nnfib.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfib.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfib.checkFormat(nnfib.getPropFormat(prop), nnfib.getr(prop),nnfib.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if nnfib.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportanceBrainSurface');
					delete(ancestor(nnfib.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNxMLP_FeatureImportanceBrainSurface.getProps(Category.RESULT))
		for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
	 
			% excluded props
			if any(prop == [NNxMLP_FeatureImportanceBrainSurface.BA])
				continue
			end
	 
			switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib = NNxMLP_FeatureImportanceBrainSurface();
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		assert( ...
			~nnfib.isLocked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nnfib.isLocked(TAG), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceBrainSurface.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nnfib.lock()
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib = NNxMLP_FeatureImportanceBrainSurface();
	 
	warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportanceBrainSurface');
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		nnfib.lock(prop)
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib = NNxMLP_FeatureImportanceBrainSurface();
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		assert( ...
			nnfib.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceBrainSurface.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nnfib.isChecked(TAG), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceBrainSurface.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nnfib.unchecked()
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		assert( ...
			~nnfib.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceBrainSurface.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nnfib.checked()
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		assert( ...
			nnfib.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceBrainSurface.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	% basic NNxMLP_FeatureImportanceBrainSurface
	nnfib_0 = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.TEMPLATE), ...
		NNxMLP_FeatureImportanceBrainSurface.ID, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.ID), ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.D), ...
		NNxMLP_FeatureImportanceBrainSurface.NN, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NN), ...
		NNxMLP_FeatureImportanceBrainSurface.P, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.P), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.VERBOSE), ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.WAITBAR), ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceBrainSurface.BA, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.BA) ...
		);
	 
	% NNxMLP_FeatureImportanceBrainSurface with 1st callbacks
	nnfib_1 = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, nnfib_0.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.ID, nnfib_0.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, nnfib_0.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.NN, nnfib_0.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.P, nnfib_0.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, nnfib_0.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, nnfib_0.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, nnfib_0.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, nnfib_0.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, nnfib_0.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, nnfib_0.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BA, nnfib_0.getCallback(32) ... ...
		);
	 
	prop_number = NNxMLP_FeatureImportanceBrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfib_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfib_1.get(prop), nnfib_0.get(prop)) && ~isa(nnfib_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfib_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNxMLP_FeatureImportanceBrainSurface with 2nd callbacks
	nnfib_2 = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, nnfib_1.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.ID, nnfib_1.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, nnfib_1.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.NN, nnfib_1.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.P, nnfib_1.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, nnfib_1.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, nnfib_1.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, nnfib_1.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, nnfib_1.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, nnfib_1.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, nnfib_1.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BA, nnfib_1.getCallback(32) ... ...
		);
	 
	prop_number = NNxMLP_FeatureImportanceBrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfib_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfib_2.get(prop), nnfib_0.get(prop)) && ~isa(nnfib_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfib_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNxMLP_FeatureImportanceBrainSurface with 3rd callbacks
	nnfib_3 = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, nnfib_2.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.ID, nnfib_2.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, nnfib_2.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.NN, nnfib_2.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.P, nnfib_2.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, nnfib_2.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, nnfib_2.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, nnfib_2.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, nnfib_2.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, nnfib_2.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, nnfib_2.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BA, nnfib_2.getCallback(32) ... ...
		);
	 
	prop_number = NNxMLP_FeatureImportanceBrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfib_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfib_3.get(prop), nnfib_0.get(prop)) && ~isa(nnfib_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfib_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	% copy empty element
	nnfib = NNxMLP_FeatureImportanceBrainSurface();
	 
	nnfib_copy = nnfib.copy();
	 
	assert(nnfib_copy ~= nnfib, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(nnfib_copy, nnfib), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		value = nnfib.getr(prop);
		value_copy = nnfib_copy.getr(prop);
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					nnfib_copy.isLocked(prop) == nnfib.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfib_copy.isChecked(prop) == nnfib.isChecked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfib_copy.getPropSeed(prop) == nnfib.getPropSeed(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	nnfib = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.TEMPLATE), ...
		NNxMLP_FeatureImportanceBrainSurface.ID, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.ID), ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.D), ...
		NNxMLP_FeatureImportanceBrainSurface.NN, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NN), ...
		NNxMLP_FeatureImportanceBrainSurface.P, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.P), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.VERBOSE), ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.WAITBAR), ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceBrainSurface.BA, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.BA) ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		if NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface']);
			% nnfib.memorize(prop);
			% warning(warning_backup)
		elseif NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop) == Category.EVANESCENT && nnfib.getPropFormat(prop) == Format.HANDLE
			nnfib.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportanceBrainSurface');
			delete(ancestor(nnfib.get(prop), 'figure'))
			warning(warning_backup)
		else
			nnfib.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	nnfib_copy = nnfib.copy();
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		value = nnfib.getr(prop);
		value_copy = nnfib_copy.getr(prop);
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						nnfib_copy.isLocked(prop) == nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.isChecked(prop) == nnfib.isChecked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.getPropSeed(prop) == nnfib.getPropSeed(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	nnfib_0 = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.TEMPLATE), ...
		NNxMLP_FeatureImportanceBrainSurface.ID, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.ID), ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.D), ...
		NNxMLP_FeatureImportanceBrainSurface.NN, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NN), ...
		NNxMLP_FeatureImportanceBrainSurface.P, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.P), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.VERBOSE), ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.WAITBAR), ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceBrainSurface.BA, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.BA) ...
		);
	 
	nnfib = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, nnfib_0.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.ID, nnfib_0.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, nnfib_0.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.NN, nnfib_0.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.P, nnfib_0.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, nnfib_0.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, nnfib_0.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, nnfib_0.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, nnfib_0.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, nnfib_0.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, nnfib_0.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceBrainSurface.BA, nnfib_0.getCallback(32) ... ...
		);
	 
	nnfib_copy = nnfib.copy();
	nnfib_0_copy = nnfib_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
		value = nnfib.getr(prop);
		value_copy = nnfib_copy.getr(prop);
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == nnfib_0.getCallback(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The callback should be obtained from NNxMLP_FeatureImportanceBrainSurface.getCallback().' ...
						)
					assert( ...
						value_copy == nnfib_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The callback should be obtained from NNxMLP_FeatureImportanceBrainSurface.getCallback().' ...
						)
				end
	 
					assert( ...
						nnfib_copy.isLocked(prop) == nnfib.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.isChecked(prop) == nnfib.isChecked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfib_copy.getPropSeed(prop) == nnfib.getPropSeed(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib_template = NNxMLP_FeatureImportanceBrainSurface();
	nnfib = NNxMLP_FeatureImportanceBrainSurface('TEMPLATE', nnfib_template);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceBrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [NNxMLP_FeatureImportanceBrainSurface.BA])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportanceBrainSurface.getPropTag(prop));
		switch NNxMLP_FeatureImportanceBrainSurface.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNxMLP_FeatureImportanceBrainSurface.TEMPLATE
					assert( ...
						isa(nnfib.getr(prop), 'NNxMLP_FeatureImportanceBrainSurface'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface TEMPLATE does not work. NNxMLP_FeatureImportanceBrainSurface.getr(''TEMPLATE'') should be a NNxMLP_FeatureImportanceBrainSurface element.' ...
						)
					assert( ...
						isa(nnfib_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceBrainSurface TEMPLATE does not work. NNxMLP_FeatureImportanceBrainSurface_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(nnfib.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface TEMPLATE does not work. NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						nnfib.getr(prop).get('EL') == nnfib_template && nnfib.getr(prop).get('PROP') == prop && strcmp(nnfib.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface TEMPLATE does not work. NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ') should be a Callback to nnfib_template.' TAG '.'] ...
						)
					assert( ...
						isa(nnfib_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceBrainSurface TEMPLATE does not work. NNxMLP_FeatureImportanceBrainSurface_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(nnfib.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface TEMPLATE does not work. NNxMLP_FeatureImportanceBrainSurface.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(nnfib_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceBrainSurface TEMPLATE does not work. NNxMLP_FeatureImportanceBrainSurface_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.TEMPLATE), ...
		NNxMLP_FeatureImportanceBrainSurface.ID, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.ID), ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.D), ...
		NNxMLP_FeatureImportanceBrainSurface.NN, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NN), ...
		NNxMLP_FeatureImportanceBrainSurface.P, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.P), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.VERBOSE), ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.WAITBAR), ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceBrainSurface.BA, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.BA) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnxmlp_featureimportancebrainsurface_to_be_erased.b2'];
	 
	Element.save(nnfib, filename)
	 
	nnfib_loaded = Element.load(filename);
	 
	assert( ...
		isequal(nnfib.copy(), nnfib_loaded), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.save(nnfib) and/or NNxMLP_FeatureImportanceBrainSurface.load() do not work.' ...
		)
	 
	delete(filename)
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	nnfib = NNxMLP_FeatureImportanceBrainSurface( ...
		NNxMLP_FeatureImportanceBrainSurface.ELCLASS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.NAME, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.DESCRIPTION, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.TEMPLATE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.TEMPLATE), ...
		NNxMLP_FeatureImportanceBrainSurface.ID, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.ID), ...
		NNxMLP_FeatureImportanceBrainSurface.LABEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.LABEL), ...
		NNxMLP_FeatureImportanceBrainSurface.NOTES, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NOTES), ...
		NNxMLP_FeatureImportanceBrainSurface.TOSTRING, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.D), ...
		NNxMLP_FeatureImportanceBrainSurface.NN, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.NN), ...
		NNxMLP_FeatureImportanceBrainSurface.P, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.P), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SEEDS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_INPUTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.D_SHUFFLED, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.BASELINE_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.STAT_SIG_MASK, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.MAP_TO_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.COUNT_ELEMENTS, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.FLATTEN_CELL, NNxMLP_FeatureImportanceBrainSurface.getNoValue(), ...
		NNxMLP_FeatureImportanceBrainSurface.VERBOSE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.VERBOSE), ...
		NNxMLP_FeatureImportanceBrainSurface.WAITBAR, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.WAITBAR), ...
		NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceBrainSurface.BA, NNxMLP_FeatureImportanceBrainSurface.getPropDefault(NNxMLP_FeatureImportanceBrainSurface.BA) ...
		);
	 
	[json, struct, el_list] = encodeJSON(nnfib);
	[nnfib_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(nnfib_dec ~= nnfib, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceBrainSurface.encodeJSON() or NNxMLP_FeatureImportanceBrainSurface.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNxMLP_FeatureImportanceBrainSurface.getPropFormat(prop), num2cell(NNxMLP_FeatureImportanceBrainSurface.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNxMLP_FeatureImportanceBrainSurface.getPropFormat(prop), num2cell(NNxMLP_FeatureImportanceBrainSurface.getProps())) == Format.NET)
		assert(isequal(nnfib_dec, nnfib), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceBrainSurface.encodeJSON() or NNxMLP_FeatureImportanceBrainSurface.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 12: Example Measures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	create_data_NN_CLA_CON_FUN_MP_XLS() % only creates files if the example folder doesn't already exist
	
	% Load BrainAtlas
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'atlas.xlsx'], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Load Groups of SubjectCON
	im_gr1 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1_CON = im_gr1.get('GR');
	
	im_gr2 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2_CON = im_gr2.get('GR');
	
	im_gr3 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group3_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr3_CON = im_gr3.get('GR');
	
	% Load Groups of SubjectFUN
	im_gr1 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1_FUN = im_gr1.get('GR');
	
	im_gr2 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2_FUN = im_gr2.get('GR');
	
	im_gr3 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group3_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr3_FUN = im_gr3.get('GR');
	
	% Combine Groups of SubjectCON with Groups of SubjectFUN
	co_gr1 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr1_CON, ...
	    'GR_FUN', gr1_FUN, ...
	    'WAITBAR', true ...
	    );
	gr1 = co_gr1.get('GR_CON_FUN_MP');
	
	co_gr2 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr2_CON, ...
	    'GR_FUN', gr2_FUN, ...
	    'WAITBAR', true ...
	    );
	gr2 = co_gr2.get('GR_CON_FUN_MP');
	
	co_gr3 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr3_CON, ...
	    'GR_FUN', gr3_FUN, ...
	    'WAITBAR', true ...
	    );
	gr3 = co_gr3.get('GR_CON_FUN_MP');
	
	% Analysis CON BUD
	densities = 5;
	
	a_BUD1 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
	    'GR', gr1, ...
	    'DENSITIES', densities ...
	    );
	
	a_BUD2 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
	    'TEMPLATE', a_BUD1, ...
	    'GR', gr2, ...
	    'DENSITIES', densities ...
	    );
	
	a_BUD3 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
	    'TEMPLATE', a_BUD1, ...
	    'GR', gr3, ...
	    'DENSITIES', densities ...
	    );
	
	a_BUD1.get('MEASUREENSEMBLE', 'OverlappingDeg').get('M');
	a_BUD1.get('MEASUREENSEMBLE', 'OverlappingDegAv').get('M');
	a_BUD1.get('MEASUREENSEMBLE', 'EdgeOverlap').get('M');
	a_BUD1.get('MEASUREENSEMBLE', 'Degree').get('M');
	
	a_BUD2.get('MEASUREENSEMBLE', 'OverlappingDeg').get('M');
	a_BUD2.get('MEASUREENSEMBLE', 'OverlappingDegAv').get('M');
	a_BUD2.get('MEASUREENSEMBLE', 'EdgeOverlap').get('M');
	a_BUD2.get('MEASUREENSEMBLE', 'Degree').get('M');
	
	a_BUD3.get('MEASUREENSEMBLE', 'OverlappingDeg').get('M');
	a_BUD3.get('MEASUREENSEMBLE', 'OverlappingDegAv').get('M');
	a_BUD3.get('MEASUREENSEMBLE', 'EdgeOverlap').get('M');
	a_BUD3.get('MEASUREENSEMBLE', 'Degree').get('M');
	
	% Create NNData composed of corresponding NNDataPoints
	[~, group_folder_name] = fileparts(im_gr1.get('DIRECTORY'));
	it_list1 = cellfun(@(x) NNDataPoint_Measure_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'M_LIST', a_BUD1.get('ME_DICT').get('KEYS'), ...
	    'TARGET_CLASS', {group_folder_name}), ...
	    a_BUD1.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	[~, group_folder_name] = fileparts(im_gr2.get('DIRECTORY'));
	it_list2 = cellfun(@(x) NNDataPoint_Measure_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'M_LIST', a_BUD2.get('ME_DICT').get('KEYS'), ...
	    'TARGET_CLASS', {group_folder_name}), ...
	    a_BUD2.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	[~, group_folder_name] = fileparts(im_gr3.get('DIRECTORY'));
	it_list3 = cellfun(@(x) NNDataPoint_Measure_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'M_LIST', a_BUD3.get('ME_DICT').get('KEYS'), ...
	    'TARGET_CLASS', {group_folder_name}), ...
	    a_BUD3.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	% create NNDataPoint_Measure_CLA DICT items
	dp_list1 = IndexedDictionary(...
	    'IT_CLASS', 'NNDataPoint_Measure_CLA', ...
	    'IT_LIST', it_list1 ...
	    );
	
	dp_list2 = IndexedDictionary(...
	    'IT_CLASS', 'NNDataPoint_Measure_CLA', ...
	    'IT_LIST', it_list2 ...
	    );
	
	dp_list3 = IndexedDictionary(...
	    'IT_CLASS', 'NNDataPoint_Measure_CLA', ...
	    'IT_LIST', it_list3 ...
	    );
	
	% create a NNDataset containing the NNDataPoint_Measure_CLA DICT
	d1 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_Measure_CLA', ...
	    'DP_DICT', dp_list1 ...
	    );
	
	d2 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_Measure_CLA', ...
	    'DP_DICT', dp_list2 ...
	    );
	
	d3 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_Measure_CLA', ...
	    'DP_DICT', dp_list3 ...
	    );
	
	% Split the NNData into training set and test set
	d_split1 = NNDatasetSplit('D', d1, 'SPLIT', {0.7, 0.3});
	d_split2 = NNDatasetSplit('D', d2, 'SPLIT', {0.7, 0.3});
	d_split3 = NNDatasetSplit('D', d3, 'SPLIT', {0.7, 0.3});
	
	d_training = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D');
	d_test = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 2), d_split2.get('D_LIST_IT', 2), d_split3.get('D_LIST_IT', 2)}).get('D');
	
	% Create a MLP classifier with training set
	nn = NNClassifierMLP('D', d_training, 'LAYERS', [20 20]);
	nn.get('TRAIN');
	
	% Evaluate the feature importance
	fi = NNxMLP_FeatureImportanceBrainSurface('BA', ba, 'D', d_test, 'NN', nn, 'P', 2, 'APPLY_BONFERRONI', false, 'APPLY_CONFIDENCE_INTERVALS', false);
	fi_score = fi.get('RESHAPED_FEATURE_IMPORTANCE');
	input_measure = it_list1{1}.get('INPUT');
	
	for i = 1:length(input_measure)
	    assert(isequal(size(cell2mat(fi_score{i})), size(cell2mat(input_measure{i}))), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportanceBrainSurface does not have the feature importance score array of the same feature size as the input measure.' ...
	        )
	end
	
	% Test GUI
	fi = NNxMLP_FeatureImportanceBrainSurface('BA', ba, 'D', d_test, 'NN', nn, 'P', 2, 'APPLY_BONFERRONI', false, 'APPLY_CONFIDENCE_INTERVALS', false);
	gui = GUIElement('PE', fi, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 13: Example Data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	create_data_NN_CLA_ST_MM_XLS() % only creates files if the example folder doesn't already exist
	
	% Load BrainAtlas
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [fileparts(which('NNDataPoint_ST_MM_CLA')) filesep 'Example data NN CLA ST_MM XLS' filesep 'atlas.xlsx'], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Load Groups of SubjectST_MP
	im_gr1 = ImporterGroupSubjectST_MP_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_ST_MM_CLA')) filesep 'Example data NN CLA ST_MM XLS' filesep 'ST_MM_Group_1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1 = im_gr1.get('GR');
	
	im_gr2 = ImporterGroupSubjectST_MP_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_ST_MM_CLA')) filesep 'Example data NN CLA ST_MM XLS' filesep 'ST_MM_Group_2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2 = im_gr2.get('GR');
	
	im_gr3 = ImporterGroupSubjectST_MP_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_ST_MM_CLA')) filesep 'Example data NN CLA ST_MM XLS' filesep 'ST_MM_Group_3_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr3 = im_gr3.get('GR');
	
	% Training-test split
	% create item lists of NNDataPoint_ST_MM_CLA
	it_list1 = cellfun(@(x) NNDataPoint_ST_MM_CLA( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_CLASS', {gr1.get('ID')}), ...
	    gr1.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	it_list2 = cellfun(@(x) NNDataPoint_ST_MM_CLA( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_CLASS', {gr2.get('ID')}), ...
	    gr2.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	it_list3 = cellfun(@(x) NNDataPoint_ST_MM_CLA( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_CLASS', {gr3.get('ID')}), ...
	    gr3.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	% create NNDataPoint_ST_MM_CLA DICT items
	dp_list1 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_ST_MM_CLA', ...
	        'IT_LIST', it_list1 ...
	        );
	
	dp_list2 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_ST_MM_CLA', ...
	        'IT_LIST', it_list2 ...
	        );
	
	dp_list3 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_ST_MM_CLA', ...
	        'IT_LIST', it_list3 ...
	        );
	
	% create a NNDataset containing the NNDataPoint_ST_MM_CLA DICT
	d1 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_ST_MM_CLA', ...
	    'DP_DICT', dp_list1 ...
	    );
	
	d2 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_ST_MM_CLA', ...
	    'DP_DICT', dp_list2 ...
	    );
	
	d3 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_ST_MM_CLA', ...
	    'DP_DICT', dp_list3 ...
	    );
	
	% Split the NNData into training set and test set
	d_split1 = NNDatasetSplit('D', d1, 'SPLIT', {0.7, 0.3});
	d_split2 = NNDatasetSplit('D', d2, 'SPLIT', {0.7, 0.3});
	d_split3 = NNDatasetSplit('D', d3, 'SPLIT', {0.7, 0.3});
	
	d_training = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D');
	d_test = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 2), d_split2.get('D_LIST_IT', 2), d_split3.get('D_LIST_IT', 2)}).get('D');
	
	% Create a MLP classifier with training set
	nn = NNClassifierMLP('D', d_training, 'LAYERS', [20 20]);
	nn.get('TRAIN');
	
	% Evaluate the feature importance
	fi = NNxMLP_FeatureImportanceBrainSurface('BA', ba, 'D', d_test, 'NN', nn, 'P', 2, 'APPLY_BONFERRONI', false, 'APPLY_CONFIDENCE_INTERVALS', false);
	fi_score = fi.get('RESHAPED_FEATURE_IMPORTANCE');
	input_measure = it_list1{1}.get('INPUT');
	
	for i = 1:length(input_measure)
	    assert(isequal(size(fi_score{i}), size(input_measure{i})), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportanceBrainSurface does not have the feature importance score array of the same feature size as the input measure.' ...
	        )
	end
	
	% Test GUI
	fi = NNxMLP_FeatureImportanceBrainSurface('BA', ba, 'D', d_test, 'NN', nn, 'P', 2, 'APPLY_BONFERRONI', false, 'APPLY_CONFIDENCE_INTERVALS', false);
	gui = GUIElement('PE', fi, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 14: Example Graph
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	create_data_NN_CLA_CON_FUN_MP_XLS() % only creates files if the example folder doesn't already exist
	
	% Load BrainAtlas
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'atlas.xlsx'], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Load Groups of SubjectCON
	im_gr1 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1_CON = im_gr1.get('GR');
	
	im_gr2 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2_CON = im_gr2.get('GR');
	
	im_gr3 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group3_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr3_CON = im_gr3.get('GR');
	
	% Load Groups of SubjectFUN
	im_gr1 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1_FUN = im_gr1.get('GR');
	
	im_gr2 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2_FUN = im_gr2.get('GR');
	
	im_gr3 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group3_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr3_FUN = im_gr3.get('GR');
	
	% Combine Groups of SubjectCON with Groups of SubjectFUN
	co_gr1 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr1_CON, ...
	    'GR_FUN', gr1_FUN, ...
	    'WAITBAR', true ...
	    );
	gr1 = co_gr1.get('GR_CON_FUN_MP');
	
	co_gr2 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr2_CON, ...
	    'GR_FUN', gr2_FUN, ...
	    'WAITBAR', true ...
	    );
	gr2 = co_gr2.get('GR_CON_FUN_MP');
	
	co_gr3 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr3_CON, ...
	    'GR_FUN', gr3_FUN, ...
	    'WAITBAR', true ...
	    );
	gr3 = co_gr3.get('GR_CON_FUN_MP');
	
	% Analysis CON BUD
	densities = 5;
	
	a_BUD1 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
	    'GR', gr1, ...
	    'DENSITIES', densities ...
	    );
	
	a_BUD2 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
	    'TEMPLATE', a_BUD1, ...
	    'GR', gr2, ...
	    'DENSITIES', densities ...
	    );
	
	a_BUD3 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
	    'TEMPLATE', a_BUD1, ...
	    'GR', gr3, ...
	    'DENSITIES', densities ...
	    );
	
	% Create NNData composed of corresponding NNDataPoints
	[~, group_folder_name] = fileparts(im_gr1.get('DIRECTORY'));
	it_list1 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'TARGET_CLASS', {gr1.get('ID')}), ...
	    a_BUD1.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	it_list2 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'TARGET_CLASS', {gr2.get('ID')}), ...
	    a_BUD2.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	it_list3 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'TARGET_CLASS', {gr3.get('ID')}), ...
	    a_BUD3.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	% create NNDataPoint_Graph_CLA DICT items
	it_class = 'NNDataPoint_Graph_CLA';
	dp_list1 = IndexedDictionary(...
	    'IT_CLASS', it_class, ...
	    'IT_LIST', it_list1 ...
	    );
	
	dp_list2 = IndexedDictionary(...
	    'IT_CLASS', it_class, ...
	    'IT_LIST', it_list2 ...
	    );
	
	dp_list3 = IndexedDictionary(...
	    'IT_CLASS', it_class, ...
	    'IT_LIST', it_list3 ...
	    );
	
	% create a NNDataset containing the NNDataPoint_Measure_CLA DICT
	d1 = NNDataset( ...
	    'DP_CLASS', it_class, ...
	    'DP_DICT', dp_list1 ...
	    );
	
	d2 = NNDataset( ...
	    'DP_CLASS', it_class, ...
	    'DP_DICT', dp_list2 ...
	    );
	
	d3 = NNDataset( ...
	    'DP_CLASS', it_class, ...
	    'DP_DICT', dp_list3 ...
	    );
	
	% Split the NNData into training set and test set
	d_split1 = NNDatasetSplit('D', d1, 'SPLIT', {0.7, 0.3});
	d_split2 = NNDatasetSplit('D', d2, 'SPLIT', {0.7, 0.3});
	d_split3 = NNDatasetSplit('D', d3, 'SPLIT', {0.7, 0.3});
	
	d_training = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D');
	d_test = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 2), d_split2.get('D_LIST_IT', 2), d_split3.get('D_LIST_IT', 2)}).get('D');
	
	% Create a MLP classifier with training set
	nn = NNClassifierMLP('D', d_training, 'LAYERS', [20 20]);
	nn.get('TRAIN');
	
	% Evaluate the feature importance
	fi = NNxMLP_FeatureImportanceBrainSurface('BA', ba, 'D', d_test, 'NN', nn, 'P', 2, 'APPLY_BONFERRONI', false, 'APPLY_CONFIDENCE_INTERVALS', false);
	fi_score = fi.get('RESHAPED_FEATURE_IMPORTANCE');
	input_graph = it_list1{1}.get('INPUT');
	
	for i = 1:length(input_graph)
	    assert(isequal(size(fi_score{i}), size(input_graph{i})), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportanceBrainSurface does not have the feature importance score array of the same feature size as the input measure.' ...
	        )
	end
	
	% Test GUI
	fi = NNxMLP_FeatureImportanceBrainSurface('BA', ba, 'D', d_test, 'NN', nn, 'P', 2, 'APPLY_BONFERRONI', false, 'APPLY_CONFIDENCE_INTERVALS', false);
	gui = GUIElement('PE', fi, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 15: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface:' BRAPH2.FAIL_TEST], ...
		[' When testing NNxMLP_FeatureImportanceBrainSurface no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

%% Test 16: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
	
	delete(findall(0, 'type', 'figure'))
	
	warning('on', [BRAPH2.STR ':NNxMLP_FeatureImportanceBrainSurface'])
end

