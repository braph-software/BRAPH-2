%TEST_NNFEATUREIMPORTANCEMEASURE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	fim = NNFeatureImportanceMeasure();
	 
	% get('ELCLASS')
	if isa(NNFeatureImportanceMeasure, 'ConcreteElement')
		assert(strcmp(NNFeatureImportanceMeasure().get('ELCLASS'), 'NNFeatureImportanceMeasure'), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure().get(''ELCLASS'') should return ''NNFeatureImportanceMeasure''.')
	end
	 
	% getBuild()
	assert(NNFeatureImportanceMeasure.getBuild() == 1 && NNFeatureImportanceMeasure.getBuild() > 0, ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.getBuild() should return the NNFeatureImportanceMeasure build number.')
	assert(fim.getBuild() == 1 && fim.getBuild() > 0 , ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.getBuild() should return the NNFeatureImportanceMeasure build number.')
	assert(Element.getBuild(fim) == 1 && Element.getBuild(fim) > 0, ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(fim) should return the NNFeatureImportanceMeasure build number.')
	assert(Element.getBuild('NNFeatureImportanceMeasure') == 1 && Element.getBuild('NNFeatureImportanceMeasure') > 0, ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNFeatureImportanceMeasure'') should return the NNFeatureImportanceMeasure build number.')
	 
	% getClass()
	assert(strcmp(NNFeatureImportanceMeasure.getClass(), 'NNFeatureImportanceMeasure'), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.getClass() should return ''NNFeatureImportanceMeasure''.')
	assert(strcmp(fim.getClass(), 'NNFeatureImportanceMeasure'), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.getClass() should return ''NNFeatureImportanceMeasure''.')
	assert(strcmp(Element.getClass(fim), 'NNFeatureImportanceMeasure'), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(fim) should return ''NNFeatureImportanceMeasure''.')
	assert(strcmp(Element.getClass('NNFeatureImportanceMeasure'), 'NNFeatureImportanceMeasure'), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNFeatureImportanceMeasure'') should return ''NNFeatureImportanceMeasure''.')
	 
	% getSubclasses()
	assert(isequal(NNFeatureImportanceMeasure.getSubclasses(), subclasses('NNFeatureImportanceMeasure', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.getSubclasses() should return the same result as subclasses(''NNFeatureImportanceMeasure'', [], [], true).')
	assert(isequal(fim.getSubclasses(), subclasses('NNFeatureImportanceMeasure', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNFeatureImportanceMeasure'', [], [], true).')
	assert(isequal(Element.getSubclasses(fim), subclasses('NNFeatureImportanceMeasure', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(fim) should return the same result as subclasses(''NNFeatureImportanceMeasure'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNFeatureImportanceMeasure'), subclasses('NNFeatureImportanceMeasure', [], [], true)), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNFeatureImportanceMeasure'') should return the same result as subclasses(''NNFeatureImportanceMeasure'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(NNFeatureImportanceMeasure.getProps(), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(fim.getProps(), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(Element.getProps(fim), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(fim) should return a row vector [1:1:N].')
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(Element.getProps('NNFeatureImportanceMeasure'), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNFeatureImportanceMeasure'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNFeatureImportanceMeasure.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.getProps(category) does not work.')
	tmp = cellfun(@(category) fim.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(fim, category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(fim, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNFeatureImportanceMeasure', category), categories, 'UniformOutput', false);
	assert(isempty(NNFeatureImportanceMeasure.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNFeatureImportanceMeasure.getProps())), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNFeatureImportanceMeasure'', category) does not work.')
	 
	% getPropNumber()
	assert(NNFeatureImportanceMeasure.getPropNumber() == length(NNFeatureImportanceMeasure.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.getPropNumber() should return the number of properties.')
	assert(fim.getPropNumber() == length(NNFeatureImportanceMeasure.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(fim) == length(NNFeatureImportanceMeasure.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(fim) should return the number of properties.')
	assert(Element.getPropNumber('NNFeatureImportanceMeasure') == length(NNFeatureImportanceMeasure.getProps()), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNFeatureImportanceMeasure'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNFeatureImportanceMeasure.getPropNumber(category), categories)) == NNFeatureImportanceMeasure.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) fim.getPropNumber(category), categories)) == NNFeatureImportanceMeasure.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(fim, category), categories)) == NNFeatureImportanceMeasure.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(fim, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNFeatureImportanceMeasure', category), categories)) == NNFeatureImportanceMeasure.getPropNumber(), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNFeatureImportanceMeasure'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNFeatureImportanceMeasure.existsProp(NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.existsProp(prop) does not work.')
	assert(~fim.existsProp(NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.existsProp(prop) does not work.')
	assert(~Element.existsProp(fim, NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(fim, prop) does not work.')
	assert(~Element.existsProp('NNFeatureImportanceMeasure', NaN), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNFeatureImportanceMeasure'', prop) does not work.')
	 
	assert_with_error('NNFeatureImportanceMeasure.existsProp(NaN)', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], fim)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], fim)
	assert_with_error('Element.existsProp(''NNFeatureImportanceMeasure'', NaN)', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		assert(NNFeatureImportanceMeasure.existsProp(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.existsProp(prop) does not work.')
		assert(fim.existsProp(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.existsProp(prop) does not work.')
		assert(Element.existsProp(fim, prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(fim, prop) does not work.')
		assert(Element.existsProp('NNFeatureImportanceMeasure', prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNFeatureImportanceMeasure'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNFeatureImportanceMeasure.existsTag(''), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.existsTag(tag) does not work.')
	assert(~fim.existsTag(''), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'fim.existsTag(tag) does not work.')
	assert(~Element.existsTag(fim, ''), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(fim, tag) does not work.')
	assert(~Element.existsTag('NNFeatureImportanceMeasure', ''), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNFeatureImportanceMeasure'', tag) does not work.')
	 
	assert_with_error('NNFeatureImportanceMeasure.existsTag('''')', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], fim)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], fim)
	assert_with_error('Element.existsTag(''NNFeatureImportanceMeasure'', '''')', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
		assert(NNFeatureImportanceMeasure.existsTag(tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.existsTag(tag) does not work.')
		assert(fim.existsTag(tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.existsTag(tag) does not work.')
		assert(Element.existsTag(fim, tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(fim, tga) does not work.')
		assert(Element.existsTag('NNFeatureImportanceMeasure', tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNFeatureImportanceMeasure'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		assert(NNFeatureImportanceMeasure.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropProp(prop) does not work.')
		assert(fim.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropProp(prop) does not work.')
		assert(Element.getPropProp(fim, prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(fim, prop) does not work.')
		assert(Element.getPropProp('NNFeatureImportanceMeasure', prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNFeatureImportanceMeasure'', prop) does not work.')
	 
		tag = fim.getPropTag(prop);
		assert(NNFeatureImportanceMeasure.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropProp(tag) does not work.')
		assert(fim.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropProp(tag) does not work.')
		assert(Element.getPropProp(fim, tag) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(fim, tag) does not work.')
		assert(Element.getPropProp('NNFeatureImportanceMeasure', prop) == prop, ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNFeatureImportanceMeasure'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		assert(strcmp(NNFeatureImportanceMeasure.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropTag(prop) does not work.')
		assert(strcmp(fim.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(fim, prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(fim, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNFeatureImportanceMeasure', prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNFeatureImportanceMeasure'', prop) does not work.')
	 
		assert(strcmp(NNFeatureImportanceMeasure.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropTag(tag) does not work.')
		assert(strcmp(fim.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(fim, tag), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(fim, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNFeatureImportanceMeasure', prop), tag), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNFeatureImportanceMeasure'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		assert(Category.existsCategory(NNFeatureImportanceMeasure.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(fim.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(fim, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(fim, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(fim, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNFeatureImportanceMeasure'', prop) does not work.')
	 
		assert(Category.existsCategory(NNFeatureImportanceMeasure.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(fim.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(fim, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(fim, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(fim, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNFeatureImportanceMeasure'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		assert(Format.existsFormat(NNFeatureImportanceMeasure.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(fim.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(fim, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(fim, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(fim, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNFeatureImportanceMeasure'', prop) does not work.')
	 
		assert(Format.existsFormat(NNFeatureImportanceMeasure.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(fim.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(fim, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(fim, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(fim, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNFeatureImportanceMeasure'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		assert(ischar(NNFeatureImportanceMeasure.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropDescription(prop) does not work.')
		assert(ischar(fim.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(fim, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(fim, prop) does not work.')
		assert(ischar(Element.getPropDescription(fim, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNFeatureImportanceMeasure'', prop) does not work.')
	 
		assert(ischar(NNFeatureImportanceMeasure.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.getPropDescription(tag) does not work.')
		assert(ischar(fim.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(fim, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(fim, tag) does not work.')
		assert(ischar(Element.getPropDescription(fim, tag)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNFeatureImportanceMeasure'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		settings = NNFeatureImportanceMeasure.getPropSettings(prop);
		settings = fim.getPropSettings(prop);
		settings = Element.getPropSettings(fim, prop);
		settings = Element.getPropSettings('NNFeatureImportanceMeasure', prop);
	 
		settings = NNFeatureImportanceMeasure.getPropSettings(tag);
		settings = fim.getPropSettings(tag);
		settings = Element.getPropSettings(fim, tag);
		settings = Element.getPropSettings('NNFeatureImportanceMeasure', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		default = NNFeatureImportanceMeasure.getPropDefault(prop);
		default = fim.getPropDefault(prop);
		default = Element.getPropDefault(fim, prop);
		default = Element.getPropDefault('NNFeatureImportanceMeasure', prop);
	 
		default = NNFeatureImportanceMeasure.getPropDefault(tag);
		default = fim.getPropDefault(tag);
		default = Element.getPropDefault(fim, tag);
		default = Element.getPropDefault('NNFeatureImportanceMeasure', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		conditioned_default = NNFeatureImportanceMeasure.getPropDefaultConditioned(prop);
		conditioned_default = fim.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(fim, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNFeatureImportanceMeasure', prop);
	 
		conditioned_default = NNFeatureImportanceMeasure.getPropDefaultConditioned(tag);
		conditioned_default = fim.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(fim, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNFeatureImportanceMeasure', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		tag = fim.getPropTag(prop);
	 
		assert(~NNFeatureImportanceMeasure.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.checkProp(prop, value) does not work.')
		assert(~fim.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(fim, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(fim, prop, value) does not work.')
		assert(~Element.checkProp('NNFeatureImportanceMeasure', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceMeasure'', prop, value) does not work.')
	 
		assert_with_error('NNFeatureImportanceMeasure.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], prop, fim)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], prop, fim)
		assert_with_error('Element.checkProp(''NNFeatureImportanceMeasure'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNFeatureImportanceMeasure.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.checkProp(tag, value) does not work.')
		assert(~fim.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(fim, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(fim, tag, value) does not work.')
		assert(~Element.checkProp('NNFeatureImportanceMeasure', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceMeasure'', tag, value) does not work.')
	 
		assert_with_error('NNFeatureImportanceMeasure.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], tag, fim)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], tag, fim)
		assert_with_error('Element.checkProp(''NNFeatureImportanceMeasure'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNFeatureImportanceMeasure.checkProp(prop, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.checkProp(prop, <conditioned default value>) does not work.')
		assert(fim.checkProp(prop, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(fim, prop, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(fim, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNFeatureImportanceMeasure', prop, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceMeasure'', prop, <conditioned default value>) does not work.')
	 
		assert(NNFeatureImportanceMeasure.checkProp(tag, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.checkProp(tag, <conditioned default value>) does not work.')
		assert(fim.checkProp(tag, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'fim.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(fim, tag, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(fim, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNFeatureImportanceMeasure', tag, Element.getPropDefaultConditioned(NNFeatureImportanceMeasure, prop)), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNFeatureImportanceMeasure'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.TEMPLATE), ...
		NNFeatureImportanceMeasure.ID, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.ID), ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.G), ...
		NNFeatureImportanceMeasure.M, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.M), ...
		NNFeatureImportanceMeasure.FI, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.FI) ...
		);
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
	 
		% excluded props
		if any(prop == [NNFeatureImportanceMeasure.TEMPLATE])
			continue
		end
	 
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					fim.getr(prop) == NNFeatureImportanceMeasure.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceMeasure.getCategoryName(NNFeatureImportanceMeasure.getPropCategory(prop)) ', NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceMeasure.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					fim.getr(TAG) == NNFeatureImportanceMeasure.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceMeasure.getCategoryName(NNFeatureImportanceMeasure.getPropCategory(prop)) ', NNFeatureImportanceMeasure.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceMeasure.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(fim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(fim.getPropSettings(prop))
					assert( ...
						fim.checkFormat(fim.getPropFormat(prop), fim.get(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						fim.checkFormat(fim.getPropFormat(prop), fim.get(prop), fim.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					fim.getr(prop) == NNFeatureImportanceMeasure.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceMeasure.getCategoryName(NNFeatureImportanceMeasure.getPropCategory(prop)) ', NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceMeasure.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					fim.getr(TAG) == NNFeatureImportanceMeasure.getNoValue(), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNFeatureImportanceMeasure.getCategoryName(NNFeatureImportanceMeasure.getPropCategory(prop)) ', NNFeatureImportanceMeasure.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNFeatureImportanceMeasure.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceMeasure']);
				assert( ...
					~isa(fim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(fim.getPropSettings(prop))
					assert( ...
						fim.checkFormat(fim.getPropFormat(prop), fim.get(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						fim.checkFormat(fim.getPropFormat(prop), fim.get(prop), fim.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(fim.getr(prop), NNFeatureImportanceMeasure.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNFeatureImportanceMeasure.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNFeatureImportanceMeasure.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(fim.getr(TAG), NNFeatureImportanceMeasure.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNFeatureImportanceMeasure.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNFeatureImportanceMeasure.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.TEMPLATE), ...
		NNFeatureImportanceMeasure.ID, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.ID), ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.G), ...
		NNFeatureImportanceMeasure.M, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.M), ...
		NNFeatureImportanceMeasure.FI, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.FI) ...
		);
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
	 
		% excluded props
		if any(prop == [NNFeatureImportanceMeasure.TEMPLATE])
			continue
		end
	 
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(fim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(fim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(fim.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(fim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					fim.checkFormat(fim.getPropFormat(prop), fim.getr(prop),fim.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceMeasure']);
				assert( ...
					~isa(fim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(fim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceMeasure']);
	% 			assert( ...
	% 				~isa(fim.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
	% 				['NNFeatureImportanceMeasure.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(fim.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
	% 				['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				fim.checkFormat(fim.getPropFormat(prop), fim.getr(prop),fim.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
	% 				['NNFeatureImportanceMeasure.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceMeasure']);
				assert( ...
					~isa(fim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(fim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(fim.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(fim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					fim.checkFormat(fim.getPropFormat(prop), fim.getr(prop),fim.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if fim.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNFeatureImportanceMeasure');
					delete(ancestor(fim.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNFeatureImportanceMeasure.getProps(Category.RESULT))
		for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
	 
			% excluded props
			if any(prop == [NNFeatureImportanceMeasure.TEMPLATE])
				continue
			end
	 
			switch NNFeatureImportanceMeasure.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						fim.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~fim.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim = NNFeatureImportanceMeasure();
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		assert( ...
			~fim.isLocked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceMeasure.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~fim.isLocked(TAG), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceMeasure.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	fim.lock()
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					fim.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~fim.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim = NNFeatureImportanceMeasure();
	 
	warning_backup = warning('off', 'BRAPH2:NNFeatureImportanceMeasure');
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		fim.lock(prop)
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					fim.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~fim.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim = NNFeatureImportanceMeasure();
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		assert( ...
			fim.isChecked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceMeasure.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			fim.isChecked(TAG), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceMeasure.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	fim.unchecked()
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		assert( ...
			~fim.isChecked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceMeasure.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	fim.checked()
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		assert( ...
			fim.isChecked(prop), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			['NNFeatureImportanceMeasure.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNFeatureImportanceMeasure
	fim_0 = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.TEMPLATE), ...
		NNFeatureImportanceMeasure.ID, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.ID), ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.G), ...
		NNFeatureImportanceMeasure.M, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.M), ...
		NNFeatureImportanceMeasure.FI, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.FI) ...
		);
	 
	% NNFeatureImportanceMeasure with 1st callbacks
	fim_1 = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, fim_0.getCallback(4), ..., ...
		NNFeatureImportanceMeasure.ID, fim_0.getCallback(5), ..., ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, fim_0.getCallback(9), ..., ...
		NNFeatureImportanceMeasure.M, fim_0.getCallback(10), ..., ...
		NNFeatureImportanceMeasure.FI, fim_0.getCallback(11) ... ...
		);
	 
	prop_number = NNFeatureImportanceMeasure.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(fim_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(fim_1.get(prop), fim_0.get(prop)) && ~isa(fim_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(fim_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNFeatureImportanceMeasure with 2nd callbacks
	fim_2 = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, fim_1.getCallback(4), ..., ...
		NNFeatureImportanceMeasure.ID, fim_1.getCallback(5), ..., ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, fim_1.getCallback(9), ..., ...
		NNFeatureImportanceMeasure.M, fim_1.getCallback(10), ..., ...
		NNFeatureImportanceMeasure.FI, fim_1.getCallback(11) ... ...
		);
	 
	prop_number = NNFeatureImportanceMeasure.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(fim_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(fim_2.get(prop), fim_0.get(prop)) && ~isa(fim_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(fim_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNFeatureImportanceMeasure with 3rd callbacks
	fim_3 = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, fim_2.getCallback(4), ..., ...
		NNFeatureImportanceMeasure.ID, fim_2.getCallback(5), ..., ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, fim_2.getCallback(9), ..., ...
		NNFeatureImportanceMeasure.M, fim_2.getCallback(10), ..., ...
		NNFeatureImportanceMeasure.FI, fim_2.getCallback(11) ... ...
		);
	 
	prop_number = NNFeatureImportanceMeasure.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(fim_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(fim_3.get(prop), fim_0.get(prop)) && ~isa(fim_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(fim_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	fim = NNFeatureImportanceMeasure();
	 
	fim_copy = fim.copy();
	 
	assert(fim_copy ~= fim, ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(fim_copy, fim), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		value = fim.getr(prop);
		value_copy = fim_copy.getr(prop);
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceMeasure.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceMeasure.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceMeasure.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					fim_copy.isLocked(prop) == fim.isLocked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceMeasure.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					fim_copy.isChecked(prop) == fim.isChecked(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceMeasure.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					fim_copy.getPropSeed(prop) == fim.getPropSeed(prop), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceMeasure.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	fim = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.TEMPLATE), ...
		NNFeatureImportanceMeasure.ID, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.ID), ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.G), ...
		NNFeatureImportanceMeasure.M, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.M), ...
		NNFeatureImportanceMeasure.FI, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.FI) ...
		);
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		if NNFeatureImportanceMeasure.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNFeatureImportanceMeasure']);
			% fim.memorize(prop);
			% warning(warning_backup)
		elseif NNFeatureImportanceMeasure.getPropCategory(prop) == Category.EVANESCENT && fim.getPropFormat(prop) == Format.HANDLE
			fim.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNFeatureImportanceMeasure');
			delete(ancestor(fim.get(prop), 'figure'))
			warning(warning_backup)
		else
			fim.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	fim_copy = fim.copy();
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		value = fim.getr(prop);
		value_copy = fim_copy.getr(prop);
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceMeasure.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceMeasure.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceMeasure.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						fim_copy.isLocked(prop) == fim.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						fim_copy.isChecked(prop) == fim.isChecked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						fim_copy.getPropSeed(prop) == fim.getPropSeed(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	fim_0 = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.TEMPLATE), ...
		NNFeatureImportanceMeasure.ID, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.ID), ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.G), ...
		NNFeatureImportanceMeasure.M, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.M), ...
		NNFeatureImportanceMeasure.FI, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.FI) ...
		);
	 
	fim = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, fim_0.getCallback(4), ..., ...
		NNFeatureImportanceMeasure.ID, fim_0.getCallback(5), ..., ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, fim_0.getCallback(9), ..., ...
		NNFeatureImportanceMeasure.M, fim_0.getCallback(10), ..., ...
		NNFeatureImportanceMeasure.FI, fim_0.getCallback(11) ... ...
		);
	 
	fim_copy = fim.copy();
	fim_0_copy = fim_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
		value = fim.getr(prop);
		value_copy = fim_copy.getr(prop);
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					'NNFeatureImportanceMeasure.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceMeasure.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
							'NNFeatureImportanceMeasure.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == fim_0.getCallback(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The callback should be obtained from NNFeatureImportanceMeasure.getCallback().' ...
						)
					assert( ...
						value_copy == fim_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The callback should be obtained from NNFeatureImportanceMeasure.getCallback().' ...
						)
				end
	 
					assert( ...
						fim_copy.isLocked(prop) == fim.isLocked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						fim_copy.isChecked(prop) == fim.isChecked(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						fim_copy.getPropSeed(prop) == fim.getPropSeed(prop), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim_template = NNFeatureImportanceMeasure();
	fim = NNFeatureImportanceMeasure('TEMPLATE', fim_template);
	 
	for prop = 1:1:NNFeatureImportanceMeasure.getPropNumber()
	 
		% excluded props
		if any(prop == [NNFeatureImportanceMeasure.TEMPLATE])
			continue
		end
	 
		TAG = upper(NNFeatureImportanceMeasure.getPropTag(prop));
		switch NNFeatureImportanceMeasure.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNFeatureImportanceMeasure.TEMPLATE
					assert( ...
						isa(fim.getr(prop), 'NNFeatureImportanceMeasure'), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure TEMPLATE does not work. NNFeatureImportanceMeasure.getr(''TEMPLATE'') should be a NNFeatureImportanceMeasure element.' ...
						)
					assert( ...
						isa(fim_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						'NNFeatureImportanceMeasure TEMPLATE does not work. NNFeatureImportanceMeasure_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(fim.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure TEMPLATE does not work. NNFeatureImportanceMeasure.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						fim.getr(prop).get('EL') == fim_template && fim.getr(prop).get('PROP') == prop && strcmp(fim.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure TEMPLATE does not work. NNFeatureImportanceMeasure.getr(' TAG ') should be a Callback to fim_template.' TAG '.'] ...
						)
					assert( ...
						isa(fim_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
						['NNFeatureImportanceMeasure TEMPLATE does not work. NNFeatureImportanceMeasure_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(fim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure TEMPLATE does not work. NNFeatureImportanceMeasure.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(fim_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
					['NNFeatureImportanceMeasure TEMPLATE does not work. NNFeatureImportanceMeasure_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.TEMPLATE), ...
		NNFeatureImportanceMeasure.ID, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.ID), ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.G), ...
		NNFeatureImportanceMeasure.M, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.M), ...
		NNFeatureImportanceMeasure.FI, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.FI) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnfeatureimportancemeasure_to_be_erased.b2'];
	 
	Element.save(fim, filename)
	 
	fim_loaded = Element.load(filename);
	 
	assert( ...
		isequal(fim.copy(), fim_loaded), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.save(fim) and/or NNFeatureImportanceMeasure.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	fim = NNFeatureImportanceMeasure( ...
		NNFeatureImportanceMeasure.ELCLASS, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.NAME, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.DESCRIPTION, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.TEMPLATE, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.TEMPLATE), ...
		NNFeatureImportanceMeasure.ID, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.ID), ...
		NNFeatureImportanceMeasure.LABEL, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.LABEL), ...
		NNFeatureImportanceMeasure.NOTES, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.NOTES), ...
		NNFeatureImportanceMeasure.TOSTRING, NNFeatureImportanceMeasure.getNoValue(), ...
		NNFeatureImportanceMeasure.G, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.G), ...
		NNFeatureImportanceMeasure.M, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.M), ...
		NNFeatureImportanceMeasure.FI, NNFeatureImportanceMeasure.getPropDefault(NNFeatureImportanceMeasure.FI) ...
		);
	 
	[json, struct, el_list] = encodeJSON(fim);
	[fim_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(fim_dec ~= fim, ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		'NNFeatureImportanceMeasure.encodeJSON() or NNFeatureImportanceMeasure.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNFeatureImportanceMeasure.getPropFormat(prop), num2cell(NNFeatureImportanceMeasure.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNFeatureImportanceMeasure.getPropFormat(prop), num2cell(NNFeatureImportanceMeasure.getProps())) == Format.NET)
		assert(isequal(fim_dec, fim), ...
			[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
			'NNFeatureImportanceMeasure.encodeJSON() or NNFeatureImportanceMeasure.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNFeatureImportanceMeasure:' BRAPH2.FAIL_TEST], ...
		[' When testing NNFeatureImportanceMeasure no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

