%TEST_NNCLASSIFIERMLP

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	nn = NNClassifierMLP();
	 
	% get('ELCLASS')
	if isa(NNClassifierMLP, 'ConcreteElement')
		assert(strcmp(NNClassifierMLP().get('ELCLASS'), 'NNClassifierMLP'), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP().get(''ELCLASS'') should return ''NNClassifierMLP''.')
	end
	 
	% getBuild()
	assert(NNClassifierMLP.getBuild() == 1 && NNClassifierMLP.getBuild() > 0, ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.getBuild() should return the NNClassifierMLP build number.')
	assert(nn.getBuild() == 1 && nn.getBuild() > 0 , ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.getBuild() should return the NNClassifierMLP build number.')
	assert(Element.getBuild(nn) == 1 && Element.getBuild(nn) > 0, ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(nn) should return the NNClassifierMLP build number.')
	assert(Element.getBuild('NNClassifierMLP') == 1 && Element.getBuild('NNClassifierMLP') > 0, ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNClassifierMLP'') should return the NNClassifierMLP build number.')
	 
	% getClass()
	assert(strcmp(NNClassifierMLP.getClass(), 'NNClassifierMLP'), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.getClass() should return ''NNClassifierMLP''.')
	assert(strcmp(nn.getClass(), 'NNClassifierMLP'), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.getClass() should return ''NNClassifierMLP''.')
	assert(strcmp(Element.getClass(nn), 'NNClassifierMLP'), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nn) should return ''NNClassifierMLP''.')
	assert(strcmp(Element.getClass('NNClassifierMLP'), 'NNClassifierMLP'), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNClassifierMLP'') should return ''NNClassifierMLP''.')
	 
	% getSubclasses()
	assert(isequal(NNClassifierMLP.getSubclasses(), subclasses('NNClassifierMLP', [], [], true)), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.getSubclasses() should return the same result as subclasses(''NNClassifierMLP'', [], [], true).')
	assert(isequal(nn.getSubclasses(), subclasses('NNClassifierMLP', [], [], true)), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNClassifierMLP'', [], [], true).')
	assert(isequal(Element.getSubclasses(nn), subclasses('NNClassifierMLP', [], [], true)), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nn) should return the same result as subclasses(''NNClassifierMLP'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNClassifierMLP'), subclasses('NNClassifierMLP', [], [], true)), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNClassifierMLP'') should return the same result as subclasses(''NNClassifierMLP'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNClassifierMLP.getProps()) || isequal(NNClassifierMLP.getProps(), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNClassifierMLP.getProps()) || isequal(nn.getProps(), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNClassifierMLP.getProps()) || isequal(Element.getProps(nn), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nn) should return a row vector [1:1:N].')
	assert(isempty(NNClassifierMLP.getProps()) || isequal(Element.getProps('NNClassifierMLP'), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNClassifierMLP'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNClassifierMLP.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNClassifierMLP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.getProps(category) does not work.')
	tmp = cellfun(@(category) nn.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNClassifierMLP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nn, category), categories, 'UniformOutput', false);
	assert(isempty(NNClassifierMLP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nn, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNClassifierMLP', category), categories, 'UniformOutput', false);
	assert(isempty(NNClassifierMLP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNClassifierMLP.getProps())), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNClassifierMLP'', category) does not work.')
	 
	% getPropNumber()
	assert(NNClassifierMLP.getPropNumber() == length(NNClassifierMLP.getProps()), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.getPropNumber() should return the number of properties.')
	assert(nn.getPropNumber() == length(NNClassifierMLP.getProps()), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nn) == length(NNClassifierMLP.getProps()), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nn) should return the number of properties.')
	assert(Element.getPropNumber('NNClassifierMLP') == length(NNClassifierMLP.getProps()), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNClassifierMLP'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNClassifierMLP.getPropNumber(category), categories)) == NNClassifierMLP.getPropNumber(), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nn.getPropNumber(category), categories)) == NNClassifierMLP.getPropNumber(), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nn, category), categories)) == NNClassifierMLP.getPropNumber(), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nn, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNClassifierMLP', category), categories)) == NNClassifierMLP.getPropNumber(), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNClassifierMLP'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNClassifierMLP.existsProp(NaN), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.existsProp(prop) does not work.')
	assert(~nn.existsProp(NaN), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.existsProp(prop) does not work.')
	assert(~Element.existsProp(nn, NaN), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nn, prop) does not work.')
	assert(~Element.existsProp('NNClassifierMLP', NaN), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNClassifierMLP'', prop) does not work.')
	 
	assert_with_error('NNClassifierMLP.existsProp(NaN)', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsProp(''NNClassifierMLP'', NaN)', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		assert(NNClassifierMLP.existsProp(prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.existsProp(prop) does not work.')
		assert(nn.existsProp(prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.existsProp(prop) does not work.')
		assert(Element.existsProp(nn, prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nn, prop) does not work.')
		assert(Element.existsProp('NNClassifierMLP', prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNClassifierMLP'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNClassifierMLP.existsTag(''), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.existsTag(tag) does not work.')
	assert(~nn.existsTag(''), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'nn.existsTag(tag) does not work.')
	assert(~Element.existsTag(nn, ''), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nn, tag) does not work.')
	assert(~Element.existsTag('NNClassifierMLP', ''), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNClassifierMLP'', tag) does not work.')
	 
	assert_with_error('NNClassifierMLP.existsTag('''')', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsTag(''NNClassifierMLP'', '''')', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
		assert(NNClassifierMLP.existsTag(tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.existsTag(tag) does not work.')
		assert(nn.existsTag(tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.existsTag(tag) does not work.')
		assert(Element.existsTag(nn, tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nn, tga) does not work.')
		assert(Element.existsTag('NNClassifierMLP', tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNClassifierMLP'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		assert(NNClassifierMLP.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropProp(prop) does not work.')
		assert(nn.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nn, prop) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nn, prop) does not work.')
		assert(Element.getPropProp('NNClassifierMLP', prop) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNClassifierMLP'', prop) does not work.')
	 
		tag = nn.getPropTag(prop);
		assert(NNClassifierMLP.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropProp(tag) does not work.')
		assert(nn.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nn, tag) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nn, tag) does not work.')
		assert(Element.getPropProp('NNClassifierMLP', prop) == prop, ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNClassifierMLP'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(strcmp(NNClassifierMLP.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropTag(prop) does not work.')
		assert(strcmp(nn.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nn, prop), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nn, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNClassifierMLP', prop), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNClassifierMLP'', prop) does not work.')
	 
		assert(strcmp(NNClassifierMLP.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropTag(tag) does not work.')
		assert(strcmp(nn.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nn, tag), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nn, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNClassifierMLP', prop), tag), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNClassifierMLP'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(Category.existsCategory(NNClassifierMLP.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nn.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nn, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNClassifierMLP'', prop) does not work.')
	 
		assert(Category.existsCategory(NNClassifierMLP.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nn.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nn, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNClassifierMLP'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(Format.existsFormat(NNClassifierMLP.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nn.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nn, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNClassifierMLP'', prop) does not work.')
	 
		assert(Format.existsFormat(NNClassifierMLP.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nn.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nn, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNClassifierMLP'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(ischar(NNClassifierMLP.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropDescription(prop) does not work.')
		assert(ischar(nn.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nn, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nn, prop) does not work.')
		assert(ischar(Element.getPropDescription(nn, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNClassifierMLP'', prop) does not work.')
	 
		assert(ischar(NNClassifierMLP.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.getPropDescription(tag) does not work.')
		assert(ischar(nn.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nn, tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nn, tag) does not work.')
		assert(ischar(Element.getPropDescription(nn, tag)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNClassifierMLP'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		settings = NNClassifierMLP.getPropSettings(prop);
		settings = nn.getPropSettings(prop);
		settings = Element.getPropSettings(nn, prop);
		settings = Element.getPropSettings('NNClassifierMLP', prop);
	 
		settings = NNClassifierMLP.getPropSettings(tag);
		settings = nn.getPropSettings(tag);
		settings = Element.getPropSettings(nn, tag);
		settings = Element.getPropSettings('NNClassifierMLP', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		default = NNClassifierMLP.getPropDefault(prop);
		default = nn.getPropDefault(prop);
		default = Element.getPropDefault(nn, prop);
		default = Element.getPropDefault('NNClassifierMLP', prop);
	 
		default = NNClassifierMLP.getPropDefault(tag);
		default = nn.getPropDefault(tag);
		default = Element.getPropDefault(nn, tag);
		default = Element.getPropDefault('NNClassifierMLP', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		conditioned_default = NNClassifierMLP.getPropDefaultConditioned(prop);
		conditioned_default = nn.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nn, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNClassifierMLP', prop);
	 
		conditioned_default = NNClassifierMLP.getPropDefaultConditioned(tag);
		conditioned_default = nn.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nn, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNClassifierMLP', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(~NNClassifierMLP.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.checkProp(prop, value) does not work.')
		assert(~nn.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nn, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, prop, value) does not work.')
		assert(~Element.checkProp('NNClassifierMLP', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNClassifierMLP'', prop, value) does not work.')
	 
		assert_with_error('NNClassifierMLP.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], prop, nn)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], prop, nn)
		assert_with_error('Element.checkProp(''NNClassifierMLP'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNClassifierMLP.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.checkProp(tag, value) does not work.')
		assert(~nn.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nn, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, tag, value) does not work.')
		assert(~Element.checkProp('NNClassifierMLP', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNClassifierMLP'', tag, value) does not work.')
	 
		assert_with_error('NNClassifierMLP.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], tag, nn)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], tag, nn)
		assert_with_error('Element.checkProp(''NNClassifierMLP'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNClassifierMLP.checkProp(prop, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.checkProp(prop, <conditioned default value>) does not work.')
		assert(nn.checkProp(prop, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nn, prop, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNClassifierMLP', prop, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNClassifierMLP'', prop, <conditioned default value>) does not work.')
	 
		assert(NNClassifierMLP.checkProp(tag, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.checkProp(tag, <conditioned default value>) does not work.')
		assert(nn.checkProp(tag, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nn, tag, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNClassifierMLP', tag, Element.getPropDefaultConditioned(NNClassifierMLP, prop)), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNClassifierMLP'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, NNClassifierMLP.getPropDefault(NNClassifierMLP.TEMPLATE), ...
		NNClassifierMLP.ID, NNClassifierMLP.getPropDefault(NNClassifierMLP.ID), ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, NNClassifierMLP.getPropDefault(NNClassifierMLP.D), ...
		NNClassifierMLP.DP_CLASSES, NNClassifierMLP.getPropDefault(NNClassifierMLP.DP_CLASSES), ...
		NNClassifierMLP.EPOCHS, NNClassifierMLP.getPropDefault(NNClassifierMLP.EPOCHS), ...
		NNClassifierMLP.BATCH, NNClassifierMLP.getPropDefault(NNClassifierMLP.BATCH), ...
		NNClassifierMLP.SHUFFLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.SHUFFLE), ...
		NNClassifierMLP.SOLVER, NNClassifierMLP.getPropDefault(NNClassifierMLP.SOLVER), ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, NNClassifierMLP.getPropDefault(NNClassifierMLP.VERBOSE), ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, NNClassifierMLP.getPropDefault(NNClassifierMLP.LAYERS), ...
		NNClassifierMLP.WAITBAR, NNClassifierMLP.getPropDefault(NNClassifierMLP.WAITBAR), ...
		NNClassifierMLP.INTERRUPTIBLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.INTERRUPTIBLE), ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					nn.getr(prop) == NNClassifierMLP.getNoValue(), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNClassifierMLP.getCategoryName(NNClassifierMLP.getPropCategory(prop)) ', NNClassifierMLP.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNClassifierMLP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nn.getr(TAG) == NNClassifierMLP.getNoValue(), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNClassifierMLP.getCategoryName(NNClassifierMLP.getPropCategory(prop)) ', NNClassifierMLP.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNClassifierMLP.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nn.getPropSettings(prop))
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop)), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop), nn.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					nn.getr(prop) == NNClassifierMLP.getNoValue(), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNClassifierMLP.getCategoryName(NNClassifierMLP.getPropCategory(prop)) ', NNClassifierMLP.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNClassifierMLP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nn.getr(TAG) == NNClassifierMLP.getNoValue(), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNClassifierMLP.getCategoryName(NNClassifierMLP.getPropCategory(prop)) ', NNClassifierMLP.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNClassifierMLP.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNClassifierMLP']);
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nn.getPropSettings(prop))
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop)), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop), nn.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(nn.getr(prop), NNClassifierMLP.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNClassifierMLP.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNClassifierMLP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(nn.getr(TAG), NNClassifierMLP.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNClassifierMLP.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNClassifierMLP.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, NNClassifierMLP.getPropDefault(NNClassifierMLP.TEMPLATE), ...
		NNClassifierMLP.ID, NNClassifierMLP.getPropDefault(NNClassifierMLP.ID), ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, NNClassifierMLP.getPropDefault(NNClassifierMLP.D), ...
		NNClassifierMLP.DP_CLASSES, NNClassifierMLP.getPropDefault(NNClassifierMLP.DP_CLASSES), ...
		NNClassifierMLP.EPOCHS, NNClassifierMLP.getPropDefault(NNClassifierMLP.EPOCHS), ...
		NNClassifierMLP.BATCH, NNClassifierMLP.getPropDefault(NNClassifierMLP.BATCH), ...
		NNClassifierMLP.SHUFFLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.SHUFFLE), ...
		NNClassifierMLP.SOLVER, NNClassifierMLP.getPropDefault(NNClassifierMLP.SOLVER), ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, NNClassifierMLP.getPropDefault(NNClassifierMLP.VERBOSE), ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, NNClassifierMLP.getPropDefault(NNClassifierMLP.LAYERS), ...
		NNClassifierMLP.WAITBAR, NNClassifierMLP.getPropDefault(NNClassifierMLP.WAITBAR), ...
		NNClassifierMLP.INTERRUPTIBLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.INTERRUPTIBLE), ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		switch NNClassifierMLP.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nn.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNClassifierMLP']);
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNClassifierMLP']);
	% 			assert( ...
	% 				~isa(nn.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
	% 				['NNClassifierMLP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(nn.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
	% 				['NNClassifierMLP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
	% 				['NNClassifierMLP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNClassifierMLP']);
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nn.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if nn.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNClassifierMLP');
					delete(ancestor(nn.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNClassifierMLP.getProps(Category.RESULT))
		for prop = 1:1:NNClassifierMLP.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNClassifierMLP.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						nn.isLocked(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~nn.isLocked(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNClassifierMLP();
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		assert( ...
			~nn.isLocked(prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			['NNClassifierMLP.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nn.isLocked(TAG), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			['NNClassifierMLP.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nn.lock()
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nn.isLocked(prop), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nn.isLocked(prop), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNClassifierMLP();
	 
	warning_backup = warning('off', 'BRAPH2:NNClassifierMLP');
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		nn.lock(prop)
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nn.isLocked(prop), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nn.isLocked(prop), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNClassifierMLP();
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		assert( ...
			nn.isChecked(prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			['NNClassifierMLP.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nn.isChecked(TAG), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			['NNClassifierMLP.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nn.unchecked()
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		assert( ...
			~nn.isChecked(prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			['NNClassifierMLP.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nn.checked()
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		assert( ...
			nn.isChecked(prop), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			['NNClassifierMLP.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNClassifierMLP
	nn_0 = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, NNClassifierMLP.getPropDefault(NNClassifierMLP.TEMPLATE), ...
		NNClassifierMLP.ID, NNClassifierMLP.getPropDefault(NNClassifierMLP.ID), ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, NNClassifierMLP.getPropDefault(NNClassifierMLP.D), ...
		NNClassifierMLP.DP_CLASSES, NNClassifierMLP.getPropDefault(NNClassifierMLP.DP_CLASSES), ...
		NNClassifierMLP.EPOCHS, NNClassifierMLP.getPropDefault(NNClassifierMLP.EPOCHS), ...
		NNClassifierMLP.BATCH, NNClassifierMLP.getPropDefault(NNClassifierMLP.BATCH), ...
		NNClassifierMLP.SHUFFLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.SHUFFLE), ...
		NNClassifierMLP.SOLVER, NNClassifierMLP.getPropDefault(NNClassifierMLP.SOLVER), ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, NNClassifierMLP.getPropDefault(NNClassifierMLP.VERBOSE), ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, NNClassifierMLP.getPropDefault(NNClassifierMLP.LAYERS), ...
		NNClassifierMLP.WAITBAR, NNClassifierMLP.getPropDefault(NNClassifierMLP.WAITBAR), ...
		NNClassifierMLP.INTERRUPTIBLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.INTERRUPTIBLE), ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	% NNClassifierMLP with 1st callbacks
	nn_1 = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, nn_0.getCallback(4), ..., ...
		NNClassifierMLP.ID, nn_0.getCallback(5), ..., ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, nn_0.getCallback(9), ..., ...
		NNClassifierMLP.DP_CLASSES, nn_0.getCallback(10), ..., ...
		NNClassifierMLP.EPOCHS, nn_0.getCallback(11), ..., ...
		NNClassifierMLP.BATCH, nn_0.getCallback(12), ..., ...
		NNClassifierMLP.SHUFFLE, nn_0.getCallback(13), ..., ...
		NNClassifierMLP.SOLVER, nn_0.getCallback(14), ..., ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, nn_0.getCallback(19), ..., ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, nn_0.getCallback(23), ..., ...
		NNClassifierMLP.WAITBAR, nn_0.getCallback(24), ..., ...
		NNClassifierMLP.INTERRUPTIBLE, nn_0.getCallback(25), ..., ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	prop_number = NNClassifierMLP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nn_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nn_1.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nn_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNClassifierMLP with 2nd callbacks
	nn_2 = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, nn_1.getCallback(4), ..., ...
		NNClassifierMLP.ID, nn_1.getCallback(5), ..., ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, nn_1.getCallback(9), ..., ...
		NNClassifierMLP.DP_CLASSES, nn_1.getCallback(10), ..., ...
		NNClassifierMLP.EPOCHS, nn_1.getCallback(11), ..., ...
		NNClassifierMLP.BATCH, nn_1.getCallback(12), ..., ...
		NNClassifierMLP.SHUFFLE, nn_1.getCallback(13), ..., ...
		NNClassifierMLP.SOLVER, nn_1.getCallback(14), ..., ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, nn_1.getCallback(19), ..., ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, nn_1.getCallback(23), ..., ...
		NNClassifierMLP.WAITBAR, nn_1.getCallback(24), ..., ...
		NNClassifierMLP.INTERRUPTIBLE, nn_1.getCallback(25), ..., ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	prop_number = NNClassifierMLP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nn_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nn_2.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nn_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNClassifierMLP with 3rd callbacks
	nn_3 = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, nn_2.getCallback(4), ..., ...
		NNClassifierMLP.ID, nn_2.getCallback(5), ..., ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, nn_2.getCallback(9), ..., ...
		NNClassifierMLP.DP_CLASSES, nn_2.getCallback(10), ..., ...
		NNClassifierMLP.EPOCHS, nn_2.getCallback(11), ..., ...
		NNClassifierMLP.BATCH, nn_2.getCallback(12), ..., ...
		NNClassifierMLP.SHUFFLE, nn_2.getCallback(13), ..., ...
		NNClassifierMLP.SOLVER, nn_2.getCallback(14), ..., ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, nn_2.getCallback(19), ..., ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, nn_2.getCallback(23), ..., ...
		NNClassifierMLP.WAITBAR, nn_2.getCallback(24), ..., ...
		NNClassifierMLP.INTERRUPTIBLE, nn_2.getCallback(25), ..., ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	prop_number = NNClassifierMLP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nn_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nn_3.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nn_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	nn = NNClassifierMLP();
	 
	nn_copy = nn.copy();
	 
	assert(nn_copy ~= nn, ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(nn_copy, nn), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		value = nn.getr(prop);
		value_copy = nn_copy.getr(prop);
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					'NNClassifierMLP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
							'NNClassifierMLP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
							'NNClassifierMLP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					nn_copy.isLocked(prop) == nn.isLocked(prop), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					'NNClassifierMLP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nn_copy.isChecked(prop) == nn.isChecked(prop), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					'NNClassifierMLP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nn_copy.getPropSeed(prop) == nn.getPropSeed(prop), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					'NNClassifierMLP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	nn = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, NNClassifierMLP.getPropDefault(NNClassifierMLP.TEMPLATE), ...
		NNClassifierMLP.ID, NNClassifierMLP.getPropDefault(NNClassifierMLP.ID), ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, NNClassifierMLP.getPropDefault(NNClassifierMLP.D), ...
		NNClassifierMLP.DP_CLASSES, NNClassifierMLP.getPropDefault(NNClassifierMLP.DP_CLASSES), ...
		NNClassifierMLP.EPOCHS, NNClassifierMLP.getPropDefault(NNClassifierMLP.EPOCHS), ...
		NNClassifierMLP.BATCH, NNClassifierMLP.getPropDefault(NNClassifierMLP.BATCH), ...
		NNClassifierMLP.SHUFFLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.SHUFFLE), ...
		NNClassifierMLP.SOLVER, NNClassifierMLP.getPropDefault(NNClassifierMLP.SOLVER), ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, NNClassifierMLP.getPropDefault(NNClassifierMLP.VERBOSE), ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, NNClassifierMLP.getPropDefault(NNClassifierMLP.LAYERS), ...
		NNClassifierMLP.WAITBAR, NNClassifierMLP.getPropDefault(NNClassifierMLP.WAITBAR), ...
		NNClassifierMLP.INTERRUPTIBLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.INTERRUPTIBLE), ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		if NNClassifierMLP.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNClassifierMLP']);
			% nn.memorize(prop);
			% warning(warning_backup)
		elseif NNClassifierMLP.getPropCategory(prop) == Category.EVANESCENT && nn.getPropFormat(prop) == Format.HANDLE
			nn.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNClassifierMLP');
			delete(ancestor(nn.get(prop), 'figure'))
			warning(warning_backup)
		else
			nn.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	nn_copy = nn.copy();
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		value = nn.getr(prop);
		value_copy = nn_copy.getr(prop);
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					'NNClassifierMLP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
							'NNClassifierMLP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
							'NNClassifierMLP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						nn_copy.isLocked(prop) == nn.isLocked(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.isChecked(prop) == nn.isChecked(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.getPropSeed(prop) == nn.getPropSeed(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	nn_0 = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, NNClassifierMLP.getPropDefault(NNClassifierMLP.TEMPLATE), ...
		NNClassifierMLP.ID, NNClassifierMLP.getPropDefault(NNClassifierMLP.ID), ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, NNClassifierMLP.getPropDefault(NNClassifierMLP.D), ...
		NNClassifierMLP.DP_CLASSES, NNClassifierMLP.getPropDefault(NNClassifierMLP.DP_CLASSES), ...
		NNClassifierMLP.EPOCHS, NNClassifierMLP.getPropDefault(NNClassifierMLP.EPOCHS), ...
		NNClassifierMLP.BATCH, NNClassifierMLP.getPropDefault(NNClassifierMLP.BATCH), ...
		NNClassifierMLP.SHUFFLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.SHUFFLE), ...
		NNClassifierMLP.SOLVER, NNClassifierMLP.getPropDefault(NNClassifierMLP.SOLVER), ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, NNClassifierMLP.getPropDefault(NNClassifierMLP.VERBOSE), ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, NNClassifierMLP.getPropDefault(NNClassifierMLP.LAYERS), ...
		NNClassifierMLP.WAITBAR, NNClassifierMLP.getPropDefault(NNClassifierMLP.WAITBAR), ...
		NNClassifierMLP.INTERRUPTIBLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.INTERRUPTIBLE), ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	nn = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, nn_0.getCallback(4), ..., ...
		NNClassifierMLP.ID, nn_0.getCallback(5), ..., ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, nn_0.getCallback(9), ..., ...
		NNClassifierMLP.DP_CLASSES, nn_0.getCallback(10), ..., ...
		NNClassifierMLP.EPOCHS, nn_0.getCallback(11), ..., ...
		NNClassifierMLP.BATCH, nn_0.getCallback(12), ..., ...
		NNClassifierMLP.SHUFFLE, nn_0.getCallback(13), ..., ...
		NNClassifierMLP.SOLVER, nn_0.getCallback(14), ..., ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, nn_0.getCallback(19), ..., ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, nn_0.getCallback(23), ..., ...
		NNClassifierMLP.WAITBAR, nn_0.getCallback(24), ..., ...
		NNClassifierMLP.INTERRUPTIBLE, nn_0.getCallback(25), ..., ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	nn_copy = nn.copy();
	nn_0_copy = nn_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
		value = nn.getr(prop);
		value_copy = nn_copy.getr(prop);
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					'NNClassifierMLP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
							'NNClassifierMLP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
							'NNClassifierMLP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == nn_0.getCallback(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The callback should be obtained from NNClassifierMLP.getCallback().' ...
						)
					assert( ...
						value_copy == nn_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The callback should be obtained from NNClassifierMLP.getCallback().' ...
						)
				end
	 
					assert( ...
						nn_copy.isLocked(prop) == nn.isLocked(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.isChecked(prop) == nn.isChecked(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.getPropSeed(prop) == nn.getPropSeed(prop), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn_template = NNClassifierMLP();
	nn = NNClassifierMLP('TEMPLATE', nn_template);
	 
	for prop = 1:1:NNClassifierMLP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNClassifierMLP.getPropTag(prop));
		switch NNClassifierMLP.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNClassifierMLP.TEMPLATE
					assert( ...
						isa(nn.getr(prop), 'NNClassifierMLP'), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP TEMPLATE does not work. NNClassifierMLP.getr(''TEMPLATE'') should be a NNClassifierMLP element.' ...
						)
					assert( ...
						isa(nn_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						'NNClassifierMLP TEMPLATE does not work. NNClassifierMLP_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(nn.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP TEMPLATE does not work. NNClassifierMLP.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						nn.getr(prop).get('EL') == nn_template && nn.getr(prop).get('PROP') == prop && strcmp(nn.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP TEMPLATE does not work. NNClassifierMLP.getr(' TAG ') should be a Callback to nn_template.' TAG '.'] ...
						)
					assert( ...
						isa(nn_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
						['NNClassifierMLP TEMPLATE does not work. NNClassifierMLP_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP TEMPLATE does not work. NNClassifierMLP.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(nn_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
					['NNClassifierMLP TEMPLATE does not work. NNClassifierMLP_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, NNClassifierMLP.getPropDefault(NNClassifierMLP.TEMPLATE), ...
		NNClassifierMLP.ID, NNClassifierMLP.getPropDefault(NNClassifierMLP.ID), ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, NNClassifierMLP.getPropDefault(NNClassifierMLP.D), ...
		NNClassifierMLP.DP_CLASSES, NNClassifierMLP.getPropDefault(NNClassifierMLP.DP_CLASSES), ...
		NNClassifierMLP.EPOCHS, NNClassifierMLP.getPropDefault(NNClassifierMLP.EPOCHS), ...
		NNClassifierMLP.BATCH, NNClassifierMLP.getPropDefault(NNClassifierMLP.BATCH), ...
		NNClassifierMLP.SHUFFLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.SHUFFLE), ...
		NNClassifierMLP.SOLVER, NNClassifierMLP.getPropDefault(NNClassifierMLP.SOLVER), ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, NNClassifierMLP.getPropDefault(NNClassifierMLP.VERBOSE), ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, NNClassifierMLP.getPropDefault(NNClassifierMLP.LAYERS), ...
		NNClassifierMLP.WAITBAR, NNClassifierMLP.getPropDefault(NNClassifierMLP.WAITBAR), ...
		NNClassifierMLP.INTERRUPTIBLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.INTERRUPTIBLE), ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnclassifiermlp_to_be_erased.b2'];
	 
	Element.save(nn, filename)
	 
	nn_loaded = Element.load(filename);
	 
	assert( ...
		isequal(nn.copy(), nn_loaded), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.save(nn) and/or NNClassifierMLP.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNClassifierMLP( ...
		NNClassifierMLP.ELCLASS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.NAME, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.DESCRIPTION, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TEMPLATE, NNClassifierMLP.getPropDefault(NNClassifierMLP.TEMPLATE), ...
		NNClassifierMLP.ID, NNClassifierMLP.getPropDefault(NNClassifierMLP.ID), ...
		NNClassifierMLP.LABEL, NNClassifierMLP.getPropDefault(NNClassifierMLP.LABEL), ...
		NNClassifierMLP.NOTES, NNClassifierMLP.getPropDefault(NNClassifierMLP.NOTES), ...
		NNClassifierMLP.TOSTRING, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.D, NNClassifierMLP.getPropDefault(NNClassifierMLP.D), ...
		NNClassifierMLP.DP_CLASSES, NNClassifierMLP.getPropDefault(NNClassifierMLP.DP_CLASSES), ...
		NNClassifierMLP.EPOCHS, NNClassifierMLP.getPropDefault(NNClassifierMLP.EPOCHS), ...
		NNClassifierMLP.BATCH, NNClassifierMLP.getPropDefault(NNClassifierMLP.BATCH), ...
		NNClassifierMLP.SHUFFLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.SHUFFLE), ...
		NNClassifierMLP.SOLVER, NNClassifierMLP.getPropDefault(NNClassifierMLP.SOLVER), ...
		NNClassifierMLP.MODEL, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.INPUTS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGETS, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TRAIN, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.VERBOSE, NNClassifierMLP.getPropDefault(NNClassifierMLP.VERBOSE), ...
		NNClassifierMLP.PLOT_TRAINING, NNClassifierMLP.getPropDefault(NNClassifierMLP.PLOT_TRAINING), ...
		NNClassifierMLP.PREDICT, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.TARGET_CLASSES, NNClassifierMLP.getNoValue(), ...
		NNClassifierMLP.LAYERS, NNClassifierMLP.getPropDefault(NNClassifierMLP.LAYERS), ...
		NNClassifierMLP.WAITBAR, NNClassifierMLP.getPropDefault(NNClassifierMLP.WAITBAR), ...
		NNClassifierMLP.INTERRUPTIBLE, NNClassifierMLP.getPropDefault(NNClassifierMLP.INTERRUPTIBLE), ...
		NNClassifierMLP.FEATURE_IMPORTANCE, NNClassifierMLP.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(nn);
	[nn_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(nn_dec ~= nn, ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		'NNClassifierMLP.encodeJSON() or NNClassifierMLP.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNClassifierMLP.getPropFormat(prop), num2cell(NNClassifierMLP.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNClassifierMLP.getPropFormat(prop), num2cell(NNClassifierMLP.getProps())) == Format.NET)
		assert(isequal(nn_dec, nn), ...
			[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
			'NNClassifierMLP.encodeJSON() or NNClassifierMLP.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: train the classifier with example data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% ensure the example data is generated
	if ~isfile([fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'atlas.xlsx'])
	    create_data_NN_CLA_CON_XLS() % create example files
	end
	
	% Load BrainAtlas
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'atlas.xlsx'], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Load Groups of SubjectCON
	im_gr1 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'CON_Group_1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1 = im_gr1.get('GR');
	
	im_gr2 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_CLA')) filesep 'Example data NN CLA CON XLS' filesep 'CON_Group_2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2 = im_gr2.get('GR');
	
	% create item lists of NNDataPoint_CON_CLA
	[~, group_folder_name] = fileparts(im_gr1.get('DIRECTORY'));
	it_list1 = cellfun(@(x) NNDataPoint_CON_CLA( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_CLASS', {group_folder_name}), ...
	    gr1.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	[~, group_folder_name] = fileparts(im_gr2.get('DIRECTORY'));
	it_list2 = cellfun(@(x) NNDataPoint_CON_CLA( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_CLASS', {group_folder_name}), ...
	    gr2.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	% create NNDataPoint_CON_CLA DICT items
	dp_list1 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_CON_CLA', ...
	        'IT_LIST', it_list1 ...
	        );
	
	dp_list2 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_CON_CLA', ...
	        'IT_LIST', it_list2 ...
	        );
	
	% create a NNDataset containing the NNDataPoint_CON_CLA DICT
	d1 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_CON_CLA', ...
	    'DP_DICT', dp_list1 ...
	    );
	
	d2 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_CON_CLA', ...
	    'DP_DICT', dp_list2 ...
	    );
	
	% combine the two datasets
	d = NNDatasetCombine('D_LIST', {d1, d2}).get('D');
	
	nn = NNClassifierMLP('D', d, 'LAYERS', [10 10 10]);
	trained_model = nn.get('MODEL');
	
	% Check whether the number of fully-connected layer matches (excluding Dense_output layer)
	assert(length(nn.get('LAYERS')) == sum(contains({trained_model.Layers.Name}, 'Dense')) - 1, ...
	    [BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
	    'NNClassifierMLP does not construct the layers correctly. The number of the inputs should be the same as the length of dense layers the property.' ...
	    )
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNClassifierMLP:' BRAPH2.FAIL_TEST], ...
		[' When testing NNClassifierMLP no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

