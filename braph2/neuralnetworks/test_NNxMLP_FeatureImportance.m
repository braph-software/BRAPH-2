%TEST_NNXMLP_FEATUREIMPORTANCE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	nnfi = NNxMLP_FeatureImportance();
	 
	% get('ELCLASS')
	if isa(NNxMLP_FeatureImportance, 'ConcreteElement')
		assert(strcmp(NNxMLP_FeatureImportance().get('ELCLASS'), 'NNxMLP_FeatureImportance'), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance().get(''ELCLASS'') should return ''NNxMLP_FeatureImportance''.')
	end
	 
	% getClass
	assert(strcmp(NNxMLP_FeatureImportance.getClass(), 'NNxMLP_FeatureImportance'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.getClass() should return ''NNxMLP_FeatureImportance''.')
	assert(strcmp(nnfi.getClass(), 'NNxMLP_FeatureImportance'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'nnfi.getClass() should return ''NNxMLP_FeatureImportance''.')
	assert(strcmp(Element.getClass(nnfi), 'NNxMLP_FeatureImportance'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nnfi) should return ''NNxMLP_FeatureImportance''.')
	assert(strcmp(Element.getClass('NNxMLP_FeatureImportance'), 'NNxMLP_FeatureImportance'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNxMLP_FeatureImportance'') should return ''NNxMLP_FeatureImportance''.')
	 
	% getSubclasses()
	assert(isequal(NNxMLP_FeatureImportance.getSubclasses(), subclasses('NNxMLP_FeatureImportance', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.getSubclasses() should return the same result as subclasses(''NNxMLP_FeatureImportance'', [], [], true).')
	assert(isequal(nnfi.getSubclasses(), subclasses('NNxMLP_FeatureImportance', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNxMLP_FeatureImportance'', [], [], true).')
	assert(isequal(Element.getSubclasses(nnfi), subclasses('NNxMLP_FeatureImportance', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nnfi) should return the same result as subclasses(''NNxMLP_FeatureImportance'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNxMLP_FeatureImportance'), subclasses('NNxMLP_FeatureImportance', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNxMLP_FeatureImportance'') should return the same result as subclasses(''NNxMLP_FeatureImportance'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(NNxMLP_FeatureImportance.getProps(), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(nnfi.getProps(), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'nnfi.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(Element.getProps(nnfi), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfi) should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(Element.getProps('NNxMLP_FeatureImportance'), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNxMLP_FeatureImportance'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNxMLP_FeatureImportance.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.getProps(category) does not work.')
	tmp = cellfun(@(category) nnfi.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'nnfi.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nnfi, category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfi, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNxMLP_FeatureImportance', category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportance.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportance.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNxMLP_FeatureImportance'', category) does not work.')
	 
	% getPropNumber()
	assert(NNxMLP_FeatureImportance.getPropNumber() == length(NNxMLP_FeatureImportance.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.getPropNumber() should return the number of properties.')
	assert(nnfi.getPropNumber() == length(NNxMLP_FeatureImportance.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'nnfi.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nnfi) == length(NNxMLP_FeatureImportance.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfi) should return the number of properties.')
	assert(Element.getPropNumber('NNxMLP_FeatureImportance') == length(NNxMLP_FeatureImportance.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNxMLP_FeatureImportance'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNxMLP_FeatureImportance.getPropNumber(category), categories)) == NNxMLP_FeatureImportance.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nnfi.getPropNumber(category), categories)) == NNxMLP_FeatureImportance.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'nnfi.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nnfi, category), categories)) == NNxMLP_FeatureImportance.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfi, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNxMLP_FeatureImportance', category), categories)) == NNxMLP_FeatureImportance.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNxMLP_FeatureImportance'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNxMLP_FeatureImportance.existsProp(NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.existsProp(prop) does not work.')
	assert(~nnfi.existsProp(NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'nnfi.existsProp(prop) does not work.')
	assert(~Element.existsProp(nnfi, NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nnfi, prop) does not work.')
	assert(~Element.existsProp('NNxMLP_FeatureImportance', NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNxMLP_FeatureImportance'', prop) does not work.')
	 
	assert_with_error('NNxMLP_FeatureImportance.existsProp(NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], nnfi)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], nnfi)
	assert_with_error('Element.existsProp(''NNxMLP_FeatureImportance'', NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		assert(NNxMLP_FeatureImportance.existsProp(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.existsProp(prop) does not work.')
		assert(nnfi.existsProp(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.existsProp(prop) does not work.')
		assert(Element.existsProp(nnfi, prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nnfi, prop) does not work.')
		assert(Element.existsProp('NNxMLP_FeatureImportance', prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNxMLP_FeatureImportance'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNxMLP_FeatureImportance.existsTag(''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.existsTag(tag) does not work.')
	assert(~nnfi.existsTag(''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'nnfi.existsTag(tag) does not work.')
	assert(~Element.existsTag(nnfi, ''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nnfi, tag) does not work.')
	assert(~Element.existsTag('NNxMLP_FeatureImportance', ''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNxMLP_FeatureImportance'', tag) does not work.')
	 
	assert_with_error('NNxMLP_FeatureImportance.existsTag('''')', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], nnfi)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], nnfi)
	assert_with_error('Element.existsTag(''NNxMLP_FeatureImportance'', '''')', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
		assert(NNxMLP_FeatureImportance.existsTag(tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.existsTag(tag) does not work.')
		assert(nnfi.existsTag(tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.existsTag(tag) does not work.')
		assert(Element.existsTag(nnfi, tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nnfi, tga) does not work.')
		assert(Element.existsTag('NNxMLP_FeatureImportance', tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNxMLP_FeatureImportance'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		assert(NNxMLP_FeatureImportance.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropProp(prop) does not work.')
		assert(nnfi.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nnfi, prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfi, prop) does not work.')
		assert(Element.getPropProp('NNxMLP_FeatureImportance', prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNxMLP_FeatureImportance'', prop) does not work.')
	 
		tag = nnfi.getPropTag(prop);
		assert(NNxMLP_FeatureImportance.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropProp(tag) does not work.')
		assert(nnfi.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nnfi, tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfi, tag) does not work.')
		assert(Element.getPropProp('NNxMLP_FeatureImportance', prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNxMLP_FeatureImportance'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		assert(strcmp(NNxMLP_FeatureImportance.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropTag(prop) does not work.')
		assert(strcmp(nnfi.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nnfi, prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfi, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNxMLP_FeatureImportance', prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNxMLP_FeatureImportance'', prop) does not work.')
	 
		assert(strcmp(NNxMLP_FeatureImportance.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropTag(tag) does not work.')
		assert(strcmp(nnfi.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nnfi, tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfi, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNxMLP_FeatureImportance', prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNxMLP_FeatureImportance'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		assert(Category.existsCategory(NNxMLP_FeatureImportance.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nnfi.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfi, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfi, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfi, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNxMLP_FeatureImportance'', prop) does not work.')
	 
		assert(Category.existsCategory(NNxMLP_FeatureImportance.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nnfi.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfi, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfi, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfi, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNxMLP_FeatureImportance'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		assert(Format.existsFormat(NNxMLP_FeatureImportance.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nnfi.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfi, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfi, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfi, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNxMLP_FeatureImportance'', prop) does not work.')
	 
		assert(Format.existsFormat(NNxMLP_FeatureImportance.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nnfi.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfi, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfi, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfi, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNxMLP_FeatureImportance'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		assert(ischar(NNxMLP_FeatureImportance.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropDescription(prop) does not work.')
		assert(ischar(nnfi.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfi, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfi, prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfi, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNxMLP_FeatureImportance'', prop) does not work.')
	 
		assert(ischar(NNxMLP_FeatureImportance.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.getPropDescription(tag) does not work.')
		assert(ischar(nnfi.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfi, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfi, tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfi, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNxMLP_FeatureImportance'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		settings = NNxMLP_FeatureImportance.getPropSettings(prop);
		settings = nnfi.getPropSettings(prop);
		settings = Element.getPropSettings(nnfi, prop);
		settings = Element.getPropSettings('NNxMLP_FeatureImportance', prop);
	 
		settings = NNxMLP_FeatureImportance.getPropSettings(tag);
		settings = nnfi.getPropSettings(tag);
		settings = Element.getPropSettings(nnfi, tag);
		settings = Element.getPropSettings('NNxMLP_FeatureImportance', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		default = NNxMLP_FeatureImportance.getPropDefault(prop);
		default = nnfi.getPropDefault(prop);
		default = Element.getPropDefault(nnfi, prop);
		default = Element.getPropDefault('NNxMLP_FeatureImportance', prop);
	 
		default = NNxMLP_FeatureImportance.getPropDefault(tag);
		default = nnfi.getPropDefault(tag);
		default = Element.getPropDefault(nnfi, tag);
		default = Element.getPropDefault('NNxMLP_FeatureImportance', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		conditioned_default = NNxMLP_FeatureImportance.getPropDefaultConditioned(prop);
		conditioned_default = nnfi.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nnfi, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNxMLP_FeatureImportance', prop);
	 
		conditioned_default = NNxMLP_FeatureImportance.getPropDefaultConditioned(tag);
		conditioned_default = nnfi.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nnfi, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNxMLP_FeatureImportance', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		tag = nnfi.getPropTag(prop);
	 
		assert(~NNxMLP_FeatureImportance.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.checkProp(prop, value) does not work.')
		assert(~nnfi.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nnfi, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfi, prop, value) does not work.')
		assert(~Element.checkProp('NNxMLP_FeatureImportance', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportance'', prop, value) does not work.')
	 
		assert_with_error('NNxMLP_FeatureImportance.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], prop, nnfi)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], prop, nnfi)
		assert_with_error('Element.checkProp(''NNxMLP_FeatureImportance'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNxMLP_FeatureImportance.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.checkProp(tag, value) does not work.')
		assert(~nnfi.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nnfi, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfi, tag, value) does not work.')
		assert(~Element.checkProp('NNxMLP_FeatureImportance', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportance'', tag, value) does not work.')
	 
		assert_with_error('NNxMLP_FeatureImportance.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], tag, nnfi)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], tag, nnfi)
		assert_with_error('Element.checkProp(''NNxMLP_FeatureImportance'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNxMLP_FeatureImportance.checkProp(prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.checkProp(prop, <conditioned default value>) does not work.')
		assert(nnfi.checkProp(prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfi, prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfi, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNxMLP_FeatureImportance', prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportance'', prop, <conditioned default value>) does not work.')
	 
		assert(NNxMLP_FeatureImportance.checkProp(tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.checkProp(tag, <conditioned default value>) does not work.')
		assert(nnfi.checkProp(tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'nnfi.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfi, tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfi, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNxMLP_FeatureImportance', tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportance, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportance'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.TEMPLATE), ...
		NNxMLP_FeatureImportance.ID, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.ID), ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.D), ...
		NNxMLP_FeatureImportance.NN, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NN), ...
		NNxMLP_FeatureImportance.P, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.P), ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.SIG_LEVEL), ...
		NNxMLP_FeatureImportance.WAITBAR, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.WAITBAR), ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
                prop
				assert( ...
					nnfi.getr(prop) == NNxMLP_FeatureImportance.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportance.getCategoryName(NNxMLP_FeatureImportance.getPropCategory(prop)) ', NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportance.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfi.getr(TAG) == NNxMLP_FeatureImportance.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportance.getCategoryName(NNxMLP_FeatureImportance.getPropCategory(prop)) ', NNxMLP_FeatureImportance.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportance.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(nnfi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfi.getPropSettings(prop))
					assert( ...
						nnfi.checkFormat(nnfi.getPropFormat(prop), nnfi.get(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfi.checkFormat(nnfi.getPropFormat(prop), nnfi.get(prop), nnfi.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					nnfi.getr(prop) == NNxMLP_FeatureImportance.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportance.getCategoryName(NNxMLP_FeatureImportance.getPropCategory(prop)) ', NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportance.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfi.getr(TAG) == NNxMLP_FeatureImportance.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportance.getCategoryName(NNxMLP_FeatureImportance.getPropCategory(prop)) ', NNxMLP_FeatureImportance.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportance.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportance']);
				assert( ...
					~isa(nnfi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfi.getPropSettings(prop))
					assert( ...
						nnfi.checkFormat(nnfi.getPropFormat(prop), nnfi.get(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfi.checkFormat(nnfi.getPropFormat(prop), nnfi.get(prop), nnfi.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(nnfi.getr(prop), NNxMLP_FeatureImportance.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNxMLP_FeatureImportance.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNxMLP_FeatureImportance.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(nnfi.getr(TAG), NNxMLP_FeatureImportance.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNxMLP_FeatureImportance.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNxMLP_FeatureImportance.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.TEMPLATE), ...
		NNxMLP_FeatureImportance.ID, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.ID), ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.D), ...
		NNxMLP_FeatureImportance.NN, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NN), ...
		NNxMLP_FeatureImportance.P, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.P), ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.SIG_LEVEL), ...
		NNxMLP_FeatureImportance.WAITBAR, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.WAITBAR), ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(nnfi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfi.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfi.checkFormat(nnfi.getPropFormat(prop), nnfi.getr(prop),nnfi.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportance']);
				assert( ...
					~isa(nnfi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportance']);
	% 			assert( ...
	% 				~isa(nnfi.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportance.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(nnfi.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				nnfi.checkFormat(nnfi.getPropFormat(prop), nnfi.getr(prop),nnfi.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportance.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportance']);
				assert( ...
					~isa(nnfi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(nnfi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfi.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfi.checkFormat(nnfi.getPropFormat(prop), nnfi.getr(prop),nnfi.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if nnfi.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportance');
					delete(ancestor(nnfi.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNxMLP_FeatureImportance.getProps(Category.RESULT))
		for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNxMLP_FeatureImportance.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						nnfi.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~nnfi.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi = NNxMLP_FeatureImportance();
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		assert( ...
			~nnfi.isLocked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportance.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nnfi.isLocked(TAG), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportance.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nnfi.lock()
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nnfi.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nnfi.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi = NNxMLP_FeatureImportance();
	 
	warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportance');
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		nnfi.lock(prop)
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nnfi.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nnfi.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi = NNxMLP_FeatureImportance();
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		assert( ...
			nnfi.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportance.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nnfi.isChecked(TAG), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportance.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nnfi.unchecked()
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		assert( ...
			~nnfi.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportance.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nnfi.checked()
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		assert( ...
			nnfi.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportance.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNxMLP_FeatureImportance
	nnfi_0 = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.TEMPLATE), ...
		NNxMLP_FeatureImportance.ID, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.ID), ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.D), ...
		NNxMLP_FeatureImportance.NN, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NN), ...
		NNxMLP_FeatureImportance.P, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.P), ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.SIG_LEVEL), ...
		NNxMLP_FeatureImportance.WAITBAR, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.WAITBAR), ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	% NNxMLP_FeatureImportance with 1st callbacks
	nnfi_1 = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, nnfi_0.getCallback(4), ..., ...
		NNxMLP_FeatureImportance.ID, nnfi_0.getCallback(5), ..., ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, nnfi_0.getCallback(9), ..., ...
		NNxMLP_FeatureImportance.NN, nnfi_0.getCallback(10), ..., ...
		NNxMLP_FeatureImportance.P, nnfi_0.getCallback(11), ..., ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, nnfi_0.getCallback(13), ..., ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, nnfi_0.getCallback(14), ..., ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, nnfi_0.getCallback(16), ..., ...
		NNxMLP_FeatureImportance.WAITBAR, nnfi_0.getCallback(17), ..., ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, nnfi_0.getCallback(18), ..., ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	prop_number = NNxMLP_FeatureImportance.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfi_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfi_1.get(prop), nnfi_0.get(prop)) && ~isa(nnfi_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfi_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNxMLP_FeatureImportance with 2nd callbacks
	nnfi_2 = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, nnfi_1.getCallback(4), ..., ...
		NNxMLP_FeatureImportance.ID, nnfi_1.getCallback(5), ..., ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, nnfi_1.getCallback(9), ..., ...
		NNxMLP_FeatureImportance.NN, nnfi_1.getCallback(10), ..., ...
		NNxMLP_FeatureImportance.P, nnfi_1.getCallback(11), ..., ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, nnfi_1.getCallback(13), ..., ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, nnfi_1.getCallback(14), ..., ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, nnfi_1.getCallback(16), ..., ...
		NNxMLP_FeatureImportance.WAITBAR, nnfi_1.getCallback(17), ..., ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, nnfi_1.getCallback(18), ..., ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	prop_number = NNxMLP_FeatureImportance.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfi_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfi_2.get(prop), nnfi_0.get(prop)) && ~isa(nnfi_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfi_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNxMLP_FeatureImportance with 3rd callbacks
	nnfi_3 = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, nnfi_2.getCallback(4), ..., ...
		NNxMLP_FeatureImportance.ID, nnfi_2.getCallback(5), ..., ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, nnfi_2.getCallback(9), ..., ...
		NNxMLP_FeatureImportance.NN, nnfi_2.getCallback(10), ..., ...
		NNxMLP_FeatureImportance.P, nnfi_2.getCallback(11), ..., ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, nnfi_2.getCallback(13), ..., ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, nnfi_2.getCallback(14), ..., ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, nnfi_2.getCallback(16), ..., ...
		NNxMLP_FeatureImportance.WAITBAR, nnfi_2.getCallback(17), ..., ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, nnfi_2.getCallback(18), ..., ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	prop_number = NNxMLP_FeatureImportance.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfi_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfi_3.get(prop), nnfi_0.get(prop)) && ~isa(nnfi_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfi_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	nnfi = NNxMLP_FeatureImportance();
	 
	nnfi_copy = nnfi.copy();
	 
	assert(nnfi_copy ~= nnfi, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(nnfi_copy, nnfi), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		value = nnfi.getr(prop);
		value_copy = nnfi_copy.getr(prop);
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportance.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportance.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportance.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					nnfi_copy.isLocked(prop) == nnfi.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportance.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfi_copy.isChecked(prop) == nnfi.isChecked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportance.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfi_copy.getPropSeed(prop) == nnfi.getPropSeed(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportance.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	nnfi = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.TEMPLATE), ...
		NNxMLP_FeatureImportance.ID, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.ID), ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.D), ...
		NNxMLP_FeatureImportance.NN, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NN), ...
		NNxMLP_FeatureImportance.P, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.P), ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.SIG_LEVEL), ...
		NNxMLP_FeatureImportance.WAITBAR, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.WAITBAR), ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		if NNxMLP_FeatureImportance.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportance']);
			% nnfi.memorize(prop);
			% warning(warning_backup)
		elseif NNxMLP_FeatureImportance.getPropCategory(prop) == Category.EVANESCENT && nnfi.getPropFormat(prop) == Format.HANDLE
			nnfi.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportance');
			delete(ancestor(nnfi.get(prop), 'figure'))
			warning(warning_backup)
		else
			nnfi.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	nnfi_copy = nnfi.copy();
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		value = nnfi.getr(prop);
		value_copy = nnfi_copy.getr(prop);
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportance.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportance.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportance.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						nnfi_copy.isLocked(prop) == nnfi.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfi_copy.isChecked(prop) == nnfi.isChecked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfi_copy.getPropSeed(prop) == nnfi.getPropSeed(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	nnfi_0 = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.TEMPLATE), ...
		NNxMLP_FeatureImportance.ID, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.ID), ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.D), ...
		NNxMLP_FeatureImportance.NN, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NN), ...
		NNxMLP_FeatureImportance.P, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.P), ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.SIG_LEVEL), ...
		NNxMLP_FeatureImportance.WAITBAR, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.WAITBAR), ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	nnfi = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, nnfi_0.getCallback(4), ..., ...
		NNxMLP_FeatureImportance.ID, nnfi_0.getCallback(5), ..., ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, nnfi_0.getCallback(9), ..., ...
		NNxMLP_FeatureImportance.NN, nnfi_0.getCallback(10), ..., ...
		NNxMLP_FeatureImportance.P, nnfi_0.getCallback(11), ..., ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, nnfi_0.getCallback(13), ..., ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, nnfi_0.getCallback(14), ..., ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, nnfi_0.getCallback(16), ..., ...
		NNxMLP_FeatureImportance.WAITBAR, nnfi_0.getCallback(17), ..., ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, nnfi_0.getCallback(18), ..., ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	nnfi_copy = nnfi.copy();
	nnfi_0_copy = nnfi_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
		value = nnfi.getr(prop);
		value_copy = nnfi_copy.getr(prop);
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportance.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportance.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportance.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == nnfi_0.getCallback(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The callback should be obtained from NNxMLP_FeatureImportance.getCallback().' ...
						)
					assert( ...
						value_copy == nnfi_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The callback should be obtained from NNxMLP_FeatureImportance.getCallback().' ...
						)
				end
	 
					assert( ...
						nnfi_copy.isLocked(prop) == nnfi.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfi_copy.isChecked(prop) == nnfi.isChecked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfi_copy.getPropSeed(prop) == nnfi.getPropSeed(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi_template = NNxMLP_FeatureImportance();
	nnfi = NNxMLP_FeatureImportance('TEMPLATE', nnfi_template);
	 
	for prop = 1:1:NNxMLP_FeatureImportance.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportance.getPropTag(prop));
		switch NNxMLP_FeatureImportance.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNxMLP_FeatureImportance.TEMPLATE
					assert( ...
						isa(nnfi.getr(prop), 'NNxMLP_FeatureImportance'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance TEMPLATE does not work. NNxMLP_FeatureImportance.getr(''TEMPLATE'') should be a NNxMLP_FeatureImportance element.' ...
						)
					assert( ...
						isa(nnfi_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportance TEMPLATE does not work. NNxMLP_FeatureImportance_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(nnfi.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance TEMPLATE does not work. NNxMLP_FeatureImportance.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						nnfi.getr(prop).get('EL') == nnfi_template && nnfi.getr(prop).get('PROP') == prop && strcmp(nnfi.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance TEMPLATE does not work. NNxMLP_FeatureImportance.getr(' TAG ') should be a Callback to nnfi_template.' TAG '.'] ...
						)
					assert( ...
						isa(nnfi_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportance TEMPLATE does not work. NNxMLP_FeatureImportance_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(nnfi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance TEMPLATE does not work. NNxMLP_FeatureImportance.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(nnfi_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportance TEMPLATE does not work. NNxMLP_FeatureImportance_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.TEMPLATE), ...
		NNxMLP_FeatureImportance.ID, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.ID), ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.D), ...
		NNxMLP_FeatureImportance.NN, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NN), ...
		NNxMLP_FeatureImportance.P, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.P), ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.SIG_LEVEL), ...
		NNxMLP_FeatureImportance.WAITBAR, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.WAITBAR), ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnxmlp_featureimportance_to_be_erased.b2'];
	 
	Element.save(nnfi, filename)
	 
	nnfi_loaded = Element.load(filename);
	 
	assert( ...
		isequal(nnfi.copy(), nnfi_loaded), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.save(nnfi) and/or NNxMLP_FeatureImportance.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfi = NNxMLP_FeatureImportance( ...
		NNxMLP_FeatureImportance.ELCLASS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.NAME, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.DESCRIPTION, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.TEMPLATE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.TEMPLATE), ...
		NNxMLP_FeatureImportance.ID, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.ID), ...
		NNxMLP_FeatureImportance.LABEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.LABEL), ...
		NNxMLP_FeatureImportance.NOTES, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NOTES), ...
		NNxMLP_FeatureImportance.TOSTRING, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.D), ...
		NNxMLP_FeatureImportance.NN, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.NN), ...
		NNxMLP_FeatureImportance.P, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.P), ...
		NNxMLP_FeatureImportance.PERM_SEEDS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.APPLY_BONFERRONI, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportance.VERBOSE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.VERBOSE), ...
		NNxMLP_FeatureImportance.SIG_LEVEL, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.SIG_LEVEL), ...
		NNxMLP_FeatureImportance.WAITBAR, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.WAITBAR), ...
		NNxMLP_FeatureImportance.INTERRUPTIBLE, NNxMLP_FeatureImportance.getPropDefault(NNxMLP_FeatureImportance.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportance.COMP_FEATURE_INDICES, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_INPUTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.D_SHUFFLED, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.BASELINE_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.STAT_SIG_MASK, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.MAP_TO_CELL, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.COUNT_ELEMENTS, NNxMLP_FeatureImportance.getNoValue(), ...
		NNxMLP_FeatureImportance.FLATTEN_CELL, NNxMLP_FeatureImportance.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(nnfi);
	[nnfi_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(nnfi_dec ~= nnfi, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportance.encodeJSON() or NNxMLP_FeatureImportance.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNxMLP_FeatureImportance.getPropFormat(prop), num2cell(NNxMLP_FeatureImportance.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNxMLP_FeatureImportance.getPropFormat(prop), num2cell(NNxMLP_FeatureImportance.getProps())) == Format.NET)
		assert(isequal(nnfi_dec, nnfi), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportance.encodeJSON() or NNxMLP_FeatureImportance.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Test map to cell the query for simple cell array
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	target_cell = {[1 2], [3 4], [5 6 7]};
	input_vector = [1; 2; 3; 4; 5; 6; 7];
	
	flattened_cell = NNxMLP_FeatureImportance().get('FLATTEN_CELL', target_cell);
	
	assert(isequal(flattened_cell, input_vector), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not flatten the simple cell array correctly.' ...
	        )
	
	mapped_cell = NNxMLP_FeatureImportance().get('MAP_TO_CELL', input_vector, target_cell);
	
	assert(isequal(mapped_cell, target_cell), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not reshape the data to simple cell array correctly.' ...
	        )
end

%% Test 13: Test map to cell the query for nested cell array
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	target_cell = {[1 2], [3 4], [5 6 7]};
	target_cell = {target_cell};
	input_vector = [1; 2; 3; 4; 5; 6; 7];
	
	flattened_cell = NNxMLP_FeatureImportance().get('FLATTEN_CELL', target_cell);
	
	assert(isequal(flattened_cell, input_vector), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not flatten the simple cell array correctly.' ...
	        )
	
	mapped_cell = NNxMLP_FeatureImportance().get('MAP_TO_CELL', input_vector, target_cell);
	
	assert(isequal(mapped_cell, target_cell), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not reshape the data to nested cell array shape correctly.' ...
	        )
end

%% Test 14: Test map to cell the query for multiple nested cell array
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	target_cell = {{[1 2], [3 4], [5 6 7]}, {[8], [9 10]}};
	input_vector = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10];
	
	flattened_cell = NNxMLP_FeatureImportance().get('FLATTEN_CELL', target_cell);
	
	assert(isequal(flattened_cell, input_vector), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not flatten the simple cell array correctly.' ...
	        )
	
	mapped_cell = NNxMLP_FeatureImportance().get('MAP_TO_CELL', input_vector, target_cell);
	
	assert(isequal(mapped_cell, target_cell), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not reshape the data to multiple nested cell array shape correctly.' ...
	        )
end

%% Test 15: Test map to cell the query for deep nested cell array
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	target_cell = {{{[11 12]}, {[13]}}};
	input_vector = [11; 12; 13];
	
	flattened_cell = NNxMLP_FeatureImportance().get('FLATTEN_CELL', target_cell);
	
	assert(isequal(flattened_cell, input_vector), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not flatten the simple cell array correctly.' ...
	        )
	
	mapped_cell = NNxMLP_FeatureImportance().get('MAP_TO_CELL', input_vector, target_cell);
	
	assert(isequal(mapped_cell, target_cell), ...
	        [BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
	        'NNxMLP_FeatureImportance does not reshape the data to deep nested cell array shape correctly.' ...
	        )
end

%% Test 16: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportance:' BRAPH2.FAIL_TEST], ...
		[' When testing NNxMLP_FeatureImportance no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 17: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

