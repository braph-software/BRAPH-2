%TEST_NNDATAPOINT_SHUFFLED

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	dp = NNDataPoint_Shuffled();
	 
	% get('ELCLASS')
	if isa(NNDataPoint_Shuffled, 'ConcreteElement')
		assert(strcmp(NNDataPoint_Shuffled().get('ELCLASS'), 'NNDataPoint_Shuffled'), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled().get(''ELCLASS'') should return ''NNDataPoint_Shuffled''.')
	end
	 
	% getClass
	assert(strcmp(NNDataPoint_Shuffled.getClass(), 'NNDataPoint_Shuffled'), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.getClass() should return ''NNDataPoint_Shuffled''.')
	assert(strcmp(dp.getClass(), 'NNDataPoint_Shuffled'), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'dp.getClass() should return ''NNDataPoint_Shuffled''.')
	assert(strcmp(Element.getClass(dp), 'NNDataPoint_Shuffled'), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(dp) should return ''NNDataPoint_Shuffled''.')
	assert(strcmp(Element.getClass('NNDataPoint_Shuffled'), 'NNDataPoint_Shuffled'), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNDataPoint_Shuffled'') should return ''NNDataPoint_Shuffled''.')
	 
	% getSubclasses()
	assert(isequal(NNDataPoint_Shuffled.getSubclasses(), subclasses('NNDataPoint_Shuffled', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.getSubclasses() should return the same result as subclasses(''NNDataPoint_Shuffled'', [], [], true).')
	assert(isequal(dp.getSubclasses(), subclasses('NNDataPoint_Shuffled', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNDataPoint_Shuffled'', [], [], true).')
	assert(isequal(Element.getSubclasses(dp), subclasses('NNDataPoint_Shuffled', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(dp) should return the same result as subclasses(''NNDataPoint_Shuffled'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNDataPoint_Shuffled'), subclasses('NNDataPoint_Shuffled', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNDataPoint_Shuffled'') should return the same result as subclasses(''NNDataPoint_Shuffled'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(NNDataPoint_Shuffled.getProps(), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(dp.getProps(), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'dp.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(Element.getProps(dp), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dp) should return a row vector [1:1:N].')
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(Element.getProps('NNDataPoint_Shuffled'), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDataPoint_Shuffled'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNDataPoint_Shuffled.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.getProps(category) does not work.')
	tmp = cellfun(@(category) dp.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'dp.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(dp, category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dp, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNDataPoint_Shuffled', category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_Shuffled.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_Shuffled.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDataPoint_Shuffled'', category) does not work.')
	 
	% getPropNumber()
	assert(NNDataPoint_Shuffled.getPropNumber() == length(NNDataPoint_Shuffled.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.getPropNumber() should return the number of properties.')
	assert(dp.getPropNumber() == length(NNDataPoint_Shuffled.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'dp.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(dp) == length(NNDataPoint_Shuffled.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dp) should return the number of properties.')
	assert(Element.getPropNumber('NNDataPoint_Shuffled') == length(NNDataPoint_Shuffled.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDataPoint_Shuffled'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNDataPoint_Shuffled.getPropNumber(category), categories)) == NNDataPoint_Shuffled.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) dp.getPropNumber(category), categories)) == NNDataPoint_Shuffled.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'dp.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(dp, category), categories)) == NNDataPoint_Shuffled.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dp, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNDataPoint_Shuffled', category), categories)) == NNDataPoint_Shuffled.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDataPoint_Shuffled'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNDataPoint_Shuffled.existsProp(NaN), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.existsProp(prop) does not work.')
	assert(~dp.existsProp(NaN), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'dp.existsProp(prop) does not work.')
	assert(~Element.existsProp(dp, NaN), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(dp, prop) does not work.')
	assert(~Element.existsProp('NNDataPoint_Shuffled', NaN), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNDataPoint_Shuffled'', prop) does not work.')
	 
	assert_with_error('NNDataPoint_Shuffled.existsProp(NaN)', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsProp(''NNDataPoint_Shuffled'', NaN)', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		assert(NNDataPoint_Shuffled.existsProp(prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.existsProp(prop) does not work.')
		assert(dp.existsProp(prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.existsProp(prop) does not work.')
		assert(Element.existsProp(dp, prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(dp, prop) does not work.')
		assert(Element.existsProp('NNDataPoint_Shuffled', prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNDataPoint_Shuffled'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNDataPoint_Shuffled.existsTag(''), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.existsTag(tag) does not work.')
	assert(~dp.existsTag(''), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'dp.existsTag(tag) does not work.')
	assert(~Element.existsTag(dp, ''), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(dp, tag) does not work.')
	assert(~Element.existsTag('NNDataPoint_Shuffled', ''), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNDataPoint_Shuffled'', tag) does not work.')
	 
	assert_with_error('NNDataPoint_Shuffled.existsTag('''')', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsTag(''NNDataPoint_Shuffled'', '''')', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
		assert(NNDataPoint_Shuffled.existsTag(tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.existsTag(tag) does not work.')
		assert(dp.existsTag(tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.existsTag(tag) does not work.')
		assert(Element.existsTag(dp, tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(dp, tga) does not work.')
		assert(Element.existsTag('NNDataPoint_Shuffled', tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNDataPoint_Shuffled'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		assert(NNDataPoint_Shuffled.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropProp(prop) does not work.')
		assert(dp.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropProp(prop) does not work.')
		assert(Element.getPropProp(dp, prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dp, prop) does not work.')
		assert(Element.getPropProp('NNDataPoint_Shuffled', prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDataPoint_Shuffled'', prop) does not work.')
	 
		tag = dp.getPropTag(prop);
		assert(NNDataPoint_Shuffled.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropProp(tag) does not work.')
		assert(dp.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropProp(tag) does not work.')
		assert(Element.getPropProp(dp, tag) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dp, tag) does not work.')
		assert(Element.getPropProp('NNDataPoint_Shuffled', prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDataPoint_Shuffled'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(strcmp(NNDataPoint_Shuffled.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropTag(prop) does not work.')
		assert(strcmp(dp.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(dp, prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dp, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNDataPoint_Shuffled', prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDataPoint_Shuffled'', prop) does not work.')
	 
		assert(strcmp(NNDataPoint_Shuffled.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropTag(tag) does not work.')
		assert(strcmp(dp.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(dp, tag), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dp, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNDataPoint_Shuffled', prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDataPoint_Shuffled'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(Category.existsCategory(NNDataPoint_Shuffled.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(dp.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dp, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDataPoint_Shuffled'', prop) does not work.')
	 
		assert(Category.existsCategory(NNDataPoint_Shuffled.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(dp.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dp, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDataPoint_Shuffled'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(Format.existsFormat(NNDataPoint_Shuffled.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(dp.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dp, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDataPoint_Shuffled'', prop) does not work.')
	 
		assert(Format.existsFormat(NNDataPoint_Shuffled.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(dp.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dp, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDataPoint_Shuffled'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(ischar(NNDataPoint_Shuffled.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropDescription(prop) does not work.')
		assert(ischar(dp.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dp, prop) does not work.')
		assert(ischar(Element.getPropDescription(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDataPoint_Shuffled'', prop) does not work.')
	 
		assert(ischar(NNDataPoint_Shuffled.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.getPropDescription(tag) does not work.')
		assert(ischar(dp.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dp, tag) does not work.')
		assert(ischar(Element.getPropDescription(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDataPoint_Shuffled'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		settings = NNDataPoint_Shuffled.getPropSettings(prop);
		settings = dp.getPropSettings(prop);
		settings = Element.getPropSettings(dp, prop);
		settings = Element.getPropSettings('NNDataPoint_Shuffled', prop);
	 
		settings = NNDataPoint_Shuffled.getPropSettings(tag);
		settings = dp.getPropSettings(tag);
		settings = Element.getPropSettings(dp, tag);
		settings = Element.getPropSettings('NNDataPoint_Shuffled', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		default = NNDataPoint_Shuffled.getPropDefault(prop);
		default = dp.getPropDefault(prop);
		default = Element.getPropDefault(dp, prop);
		default = Element.getPropDefault('NNDataPoint_Shuffled', prop);
	 
		default = NNDataPoint_Shuffled.getPropDefault(tag);
		default = dp.getPropDefault(tag);
		default = Element.getPropDefault(dp, tag);
		default = Element.getPropDefault('NNDataPoint_Shuffled', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		conditioned_default = NNDataPoint_Shuffled.getPropDefaultConditioned(prop);
		conditioned_default = dp.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(dp, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNDataPoint_Shuffled', prop);
	 
		conditioned_default = NNDataPoint_Shuffled.getPropDefaultConditioned(tag);
		conditioned_default = dp.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(dp, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNDataPoint_Shuffled', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(~NNDataPoint_Shuffled.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.checkProp(prop, value) does not work.')
		assert(~dp.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(dp, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, prop, value) does not work.')
		assert(~Element.checkProp('NNDataPoint_Shuffled', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_Shuffled'', prop, value) does not work.')
	 
		assert_with_error('NNDataPoint_Shuffled.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], prop, dp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], prop, dp)
		assert_with_error('Element.checkProp(''NNDataPoint_Shuffled'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNDataPoint_Shuffled.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.checkProp(tag, value) does not work.')
		assert(~dp.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(dp, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, tag, value) does not work.')
		assert(~Element.checkProp('NNDataPoint_Shuffled', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_Shuffled'', tag, value) does not work.')
	 
		assert_with_error('NNDataPoint_Shuffled.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], tag, dp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], tag, dp)
		assert_with_error('Element.checkProp(''NNDataPoint_Shuffled'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNDataPoint_Shuffled.checkProp(prop, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.checkProp(prop, <conditioned default value>) does not work.')
		assert(dp.checkProp(prop, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(dp, prop, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDataPoint_Shuffled', prop, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_Shuffled'', prop, <conditioned default value>) does not work.')
	 
		assert(NNDataPoint_Shuffled.checkProp(tag, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.checkProp(tag, <conditioned default value>) does not work.')
		assert(dp.checkProp(tag, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(dp, tag, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDataPoint_Shuffled', tag, Element.getPropDefaultConditioned(NNDataPoint_Shuffled, prop)), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_Shuffled'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.TEMPLATE), ...
		NNDataPoint_Shuffled.ID, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.ID), ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.SHUFFLED_INPUT) ...
		);
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					dp.getr(prop) == NNDataPoint_Shuffled.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_Shuffled.getCategoryName(NNDataPoint_Shuffled.getPropCategory(prop)) ', NNDataPoint_Shuffled.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_Shuffled.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dp.getr(TAG) == NNDataPoint_Shuffled.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_Shuffled.getCategoryName(NNDataPoint_Shuffled.getPropCategory(prop)) ', NNDataPoint_Shuffled.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_Shuffled.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dp.getPropSettings(prop))
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop)), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop), dp.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					dp.getr(prop) == NNDataPoint_Shuffled.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_Shuffled.getCategoryName(NNDataPoint_Shuffled.getPropCategory(prop)) ', NNDataPoint_Shuffled.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_Shuffled.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dp.getr(TAG) == NNDataPoint_Shuffled.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_Shuffled.getCategoryName(NNDataPoint_Shuffled.getPropCategory(prop)) ', NNDataPoint_Shuffled.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_Shuffled.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_Shuffled']);
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dp.getPropSettings(prop))
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop)), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop), dp.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(dp.getr(prop), NNDataPoint_Shuffled.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNDataPoint_Shuffled.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDataPoint_Shuffled.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(dp.getr(TAG), NNDataPoint_Shuffled.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNDataPoint_Shuffled.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDataPoint_Shuffled.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.TEMPLATE), ...
		NNDataPoint_Shuffled.ID, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.ID), ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.SHUFFLED_INPUT) ...
		);
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dp.checkFormat(dp.getPropFormat(prop), dp.getr(prop),dp.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_Shuffled']);
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_Shuffled']);
	% 			assert( ...
	% 				~isa(dp.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataPoint_Shuffled.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(dp.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataPoint_Shuffled.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				dp.checkFormat(dp.getPropFormat(prop), dp.getr(prop),dp.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataPoint_Shuffled.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_Shuffled']);
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dp.checkFormat(dp.getPropFormat(prop), dp.getr(prop),dp.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if dp.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNDataPoint_Shuffled');
					delete(ancestor(dp.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNDataPoint_Shuffled.getProps(Category.RESULT))
		for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNDataPoint_Shuffled.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_Shuffled();
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		assert( ...
			~dp.isLocked(prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_Shuffled.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~dp.isLocked(TAG), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_Shuffled.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	dp.lock()
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_Shuffled();
	 
	warning_backup = warning('off', 'BRAPH2:NNDataPoint_Shuffled');
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		dp.lock(prop)
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_Shuffled();
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		assert( ...
			dp.isChecked(prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_Shuffled.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			dp.isChecked(TAG), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_Shuffled.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	dp.unchecked()
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		assert( ...
			~dp.isChecked(prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_Shuffled.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	dp.checked()
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		assert( ...
			dp.isChecked(prop), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_Shuffled.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNDataPoint_Shuffled
	dp_0 = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.TEMPLATE), ...
		NNDataPoint_Shuffled.ID, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.ID), ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.SHUFFLED_INPUT) ...
		);
	 
	% NNDataPoint_Shuffled with 1st callbacks
	dp_1 = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, dp_0.getCallback(4), ..., ...
		NNDataPoint_Shuffled.ID, dp_0.getCallback(5), ..., ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, dp_0.getCallback(11) ... ...
		);
	 
	prop_number = NNDataPoint_Shuffled.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dp_1.get(prop), dp_0.get(prop)) && ~isa(dp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDataPoint_Shuffled with 2nd callbacks
	dp_2 = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, dp_1.getCallback(4), ..., ...
		NNDataPoint_Shuffled.ID, dp_1.getCallback(5), ..., ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, dp_1.getCallback(11) ... ...
		);
	 
	prop_number = NNDataPoint_Shuffled.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dp_2.get(prop), dp_0.get(prop)) && ~isa(dp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDataPoint_Shuffled with 3rd callbacks
	dp_3 = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, dp_2.getCallback(4), ..., ...
		NNDataPoint_Shuffled.ID, dp_2.getCallback(5), ..., ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, dp_2.getCallback(11) ... ...
		);
	 
	prop_number = NNDataPoint_Shuffled.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dp_3.get(prop), dp_0.get(prop)) && ~isa(dp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	dp = NNDataPoint_Shuffled();
	 
	dp_copy = dp.copy();
	 
	assert(dp_copy ~= dp, ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(dp_copy, dp), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		value = dp.getr(prop);
		value_copy = dp_copy.getr(prop);
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_Shuffled.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_Shuffled.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_Shuffled.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					dp_copy.isLocked(prop) == dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_Shuffled.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dp_copy.isChecked(prop) == dp.isChecked(prop), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_Shuffled.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dp_copy.getPropSeed(prop) == dp.getPropSeed(prop), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_Shuffled.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	dp = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.TEMPLATE), ...
		NNDataPoint_Shuffled.ID, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.ID), ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.SHUFFLED_INPUT) ...
		);
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		if NNDataPoint_Shuffled.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_Shuffled']);
			% dp.memorize(prop);
			% warning(warning_backup)
		elseif NNDataPoint_Shuffled.getPropCategory(prop) == Category.EVANESCENT && dp.getPropFormat(prop) == Format.HANDLE
			dp.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNDataPoint_Shuffled');
			delete(ancestor(dp.get(prop), 'figure'))
			warning(warning_backup)
		else
			dp.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	dp_copy = dp.copy();
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		value = dp.getr(prop);
		value_copy = dp_copy.getr(prop);
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_Shuffled.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_Shuffled.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_Shuffled.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						dp_copy.isLocked(prop) == dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.isChecked(prop) == dp.isChecked(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.getPropSeed(prop) == dp.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	dp_0 = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.TEMPLATE), ...
		NNDataPoint_Shuffled.ID, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.ID), ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.SHUFFLED_INPUT) ...
		);
	 
	dp = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, dp_0.getCallback(4), ..., ...
		NNDataPoint_Shuffled.ID, dp_0.getCallback(5), ..., ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, dp_0.getCallback(11) ... ...
		);
	 
	dp_copy = dp.copy();
	dp_0_copy = dp_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
		value = dp.getr(prop);
		value_copy = dp_copy.getr(prop);
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_Shuffled.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_Shuffled.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_Shuffled.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == dp_0.getCallback(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The callback should be obtained from NNDataPoint_Shuffled.getCallback().' ...
						)
					assert( ...
						value_copy == dp_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The callback should be obtained from NNDataPoint_Shuffled.getCallback().' ...
						)
				end
	 
					assert( ...
						dp_copy.isLocked(prop) == dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.isChecked(prop) == dp.isChecked(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.getPropSeed(prop) == dp.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp_template = NNDataPoint_Shuffled();
	dp = NNDataPoint_Shuffled('TEMPLATE', dp_template);
	 
	for prop = 1:1:NNDataPoint_Shuffled.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDataPoint_Shuffled.getPropTag(prop));
		switch NNDataPoint_Shuffled.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNDataPoint_Shuffled.TEMPLATE
					assert( ...
						isa(dp.getr(prop), 'NNDataPoint_Shuffled'), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled TEMPLATE does not work. NNDataPoint_Shuffled.getr(''TEMPLATE'') should be a NNDataPoint_Shuffled element.' ...
						)
					assert( ...
						isa(dp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_Shuffled TEMPLATE does not work. NNDataPoint_Shuffled_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(dp.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled TEMPLATE does not work. NNDataPoint_Shuffled.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						dp.getr(prop).get('EL') == dp_template && dp.getr(prop).get('PROP') == prop && strcmp(dp.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled TEMPLATE does not work. NNDataPoint_Shuffled.getr(' TAG ') should be a Callback to dp_template.' TAG '.'] ...
						)
					assert( ...
						isa(dp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_Shuffled TEMPLATE does not work. NNDataPoint_Shuffled_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled TEMPLATE does not work. NNDataPoint_Shuffled.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(dp_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_Shuffled TEMPLATE does not work. NNDataPoint_Shuffled_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.TEMPLATE), ...
		NNDataPoint_Shuffled.ID, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.ID), ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.SHUFFLED_INPUT) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nndatapoint_shuffled_to_be_erased.b2'];
	 
	Element.save(dp, filename)
	 
	dp_loaded = Element.load(filename);
	 
	assert( ...
		isequal(dp.copy(), dp_loaded), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.save(dp) and/or NNDataPoint_Shuffled.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_Shuffled( ...
		NNDataPoint_Shuffled.ELCLASS, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.NAME, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.DESCRIPTION, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TEMPLATE, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.TEMPLATE), ...
		NNDataPoint_Shuffled.ID, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.ID), ...
		NNDataPoint_Shuffled.LABEL, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.LABEL), ...
		NNDataPoint_Shuffled.NOTES, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.NOTES), ...
		NNDataPoint_Shuffled.TOSTRING, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.INPUT, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.TARGET, NNDataPoint_Shuffled.getNoValue(), ...
		NNDataPoint_Shuffled.SHUFFLED_INPUT, NNDataPoint_Shuffled.getPropDefault(NNDataPoint_Shuffled.SHUFFLED_INPUT) ...
		);
	 
	[json, struct, el_list] = encodeJSON(dp);
	[dp_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(dp_dec ~= dp, ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_Shuffled.encodeJSON() or NNDataPoint_Shuffled.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNDataPoint_Shuffled.getPropFormat(prop), num2cell(NNDataPoint_Shuffled.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNDataPoint_Shuffled.getPropFormat(prop), num2cell(NNDataPoint_Shuffled.getProps())) == Format.NET)
		assert(isequal(dp_dec, dp), ...
			[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_Shuffled.encodeJSON() or NNDataPoint_Shuffled.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Assigning shuffiled input data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	shuffled_input = {[1 2 3]};
	
	known_shuffled_input = {[1 2 3]};
	
	shuffled_dp = NNDataPoint_Shuffled('SHUFFLED_INPUT', shuffled_input);
	
	calculated_shuffled_input = shuffled_dp.get('INPUT');
	assert(isequal(calculated_shuffled_input, known_shuffled_input), ...
	    [BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
	    ['The shuffled input is not being calculated correctly for NNDataPoint_Shuffled.'])
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNDataPoint_Shuffled:' BRAPH2.FAIL_TEST], ...
		[' When testing NNDataPoint_Shuffled no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

