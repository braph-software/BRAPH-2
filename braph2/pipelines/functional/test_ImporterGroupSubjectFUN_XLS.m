%TEST_IMPORTERGROUPSUBJECTFUN_XLS

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	im = ImporterGroupSubjectFUN_XLS();
	 
	% get('ELCLASS')
	if isa(ImporterGroupSubjectFUN_XLS, 'ConcreteElement')
		assert(strcmp(ImporterGroupSubjectFUN_XLS().get('ELCLASS'), 'ImporterGroupSubjectFUN_XLS'), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS().get(''ELCLASS'') should return ''ImporterGroupSubjectFUN_XLS''.')
	end
	 
	% getClass
	assert(strcmp(ImporterGroupSubjectFUN_XLS.getClass(), 'ImporterGroupSubjectFUN_XLS'), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.getClass() should return ''ImporterGroupSubjectFUN_XLS''.')
	assert(strcmp(im.getClass(), 'ImporterGroupSubjectFUN_XLS'), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'im.getClass() should return ''ImporterGroupSubjectFUN_XLS''.')
	assert(strcmp(Element.getClass(im), 'ImporterGroupSubjectFUN_XLS'), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(im) should return ''ImporterGroupSubjectFUN_XLS''.')
	assert(strcmp(Element.getClass('ImporterGroupSubjectFUN_XLS'), 'ImporterGroupSubjectFUN_XLS'), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''ImporterGroupSubjectFUN_XLS'') should return ''ImporterGroupSubjectFUN_XLS''.')
	 
	% getSubclasses()
	assert(isequal(ImporterGroupSubjectFUN_XLS.getSubclasses(), subclasses('ImporterGroupSubjectFUN_XLS', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.getSubclasses() should return the same result as subclasses(''ImporterGroupSubjectFUN_XLS'', [], [], true).')
	assert(isequal(im.getSubclasses(), subclasses('ImporterGroupSubjectFUN_XLS', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''ImporterGroupSubjectFUN_XLS'', [], [], true).')
	assert(isequal(Element.getSubclasses(im), subclasses('ImporterGroupSubjectFUN_XLS', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(im) should return the same result as subclasses(''ImporterGroupSubjectFUN_XLS'', [], [], true).')
	assert(isequal(Element.getSubclasses('ImporterGroupSubjectFUN_XLS'), subclasses('ImporterGroupSubjectFUN_XLS', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''ImporterGroupSubjectFUN_XLS'') should return the same result as subclasses(''ImporterGroupSubjectFUN_XLS'', [], [], true).')
	 
	% getProps()
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(ImporterGroupSubjectFUN_XLS.getProps(), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.getProps() should return a row vector [1:1:N].')
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(im.getProps(), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'im.getProps() should return a row vector [1:1:N].')
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(Element.getProps(im), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(im) should return a row vector [1:1:N].')
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(Element.getProps('ImporterGroupSubjectFUN_XLS'), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ImporterGroupSubjectFUN_XLS'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) ImporterGroupSubjectFUN_XLS.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.getProps(category) does not work.')
	tmp = cellfun(@(category) im.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'im.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(im, category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(im, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('ImporterGroupSubjectFUN_XLS', category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjectFUN_XLS.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjectFUN_XLS.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ImporterGroupSubjectFUN_XLS'', category) does not work.')
	 
	% getPropNumber()
	assert(ImporterGroupSubjectFUN_XLS.getPropNumber() == length(ImporterGroupSubjectFUN_XLS.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.getPropNumber() should return the number of properties.')
	assert(im.getPropNumber() == length(ImporterGroupSubjectFUN_XLS.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'im.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(im) == length(ImporterGroupSubjectFUN_XLS.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(im) should return the number of properties.')
	assert(Element.getPropNumber('ImporterGroupSubjectFUN_XLS') == length(ImporterGroupSubjectFUN_XLS.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ImporterGroupSubjectFUN_XLS'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) ImporterGroupSubjectFUN_XLS.getPropNumber(category), categories)) == ImporterGroupSubjectFUN_XLS.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) im.getPropNumber(category), categories)) == ImporterGroupSubjectFUN_XLS.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'im.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(im, category), categories)) == ImporterGroupSubjectFUN_XLS.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(im, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('ImporterGroupSubjectFUN_XLS', category), categories)) == ImporterGroupSubjectFUN_XLS.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ImporterGroupSubjectFUN_XLS'', category) does not work.')
	 
	% existsProp(prop)
	assert(~ImporterGroupSubjectFUN_XLS.existsProp(NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.existsProp(prop) does not work.')
	assert(~im.existsProp(NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'im.existsProp(prop) does not work.')
	assert(~Element.existsProp(im, NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(im, prop) does not work.')
	assert(~Element.existsProp('ImporterGroupSubjectFUN_XLS', NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''ImporterGroupSubjectFUN_XLS'', prop) does not work.')
	 
	assert_with_error('ImporterGroupSubjectFUN_XLS.existsProp(NaN)', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsProp(''ImporterGroupSubjectFUN_XLS'', NaN)', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		assert(ImporterGroupSubjectFUN_XLS.existsProp(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.existsProp(prop) does not work.')
		assert(im.existsProp(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.existsProp(prop) does not work.')
		assert(Element.existsProp(im, prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(im, prop) does not work.')
		assert(Element.existsProp('ImporterGroupSubjectFUN_XLS', prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''ImporterGroupSubjectFUN_XLS'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~ImporterGroupSubjectFUN_XLS.existsTag(''), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.existsTag(tag) does not work.')
	assert(~im.existsTag(''), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'im.existsTag(tag) does not work.')
	assert(~Element.existsTag(im, ''), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(im, tag) does not work.')
	assert(~Element.existsTag('ImporterGroupSubjectFUN_XLS', ''), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''ImporterGroupSubjectFUN_XLS'', tag) does not work.')
	 
	assert_with_error('ImporterGroupSubjectFUN_XLS.existsTag('''')', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsTag(''ImporterGroupSubjectFUN_XLS'', '''')', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
		assert(ImporterGroupSubjectFUN_XLS.existsTag(tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.existsTag(tag) does not work.')
		assert(im.existsTag(tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.existsTag(tag) does not work.')
		assert(Element.existsTag(im, tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(im, tga) does not work.')
		assert(Element.existsTag('ImporterGroupSubjectFUN_XLS', tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''ImporterGroupSubjectFUN_XLS'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		assert(ImporterGroupSubjectFUN_XLS.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropProp(prop) does not work.')
		assert(im.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropProp(prop) does not work.')
		assert(Element.getPropProp(im, prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(im, prop) does not work.')
		assert(Element.getPropProp('ImporterGroupSubjectFUN_XLS', prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ImporterGroupSubjectFUN_XLS'', prop) does not work.')
	 
		tag = im.getPropTag(prop);
		assert(ImporterGroupSubjectFUN_XLS.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropProp(tag) does not work.')
		assert(im.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropProp(tag) does not work.')
		assert(Element.getPropProp(im, tag) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(im, tag) does not work.')
		assert(Element.getPropProp('ImporterGroupSubjectFUN_XLS', prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ImporterGroupSubjectFUN_XLS'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(strcmp(ImporterGroupSubjectFUN_XLS.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropTag(prop) does not work.')
		assert(strcmp(im.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(im, prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(im, prop) does not work.')
		assert(strcmp(Element.getPropTag('ImporterGroupSubjectFUN_XLS', prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ImporterGroupSubjectFUN_XLS'', prop) does not work.')
	 
		assert(strcmp(ImporterGroupSubjectFUN_XLS.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropTag(tag) does not work.')
		assert(strcmp(im.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(im, tag), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(im, tag) does not work.')
		assert(strcmp(Element.getPropTag('ImporterGroupSubjectFUN_XLS', prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ImporterGroupSubjectFUN_XLS'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(Category.existsCategory(ImporterGroupSubjectFUN_XLS.getPropCategory(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(im.getPropCategory(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(im, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ImporterGroupSubjectFUN_XLS'', prop) does not work.')
	 
		assert(Category.existsCategory(ImporterGroupSubjectFUN_XLS.getPropCategory(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(im.getPropCategory(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(im, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ImporterGroupSubjectFUN_XLS'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(Format.existsFormat(ImporterGroupSubjectFUN_XLS.getPropFormat(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(im.getPropFormat(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(im, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ImporterGroupSubjectFUN_XLS'', prop) does not work.')
	 
		assert(Format.existsFormat(ImporterGroupSubjectFUN_XLS.getPropFormat(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(im.getPropFormat(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(im, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ImporterGroupSubjectFUN_XLS'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(ischar(ImporterGroupSubjectFUN_XLS.getPropDescription(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropDescription(prop) does not work.')
		assert(ischar(im.getPropDescription(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(im, prop) does not work.')
		assert(ischar(Element.getPropDescription(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ImporterGroupSubjectFUN_XLS'', prop) does not work.')
	 
		assert(ischar(ImporterGroupSubjectFUN_XLS.getPropDescription(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.getPropDescription(tag) does not work.')
		assert(ischar(im.getPropDescription(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(im, tag) does not work.')
		assert(ischar(Element.getPropDescription(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ImporterGroupSubjectFUN_XLS'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		settings = ImporterGroupSubjectFUN_XLS.getPropSettings(prop);
		settings = im.getPropSettings(prop);
		settings = Element.getPropSettings(im, prop);
		settings = Element.getPropSettings('ImporterGroupSubjectFUN_XLS', prop);
	 
		settings = ImporterGroupSubjectFUN_XLS.getPropSettings(tag);
		settings = im.getPropSettings(tag);
		settings = Element.getPropSettings(im, tag);
		settings = Element.getPropSettings('ImporterGroupSubjectFUN_XLS', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		default = ImporterGroupSubjectFUN_XLS.getPropDefault(prop);
		default = im.getPropDefault(prop);
		default = Element.getPropDefault(im, prop);
		default = Element.getPropDefault('ImporterGroupSubjectFUN_XLS', prop);
	 
		default = ImporterGroupSubjectFUN_XLS.getPropDefault(tag);
		default = im.getPropDefault(tag);
		default = Element.getPropDefault(im, tag);
		default = Element.getPropDefault('ImporterGroupSubjectFUN_XLS', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		conditioned_default = ImporterGroupSubjectFUN_XLS.getPropDefaultConditioned(prop);
		conditioned_default = im.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(im, prop);
		conditioned_default = Element.getPropDefaultConditioned('ImporterGroupSubjectFUN_XLS', prop);
	 
		conditioned_default = ImporterGroupSubjectFUN_XLS.getPropDefaultConditioned(tag);
		conditioned_default = im.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(im, tag);
		conditioned_default = Element.getPropDefaultConditioned('ImporterGroupSubjectFUN_XLS', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(~ImporterGroupSubjectFUN_XLS.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.checkProp(prop, value) does not work.')
		assert(~im.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(im, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, prop, value) does not work.')
		assert(~Element.checkProp('ImporterGroupSubjectFUN_XLS', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjectFUN_XLS'', prop, value) does not work.')
	 
		assert_with_error('ImporterGroupSubjectFUN_XLS.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], prop, im)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], prop, im)
		assert_with_error('Element.checkProp(''ImporterGroupSubjectFUN_XLS'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~ImporterGroupSubjectFUN_XLS.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.checkProp(tag, value) does not work.')
		assert(~im.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(im, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, tag, value) does not work.')
		assert(~Element.checkProp('ImporterGroupSubjectFUN_XLS', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjectFUN_XLS'', tag, value) does not work.')
	 
		assert_with_error('ImporterGroupSubjectFUN_XLS.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], tag, im)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], tag, im)
		assert_with_error('Element.checkProp(''ImporterGroupSubjectFUN_XLS'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(ImporterGroupSubjectFUN_XLS.checkProp(prop, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.checkProp(prop, <conditioned default value>) does not work.')
		assert(im.checkProp(prop, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(im, prop, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('ImporterGroupSubjectFUN_XLS', prop, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjectFUN_XLS'', prop, <conditioned default value>) does not work.')
	 
		assert(ImporterGroupSubjectFUN_XLS.checkProp(tag, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.checkProp(tag, <conditioned default value>) does not work.')
		assert(im.checkProp(tag, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(im, tag, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('ImporterGroupSubjectFUN_XLS', tag, Element.getPropDefaultConditioned(ImporterGroupSubjectFUN_XLS, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjectFUN_XLS'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.TEMPLATE), ...
		ImporterGroupSubjectFUN_XLS.ID, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.ID), ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.WAITBAR), ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.DIRECTORY), ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.BA), ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
	 
		% excluded props
		if any(prop == [ImporterGroupSubjectFUN_XLS.GET_DIR])
			continue
		end
	 
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					im.getr(prop) == ImporterGroupSubjectFUN_XLS.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjectFUN_XLS.getCategoryName(ImporterGroupSubjectFUN_XLS.getPropCategory(prop)) ', ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					im.getr(TAG) == ImporterGroupSubjectFUN_XLS.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjectFUN_XLS.getCategoryName(ImporterGroupSubjectFUN_XLS.getPropCategory(prop)) ', ImporterGroupSubjectFUN_XLS.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjectFUN_XLS.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(im.getPropSettings(prop))
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop), im.getPropSettings(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					im.getr(prop) == ImporterGroupSubjectFUN_XLS.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjectFUN_XLS.getCategoryName(ImporterGroupSubjectFUN_XLS.getPropCategory(prop)) ', ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					im.getr(TAG) == ImporterGroupSubjectFUN_XLS.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjectFUN_XLS.getCategoryName(ImporterGroupSubjectFUN_XLS.getPropCategory(prop)) ', ImporterGroupSubjectFUN_XLS.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjectFUN_XLS.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS']);
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(im.getPropSettings(prop))
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop), im.getPropSettings(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(im.getr(prop), ImporterGroupSubjectFUN_XLS.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by ImporterGroupSubjectFUN_XLS.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(im.getr(TAG), ImporterGroupSubjectFUN_XLS.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' TAG ') must be inizialized to its default value ' ...
					'given by ImporterGroupSubjectFUN_XLS.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ImporterGroupSubjectFUN_XLS.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.TEMPLATE), ...
		ImporterGroupSubjectFUN_XLS.ID, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.ID), ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.WAITBAR), ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.DIRECTORY), ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.BA), ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
	 
		% excluded props
		if any(prop == [ImporterGroupSubjectFUN_XLS.GET_DIR])
			continue
		end
	 
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(im.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					im.checkFormat(im.getPropFormat(prop), im.getr(prop),im.getPropSettings(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS']);
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS']);
	% 			assert( ...
	% 				~isa(im.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
	% 				['ImporterGroupSubjectFUN_XLS.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(im.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
	% 				['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				im.checkFormat(im.getPropFormat(prop), im.getr(prop),im.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
	% 				['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS']);
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(im.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					im.checkFormat(im.getPropFormat(prop), im.getr(prop),im.getPropSettings(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if im.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:ImporterGroupSubjectFUN_XLS');
					delete(ancestor(im.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(ImporterGroupSubjectFUN_XLS.getProps(Category.RESULT))
		for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
	 
			% excluded props
			if any(prop == [ImporterGroupSubjectFUN_XLS.GET_DIR])
				continue
			end
	 
			switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjectFUN_XLS();
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		assert( ...
			~im.isLocked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjectFUN_XLS.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~im.isLocked(TAG), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjectFUN_XLS.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	im.lock()
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjectFUN_XLS();
	 
	warning_backup = warning('off', 'BRAPH2:ImporterGroupSubjectFUN_XLS');
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		im.lock(prop)
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjectFUN_XLS();
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		assert( ...
			im.isChecked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjectFUN_XLS.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			im.isChecked(TAG), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjectFUN_XLS.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	im.unchecked()
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		assert( ...
			~im.isChecked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjectFUN_XLS.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	im.checked()
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		assert( ...
			im.isChecked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjectFUN_XLS.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic ImporterGroupSubjectFUN_XLS
	im_0 = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.TEMPLATE), ...
		ImporterGroupSubjectFUN_XLS.ID, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.ID), ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.WAITBAR), ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.DIRECTORY), ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.BA), ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	% ImporterGroupSubjectFUN_XLS with 1st callbacks
	im_1 = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, im_0.getCallback(4), ..., ...
		ImporterGroupSubjectFUN_XLS.ID, im_0.getCallback(5), ..., ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, im_0.getCallback(9), ..., ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, im_0.getCallback(10), ..., ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, im_0.getCallback(12), ..., ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	prop_number = ImporterGroupSubjectFUN_XLS.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(im_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(im_1.get(prop), im_0.get(prop)) && ~isa(im_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(im_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ImporterGroupSubjectFUN_XLS with 2nd callbacks
	im_2 = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, im_1.getCallback(4), ..., ...
		ImporterGroupSubjectFUN_XLS.ID, im_1.getCallback(5), ..., ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, im_1.getCallback(9), ..., ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, im_1.getCallback(10), ..., ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, im_1.getCallback(12), ..., ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	prop_number = ImporterGroupSubjectFUN_XLS.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(im_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(im_2.get(prop), im_0.get(prop)) && ~isa(im_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(im_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ImporterGroupSubjectFUN_XLS with 3rd callbacks
	im_3 = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, im_2.getCallback(4), ..., ...
		ImporterGroupSubjectFUN_XLS.ID, im_2.getCallback(5), ..., ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, im_2.getCallback(9), ..., ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, im_2.getCallback(10), ..., ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, im_2.getCallback(12), ..., ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	prop_number = ImporterGroupSubjectFUN_XLS.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(im_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(im_3.get(prop), im_0.get(prop)) && ~isa(im_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(im_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	im = ImporterGroupSubjectFUN_XLS();
	 
	im_copy = im.copy();
	 
	assert(im_copy ~= im, ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(im_copy, im), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		value = im.getr(prop);
		value_copy = im_copy.getr(prop);
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjectFUN_XLS.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjectFUN_XLS.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjectFUN_XLS.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					im_copy.isLocked(prop) == im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjectFUN_XLS.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					im_copy.isChecked(prop) == im.isChecked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjectFUN_XLS.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					im_copy.getPropSeed(prop) == im.getPropSeed(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjectFUN_XLS.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	im = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.TEMPLATE), ...
		ImporterGroupSubjectFUN_XLS.ID, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.ID), ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.WAITBAR), ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.DIRECTORY), ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.BA), ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		if ImporterGroupSubjectFUN_XLS.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjectFUN_XLS']);
			% im.memorize(prop);
			% warning(warning_backup)
		elseif ImporterGroupSubjectFUN_XLS.getPropCategory(prop) == Category.EVANESCENT && im.getPropFormat(prop) == Format.HANDLE
			im.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:ImporterGroupSubjectFUN_XLS');
			delete(ancestor(im.get(prop), 'figure'))
			warning(warning_backup)
		else
			im.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	im_copy = im.copy();
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		value = im.getr(prop);
		value_copy = im_copy.getr(prop);
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjectFUN_XLS.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjectFUN_XLS.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjectFUN_XLS.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						im_copy.isLocked(prop) == im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.isChecked(prop) == im.isChecked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.getPropSeed(prop) == im.getPropSeed(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	im_0 = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.TEMPLATE), ...
		ImporterGroupSubjectFUN_XLS.ID, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.ID), ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.WAITBAR), ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.DIRECTORY), ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.BA), ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	im = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, im_0.getCallback(4), ..., ...
		ImporterGroupSubjectFUN_XLS.ID, im_0.getCallback(5), ..., ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, im_0.getCallback(9), ..., ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, im_0.getCallback(10), ..., ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, im_0.getCallback(12), ..., ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	im_copy = im.copy();
	im_0_copy = im_copy.getr('ID').get('EL');
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
		value = im.getr(prop);
		value_copy = im_copy.getr(prop);
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjectFUN_XLS.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjectFUN_XLS.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjectFUN_XLS.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == im_0.getCallback(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The callback should be obtained from ImporterGroupSubjectFUN_XLS.getCallback().' ...
						)
					assert( ...
						value_copy == im_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The callback should be obtained from ImporterGroupSubjectFUN_XLS.getCallback().' ...
						)
				end
	 
					assert( ...
						im_copy.isLocked(prop) == im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.isChecked(prop) == im.isChecked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.getPropSeed(prop) == im.getPropSeed(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im_template = ImporterGroupSubjectFUN_XLS();
	im = ImporterGroupSubjectFUN_XLS('TEMPLATE', im_template);
	 
	for prop = 1:1:ImporterGroupSubjectFUN_XLS.getPropNumber()
	 
		% excluded props
		if any(prop == [ImporterGroupSubjectFUN_XLS.GET_DIR])
			continue
		end
	 
		TAG = upper(ImporterGroupSubjectFUN_XLS.getPropTag(prop));
		switch ImporterGroupSubjectFUN_XLS.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == ImporterGroupSubjectFUN_XLS.TEMPLATE
					assert( ...
						isa(im.getr(prop), 'ImporterGroupSubjectFUN_XLS'), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS TEMPLATE does not work. ImporterGroupSubjectFUN_XLS.getr(''TEMPLATE'') should be a ImporterGroupSubjectFUN_XLS element.' ...
						)
					assert( ...
						isa(im_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjectFUN_XLS TEMPLATE does not work. ImporterGroupSubjectFUN_XLS_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(im.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS TEMPLATE does not work. ImporterGroupSubjectFUN_XLS.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						im.getr(prop).get('EL') == im_template && im.getr(prop).get('PROP') == prop && strcmp(im.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS TEMPLATE does not work. ImporterGroupSubjectFUN_XLS.getr(' TAG ') should be a Callback to im_template.' TAG '.'] ...
						)
					assert( ...
						isa(im_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjectFUN_XLS TEMPLATE does not work. ImporterGroupSubjectFUN_XLS_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS TEMPLATE does not work. ImporterGroupSubjectFUN_XLS.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(im_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjectFUN_XLS TEMPLATE does not work. ImporterGroupSubjectFUN_XLS_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.TEMPLATE), ...
		ImporterGroupSubjectFUN_XLS.ID, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.ID), ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.WAITBAR), ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.DIRECTORY), ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.BA), ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'importergroupsubjectfun_xls_to_be_erased.b2'];
	 
	Element.save(im, filename)
	 
	im_loaded = Element.load(filename);
	 
	assert( ...
		isequal(im.copy(), im_loaded), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.save(im) and/or ImporterGroupSubjectFUN_XLS.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjectFUN_XLS( ...
		ImporterGroupSubjectFUN_XLS.ELCLASS, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.NAME, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.DESCRIPTION, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.TEMPLATE, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.TEMPLATE), ...
		ImporterGroupSubjectFUN_XLS.ID, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.ID), ...
		ImporterGroupSubjectFUN_XLS.LABEL, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.LABEL), ...
		ImporterGroupSubjectFUN_XLS.NOTES, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.NOTES), ...
		ImporterGroupSubjectFUN_XLS.TOSTRING, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.WAITBAR, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.WAITBAR), ...
		ImporterGroupSubjectFUN_XLS.DIRECTORY, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.DIRECTORY), ...
		ImporterGroupSubjectFUN_XLS.GET_DIR, ImporterGroupSubjectFUN_XLS.getNoValue(), ...
		ImporterGroupSubjectFUN_XLS.BA, ImporterGroupSubjectFUN_XLS.getPropDefault(ImporterGroupSubjectFUN_XLS.BA), ...
		ImporterGroupSubjectFUN_XLS.GR, ImporterGroupSubjectFUN_XLS.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(im);
	[im_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(im_dec ~= im, ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjectFUN_XLS.encodeJSON() or ImporterGroupSubjectFUN_XLS.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) ImporterGroupSubjectFUN_XLS.getPropFormat(prop), num2cell(ImporterGroupSubjectFUN_XLS.getProps())) == Format.HANDLE) && all(cellfun(@(prop) ImporterGroupSubjectFUN_XLS.getPropFormat(prop), num2cell(ImporterGroupSubjectFUN_XLS.getProps())) == Format.NET)
		assert(isequal(im_dec, im), ...
			[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjectFUN_XLS.encodeJSON() or ImporterGroupSubjectFUN_XLS.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Create example files
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	data_dir = [fileparts(which('SubjectFUN')) filesep 'Example data FUN XLS'];
	if ~isdir(data_dir)
	    mkdir(data_dir);
	
	    % Brain Atlas
	    im_ba = ImporterBrainAtlasXLS('FILE', 'aal90_atlas.xlsx');
	    ba = im_ba.get('BA');
	    ex_ba = ExporterBrainAtlasXLS( ...
	        'BA', ba, ...
	        'FILE', [data_dir filesep() 'atlas.xlsx'] ...
	        );
	    ex_ba.get('SAVE')
	    N = ba.get('BR_DICT').get('LENGTH');
	
	    % saves RNG
	    rng_settings_ = rng(); rng('default')
	
	    T = 200; % Length of the time series
	
	    sex_options = {'Female' 'Male'};
	
	    % Group 1 - 5 modules of 18 nodes each
	    % initialize values for the WS model
	    K1 = [3 4 5 6 7];
	    beta1 = [0.02 0.1 0.3 0.5 0.8];
	    % initialize the indices where the matrices will be placed
	    indices1 = 1:1:18;
	    indices2 = 19:1:36;
	    indices3 = 37:1:54;
	    indices4 = 55:1:72;
	    indices5 = 73:1:90;
	    indices = {indices1; indices2; indices3; indices4; indices5};
	    gr1_name = 'FUN_Group_1_XLS';
	    gr1_dir = [data_dir filesep() gr1_name];
	    mkdir(gr1_dir);
	    vois1 = [
	        {{'Subject ID'} {'Age'} {'Sex'}}
	        {{} {} cell2str(sex_options)}
	        ];
	    for i = 1:1:50 % subject number
	        sub_id = ['SubjectFUN_' num2str(i)];
	
	        % randomize the parameters
	        K_temp = K1(randperm(length(K1)));
	        beta_temp = beta1(randperm(length(beta1)));
	
	        % initialize matrix for the subject
	        A_full = zeros(N);
	
	        % loop over each module
	        for i_mod = 1:1:5
	            A_full(indices{i_mod}, indices{i_mod}) = full(adjacency(WattsStrogatz(18, K_temp(i_mod), beta_temp(i_mod))));
	        end
	        A_full(1:length(A_full)+1:numel(A_full)) = 1;
	
	        % this is needed to make the matrices positive definite
	        A_full = A_full * transpose(A_full);
	        % figure(1)
	        % imshow(A_full)
	
	        % This matrix will be covariance matrices for the two groups
	        % Specify the mean
	        mu_gr1 = ones(1, length(A_full));
	        % calculate time series
	        R1 = mvnrnd(mu_gr1, A_full, T);
	        % Normalize the time series
	        mean_R1 = mean(R1);
	        std_R1 = std(R1);
	        R1 = (R1 - mean(R1)) ./ std(R1);
	
	        writetable(array2table(R1), [gr1_dir filesep() sub_id '.xlsx'], 'WriteVariableNames', false)
	
	        % variables of interest
	        vois1 = [vois1; {sub_id, randi(90), sex_options(randi(2))}];
	    end
	    writetable(table(vois1), [data_dir filesep() gr1_name '.vois.xlsx'], 'WriteVariableNames', false)
	
	    % Group 2 - 2 modules of 45 nodes each
	    % initialize values for the WS model
	    K2 = [3 7];
	    beta2 = [0.02 0.85];
	    % initialize the indices where the matrices will be placed
	    indices1 = 1:1:45;
	    indices2 = 46:1:90;
	    indices = {indices1; indices2};
	    gr2_name = 'FUN_Group_2_XLS';
	    gr2_dir = [data_dir filesep() gr2_name];
	    mkdir(gr2_dir);
	    vois2 = [
	        {{'Subject ID'} {'Age'} {'Sex'}}
	        {{} {} cell2str(sex_options)}
	        ];
	    for i = 51:1:100
	        sub_id = ['SubjectFUN_' num2str(i)];
	
	        % randomize the parameters
	        K_temp = K2(randperm(length(K2)));
	        beta_temp = beta2(randperm(length(beta2)));
	
	        % initialize matrix for the subject
	        A_full = zeros(N);
	
	        % loop over each module
	        for i_mod = 1:1:2
	        A_full(indices{i_mod},indices{i_mod}) = full(adjacency(WattsStrogatz(45, K_temp(i_mod), beta_temp(i_mod))));
	        end
	        A_full(1:length(A_full)+1:numel(A_full)) = 1;
	
	        % this is needed to make the matrices positive definite
	        A_full = A_full * transpose(A_full);
	        % figure(2)
	        % imshow(A_full)
	
	        % This matrix will be covariance matrices for the two groups
	        % Specify the mean
	        mu_gr2 = ones(1, length(A_full));
	
	        % calculate time series
	        R2 = mvnrnd(mu_gr2, A_full, T);
	
	        % Normalize the time series
	        mean_R2 = mean(R2);
	        std_R2 = std(R2);
	        R2 = (R2 - mean(R2)) ./ std(R2);
	
	        writetable(array2table(R2), [gr2_dir filesep() 'SubjectFUN_' num2str(i) '.xlsx'], 'WriteVariableNames', false)
	
	        % variables of interest
	        vois2 = [vois2; {sub_id, randi(90), sex_options(randi(2))}];
	    end
	    writetable(table(vois2), [data_dir filesep() gr2_name '.vois.xlsx'], 'WriteVariableNames', false)
	
	    % reset RNG
	    rng(rng_settings_)
	end
end

%% Test 13: GUI
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im_ba = ImporterBrainAtlasXLS('FILE', [fileparts(which('SubjectFUN')) filesep 'Example data FUN XLS' filesep 'atlas.xlsx']);
	ba = im_ba.get('BA');
	
	im_gr = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('SubjectFUN')) filesep 'Example data FUN XLS' filesep 'FUN_Group_1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	gr = im_gr.get('GR');
	
	gui = GUIElement('PE', gr, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':ImporterGroupSubjectFUN_XLS:' BRAPH2.FAIL_TEST], ...
		[' When testing ImporterGroupSubjectFUN_XLS no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

%% Test functions
function h = WattsStrogatz(N,K,beta)
% H = WattsStrogatz(N,K,beta) returns a Watts-Strogatz model graph with N
% nodes, N*K edges, mean node degree 2*K, and rewiring probability beta.
%
% beta = 0 is a ring lattice, and beta = 1 is a random graph.

% Connect each node to its K next and previous neighbors. This constructs
% indices for a ring lattice.
s = repelem((1:N)',1,K);
t = s + repmat(1:K,N,1);
t = mod(t-1,N)+1;

% Rewire the target node of each edge with probability beta
for source=1:N
    switchEdge = rand(K, 1) < beta;
    
    newTargets = rand(N, 1);
    newTargets(source) = 0;
    newTargets(s(t==source)) = 0;
    newTargets(t(source, ~switchEdge)) = 0;
    
    [~, ind] = sort(newTargets, 'descend');
    t(source, switchEdge) = ind(1:nnz(switchEdge));
end

h = graph(s,t);
end
