%TEST_COMBINEGROUPS_CON_FUN_MP

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	co = CombineGroups_CON_FUN_MP();
	 
	% get('ELCLASS')
	if isa(CombineGroups_CON_FUN_MP, 'ConcreteElement')
		assert(strcmp(CombineGroups_CON_FUN_MP().get('ELCLASS'), 'CombineGroups_CON_FUN_MP'), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP().get(''ELCLASS'') should return ''CombineGroups_CON_FUN_MP''.')
	end
	 
	% getClass
	assert(strcmp(CombineGroups_CON_FUN_MP.getClass(), 'CombineGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.getClass() should return ''CombineGroups_CON_FUN_MP''.')
	assert(strcmp(co.getClass(), 'CombineGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'co.getClass() should return ''CombineGroups_CON_FUN_MP''.')
	assert(strcmp(Element.getClass(co), 'CombineGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(co) should return ''CombineGroups_CON_FUN_MP''.')
	assert(strcmp(Element.getClass('CombineGroups_CON_FUN_MP'), 'CombineGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''CombineGroups_CON_FUN_MP'') should return ''CombineGroups_CON_FUN_MP''.')
	 
	% getSubclasses()
	assert(isequal(CombineGroups_CON_FUN_MP.getSubclasses(), subclasses('CombineGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.getSubclasses() should return the same result as subclasses(''CombineGroups_CON_FUN_MP'', [], [], true).')
	assert(isequal(co.getSubclasses(), subclasses('CombineGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''CombineGroups_CON_FUN_MP'', [], [], true).')
	assert(isequal(Element.getSubclasses(co), subclasses('CombineGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(co) should return the same result as subclasses(''CombineGroups_CON_FUN_MP'', [], [], true).')
	assert(isequal(Element.getSubclasses('CombineGroups_CON_FUN_MP'), subclasses('CombineGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''CombineGroups_CON_FUN_MP'') should return the same result as subclasses(''CombineGroups_CON_FUN_MP'', [], [], true).')
	 
	% getProps()
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(CombineGroups_CON_FUN_MP.getProps(), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.getProps() should return a row vector [1:1:N].')
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(co.getProps(), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'co.getProps() should return a row vector [1:1:N].')
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(Element.getProps(co), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(co) should return a row vector [1:1:N].')
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(Element.getProps('CombineGroups_CON_FUN_MP'), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CombineGroups_CON_FUN_MP'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) CombineGroups_CON_FUN_MP.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.getProps(category) does not work.')
	tmp = cellfun(@(category) co.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'co.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(co, category), categories, 'UniformOutput', false);
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(co, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('CombineGroups_CON_FUN_MP', category), categories, 'UniformOutput', false);
	assert(isempty(CombineGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CombineGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CombineGroups_CON_FUN_MP'', category) does not work.')
	 
	% getPropNumber()
	assert(CombineGroups_CON_FUN_MP.getPropNumber() == length(CombineGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.getPropNumber() should return the number of properties.')
	assert(co.getPropNumber() == length(CombineGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'co.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(co) == length(CombineGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(co) should return the number of properties.')
	assert(Element.getPropNumber('CombineGroups_CON_FUN_MP') == length(CombineGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CombineGroups_CON_FUN_MP'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) CombineGroups_CON_FUN_MP.getPropNumber(category), categories)) == CombineGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) co.getPropNumber(category), categories)) == CombineGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'co.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(co, category), categories)) == CombineGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(co, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('CombineGroups_CON_FUN_MP', category), categories)) == CombineGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CombineGroups_CON_FUN_MP'', category) does not work.')
	 
	% existsProp(prop)
	assert(~CombineGroups_CON_FUN_MP.existsProp(NaN), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.existsProp(prop) does not work.')
	assert(~co.existsProp(NaN), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'co.existsProp(prop) does not work.')
	assert(~Element.existsProp(co, NaN), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(co, prop) does not work.')
	assert(~Element.existsProp('CombineGroups_CON_FUN_MP', NaN), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''CombineGroups_CON_FUN_MP'', prop) does not work.')
	 
	assert_with_error('CombineGroups_CON_FUN_MP.existsProp(NaN)', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], co)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], co)
	assert_with_error('Element.existsProp(''CombineGroups_CON_FUN_MP'', NaN)', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		assert(CombineGroups_CON_FUN_MP.existsProp(prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.existsProp(prop) does not work.')
		assert(co.existsProp(prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.existsProp(prop) does not work.')
		assert(Element.existsProp(co, prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(co, prop) does not work.')
		assert(Element.existsProp('CombineGroups_CON_FUN_MP', prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''CombineGroups_CON_FUN_MP'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~CombineGroups_CON_FUN_MP.existsTag(''), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.existsTag(tag) does not work.')
	assert(~co.existsTag(''), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'co.existsTag(tag) does not work.')
	assert(~Element.existsTag(co, ''), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(co, tag) does not work.')
	assert(~Element.existsTag('CombineGroups_CON_FUN_MP', ''), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''CombineGroups_CON_FUN_MP'', tag) does not work.')
	 
	assert_with_error('CombineGroups_CON_FUN_MP.existsTag('''')', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], co)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], co)
	assert_with_error('Element.existsTag(''CombineGroups_CON_FUN_MP'', '''')', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
		assert(CombineGroups_CON_FUN_MP.existsTag(tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.existsTag(tag) does not work.')
		assert(co.existsTag(tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.existsTag(tag) does not work.')
		assert(Element.existsTag(co, tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(co, tga) does not work.')
		assert(Element.existsTag('CombineGroups_CON_FUN_MP', tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''CombineGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		assert(CombineGroups_CON_FUN_MP.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropProp(prop) does not work.')
		assert(co.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropProp(prop) does not work.')
		assert(Element.getPropProp(co, prop) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(co, prop) does not work.')
		assert(Element.getPropProp('CombineGroups_CON_FUN_MP', prop) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CombineGroups_CON_FUN_MP'', prop) does not work.')
	 
		tag = co.getPropTag(prop);
		assert(CombineGroups_CON_FUN_MP.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropProp(tag) does not work.')
		assert(co.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropProp(tag) does not work.')
		assert(Element.getPropProp(co, tag) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(co, tag) does not work.')
		assert(Element.getPropProp('CombineGroups_CON_FUN_MP', prop) == prop, ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CombineGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		assert(strcmp(CombineGroups_CON_FUN_MP.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropTag(prop) does not work.')
		assert(strcmp(co.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(co, prop), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(co, prop) does not work.')
		assert(strcmp(Element.getPropTag('CombineGroups_CON_FUN_MP', prop), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CombineGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(strcmp(CombineGroups_CON_FUN_MP.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropTag(tag) does not work.')
		assert(strcmp(co.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(co, tag), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(co, tag) does not work.')
		assert(strcmp(Element.getPropTag('CombineGroups_CON_FUN_MP', prop), tag), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CombineGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		assert(Category.existsCategory(CombineGroups_CON_FUN_MP.getPropCategory(prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(co.getPropCategory(prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(co, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(co, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(co, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CombineGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(Category.existsCategory(CombineGroups_CON_FUN_MP.getPropCategory(tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(co.getPropCategory(tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(co, tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(co, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(co, tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CombineGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		assert(Format.existsFormat(CombineGroups_CON_FUN_MP.getPropFormat(prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(co.getPropFormat(prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(co, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(co, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(co, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CombineGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(Format.existsFormat(CombineGroups_CON_FUN_MP.getPropFormat(tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(co.getPropFormat(tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(co, tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(co, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(co, tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CombineGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		assert(ischar(CombineGroups_CON_FUN_MP.getPropDescription(prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropDescription(prop) does not work.')
		assert(ischar(co.getPropDescription(prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(co, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(co, prop) does not work.')
		assert(ischar(Element.getPropDescription(co, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CombineGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(ischar(CombineGroups_CON_FUN_MP.getPropDescription(tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.getPropDescription(tag) does not work.')
		assert(ischar(co.getPropDescription(tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(co, tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(co, tag) does not work.')
		assert(ischar(Element.getPropDescription(co, tag)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CombineGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		settings = CombineGroups_CON_FUN_MP.getPropSettings(prop);
		settings = co.getPropSettings(prop);
		settings = Element.getPropSettings(co, prop);
		settings = Element.getPropSettings('CombineGroups_CON_FUN_MP', prop);
	 
		settings = CombineGroups_CON_FUN_MP.getPropSettings(tag);
		settings = co.getPropSettings(tag);
		settings = Element.getPropSettings(co, tag);
		settings = Element.getPropSettings('CombineGroups_CON_FUN_MP', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		default = CombineGroups_CON_FUN_MP.getPropDefault(prop);
		default = co.getPropDefault(prop);
		default = Element.getPropDefault(co, prop);
		default = Element.getPropDefault('CombineGroups_CON_FUN_MP', prop);
	 
		default = CombineGroups_CON_FUN_MP.getPropDefault(tag);
		default = co.getPropDefault(tag);
		default = Element.getPropDefault(co, tag);
		default = Element.getPropDefault('CombineGroups_CON_FUN_MP', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		conditioned_default = CombineGroups_CON_FUN_MP.getPropDefaultConditioned(prop);
		conditioned_default = co.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(co, prop);
		conditioned_default = Element.getPropDefaultConditioned('CombineGroups_CON_FUN_MP', prop);
	 
		conditioned_default = CombineGroups_CON_FUN_MP.getPropDefaultConditioned(tag);
		conditioned_default = co.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(co, tag);
		conditioned_default = Element.getPropDefaultConditioned('CombineGroups_CON_FUN_MP', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		tag = co.getPropTag(prop);
	 
		assert(~CombineGroups_CON_FUN_MP.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.checkProp(prop, value) does not work.')
		assert(~co.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(co, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(co, prop, value) does not work.')
		assert(~Element.checkProp('CombineGroups_CON_FUN_MP', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CombineGroups_CON_FUN_MP'', prop, value) does not work.')
	 
		assert_with_error('CombineGroups_CON_FUN_MP.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop, co)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop, co)
		assert_with_error('Element.checkProp(''CombineGroups_CON_FUN_MP'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~CombineGroups_CON_FUN_MP.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.checkProp(tag, value) does not work.')
		assert(~co.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(co, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(co, tag, value) does not work.')
		assert(~Element.checkProp('CombineGroups_CON_FUN_MP', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CombineGroups_CON_FUN_MP'', tag, value) does not work.')
	 
		assert_with_error('CombineGroups_CON_FUN_MP.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag, co)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag, co)
		assert_with_error('Element.checkProp(''CombineGroups_CON_FUN_MP'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(CombineGroups_CON_FUN_MP.checkProp(prop, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.checkProp(prop, <conditioned default value>) does not work.')
		assert(co.checkProp(prop, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(co, prop, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(co, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('CombineGroups_CON_FUN_MP', prop, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CombineGroups_CON_FUN_MP'', prop, <conditioned default value>) does not work.')
	 
		assert(CombineGroups_CON_FUN_MP.checkProp(tag, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.checkProp(tag, <conditioned default value>) does not work.')
		assert(co.checkProp(tag, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'co.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(co, tag, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(co, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('CombineGroups_CON_FUN_MP', tag, Element.getPropDefaultConditioned(CombineGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CombineGroups_CON_FUN_MP'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.TEMPLATE), ...
		CombineGroups_CON_FUN_MP.ID, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.ID), ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_CON), ...
		CombineGroups_CON_FUN_MP.GR_FUN, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_FUN), ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					co.getr(prop) == CombineGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' CombineGroups_CON_FUN_MP.getCategoryName(CombineGroups_CON_FUN_MP.getPropCategory(prop)) ', CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CombineGroups_CON_FUN_MP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					co.getr(TAG) == CombineGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' CombineGroups_CON_FUN_MP.getCategoryName(CombineGroups_CON_FUN_MP.getPropCategory(prop)) ', CombineGroups_CON_FUN_MP.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CombineGroups_CON_FUN_MP.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(co.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(co.getPropSettings(prop))
					assert( ...
						co.checkFormat(co.getPropFormat(prop), co.get(prop)), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						co.checkFormat(co.getPropFormat(prop), co.get(prop), co.getPropSettings(prop)), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					co.getr(prop) == CombineGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' CombineGroups_CON_FUN_MP.getCategoryName(CombineGroups_CON_FUN_MP.getPropCategory(prop)) ', CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CombineGroups_CON_FUN_MP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					co.getr(TAG) == CombineGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' CombineGroups_CON_FUN_MP.getCategoryName(CombineGroups_CON_FUN_MP.getPropCategory(prop)) ', CombineGroups_CON_FUN_MP.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CombineGroups_CON_FUN_MP.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':CombineGroups_CON_FUN_MP']);
				assert( ...
					~isa(co.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(co.getPropSettings(prop))
					assert( ...
						co.checkFormat(co.getPropFormat(prop), co.get(prop)), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						co.checkFormat(co.getPropFormat(prop), co.get(prop), co.getPropSettings(prop)), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(co.getr(prop), CombineGroups_CON_FUN_MP.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by CombineGroups_CON_FUN_MP.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CombineGroups_CON_FUN_MP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(co.getr(TAG), CombineGroups_CON_FUN_MP.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' TAG ') must be inizialized to its default value ' ...
					'given by CombineGroups_CON_FUN_MP.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CombineGroups_CON_FUN_MP.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.TEMPLATE), ...
		CombineGroups_CON_FUN_MP.ID, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.ID), ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_CON), ...
		CombineGroups_CON_FUN_MP.GR_FUN, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_FUN), ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(co.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(co.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(co.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(co.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					co.checkFormat(co.getPropFormat(prop), co.getr(prop),co.getPropSettings(prop)), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':CombineGroups_CON_FUN_MP']);
				assert( ...
					~isa(co.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(co.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':CombineGroups_CON_FUN_MP']);
	% 			assert( ...
	% 				~isa(co.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	% 				['CombineGroups_CON_FUN_MP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(co.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	% 				['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				co.checkFormat(co.getPropFormat(prop), co.getr(prop),co.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	% 				['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':CombineGroups_CON_FUN_MP']);
				assert( ...
					~isa(co.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(co.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(co.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(co.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					co.checkFormat(co.getPropFormat(prop), co.getr(prop),co.getPropSettings(prop)), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if co.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:CombineGroups_CON_FUN_MP');
					delete(ancestor(co.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(CombineGroups_CON_FUN_MP.getProps(Category.RESULT))
		for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						co.isLocked(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~co.isLocked(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co = CombineGroups_CON_FUN_MP();
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		assert( ...
			~co.isLocked(prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['CombineGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~co.isLocked(TAG), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['CombineGroups_CON_FUN_MP.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	co.lock()
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					co.isLocked(prop), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~co.isLocked(prop), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co = CombineGroups_CON_FUN_MP();
	 
	warning_backup = warning('off', 'BRAPH2:CombineGroups_CON_FUN_MP');
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		co.lock(prop)
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					co.isLocked(prop), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~co.isLocked(prop), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co = CombineGroups_CON_FUN_MP();
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		assert( ...
			co.isChecked(prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['CombineGroups_CON_FUN_MP.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			co.isChecked(TAG), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['CombineGroups_CON_FUN_MP.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	co.unchecked()
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		assert( ...
			~co.isChecked(prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['CombineGroups_CON_FUN_MP.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	co.checked()
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		assert( ...
			co.isChecked(prop), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['CombineGroups_CON_FUN_MP.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic CombineGroups_CON_FUN_MP
	co_0 = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.TEMPLATE), ...
		CombineGroups_CON_FUN_MP.ID, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.ID), ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_CON), ...
		CombineGroups_CON_FUN_MP.GR_FUN, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_FUN), ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	% CombineGroups_CON_FUN_MP with 1st callbacks
	co_1 = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, co_0.getCallback(4), ..., ...
		CombineGroups_CON_FUN_MP.ID, co_0.getCallback(5), ..., ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, co_0.getCallback(10), ..., ...
		CombineGroups_CON_FUN_MP.GR_FUN, co_0.getCallback(11), ..., ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	prop_number = CombineGroups_CON_FUN_MP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(co_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(co_1.get(prop), co_0.get(prop)) && ~isa(co_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(co_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CombineGroups_CON_FUN_MP with 2nd callbacks
	co_2 = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, co_1.getCallback(4), ..., ...
		CombineGroups_CON_FUN_MP.ID, co_1.getCallback(5), ..., ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, co_1.getCallback(10), ..., ...
		CombineGroups_CON_FUN_MP.GR_FUN, co_1.getCallback(11), ..., ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	prop_number = CombineGroups_CON_FUN_MP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(co_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(co_2.get(prop), co_0.get(prop)) && ~isa(co_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(co_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CombineGroups_CON_FUN_MP with 3rd callbacks
	co_3 = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, co_2.getCallback(4), ..., ...
		CombineGroups_CON_FUN_MP.ID, co_2.getCallback(5), ..., ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, co_2.getCallback(10), ..., ...
		CombineGroups_CON_FUN_MP.GR_FUN, co_2.getCallback(11), ..., ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	prop_number = CombineGroups_CON_FUN_MP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(co_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(co_3.get(prop), co_0.get(prop)) && ~isa(co_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(co_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	co = CombineGroups_CON_FUN_MP();
	 
	co_copy = co.copy();
	 
	assert(co_copy ~= co, ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(co_copy, co), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		value = co.getr(prop);
		value_copy = co_copy.getr(prop);
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'CombineGroups_CON_FUN_MP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'CombineGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'CombineGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					co_copy.isLocked(prop) == co.isLocked(prop), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'CombineGroups_CON_FUN_MP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					co_copy.isChecked(prop) == co.isChecked(prop), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'CombineGroups_CON_FUN_MP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					co_copy.getPropSeed(prop) == co.getPropSeed(prop), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'CombineGroups_CON_FUN_MP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	co = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.TEMPLATE), ...
		CombineGroups_CON_FUN_MP.ID, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.ID), ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_CON), ...
		CombineGroups_CON_FUN_MP.GR_FUN, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_FUN), ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		if CombineGroups_CON_FUN_MP.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':CombineGroups_CON_FUN_MP']);
			% co.memorize(prop);
			% warning(warning_backup)
		elseif CombineGroups_CON_FUN_MP.getPropCategory(prop) == Category.EVANESCENT && co.getPropFormat(prop) == Format.HANDLE
			co.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:CombineGroups_CON_FUN_MP');
			delete(ancestor(co.get(prop), 'figure'))
			warning(warning_backup)
		else
			co.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	co_copy = co.copy();
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		value = co.getr(prop);
		value_copy = co_copy.getr(prop);
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'CombineGroups_CON_FUN_MP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'CombineGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'CombineGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						co_copy.isLocked(prop) == co.isLocked(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						co_copy.isChecked(prop) == co.isChecked(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						co_copy.getPropSeed(prop) == co.getPropSeed(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	co_0 = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.TEMPLATE), ...
		CombineGroups_CON_FUN_MP.ID, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.ID), ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_CON), ...
		CombineGroups_CON_FUN_MP.GR_FUN, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_FUN), ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	co = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, co_0.getCallback(4), ..., ...
		CombineGroups_CON_FUN_MP.ID, co_0.getCallback(5), ..., ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, co_0.getCallback(10), ..., ...
		CombineGroups_CON_FUN_MP.GR_FUN, co_0.getCallback(11), ..., ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	co_copy = co.copy();
	co_0_copy = co_copy.getr('ID').get('EL');
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
		value = co.getr(prop);
		value_copy = co_copy.getr(prop);
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'CombineGroups_CON_FUN_MP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'CombineGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'CombineGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == co_0.getCallback(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The callback should be obtained from CombineGroups_CON_FUN_MP.getCallback().' ...
						)
					assert( ...
						value_copy == co_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The callback should be obtained from CombineGroups_CON_FUN_MP.getCallback().' ...
						)
				end
	 
					assert( ...
						co_copy.isLocked(prop) == co.isLocked(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						co_copy.isChecked(prop) == co.isChecked(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						co_copy.getPropSeed(prop) == co.getPropSeed(prop), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co_template = CombineGroups_CON_FUN_MP();
	co = CombineGroups_CON_FUN_MP('TEMPLATE', co_template);
	 
	for prop = 1:1:CombineGroups_CON_FUN_MP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CombineGroups_CON_FUN_MP.getPropTag(prop));
		switch CombineGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == CombineGroups_CON_FUN_MP.TEMPLATE
					assert( ...
						isa(co.getr(prop), 'CombineGroups_CON_FUN_MP'), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP TEMPLATE does not work. CombineGroups_CON_FUN_MP.getr(''TEMPLATE'') should be a CombineGroups_CON_FUN_MP element.' ...
						)
					assert( ...
						isa(co_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'CombineGroups_CON_FUN_MP TEMPLATE does not work. CombineGroups_CON_FUN_MP_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(co.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP TEMPLATE does not work. CombineGroups_CON_FUN_MP.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						co.getr(prop).get('EL') == co_template && co.getr(prop).get('PROP') == prop && strcmp(co.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP TEMPLATE does not work. CombineGroups_CON_FUN_MP.getr(' TAG ') should be a Callback to co_template.' TAG '.'] ...
						)
					assert( ...
						isa(co_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['CombineGroups_CON_FUN_MP TEMPLATE does not work. CombineGroups_CON_FUN_MP_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(co.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP TEMPLATE does not work. CombineGroups_CON_FUN_MP.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(co_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['CombineGroups_CON_FUN_MP TEMPLATE does not work. CombineGroups_CON_FUN_MP_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.TEMPLATE), ...
		CombineGroups_CON_FUN_MP.ID, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.ID), ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_CON), ...
		CombineGroups_CON_FUN_MP.GR_FUN, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_FUN), ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'combinegroups_con_fun_mp_to_be_erased.b2'];
	 
	Element.save(co, filename)
	 
	co_loaded = Element.load(filename);
	 
	assert( ...
		isequal(co.copy(), co_loaded), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.save(co) and/or CombineGroups_CON_FUN_MP.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	co = CombineGroups_CON_FUN_MP( ...
		CombineGroups_CON_FUN_MP.ELCLASS, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.NAME, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.DESCRIPTION, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.TEMPLATE, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.TEMPLATE), ...
		CombineGroups_CON_FUN_MP.ID, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.ID), ...
		CombineGroups_CON_FUN_MP.LABEL, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.LABEL), ...
		CombineGroups_CON_FUN_MP.NOTES, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.NOTES), ...
		CombineGroups_CON_FUN_MP.TOSTRING, CombineGroups_CON_FUN_MP.getNoValue(), ...
		CombineGroups_CON_FUN_MP.WAITBAR, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.WAITBAR), ...
		CombineGroups_CON_FUN_MP.GR_CON, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_CON), ...
		CombineGroups_CON_FUN_MP.GR_FUN, CombineGroups_CON_FUN_MP.getPropDefault(CombineGroups_CON_FUN_MP.GR_FUN), ...
		CombineGroups_CON_FUN_MP.GR_CON_FUN_MP, CombineGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(co);
	[co_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(co_dec ~= co, ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'CombineGroups_CON_FUN_MP.encodeJSON() or CombineGroups_CON_FUN_MP.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) CombineGroups_CON_FUN_MP.getPropFormat(prop), num2cell(CombineGroups_CON_FUN_MP.getProps())) == Format.HANDLE) && all(cellfun(@(prop) CombineGroups_CON_FUN_MP.getPropFormat(prop), num2cell(CombineGroups_CON_FUN_MP.getProps())) == Format.NET)
		assert(isequal(co_dec, co), ...
			[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'CombineGroups_CON_FUN_MP.encodeJSON() or CombineGroups_CON_FUN_MP.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Create example files
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
    data_dir = [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS'];
    if ~isdir(data_dir)
        mkdir(data_dir);
        
        % Brain Atlas
        im_ba = ImporterBrainAtlasXLS('FILE', 'aal90_atlas.xlsx');
        ba = im_ba.get('BA');
        ex_ba = ExporterBrainAtlasXLS( ...
            'BA', ba, ...
            'FILE', [data_dir filesep() 'atlas.xlsx'] ...
            );
        ex_ba.get('SAVE')
        N = ba.get('BR_DICT').get('LENGTH');
        
        % saves RNG
        rng_settings_ = rng(); rng('default')
        
        sex_options = {'Female' 'Male'};
        N_subjects_group1 = 10;
        N_subjects_group2 = 10;
        N_subjects_group3 = 10;
        N_tslength = 200;
        
        % Group 1
        % initialize values for the WS model
        K1 = [3 4 5 6 7];
        beta1 = [0.02 0.1 0.3 0.5 0.8];
        % initialize the indices where the matrices will be placed
        indices1 = 1:1:18;
        indices2 = 19:1:36;
        indices3 = 37:1:54;
        indices4 = 55:1:72;
        indices5 = 73:1:90;
        indices = {indices1; indices2; indices3; indices4; indices5};
        gr1_ts1 = cell(1, N_subjects_group1); % layer 1
        gr1_ts2 = cell(1, N_subjects_group1); % layer 2
        gr_name1 = 'CON_FUN_MP_Group1_XLS';
        vois1 = [
            {{'Subject ID'} {'Age'} {'Sex'}}
            {{} {} cell2str(sex_options)}
            ];
        sub_id = cell(1, N_subjects_group1);
        for i = 1:1:N_subjects_group1 % subject number
            sub_id(i) = {['SubjectCON_FUN_MP_' num2str(i)]};
            
            % randomize the parameters
            K_temp = K1(randperm(length(K1)));
            beta_temp = beta1(randperm(length(beta1)));
            % initialize matrix for the subject
            A_full1 = zeros(N);
            % loop over each module
            for i_mod = 1:1:5
                A_full1(indices{i_mod},indices{i_mod}) = full(adjacency(WattsStrogatz(18, K_temp(i_mod), beta_temp(i_mod))));
            end
            A_full1(1:length(A_full1)+1:numel(A_full1)) = 1;
            
            % this is needed to make the matrices positive definite
            A_full1 = A_full1*transpose(A_full1);
            % 10% of connections kept
            density = 10;
            A_full2 = A_full1;
            sorted_vector = sort(A_full2(:));
            index = round(length(sorted_vector) * (100 - density) / 100);
            if index == 0
                threshold = sorted_vector(1) - eps;
            elseif index >= length(sorted_vector)
                threshold = sorted_vector(end) + eps;
            else
                threshold = sorted_vector(index);
            end
            % Calculates thresholded graph
            A_full2(A_full2 < threshold) = 0;
            % This matrix will be covariance matrices for the two groups
            % Specify the mean
            mu_gr11 = ones(1, length(A_full1));
            % calculate time series
            R11 = mvnrnd(mu_gr11, A_full1, N_tslength);
            % Normalize the time series
            mean_R11 = mean(R11);
            std_R11 = std(R11);
            R11 = (R11 - mean_R11) ./ std_R11;
            % place in the array
            gr1_ts1{1, i} = R11;
            gr1_ts2{1, i} = A_full2;
            
            % variables of interest
            vois1 = [vois1; {sub_id{i}, randi(90), sex_options(randi(2))}];
        end
        % Create the tables - functional layer
        %tables_gr11 = cell(size(gr1_ts1));
        mkdir([data_dir filesep() 'Functional' filesep() gr_name1]);
        for i_tab = 1:1:N_subjects_group1
            T_gr11 = array2table(gr1_ts1{i_tab});
            %tables_gr11{i_tab} = T_gr11;
            file_name = [data_dir filesep() 'Functional' filesep() gr_name1 filesep() sub_id{i_tab} '.xlsx'];
            writetable(T_gr11, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
        end
        
        % Create the tables - connectivity layer
        %tables_gr12 = cell(size(gr1_ts2));
        mkdir([data_dir filesep() 'Connectivity' filesep() gr_name1]);
        for i_tab = 1:1:N_subjects_group1
            T_gr12 = array2table(gr1_ts2{i_tab});
            %tables_gr12{i_tab} = T_gr12;
            file_name = [data_dir filesep() 'Connectivity' filesep() gr_name1 filesep() sub_id{i_tab} '.xlsx'];
            writetable(T_gr12, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
        end
        writetable(table(vois1), [data_dir filesep() 'Connectivity' filesep() gr_name1 '.vois.xlsx'], 'WriteVariableNames', false)
        writetable(table(vois1), [data_dir filesep() 'Functional' filesep() gr_name1 '.vois.xlsx'], 'WriteVariableNames', false)
        
        % Group 2
        % initialize values for the WS model
        K2 = [3 7];
        beta2 = [0.02 0.85];
        % initialize the indices where the matrices will be placed
        indices1 = 1:1:45;
        indices2 = 46:1:90;
        indices = {indices1; indices2};
        gr2_ts1 = cell(1, N_subjects_group2); % layer 1
        gr2_ts2 = cell(1, N_subjects_group2); % layer 2
        gr2_name = 'CON_FUN_MP_Group2_XLS';
        vois2 = [
            {{'Subject ID'} {'Age'} {'Sex'}}
            {{} {} cell2str(sex_options)}
            ];
        sub_id = cell(1, N_subjects_group1);
        for i = N_subjects_group1+1:1:N_subjects_group1+N_subjects_group2 % subject number
            sub_id(i) = {['SubjectCON_FUN_MP_' num2str(i)]};
            
            % randomize the parameters
            K_temp = K2(randperm(length(K2)));
            beta_temp = beta2(randperm(length(beta2)));
            % initialize matrix for the subject
            A_full1 = zeros(N);
            % loop over each module
            for i_mod = 1:1:2
                A_full1(indices{i_mod},indices{i_mod}) = full(adjacency(WattsStrogatz(45, K_temp(i_mod), beta_temp(i_mod))));
            end
            A_full1(1:length(A_full1)+1:numel(A_full1)) = 1;
            % this is needed to make the matrices positive definite
            A_full1 = A_full1*transpose(A_full1);
            
            % 70% of connections kept
            density = 70;
            A_full2 = A_full1;
            sorted_vector = sort(A_full2(:));
            index = round(length(sorted_vector) * (100 - density) / 100);
            if index == 0
                threshold = sorted_vector(1) - eps;
            elseif index >= length(sorted_vector)
                threshold = sorted_vector(end) + eps;
            else
                threshold = sorted_vector(index);
            end
            % Calculates thresholded graph
            A_full2(A_full2 < threshold) = 0;
            
            % make the adjacency matrix weighted
            r = 0 + (0.5 - 0)*rand(size(A_full2));
            diffA = A_full2 - r;
            A_full2(A_full2 ~= 0) = diffA(A_full2 ~= 0);
            % make the adjacency matrix symmetric
            A_full2 = max(A_full2, transpose(A_full2));
            % This matrix will be covariance matrices for the two groups
            % Specify the mean
            mu_gr2_1 = ones(1, length(A_full1));
            % calculate time series
            R21 = mvnrnd(mu_gr2_1, A_full1, N_tslength);
            % Normalize the time series
            mean_R21 = mean(R21);
            std_R21 = std(R21);
            R21 = (R21 - mean_R21) ./ std_R21;
            % place in the array
            gr2_ts1{1, i} = R21;
            gr2_ts2{1, i} = A_full2;
            
            % variables of interest
            vois2 = [vois2; {sub_id{i}, randi(90), sex_options(randi(2))}];
        end
        % Create the tables - functional layer
        %tables_gr11 = cell(size(gr2_ts1));
        mkdir([data_dir filesep() 'Functional' filesep() gr2_name]);
        for i_tab = N_subjects_group1+1:1:N_subjects_group1 + N_subjects_group2
            T_gr21 = array2table(gr2_ts1{i_tab});
            %tables_gr21{i_tab} = T_gr21;
            file_name = [data_dir filesep() 'Functional' filesep() gr2_name filesep() sub_id{i_tab} '.xlsx'];
            writetable(T_gr21, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
        end
        
        % Create the tables - connectivity layer
        %tables_gr12 = cell(size(gr2_ts2));
        mkdir([data_dir filesep() 'Connectivity' filesep() gr2_name]);
        for i_tab = N_subjects_group1+1:1:N_subjects_group1 + N_subjects_group2
            T_gr22 = array2table(gr2_ts2{i_tab});
            %tables_gr22{i_tab} = T_gr22;
            file_name = [data_dir filesep() 'Connectivity' filesep() gr2_name filesep() sub_id{i_tab} '.xlsx'];
            writetable(T_gr22, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
        end
        writetable(table(vois2), [data_dir filesep() 'Connectivity' filesep() gr2_name '.vois.xlsx'], 'WriteVariableNames', false)
        writetable(table(vois2), [data_dir filesep() 'Functional' filesep() gr2_name '.vois.xlsx'], 'WriteVariableNames', false)
        
        % reset RNG
        rng(rng_settings_)
    end
end

%% Test 13: Basic functioning
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    im_ba = ImporterBrainAtlasTXT('FILE', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'atlas.xlsx']);
    ba = im_ba.get('BA');
    
    im_gr_CON = ImporterGroupSubjectCON_MP_XLS( ...
        'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group_1_XLS'], ...
        'BA', ba, ...
        'WAITBAR', true ...
        );
    gr_CON = im_gr_CON.get('GR');
    
    im_gr_FUN = ImporterGroupSubjectFUN_TXT( ...
        'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group_1_XLS'], ...
        'BA', ba, ...
        'WAITBAR', true ...
        );
    gr_FUN = im_gr_FUN.get('GR');
    
    co = CombineGroups_CON_FUN_MP( ...
        'GR_CON', gr_CON, ...
        'GR_FUN', gr_FUN ...
        );
    gr = co.get('GR_CON_FUN_MP');
    
	gui = GUIElement('PE', gr, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
	
	assert(gr.get('SUB_DICT').get('LENGTH') == gr_CON.get('SUB_DICT').get('LENGTH'), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	    'Problems combining the groups.')
	for i = 1:1:gr_CON.get('SUB_DICT').get('LENGTH')
	    sub_CON = gr_CON.get('SUB_DICT').get('IT', i);
	    sub_FUN = gr_FUN.get('SUB_DICT').get('IT', i);
	    sub = gr.get('SUB_DICT').get('IT', i);
	    
	    assert( ...
	        isequal(sub.get('ID'), sub_CON.get('ID')) & ...
	        isequal(sub.get('BA').get('ID'), sub_CON.get('BA').get('ID')) & ...
	        isequal(sub.get('VOI_DICT').get('IT', 'Age').get('V'), sub_CON.get('VOI_DICT').get('IT', 'Age').get('V')) & ... 
	        isequal(sub.get('VOI_DICT').get('IT', 'Sex').get('V'), sub_CON.get('VOI_DICT').get('IT', 'Sex').get('V')) & ...
	        isequal(sub.get('CON'), sub_CON.get('CON')) & ...
	        isequal(sub.get('FUN'), sub_FUN.get('FUN')), ...
	        [BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	        'Problems combining the groups.')    
	end
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':CombineGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		[' When testing CombineGroups_CON_FUN_MP no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

%% Test functions
function h = WattsStrogatz(N,K,beta)
% H = WattsStrogatz(N,K,beta) returns a Watts-Strogatz model graph with N
% nodes, N*K edges, mean node degree 2*K, and rewiring probability beta.
%
% beta = 0 is a ring lattice, and beta = 1 is a random graph.

% Connect each node to its K next and previous neighbors. This constructs
% indices for a ring lattice.
s = repelem((1:N)',1,K);
t = s + repmat(1:K,N,1);
t = mod(t-1,N)+1;

% Rewire the target node of each edge with probability beta
for source=1:N
    switchEdge = rand(K, 1) < beta;
    
    newTargets = rand(N, 1);
    newTargets(source) = 0;
    newTargets(s(t==source)) = 0;
    newTargets(t(source, ~switchEdge)) = 0;
    
    [~, ind] = sort(newTargets, 'descend');
    t(source, switchEdge) = ind(1:nnz(switchEdge));
end

h = graph(s,t);
end