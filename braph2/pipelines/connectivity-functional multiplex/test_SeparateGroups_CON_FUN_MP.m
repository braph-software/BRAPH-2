%TEST_SEPARATEGROUPS_CON_FUN_MP

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	se = SeparateGroups_CON_FUN_MP();
	 
	% get('ELCLASS')
	if isa(SeparateGroups_CON_FUN_MP, 'ConcreteElement')
		assert(strcmp(SeparateGroups_CON_FUN_MP().get('ELCLASS'), 'SeparateGroups_CON_FUN_MP'), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP().get(''ELCLASS'') should return ''SeparateGroups_CON_FUN_MP''.')
	end
	 
	% getClass
	assert(strcmp(SeparateGroups_CON_FUN_MP.getClass(), 'SeparateGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.getClass() should return ''SeparateGroups_CON_FUN_MP''.')
	assert(strcmp(se.getClass(), 'SeparateGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'se.getClass() should return ''SeparateGroups_CON_FUN_MP''.')
	assert(strcmp(Element.getClass(se), 'SeparateGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(se) should return ''SeparateGroups_CON_FUN_MP''.')
	assert(strcmp(Element.getClass('SeparateGroups_CON_FUN_MP'), 'SeparateGroups_CON_FUN_MP'), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''SeparateGroups_CON_FUN_MP'') should return ''SeparateGroups_CON_FUN_MP''.')
	 
	% getSubclasses()
	assert(isequal(SeparateGroups_CON_FUN_MP.getSubclasses(), subclasses('SeparateGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.getSubclasses() should return the same result as subclasses(''SeparateGroups_CON_FUN_MP'', [], [], true).')
	assert(isequal(se.getSubclasses(), subclasses('SeparateGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''SeparateGroups_CON_FUN_MP'', [], [], true).')
	assert(isequal(Element.getSubclasses(se), subclasses('SeparateGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(se) should return the same result as subclasses(''SeparateGroups_CON_FUN_MP'', [], [], true).')
	assert(isequal(Element.getSubclasses('SeparateGroups_CON_FUN_MP'), subclasses('SeparateGroups_CON_FUN_MP', [], [], true)), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''SeparateGroups_CON_FUN_MP'') should return the same result as subclasses(''SeparateGroups_CON_FUN_MP'', [], [], true).')
	 
	% getProps()
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(SeparateGroups_CON_FUN_MP.getProps(), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.getProps() should return a row vector [1:1:N].')
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(se.getProps(), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'se.getProps() should return a row vector [1:1:N].')
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(Element.getProps(se), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(se) should return a row vector [1:1:N].')
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(Element.getProps('SeparateGroups_CON_FUN_MP'), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SeparateGroups_CON_FUN_MP'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) SeparateGroups_CON_FUN_MP.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.getProps(category) does not work.')
	tmp = cellfun(@(category) se.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'se.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(se, category), categories, 'UniformOutput', false);
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(se, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('SeparateGroups_CON_FUN_MP', category), categories, 'UniformOutput', false);
	assert(isempty(SeparateGroups_CON_FUN_MP.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SeparateGroups_CON_FUN_MP.getProps())), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SeparateGroups_CON_FUN_MP'', category) does not work.')
	 
	% getPropNumber()
	assert(SeparateGroups_CON_FUN_MP.getPropNumber() == length(SeparateGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.getPropNumber() should return the number of properties.')
	assert(se.getPropNumber() == length(SeparateGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'se.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(se) == length(SeparateGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(se) should return the number of properties.')
	assert(Element.getPropNumber('SeparateGroups_CON_FUN_MP') == length(SeparateGroups_CON_FUN_MP.getProps()), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SeparateGroups_CON_FUN_MP'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) SeparateGroups_CON_FUN_MP.getPropNumber(category), categories)) == SeparateGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) se.getPropNumber(category), categories)) == SeparateGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'se.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(se, category), categories)) == SeparateGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(se, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('SeparateGroups_CON_FUN_MP', category), categories)) == SeparateGroups_CON_FUN_MP.getPropNumber(), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SeparateGroups_CON_FUN_MP'', category) does not work.')
	 
	% existsProp(prop)
	assert(~SeparateGroups_CON_FUN_MP.existsProp(NaN), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.existsProp(prop) does not work.')
	assert(~se.existsProp(NaN), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'se.existsProp(prop) does not work.')
	assert(~Element.existsProp(se, NaN), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(se, prop) does not work.')
	assert(~Element.existsProp('SeparateGroups_CON_FUN_MP', NaN), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''SeparateGroups_CON_FUN_MP'', prop) does not work.')
	 
	assert_with_error('SeparateGroups_CON_FUN_MP.existsProp(NaN)', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], se)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], se)
	assert_with_error('Element.existsProp(''SeparateGroups_CON_FUN_MP'', NaN)', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		assert(SeparateGroups_CON_FUN_MP.existsProp(prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.existsProp(prop) does not work.')
		assert(se.existsProp(prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.existsProp(prop) does not work.')
		assert(Element.existsProp(se, prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(se, prop) does not work.')
		assert(Element.existsProp('SeparateGroups_CON_FUN_MP', prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''SeparateGroups_CON_FUN_MP'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~SeparateGroups_CON_FUN_MP.existsTag(''), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.existsTag(tag) does not work.')
	assert(~se.existsTag(''), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'se.existsTag(tag) does not work.')
	assert(~Element.existsTag(se, ''), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(se, tag) does not work.')
	assert(~Element.existsTag('SeparateGroups_CON_FUN_MP', ''), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''SeparateGroups_CON_FUN_MP'', tag) does not work.')
	 
	assert_with_error('SeparateGroups_CON_FUN_MP.existsTag('''')', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], se)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], se)
	assert_with_error('Element.existsTag(''SeparateGroups_CON_FUN_MP'', '''')', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
		assert(SeparateGroups_CON_FUN_MP.existsTag(tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.existsTag(tag) does not work.')
		assert(se.existsTag(tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.existsTag(tag) does not work.')
		assert(Element.existsTag(se, tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(se, tga) does not work.')
		assert(Element.existsTag('SeparateGroups_CON_FUN_MP', tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''SeparateGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		assert(SeparateGroups_CON_FUN_MP.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropProp(prop) does not work.')
		assert(se.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropProp(prop) does not work.')
		assert(Element.getPropProp(se, prop) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(se, prop) does not work.')
		assert(Element.getPropProp('SeparateGroups_CON_FUN_MP', prop) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SeparateGroups_CON_FUN_MP'', prop) does not work.')
	 
		tag = se.getPropTag(prop);
		assert(SeparateGroups_CON_FUN_MP.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropProp(tag) does not work.')
		assert(se.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropProp(tag) does not work.')
		assert(Element.getPropProp(se, tag) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(se, tag) does not work.')
		assert(Element.getPropProp('SeparateGroups_CON_FUN_MP', prop) == prop, ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SeparateGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		assert(strcmp(SeparateGroups_CON_FUN_MP.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropTag(prop) does not work.')
		assert(strcmp(se.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(se, prop), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(se, prop) does not work.')
		assert(strcmp(Element.getPropTag('SeparateGroups_CON_FUN_MP', prop), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SeparateGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(strcmp(SeparateGroups_CON_FUN_MP.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropTag(tag) does not work.')
		assert(strcmp(se.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(se, tag), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(se, tag) does not work.')
		assert(strcmp(Element.getPropTag('SeparateGroups_CON_FUN_MP', prop), tag), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SeparateGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		assert(Category.existsCategory(SeparateGroups_CON_FUN_MP.getPropCategory(prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(se.getPropCategory(prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(se, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(se, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(se, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SeparateGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(Category.existsCategory(SeparateGroups_CON_FUN_MP.getPropCategory(tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(se.getPropCategory(tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(se, tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(se, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(se, tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SeparateGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		assert(Format.existsFormat(SeparateGroups_CON_FUN_MP.getPropFormat(prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(se.getPropFormat(prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(se, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(se, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(se, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SeparateGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(Format.existsFormat(SeparateGroups_CON_FUN_MP.getPropFormat(tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(se.getPropFormat(tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(se, tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(se, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(se, tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SeparateGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		assert(ischar(SeparateGroups_CON_FUN_MP.getPropDescription(prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropDescription(prop) does not work.')
		assert(ischar(se.getPropDescription(prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(se, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(se, prop) does not work.')
		assert(ischar(Element.getPropDescription(se, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SeparateGroups_CON_FUN_MP'', prop) does not work.')
	 
		assert(ischar(SeparateGroups_CON_FUN_MP.getPropDescription(tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.getPropDescription(tag) does not work.')
		assert(ischar(se.getPropDescription(tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(se, tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(se, tag) does not work.')
		assert(ischar(Element.getPropDescription(se, tag)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SeparateGroups_CON_FUN_MP'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		settings = SeparateGroups_CON_FUN_MP.getPropSettings(prop);
		settings = se.getPropSettings(prop);
		settings = Element.getPropSettings(se, prop);
		settings = Element.getPropSettings('SeparateGroups_CON_FUN_MP', prop);
	 
		settings = SeparateGroups_CON_FUN_MP.getPropSettings(tag);
		settings = se.getPropSettings(tag);
		settings = Element.getPropSettings(se, tag);
		settings = Element.getPropSettings('SeparateGroups_CON_FUN_MP', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		default = SeparateGroups_CON_FUN_MP.getPropDefault(prop);
		default = se.getPropDefault(prop);
		default = Element.getPropDefault(se, prop);
		default = Element.getPropDefault('SeparateGroups_CON_FUN_MP', prop);
	 
		default = SeparateGroups_CON_FUN_MP.getPropDefault(tag);
		default = se.getPropDefault(tag);
		default = Element.getPropDefault(se, tag);
		default = Element.getPropDefault('SeparateGroups_CON_FUN_MP', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		conditioned_default = SeparateGroups_CON_FUN_MP.getPropDefaultConditioned(prop);
		conditioned_default = se.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(se, prop);
		conditioned_default = Element.getPropDefaultConditioned('SeparateGroups_CON_FUN_MP', prop);
	 
		conditioned_default = SeparateGroups_CON_FUN_MP.getPropDefaultConditioned(tag);
		conditioned_default = se.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(se, tag);
		conditioned_default = Element.getPropDefaultConditioned('SeparateGroups_CON_FUN_MP', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		tag = se.getPropTag(prop);
	 
		assert(~SeparateGroups_CON_FUN_MP.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.checkProp(prop, value) does not work.')
		assert(~se.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(se, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(se, prop, value) does not work.')
		assert(~Element.checkProp('SeparateGroups_CON_FUN_MP', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SeparateGroups_CON_FUN_MP'', prop, value) does not work.')
	 
		assert_with_error('SeparateGroups_CON_FUN_MP.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop, se)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop, se)
		assert_with_error('Element.checkProp(''SeparateGroups_CON_FUN_MP'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~SeparateGroups_CON_FUN_MP.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.checkProp(tag, value) does not work.')
		assert(~se.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(se, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(se, tag, value) does not work.')
		assert(~Element.checkProp('SeparateGroups_CON_FUN_MP', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SeparateGroups_CON_FUN_MP'', tag, value) does not work.')
	 
		assert_with_error('SeparateGroups_CON_FUN_MP.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag, se)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag, se)
		assert_with_error('Element.checkProp(''SeparateGroups_CON_FUN_MP'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(SeparateGroups_CON_FUN_MP.checkProp(prop, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.checkProp(prop, <conditioned default value>) does not work.')
		assert(se.checkProp(prop, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(se, prop, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(se, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('SeparateGroups_CON_FUN_MP', prop, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SeparateGroups_CON_FUN_MP'', prop, <conditioned default value>) does not work.')
	 
		assert(SeparateGroups_CON_FUN_MP.checkProp(tag, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.checkProp(tag, <conditioned default value>) does not work.')
		assert(se.checkProp(tag, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'se.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(se, tag, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(se, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('SeparateGroups_CON_FUN_MP', tag, Element.getPropDefaultConditioned(SeparateGroups_CON_FUN_MP, prop)), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SeparateGroups_CON_FUN_MP'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.TEMPLATE), ...
		SeparateGroups_CON_FUN_MP.ID, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.ID), ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP), ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					se.getr(prop) == SeparateGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' SeparateGroups_CON_FUN_MP.getCategoryName(SeparateGroups_CON_FUN_MP.getPropCategory(prop)) ', SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					se.getr(TAG) == SeparateGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' SeparateGroups_CON_FUN_MP.getCategoryName(SeparateGroups_CON_FUN_MP.getPropCategory(prop)) ', SeparateGroups_CON_FUN_MP.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SeparateGroups_CON_FUN_MP.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(se.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(se.getPropSettings(prop))
					assert( ...
						se.checkFormat(se.getPropFormat(prop), se.get(prop)), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						se.checkFormat(se.getPropFormat(prop), se.get(prop), se.getPropSettings(prop)), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					se.getr(prop) == SeparateGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' SeparateGroups_CON_FUN_MP.getCategoryName(SeparateGroups_CON_FUN_MP.getPropCategory(prop)) ', SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					se.getr(TAG) == SeparateGroups_CON_FUN_MP.getNoValue(), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['Being a ' SeparateGroups_CON_FUN_MP.getCategoryName(SeparateGroups_CON_FUN_MP.getPropCategory(prop)) ', SeparateGroups_CON_FUN_MP.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SeparateGroups_CON_FUN_MP.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP']);
				assert( ...
					~isa(se.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(se.getPropSettings(prop))
					assert( ...
						se.checkFormat(se.getPropFormat(prop), se.get(prop)), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						se.checkFormat(se.getPropFormat(prop), se.get(prop), se.getPropSettings(prop)), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(se.getr(prop), SeparateGroups_CON_FUN_MP.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by SeparateGroups_CON_FUN_MP.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(se.getr(TAG), SeparateGroups_CON_FUN_MP.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' TAG ') must be inizialized to its default value ' ...
					'given by SeparateGroups_CON_FUN_MP.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SeparateGroups_CON_FUN_MP.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.TEMPLATE), ...
		SeparateGroups_CON_FUN_MP.ID, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.ID), ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP), ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(se.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(se.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(se.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(se.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					se.checkFormat(se.getPropFormat(prop), se.getr(prop),se.getPropSettings(prop)), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP']);
				assert( ...
					~isa(se.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(se.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP']);
	% 			assert( ...
	% 				~isa(se.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	% 				['SeparateGroups_CON_FUN_MP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(se.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	% 				['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				se.checkFormat(se.getPropFormat(prop), se.getr(prop),se.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	% 				['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP']);
				assert( ...
					~isa(se.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(se.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(se.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(se.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					se.checkFormat(se.getPropFormat(prop), se.getr(prop),se.getPropSettings(prop)), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if se.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:SeparateGroups_CON_FUN_MP');
					delete(ancestor(se.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(SeparateGroups_CON_FUN_MP.getProps(Category.RESULT))
		for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						se.isLocked(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~se.isLocked(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se = SeparateGroups_CON_FUN_MP();
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		assert( ...
			~se.isLocked(prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['SeparateGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~se.isLocked(TAG), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['SeparateGroups_CON_FUN_MP.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	se.lock()
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					se.isLocked(prop), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~se.isLocked(prop), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se = SeparateGroups_CON_FUN_MP();
	 
	warning_backup = warning('off', 'BRAPH2:SeparateGroups_CON_FUN_MP');
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		se.lock(prop)
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					se.isLocked(prop), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~se.isLocked(prop), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se = SeparateGroups_CON_FUN_MP();
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		assert( ...
			se.isChecked(prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['SeparateGroups_CON_FUN_MP.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			se.isChecked(TAG), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['SeparateGroups_CON_FUN_MP.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	se.unchecked()
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		assert( ...
			~se.isChecked(prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['SeparateGroups_CON_FUN_MP.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	se.checked()
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		assert( ...
			se.isChecked(prop), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			['SeparateGroups_CON_FUN_MP.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic SeparateGroups_CON_FUN_MP
	se_0 = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.TEMPLATE), ...
		SeparateGroups_CON_FUN_MP.ID, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.ID), ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP), ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	% SeparateGroups_CON_FUN_MP with 1st callbacks
	se_1 = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, se_0.getCallback(4), ..., ...
		SeparateGroups_CON_FUN_MP.ID, se_0.getCallback(5), ..., ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, se_0.getCallback(10), ..., ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	prop_number = SeparateGroups_CON_FUN_MP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(se_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(se_1.get(prop), se_0.get(prop)) && ~isa(se_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(se_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SeparateGroups_CON_FUN_MP with 2nd callbacks
	se_2 = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, se_1.getCallback(4), ..., ...
		SeparateGroups_CON_FUN_MP.ID, se_1.getCallback(5), ..., ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, se_1.getCallback(10), ..., ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	prop_number = SeparateGroups_CON_FUN_MP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(se_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(se_2.get(prop), se_0.get(prop)) && ~isa(se_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(se_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SeparateGroups_CON_FUN_MP with 3rd callbacks
	se_3 = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, se_2.getCallback(4), ..., ...
		SeparateGroups_CON_FUN_MP.ID, se_2.getCallback(5), ..., ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, se_2.getCallback(10), ..., ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	prop_number = SeparateGroups_CON_FUN_MP.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(se_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(se_3.get(prop), se_0.get(prop)) && ~isa(se_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(se_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	se = SeparateGroups_CON_FUN_MP();
	 
	se_copy = se.copy();
	 
	assert(se_copy ~= se, ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(se_copy, se), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		value = se.getr(prop);
		value_copy = se_copy.getr(prop);
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'SeparateGroups_CON_FUN_MP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'SeparateGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'SeparateGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					se_copy.isLocked(prop) == se.isLocked(prop), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'SeparateGroups_CON_FUN_MP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					se_copy.isChecked(prop) == se.isChecked(prop), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'SeparateGroups_CON_FUN_MP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					se_copy.getPropSeed(prop) == se.getPropSeed(prop), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'SeparateGroups_CON_FUN_MP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	se = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.TEMPLATE), ...
		SeparateGroups_CON_FUN_MP.ID, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.ID), ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP), ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		if SeparateGroups_CON_FUN_MP.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':SeparateGroups_CON_FUN_MP']);
			% se.memorize(prop);
			% warning(warning_backup)
		elseif SeparateGroups_CON_FUN_MP.getPropCategory(prop) == Category.EVANESCENT && se.getPropFormat(prop) == Format.HANDLE
			se.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:SeparateGroups_CON_FUN_MP');
			delete(ancestor(se.get(prop), 'figure'))
			warning(warning_backup)
		else
			se.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	se_copy = se.copy();
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		value = se.getr(prop);
		value_copy = se_copy.getr(prop);
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'SeparateGroups_CON_FUN_MP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'SeparateGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'SeparateGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						se_copy.isLocked(prop) == se.isLocked(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						se_copy.isChecked(prop) == se.isChecked(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						se_copy.getPropSeed(prop) == se.getPropSeed(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	se_0 = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.TEMPLATE), ...
		SeparateGroups_CON_FUN_MP.ID, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.ID), ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP), ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	se = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, se_0.getCallback(4), ..., ...
		SeparateGroups_CON_FUN_MP.ID, se_0.getCallback(5), ..., ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, se_0.getCallback(10), ..., ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	se_copy = se.copy();
	se_0_copy = se_copy.getr('ID').get('EL');
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
		value = se.getr(prop);
		value_copy = se_copy.getr(prop);
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					'SeparateGroups_CON_FUN_MP.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'SeparateGroups_CON_FUN_MP.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
							'SeparateGroups_CON_FUN_MP.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == se_0.getCallback(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The callback should be obtained from SeparateGroups_CON_FUN_MP.getCallback().' ...
						)
					assert( ...
						value_copy == se_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The callback should be obtained from SeparateGroups_CON_FUN_MP.getCallback().' ...
						)
				end
	 
					assert( ...
						se_copy.isLocked(prop) == se.isLocked(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						se_copy.isChecked(prop) == se.isChecked(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						se_copy.getPropSeed(prop) == se.getPropSeed(prop), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se_template = SeparateGroups_CON_FUN_MP();
	se = SeparateGroups_CON_FUN_MP('TEMPLATE', se_template);
	 
	for prop = 1:1:SeparateGroups_CON_FUN_MP.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SeparateGroups_CON_FUN_MP.getPropTag(prop));
		switch SeparateGroups_CON_FUN_MP.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == SeparateGroups_CON_FUN_MP.TEMPLATE
					assert( ...
						isa(se.getr(prop), 'SeparateGroups_CON_FUN_MP'), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP TEMPLATE does not work. SeparateGroups_CON_FUN_MP.getr(''TEMPLATE'') should be a SeparateGroups_CON_FUN_MP element.' ...
						)
					assert( ...
						isa(se_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						'SeparateGroups_CON_FUN_MP TEMPLATE does not work. SeparateGroups_CON_FUN_MP_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(se.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP TEMPLATE does not work. SeparateGroups_CON_FUN_MP.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						se.getr(prop).get('EL') == se_template && se.getr(prop).get('PROP') == prop && strcmp(se.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP TEMPLATE does not work. SeparateGroups_CON_FUN_MP.getr(' TAG ') should be a Callback to se_template.' TAG '.'] ...
						)
					assert( ...
						isa(se_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
						['SeparateGroups_CON_FUN_MP TEMPLATE does not work. SeparateGroups_CON_FUN_MP_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(se.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP TEMPLATE does not work. SeparateGroups_CON_FUN_MP.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(se_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
					['SeparateGroups_CON_FUN_MP TEMPLATE does not work. SeparateGroups_CON_FUN_MP_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.TEMPLATE), ...
		SeparateGroups_CON_FUN_MP.ID, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.ID), ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP), ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'separategroups_con_fun_mp_to_be_erased.b2'];
	 
	Element.save(se, filename)
	 
	se_loaded = Element.load(filename);
	 
	assert( ...
		isequal(se.copy(), se_loaded), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.save(se) and/or SeparateGroups_CON_FUN_MP.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	se = SeparateGroups_CON_FUN_MP( ...
		SeparateGroups_CON_FUN_MP.ELCLASS, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.NAME, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.DESCRIPTION, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.TEMPLATE, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.TEMPLATE), ...
		SeparateGroups_CON_FUN_MP.ID, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.ID), ...
		SeparateGroups_CON_FUN_MP.LABEL, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.LABEL), ...
		SeparateGroups_CON_FUN_MP.NOTES, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.NOTES), ...
		SeparateGroups_CON_FUN_MP.TOSTRING, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.WAITBAR, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.WAITBAR), ...
		SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP, SeparateGroups_CON_FUN_MP.getPropDefault(SeparateGroups_CON_FUN_MP.GR_CON_FUN_MP), ...
		SeparateGroups_CON_FUN_MP.GR_CON, SeparateGroups_CON_FUN_MP.getNoValue(), ...
		SeparateGroups_CON_FUN_MP.GR_FUN, SeparateGroups_CON_FUN_MP.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(se);
	[se_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(se_dec ~= se, ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		'SeparateGroups_CON_FUN_MP.encodeJSON() or SeparateGroups_CON_FUN_MP.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) SeparateGroups_CON_FUN_MP.getPropFormat(prop), num2cell(SeparateGroups_CON_FUN_MP.getProps())) == Format.HANDLE) && all(cellfun(@(prop) SeparateGroups_CON_FUN_MP.getPropFormat(prop), num2cell(SeparateGroups_CON_FUN_MP.getProps())) == Format.NET)
		assert(isequal(se_dec, se), ...
			[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
			'SeparateGroups_CON_FUN_MP.encodeJSON() or SeparateGroups_CON_FUN_MP.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Basic functioning
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% im_ba = ImporterBrainAtlasTXT('FILE', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'atlas.txt']);
	% ba = im_ba.get('BA');
	
	br1 = BrainRegion( ...
	    'ID', 'ISF', ...
	    'LABEL', 'superiorfrontal', ...
	    'NOTES', 'notes1', ...
	    'X', -12.6, ...
	    'Y', 22.9, ...
	    'Z', 42.4 ...
	    );
	br2 = BrainRegion( ...
	    'ID', 'lFP', ...
	    'LABEL', 'frontalpole', ...
	    'NOTES', 'notes2', ...
	    'X', -8.6, ...
	    'Y', 61.7, ...
	    'Z', -8.7 ...
	    );
	br3 = BrainRegion( ...
	    'ID', 'lRMF', ...
	    'LABEL', 'rostralmiddlefrontal', ...
	    'NOTES', 'notes3', ...
	    'X', -31.3, ...
	    'Y', 41.2, ...
	    'Z', 16.5 ...
	    );
	br4 = BrainRegion( ...
	    'ID', 'lCMF', ...
	    'LABEL', 'caudalmiddlefrontal', ...
	    'NOTES', 'notes4', ...
	    'X', -34.6, ...
	    'Y', 10.2, ...
	    'Z', 42.8 ...
	    );
	br5 = BrainRegion( ...
	    'ID', 'lPOB', ...
	    'LABEL', 'parsorbitalis', ...
	    'NOTES', 'notes5', ...
	    'X', -41, ...
	    'Y', 38.8, ...
	    'Z', -11.1 ...
	    );
	
	ba = BrainAtlas( ...
	    'ID', 'TestToSaveCoolID', ...
	    'LABEL', 'Brain Atlas', ...
	    'NOTES', 'Brain atlas notes', ...
	    'BR_DICT', IndexedDictionary('IT_CLASS', 'BrainRegion', 'IT_LIST', {br1, br2, br3, br4, br5}) ...
	    );
	
	% copyfile( ...
	%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.vois.txt'], ...
	%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.CON.vois.txt'] ...
	%     )
	% im_gr_CON = ImporterGroupSubjectCON_TXT( ...
	%     'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.CON'], ...
	%     'BA', ba, ...
	%     'WAITBAR', true ...
	%     );
	% gr_CON = im_gr_CON.get('GR');
	% delete([fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.CON.vois.txt'])
	
	sub_CON_1 = SubjectCON( ...
	    'ID', 'SUB 1', ...
	    'LABEL', 'Subejct CON 1', ...
	    'NOTES', 'Notes on subject CON 1', ...
	    'BA', ba, ...
	    'CON', rand(ba.get('BR_DICT').get('LENGTH')) ...
	    );
	sub_CON_1.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 75))
	sub_CON_1.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))
	
	sub_CON_2 = SubjectCON( ...
	    'ID', 'SUB 2', ...
	    'LABEL', 'Subejct CON 2', ...
	    'NOTES', 'Notes on subject CON 2', ...
	    'BA', ba, ...
	    'CON', rand(ba.get('BR_DICT').get('LENGTH')) ...
	    );
	sub_CON_2.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 70))
	sub_CON_2.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Male', {'Female', 'Male'}))))
	
	sub_CON_3 = SubjectCON( ...
	    'ID', 'SUB 3', ...
	    'LABEL', 'Subejct CON 3', ...
	    'NOTES', 'Notes on subject CON 3', ...
	    'BA', ba, ...
	    'CON', rand(ba.get('BR_DICT').get('LENGTH')) ...
	    );
	sub_CON_3.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 50))
	sub_CON_3.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))
	
	gr_CON = Group( ...
	    'ID', 'GR CON', ...
	    'LABEL', 'Group label', ...
	    'NOTES', 'Group notes', ...
	    'SUB_CLASS', 'SubjectCON', ...
	    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON', 'IT_LIST', {sub_CON_1, sub_CON_2, sub_CON_3}) ...
	    );
	
	% copyfile( ...
	%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.vois.txt'], ...
	%     [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.FUN.vois.txt'] ...
	%     )
	% im_gr_FUN = ImporterGroupSubjectFUN_TXT( ...
	%     'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.FUN'], ...
	%     'BA', ba, ...
	%     'WAITBAR', true ...
	%     );
	% gr_FUN = im_gr_FUN.get('GR');
	% delete([fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP TXT' filesep 'CON_FUN_MP_Group_1_TXT.FUN.vois.txt'])
	
	sub_FUN_1 = SubjectFUN( ...
	    'ID', 'SUB 1', ...
	    'LABEL', 'Subejct FUN 1', ...
	    'NOTES', 'Notes on subject FUN 1', ...
	    'BA', ba, ...
	    'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
	    );
	sub_FUN_1.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 75))
	sub_FUN_1.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))
	
	sub_FUN_2 = SubjectFUN( ...
	    'ID', 'SUB 2', ...
	    'LABEL', 'Subejct FUN 2', ...
	    'NOTES', 'Notes on subject FUN 2', ...
	    'BA', ba, ...
	    'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
	    );
	sub_FUN_2.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 70))
	sub_FUN_2.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Male', {'Female', 'Male'}))))
	
	sub_FUN_3 = SubjectFUN( ...
	    'ID', 'SUB 3', ...
	    'LABEL', 'Subejct FUN 3', ...
	    'NOTES', 'Notes on subject FUN 3', ...
	    'BA', ba, ...
	    'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
	    );
	sub_FUN_3.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 50))
	sub_FUN_3.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', find(strcmp('Female', {'Female', 'Male'}))))
	
	gr_FUN = Group( ...
	    'ID', 'GR FUN', ...
	    'LABEL', 'Group label', ...
	    'NOTES', 'Group notes', ...
	    'SUB_CLASS', 'SubjectFUN', ...
	    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectFUN', 'IT_LIST', {sub_FUN_1, sub_FUN_2, sub_FUN_3}) ...
	    );
	
	co = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr_CON, ...
	    'GR_FUN', gr_FUN ...
	    );
	gr = co.get('GR_CON_FUN_MP');
	
	se = SeparateGroups_CON_FUN_MP('GR_CON_FUN_MP', gr);
	
	gr_CON_separated = se.get('GR_CON');
	assert(gr_CON.get('SUB_DICT').get('LENGTH') == gr_CON_separated.get('SUB_DICT').get('LENGTH'), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	    'Problems acombining and separatingthe groups.')
	for i = 1:1:gr_CON.get('SUB_DICT').get('LENGTH')
	    sub_CON = gr_CON.get('SUB_DICT').get('IT', i);
	    sub_CON_separated = gr_CON_separated.get('SUB_DICT').get('IT', i);
	    
	    assert( ...
	        isequal(sub_CON.get('ID'), sub_CON_separated.get('ID')) & ...
	        isequal(sub_CON.get('BA').get('ID'), sub_CON_separated.get('BA').get('ID')) & ...
	        isequal(sub_CON.get('VOI_DICT').get('IT', 'Age').get('V'), sub_CON_separated.get('VOI_DICT').get('IT', 'Age').get('V')) & ... 
	        isequal(sub_CON.get('VOI_DICT').get('IT', 'Sex').get('V'), sub_CON_separated.get('VOI_DICT').get('IT', 'Sex').get('V')) & ...
	        isequal(sub_CON.get('CON'), sub_CON_separated.get('CON')), ...
	        [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	        'Problems acombining and separatingthe groups.')    
	end
	
	gr_FUN_separated = se.get('GR_FUN');
	assert(gr_FUN.get('SUB_DICT').get('LENGTH') == gr_FUN_separated.get('SUB_DICT').get('LENGTH'), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	    'Problems acombining and separatingthe groups.')
	for i = 1:1:gr_FUN.get('SUB_DICT').get('LENGTH')
	    sub_FUN = gr_FUN.get('SUB_DICT').get('IT', i);
	    sub_FUN_separated = gr_FUN_separated.get('SUB_DICT').get('IT', i);
	    
	    assert( ...
	        isequal(sub_FUN.get('ID'), sub_FUN_separated.get('ID')) & ...
	        isequal(sub_FUN.get('BA').get('ID'), sub_FUN_separated.get('BA').get('ID')) & ...
	        isequal(sub_FUN.get('VOI_DICT').get('IT', 'Age').get('V'), sub_FUN_separated.get('VOI_DICT').get('IT', 'Age').get('V')) & ... 
	        isequal(sub_FUN.get('VOI_DICT').get('IT', 'Sex').get('V'), sub_FUN_separated.get('VOI_DICT').get('IT', 'Sex').get('V')) & ...
	        isequal(sub_FUN.get('FUN'), sub_FUN_separated.get('FUN')), ...
	        [BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
	        'Problems acombining and separatingthe groups.')    
	end
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':SeparateGroups_CON_FUN_MP:' BRAPH2.FAIL_TEST], ...
		[' When testing SeparateGroups_CON_FUN_MP no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

