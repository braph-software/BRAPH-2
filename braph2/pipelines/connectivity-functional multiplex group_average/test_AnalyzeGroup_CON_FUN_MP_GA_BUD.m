%TEST_ANALYZEGROUP_CON_FUN_MP_GA_BUD

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD();
	 
	% get('ELCLASS')
	if isa(AnalyzeGroup_CON_FUN_MP_GA_BUD, 'ConcreteElement')
		assert(strcmp(AnalyzeGroup_CON_FUN_MP_GA_BUD().get('ELCLASS'), 'AnalyzeGroup_CON_FUN_MP_GA_BUD'), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD().get(''ELCLASS'') should return ''AnalyzeGroup_CON_FUN_MP_GA_BUD''.')
	end
	 
	% getBuild()
	assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.getBuild() == 1 && AnalyzeGroup_CON_FUN_MP_GA_BUD.getBuild() > 0, ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.getBuild() should return the AnalyzeGroup_CON_FUN_MP_GA_BUD build number.')
	assert(a.getBuild() == 1 && a.getBuild() > 0 , ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.getBuild() should return the AnalyzeGroup_CON_FUN_MP_GA_BUD build number.')
	assert(Element.getBuild(a) == 1 && Element.getBuild(a) > 0, ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(a) should return the AnalyzeGroup_CON_FUN_MP_GA_BUD build number.')
	assert(Element.getBuild('AnalyzeGroup_CON_FUN_MP_GA_BUD') == 1 && Element.getBuild('AnalyzeGroup_CON_FUN_MP_GA_BUD') > 0, ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''AnalyzeGroup_CON_FUN_MP_GA_BUD'') should return the AnalyzeGroup_CON_FUN_MP_GA_BUD build number.')
	 
	% getClass()
	assert(strcmp(AnalyzeGroup_CON_FUN_MP_GA_BUD.getClass(), 'AnalyzeGroup_CON_FUN_MP_GA_BUD'), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.getClass() should return ''AnalyzeGroup_CON_FUN_MP_GA_BUD''.')
	assert(strcmp(a.getClass(), 'AnalyzeGroup_CON_FUN_MP_GA_BUD'), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.getClass() should return ''AnalyzeGroup_CON_FUN_MP_GA_BUD''.')
	assert(strcmp(Element.getClass(a), 'AnalyzeGroup_CON_FUN_MP_GA_BUD'), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(a) should return ''AnalyzeGroup_CON_FUN_MP_GA_BUD''.')
	assert(strcmp(Element.getClass('AnalyzeGroup_CON_FUN_MP_GA_BUD'), 'AnalyzeGroup_CON_FUN_MP_GA_BUD'), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''AnalyzeGroup_CON_FUN_MP_GA_BUD'') should return ''AnalyzeGroup_CON_FUN_MP_GA_BUD''.')
	 
	% getSubclasses()
	assert(isequal(AnalyzeGroup_CON_FUN_MP_GA_BUD.getSubclasses(), subclasses('AnalyzeGroup_CON_FUN_MP_GA_BUD', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.getSubclasses() should return the same result as subclasses(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', [], [], true).')
	assert(isequal(a.getSubclasses(), subclasses('AnalyzeGroup_CON_FUN_MP_GA_BUD', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', [], [], true).')
	assert(isequal(Element.getSubclasses(a), subclasses('AnalyzeGroup_CON_FUN_MP_GA_BUD', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(a) should return the same result as subclasses(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', [], [], true).')
	assert(isequal(Element.getSubclasses('AnalyzeGroup_CON_FUN_MP_GA_BUD'), subclasses('AnalyzeGroup_CON_FUN_MP_GA_BUD', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''AnalyzeGroup_CON_FUN_MP_GA_BUD'') should return the same result as subclasses(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', [], [], true).')
	 
	% getProps()
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps(), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps() should return a row vector [1:1:N].')
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(a.getProps(), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.getProps() should return a row vector [1:1:N].')
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(Element.getProps(a), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(a) should return a row vector [1:1:N].')
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(Element.getProps('AnalyzeGroup_CON_FUN_MP_GA_BUD'), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''AnalyzeGroup_CON_FUN_MP_GA_BUD'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps(category) does not work.')
	tmp = cellfun(@(category) a.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(a, category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(a, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('AnalyzeGroup_CON_FUN_MP_GA_BUD', category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', category) does not work.')
	 
	% getPropNumber()
	assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber() == length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber() should return the number of properties.')
	assert(a.getPropNumber() == length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(a) == length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(a) should return the number of properties.')
	assert(Element.getPropNumber('AnalyzeGroup_CON_FUN_MP_GA_BUD') == length(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps()), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''AnalyzeGroup_CON_FUN_MP_GA_BUD'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber(category), categories)) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) a.getPropNumber(category), categories)) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(a, category), categories)) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(a, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('AnalyzeGroup_CON_FUN_MP_GA_BUD', category), categories)) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', category) does not work.')
	 
	% existsProp(prop)
	assert(~AnalyzeGroup_CON_FUN_MP_GA_BUD.existsProp(NaN), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.existsProp(prop) does not work.')
	assert(~a.existsProp(NaN), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.existsProp(prop) does not work.')
	assert(~Element.existsProp(a, NaN), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(a, prop) does not work.')
	assert(~Element.existsProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', NaN), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop) does not work.')
	 
	assert_with_error('AnalyzeGroup_CON_FUN_MP_GA_BUD.existsProp(NaN)', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', NaN)', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.existsProp(prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.existsProp(prop) does not work.')
		assert(a.existsProp(prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.existsProp(prop) does not work.')
		assert(Element.existsProp(a, prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(a, prop) does not work.')
		assert(Element.existsProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~AnalyzeGroup_CON_FUN_MP_GA_BUD.existsTag(''), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.existsTag(tag) does not work.')
	assert(~a.existsTag(''), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'a.existsTag(tag) does not work.')
	assert(~Element.existsTag(a, ''), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(a, tag) does not work.')
	assert(~Element.existsTag('AnalyzeGroup_CON_FUN_MP_GA_BUD', ''), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag) does not work.')
	 
	assert_with_error('AnalyzeGroup_CON_FUN_MP_GA_BUD.existsTag('''')', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsTag(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', '''')', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
		assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.existsTag(tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.existsTag(tag) does not work.')
		assert(a.existsTag(tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.existsTag(tag) does not work.')
		assert(Element.existsTag(a, tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(a, tga) does not work.')
		assert(Element.existsTag('AnalyzeGroup_CON_FUN_MP_GA_BUD', tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropProp(prop) does not work.')
		assert(a.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropProp(prop) does not work.')
		assert(Element.getPropProp(a, prop) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(a, prop) does not work.')
		assert(Element.getPropProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop) does not work.')
	 
		tag = a.getPropTag(prop);
		assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropProp(tag) does not work.')
		assert(a.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropProp(tag) does not work.')
		assert(Element.getPropProp(a, tag) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(a, tag) does not work.')
		assert(Element.getPropProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop) == prop, ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(strcmp(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop) does not work.')
		assert(strcmp(a.getPropTag(prop), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(a, prop), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(a, prop) does not work.')
		assert(strcmp(Element.getPropTag('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop) does not work.')
	 
		assert(strcmp(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(tag), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(tag) does not work.')
		assert(strcmp(a.getPropTag(tag), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(a, tag), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(a, tag) does not work.')
		assert(strcmp(Element.getPropTag('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop), tag), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(Category.existsCategory(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(a.getPropCategory(prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(a, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop) does not work.')
	 
		assert(Category.existsCategory(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(a.getPropCategory(tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(a, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(Format.existsFormat(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropFormat(prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(a.getPropFormat(prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(a, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop) does not work.')
	 
		assert(Format.existsFormat(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropFormat(tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(a.getPropFormat(tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(a, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(ischar(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDescription(prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDescription(prop) does not work.')
		assert(ischar(a.getPropDescription(prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(a, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(a, prop) does not work.')
		assert(ischar(Element.getPropDescription(a, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop) does not work.')
	 
		assert(ischar(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDescription(tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDescription(tag) does not work.')
		assert(ischar(a.getPropDescription(tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(a, tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(a, tag) does not work.')
		assert(ischar(Element.getPropDescription(a, tag)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		settings = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropSettings(prop);
		settings = a.getPropSettings(prop);
		settings = Element.getPropSettings(a, prop);
		settings = Element.getPropSettings('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop);
	 
		settings = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropSettings(tag);
		settings = a.getPropSettings(tag);
		settings = Element.getPropSettings(a, tag);
		settings = Element.getPropSettings('AnalyzeGroup_CON_FUN_MP_GA_BUD', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		default = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(prop);
		default = a.getPropDefault(prop);
		default = Element.getPropDefault(a, prop);
		default = Element.getPropDefault('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop);
	 
		default = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(tag);
		default = a.getPropDefault(tag);
		default = Element.getPropDefault(a, tag);
		default = Element.getPropDefault('AnalyzeGroup_CON_FUN_MP_GA_BUD', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		conditioned_default = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefaultConditioned(prop);
		conditioned_default = a.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(a, prop);
		conditioned_default = Element.getPropDefaultConditioned('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop);
	 
		conditioned_default = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefaultConditioned(tag);
		conditioned_default = a.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(a, tag);
		conditioned_default = Element.getPropDefaultConditioned('AnalyzeGroup_CON_FUN_MP_GA_BUD', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(~AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(prop, value) does not work.')
		assert(~a.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(a, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, prop, value) does not work.')
		assert(~Element.checkProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop, value) does not work.')
	 
		assert_with_error('AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], prop, a)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], prop, a)
		assert_with_error('Element.checkProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(tag, value) does not work.')
		assert(~a.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(a, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, tag, value) does not work.')
		assert(~Element.checkProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag, value) does not work.')
	 
		assert_with_error('AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], tag, a)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], tag, a)
		assert_with_error('Element.checkProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(prop, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(prop, <conditioned default value>) does not work.')
		assert(a.checkProp(prop, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(a, prop, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', prop, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', prop, <conditioned default value>) does not work.')
	 
		assert(AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(tag, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.checkProp(tag, <conditioned default value>) does not work.')
		assert(a.checkProp(tag, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(a, tag, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('AnalyzeGroup_CON_FUN_MP_GA_BUD', tag, Element.getPropDefaultConditioned(AnalyzeGroup_CON_FUN_MP_GA_BUD, prop)), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeGroup_CON_FUN_MP_GA_BUD'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.ID), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.GR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES) ...
		);
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					a.getr(prop) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeGroup_CON_FUN_MP_GA_BUD.getCategoryName(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)) ', AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					a.getr(TAG) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeGroup_CON_FUN_MP_GA_BUD.getCategoryName(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)) ', AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(a.getPropSettings(prop))
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop)), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop), a.getPropSettings(prop)), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					a.getr(prop) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeGroup_CON_FUN_MP_GA_BUD.getCategoryName(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)) ', AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					a.getr(TAG) == AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeGroup_CON_FUN_MP_GA_BUD.getCategoryName(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)) ', AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD']);
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(a.getPropSettings(prop))
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop)), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop), a.getPropSettings(prop)), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(a.getr(prop), AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(a.getr(TAG), AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ') must be inizialized to its default value ' ...
					'given by AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.ID), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.GR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES) ...
		);
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(a.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					a.checkFormat(a.getPropFormat(prop), a.getr(prop),a.getPropSettings(prop)), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD']);
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD']);
	% 			assert( ...
	% 				~isa(a.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
	% 				['AnalyzeGroup_CON_FUN_MP_GA_BUD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(a.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
	% 				['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				a.checkFormat(a.getPropFormat(prop), a.getr(prop),a.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
	% 				['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD']);
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(a.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					a.checkFormat(a.getPropFormat(prop), a.getr(prop),a.getPropSettings(prop)), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if a.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:AnalyzeGroup_CON_FUN_MP_GA_BUD');
					delete(ancestor(a.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps(Category.RESULT))
		for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD();
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		assert( ...
			~a.isLocked(prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~a.isLocked(TAG), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	a.lock()
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD();
	 
	warning_backup = warning('off', 'BRAPH2:AnalyzeGroup_CON_FUN_MP_GA_BUD');
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		a.lock(prop)
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD();
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		assert( ...
			a.isChecked(prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			['AnalyzeGroup_CON_FUN_MP_GA_BUD.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			a.isChecked(TAG), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			['AnalyzeGroup_CON_FUN_MP_GA_BUD.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	a.unchecked()
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		assert( ...
			~a.isChecked(prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			['AnalyzeGroup_CON_FUN_MP_GA_BUD.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	a.checked()
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		assert( ...
			a.isChecked(prop), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			['AnalyzeGroup_CON_FUN_MP_GA_BUD.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic AnalyzeGroup_CON_FUN_MP_GA_BUD
	a_0 = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.ID), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.GR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES) ...
		);
	 
	% AnalyzeGroup_CON_FUN_MP_GA_BUD with 1st callbacks
	a_1 = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, a_0.getCallback(4), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, a_0.getCallback(5), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, a_0.getCallback(9), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, a_0.getCallback(10), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, a_0.getCallback(12), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, a_0.getCallback(13), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, a_0.getCallback(14), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, a_0.getCallback(15), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, a_0.getCallback(16), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, a_0.getCallback(17) ... ...
		);
	 
	prop_number = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(a_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(a_1.get(prop), a_0.get(prop)) && ~isa(a_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(a_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% AnalyzeGroup_CON_FUN_MP_GA_BUD with 2nd callbacks
	a_2 = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, a_1.getCallback(4), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, a_1.getCallback(5), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, a_1.getCallback(9), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, a_1.getCallback(10), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, a_1.getCallback(12), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, a_1.getCallback(13), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, a_1.getCallback(14), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, a_1.getCallback(15), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, a_1.getCallback(16), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, a_1.getCallback(17) ... ...
		);
	 
	prop_number = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(a_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(a_2.get(prop), a_0.get(prop)) && ~isa(a_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(a_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% AnalyzeGroup_CON_FUN_MP_GA_BUD with 3rd callbacks
	a_3 = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, a_2.getCallback(4), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, a_2.getCallback(5), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, a_2.getCallback(9), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, a_2.getCallback(10), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, a_2.getCallback(12), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, a_2.getCallback(13), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, a_2.getCallback(14), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, a_2.getCallback(15), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, a_2.getCallback(16), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, a_2.getCallback(17) ... ...
		);
	 
	prop_number = AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(a_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(a_3.get(prop), a_0.get(prop)) && ~isa(a_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(a_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD();
	 
	a_copy = a.copy();
	 
	assert(a_copy ~= a, ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(a_copy, a), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		value = a.getr(prop);
		value_copy = a_copy.getr(prop);
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
							'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
							'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					a_copy.isLocked(prop) == a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					a_copy.isChecked(prop) == a.isChecked(prop), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					a_copy.getPropSeed(prop) == a.getPropSeed(prop), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.ID), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.GR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES) ...
		);
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		if AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD']);
			% a.memorize(prop);
			% warning(warning_backup)
		elseif AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop) == Category.EVANESCENT && a.getPropFormat(prop) == Format.HANDLE
			a.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:AnalyzeGroup_CON_FUN_MP_GA_BUD');
			delete(ancestor(a.get(prop), 'figure'))
			warning(warning_backup)
		else
			a.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	a_copy = a.copy();
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		value = a.getr(prop);
		value_copy = a_copy.getr(prop);
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
							'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
							'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						a_copy.isLocked(prop) == a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.isChecked(prop) == a.isChecked(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.getPropSeed(prop) == a.getPropSeed(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	a_0 = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.ID), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.GR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES) ...
		);
	 
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, a_0.getCallback(4), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, a_0.getCallback(5), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, a_0.getCallback(9), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, a_0.getCallback(10), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, a_0.getCallback(12), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, a_0.getCallback(13), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, a_0.getCallback(14), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, a_0.getCallback(15), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, a_0.getCallback(16), ..., ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, a_0.getCallback(17) ... ...
		);
	 
	a_copy = a.copy();
	a_0_copy = a_copy.getr('ID').get('EL');
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
		value = a.getr(prop);
		value_copy = a_copy.getr(prop);
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
							'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
							'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == a_0.getCallback(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The callback should be obtained from AnalyzeGroup_CON_FUN_MP_GA_BUD.getCallback().' ...
						)
					assert( ...
						value_copy == a_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The callback should be obtained from AnalyzeGroup_CON_FUN_MP_GA_BUD.getCallback().' ...
						)
				end
	 
					assert( ...
						a_copy.isLocked(prop) == a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.isChecked(prop) == a.isChecked(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.getPropSeed(prop) == a.getPropSeed(prop), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a_template = AnalyzeGroup_CON_FUN_MP_GA_BUD();
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD('TEMPLATE', a_template);
	 
	for prop = 1:1:AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropTag(prop));
		switch AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE
					assert( ...
						isa(a.getr(prop), 'AnalyzeGroup_CON_FUN_MP_GA_BUD'), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD TEMPLATE does not work. AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(''TEMPLATE'') should be a AnalyzeGroup_CON_FUN_MP_GA_BUD element.' ...
						)
					assert( ...
						isa(a_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						'AnalyzeGroup_CON_FUN_MP_GA_BUD TEMPLATE does not work. AnalyzeGroup_CON_FUN_MP_GA_BUD_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(a.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD TEMPLATE does not work. AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						a.getr(prop).get('EL') == a_template && a.getr(prop).get('PROP') == prop && strcmp(a.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD TEMPLATE does not work. AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ') should be a Callback to a_template.' TAG '.'] ...
						)
					assert( ...
						isa(a_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
						['AnalyzeGroup_CON_FUN_MP_GA_BUD TEMPLATE does not work. AnalyzeGroup_CON_FUN_MP_GA_BUD_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD TEMPLATE does not work. AnalyzeGroup_CON_FUN_MP_GA_BUD.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(a_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
					['AnalyzeGroup_CON_FUN_MP_GA_BUD TEMPLATE does not work. AnalyzeGroup_CON_FUN_MP_GA_BUD_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.ID), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.GR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'analyzegroup_con_fun_mp_ga_bud_to_be_erased.b2'];
	 
	Element.save(a, filename)
	 
	a_loaded = Element.load(filename);
	 
	assert( ...
		isequal(a.copy(), a_loaded), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.save(a) and/or AnalyzeGroup_CON_FUN_MP_GA_BUD.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD( ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ELCLASS, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NAME, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DESCRIPTION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.TEMPLATE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.ID, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.ID), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.LABEL), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NOTES), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.TOSTRING, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.WAITBAR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.GR, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.GR), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.G, AnalyzeGroup_CON_FUN_MP_GA_BUD.getNoValue(), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.REPETITION), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MIN), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.F_MAX), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.CORRELATION_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.NEGATIVE_WEIGHT_RULE), ...
		AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES, AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropDefault(AnalyzeGroup_CON_FUN_MP_GA_BUD.DENSITIES) ...
		);
	 
	[json, struct, el_list] = encodeJSON(a);
	[a_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(a_dec ~= a, ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		'AnalyzeGroup_CON_FUN_MP_GA_BUD.encodeJSON() or AnalyzeGroup_CON_FUN_MP_GA_BUD.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropFormat(prop), num2cell(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())) == Format.HANDLE) && all(cellfun(@(prop) AnalyzeGroup_CON_FUN_MP_GA_BUD.getPropFormat(prop), num2cell(AnalyzeGroup_CON_FUN_MP_GA_BUD.getProps())) == Format.NET)
		assert(isequal(a_dec, a), ...
			[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
			'AnalyzeGroup_CON_FUN_MP_GA_BUD.encodeJSON() or AnalyzeGroup_CON_FUN_MP_GA_BUD.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Example
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	create_data_CON_FUN_MP_XLS()  % only creates files if the example folder doesn't already exist 
	example_CON_FUN_MP_GA_BUD
end

%% Test 13: GUI - Analysis
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im_ba = ImporterBrainAtlasXLS('FILE', 'desikan_atlas.xlsx');
	ba = im_ba.get('BA');
	
	gr = Group('SUB_CLASS', 'SubjectCON_FUN_MP', 'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON_FUN_MP'));
	for i = 1:1:50
	    sub = SubjectCON_FUN_MP( ...
	        'ID', ['SUB CON ' int2str(i)], ...
	        'LABEL', ['Subejct CON ' int2str(i)], ...
	        'NOTES', ['Notes on subject CON ' int2str(i)], ...
	        'BA', ba, ...
	        'CON', rand(ba.get('BR_DICT').get('LENGTH')), ...
	        'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
	        );
	    sub.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 100 * rand()))
	    sub.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', randi(2, 1)))
	    gr.get('SUB_DICT').get('ADD', sub)
	end
	
	a = AnalyzeGroup_CON_FUN_MP_GA_BUD('GR', gr);
	
	gui = GUIElement('PE', a, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
end

%% Test 14: GUI - Comparison
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im_ba = ImporterBrainAtlasXLS('FILE', 'desikan_atlas.xlsx');
	ba = im_ba.get('BA');
	
	gr1 = Group('SUB_CLASS', 'SubjectCON_FUN_MP', 'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON_FUN_MP'));
	for i = 1:1:50
	    sub = SubjectCON_FUN_MP( ...
	        'ID', ['SUB CON ' int2str(i)], ...
	        'LABEL', ['Subejct CON ' int2str(i)], ...
	        'NOTES', ['Notes on subject CON ' int2str(i)], ...
	        'BA', ba, ...
	        'CON', rand(ba.get('BR_DICT').get('LENGTH')), ...
	        'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
	        );
	    sub.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 100 * rand()))
	    sub.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', randi(2, 1)))
	    gr1.get('SUB_DICT').get('ADD', sub)
	end
	
	gr2 = Group('SUB_CLASS', 'SubjectCON_FUN_MP', 'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON_FUN_MP'));
	for i = 1:1:50
	    sub = SubjectCON_FUN_MP( ...
	        'ID', ['SUB CON ' int2str(i)], ...
	        'LABEL', ['Subejct CON ' int2str(i)], ...
	        'NOTES', ['Notes on subject CON ' int2str(i)], ...
	        'BA', ba, ...
	        'CON', rand(ba.get('BR_DICT').get('LENGTH')), ...
	        'FUN', rand(10, ba.get('BR_DICT').get('LENGTH')) ...
	        );
	    sub.memorize('VOI_DICT').get('ADD', VOINumeric('ID', 'Age', 'V', 100 * rand()))
	    sub.memorize('VOI_DICT').get('ADD', VOICategoric('ID', 'Sex', 'CATEGORIES', {'Female', 'Male'}, 'V', randi(2, 1)))
	    gr2.get('SUB_DICT').get('ADD', sub)
	end
	
	a1 = AnalyzeGroup_CON_FUN_MP_GA_BUD('GR', gr1);
	a2 = AnalyzeGroup_CON_FUN_MP_GA_BUD('GR', gr2, 'TEMPLATE', a1);
	
	c = CompareGroup( ...
	    'P', 10, ...
	    'A1', a1, ...
	    'A2', a2, ...
	    'WAITBAR', true, ...
	    'VERBOSE', false, ...
	    'MEMORIZE', true ...
	    );
	
	gui = GUIElement('PE', c, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
end

%% Test 15: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':AnalyzeGroup_CON_FUN_MP_GA_BUD:' BRAPH2.FAIL_TEST], ...
		[' When testing AnalyzeGroup_CON_FUN_MP_GA_BUD no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 16: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

