%TEST_NNDATAPOINT_CON_FUN_MP_CLA

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	dp = NNDataPoint_CON_FUN_MP_CLA();
	 
	% get('ELCLASS')
	if isa(NNDataPoint_CON_FUN_MP_CLA, 'ConcreteElement')
		assert(strcmp(NNDataPoint_CON_FUN_MP_CLA().get('ELCLASS'), 'NNDataPoint_CON_FUN_MP_CLA'), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA().get(''ELCLASS'') should return ''NNDataPoint_CON_FUN_MP_CLA''.')
	end
	 
	% getBuild()
	assert(NNDataPoint_CON_FUN_MP_CLA.getBuild() == 1 && NNDataPoint_CON_FUN_MP_CLA.getBuild() > 0, ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.getBuild() should return the NNDataPoint_CON_FUN_MP_CLA build number.')
	assert(dp.getBuild() == 1 && dp.getBuild() > 0 , ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.getBuild() should return the NNDataPoint_CON_FUN_MP_CLA build number.')
	assert(Element.getBuild(dp) == 1 && Element.getBuild(dp) > 0, ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(dp) should return the NNDataPoint_CON_FUN_MP_CLA build number.')
	assert(Element.getBuild('NNDataPoint_CON_FUN_MP_CLA') == 1 && Element.getBuild('NNDataPoint_CON_FUN_MP_CLA') > 0, ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNDataPoint_CON_FUN_MP_CLA'') should return the NNDataPoint_CON_FUN_MP_CLA build number.')
	 
	% getClass()
	assert(strcmp(NNDataPoint_CON_FUN_MP_CLA.getClass(), 'NNDataPoint_CON_FUN_MP_CLA'), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.getClass() should return ''NNDataPoint_CON_FUN_MP_CLA''.')
	assert(strcmp(dp.getClass(), 'NNDataPoint_CON_FUN_MP_CLA'), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.getClass() should return ''NNDataPoint_CON_FUN_MP_CLA''.')
	assert(strcmp(Element.getClass(dp), 'NNDataPoint_CON_FUN_MP_CLA'), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(dp) should return ''NNDataPoint_CON_FUN_MP_CLA''.')
	assert(strcmp(Element.getClass('NNDataPoint_CON_FUN_MP_CLA'), 'NNDataPoint_CON_FUN_MP_CLA'), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNDataPoint_CON_FUN_MP_CLA'') should return ''NNDataPoint_CON_FUN_MP_CLA''.')
	 
	% getSubclasses()
	assert(isequal(NNDataPoint_CON_FUN_MP_CLA.getSubclasses(), subclasses('NNDataPoint_CON_FUN_MP_CLA', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.getSubclasses() should return the same result as subclasses(''NNDataPoint_CON_FUN_MP_CLA'', [], [], true).')
	assert(isequal(dp.getSubclasses(), subclasses('NNDataPoint_CON_FUN_MP_CLA', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNDataPoint_CON_FUN_MP_CLA'', [], [], true).')
	assert(isequal(Element.getSubclasses(dp), subclasses('NNDataPoint_CON_FUN_MP_CLA', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(dp) should return the same result as subclasses(''NNDataPoint_CON_FUN_MP_CLA'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNDataPoint_CON_FUN_MP_CLA'), subclasses('NNDataPoint_CON_FUN_MP_CLA', [], [], true)), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNDataPoint_CON_FUN_MP_CLA'') should return the same result as subclasses(''NNDataPoint_CON_FUN_MP_CLA'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(NNDataPoint_CON_FUN_MP_CLA.getProps(), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(dp.getProps(), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(Element.getProps(dp), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dp) should return a row vector [1:1:N].')
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(Element.getProps('NNDataPoint_CON_FUN_MP_CLA'), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDataPoint_CON_FUN_MP_CLA'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNDataPoint_CON_FUN_MP_CLA.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.getProps(category) does not work.')
	tmp = cellfun(@(category) dp.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(dp, category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dp, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNDataPoint_CON_FUN_MP_CLA', category), categories, 'UniformOutput', false);
	assert(isempty(NNDataPoint_CON_FUN_MP_CLA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataPoint_CON_FUN_MP_CLA.getProps())), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDataPoint_CON_FUN_MP_CLA'', category) does not work.')
	 
	% getPropNumber()
	assert(NNDataPoint_CON_FUN_MP_CLA.getPropNumber() == length(NNDataPoint_CON_FUN_MP_CLA.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.getPropNumber() should return the number of properties.')
	assert(dp.getPropNumber() == length(NNDataPoint_CON_FUN_MP_CLA.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(dp) == length(NNDataPoint_CON_FUN_MP_CLA.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dp) should return the number of properties.')
	assert(Element.getPropNumber('NNDataPoint_CON_FUN_MP_CLA') == length(NNDataPoint_CON_FUN_MP_CLA.getProps()), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDataPoint_CON_FUN_MP_CLA'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNDataPoint_CON_FUN_MP_CLA.getPropNumber(category), categories)) == NNDataPoint_CON_FUN_MP_CLA.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) dp.getPropNumber(category), categories)) == NNDataPoint_CON_FUN_MP_CLA.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(dp, category), categories)) == NNDataPoint_CON_FUN_MP_CLA.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dp, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNDataPoint_CON_FUN_MP_CLA', category), categories)) == NNDataPoint_CON_FUN_MP_CLA.getPropNumber(), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDataPoint_CON_FUN_MP_CLA'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNDataPoint_CON_FUN_MP_CLA.existsProp(NaN), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.existsProp(prop) does not work.')
	assert(~dp.existsProp(NaN), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.existsProp(prop) does not work.')
	assert(~Element.existsProp(dp, NaN), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(dp, prop) does not work.')
	assert(~Element.existsProp('NNDataPoint_CON_FUN_MP_CLA', NaN), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNDataPoint_CON_FUN_MP_CLA'', prop) does not work.')
	 
	assert_with_error('NNDataPoint_CON_FUN_MP_CLA.existsProp(NaN)', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsProp(''NNDataPoint_CON_FUN_MP_CLA'', NaN)', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		assert(NNDataPoint_CON_FUN_MP_CLA.existsProp(prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.existsProp(prop) does not work.')
		assert(dp.existsProp(prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.existsProp(prop) does not work.')
		assert(Element.existsProp(dp, prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(dp, prop) does not work.')
		assert(Element.existsProp('NNDataPoint_CON_FUN_MP_CLA', prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNDataPoint_CON_FUN_MP_CLA'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNDataPoint_CON_FUN_MP_CLA.existsTag(''), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.existsTag(tag) does not work.')
	assert(~dp.existsTag(''), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'dp.existsTag(tag) does not work.')
	assert(~Element.existsTag(dp, ''), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(dp, tag) does not work.')
	assert(~Element.existsTag('NNDataPoint_CON_FUN_MP_CLA', ''), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNDataPoint_CON_FUN_MP_CLA'', tag) does not work.')
	 
	assert_with_error('NNDataPoint_CON_FUN_MP_CLA.existsTag('''')', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], dp)
	assert_with_error('Element.existsTag(''NNDataPoint_CON_FUN_MP_CLA'', '''')', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
		assert(NNDataPoint_CON_FUN_MP_CLA.existsTag(tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.existsTag(tag) does not work.')
		assert(dp.existsTag(tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.existsTag(tag) does not work.')
		assert(Element.existsTag(dp, tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(dp, tga) does not work.')
		assert(Element.existsTag('NNDataPoint_CON_FUN_MP_CLA', tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNDataPoint_CON_FUN_MP_CLA'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		assert(NNDataPoint_CON_FUN_MP_CLA.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropProp(prop) does not work.')
		assert(dp.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropProp(prop) does not work.')
		assert(Element.getPropProp(dp, prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dp, prop) does not work.')
		assert(Element.getPropProp('NNDataPoint_CON_FUN_MP_CLA', prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDataPoint_CON_FUN_MP_CLA'', prop) does not work.')
	 
		tag = dp.getPropTag(prop);
		assert(NNDataPoint_CON_FUN_MP_CLA.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropProp(tag) does not work.')
		assert(dp.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropProp(tag) does not work.')
		assert(Element.getPropProp(dp, tag) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dp, tag) does not work.')
		assert(Element.getPropProp('NNDataPoint_CON_FUN_MP_CLA', prop) == prop, ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDataPoint_CON_FUN_MP_CLA'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(strcmp(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop) does not work.')
		assert(strcmp(dp.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(dp, prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dp, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNDataPoint_CON_FUN_MP_CLA', prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDataPoint_CON_FUN_MP_CLA'', prop) does not work.')
	 
		assert(strcmp(NNDataPoint_CON_FUN_MP_CLA.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropTag(tag) does not work.')
		assert(strcmp(dp.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(dp, tag), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dp, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNDataPoint_CON_FUN_MP_CLA', prop), tag), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDataPoint_CON_FUN_MP_CLA'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(Category.existsCategory(NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(dp.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dp, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDataPoint_CON_FUN_MP_CLA'', prop) does not work.')
	 
		assert(Category.existsCategory(NNDataPoint_CON_FUN_MP_CLA.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(dp.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dp, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDataPoint_CON_FUN_MP_CLA'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(Format.existsFormat(NNDataPoint_CON_FUN_MP_CLA.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(dp.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dp, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDataPoint_CON_FUN_MP_CLA'', prop) does not work.')
	 
		assert(Format.existsFormat(NNDataPoint_CON_FUN_MP_CLA.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(dp.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dp, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDataPoint_CON_FUN_MP_CLA'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(ischar(NNDataPoint_CON_FUN_MP_CLA.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropDescription(prop) does not work.')
		assert(ischar(dp.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dp, prop) does not work.')
		assert(ischar(Element.getPropDescription(dp, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDataPoint_CON_FUN_MP_CLA'', prop) does not work.')
	 
		assert(ischar(NNDataPoint_CON_FUN_MP_CLA.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.getPropDescription(tag) does not work.')
		assert(ischar(dp.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dp, tag) does not work.')
		assert(ischar(Element.getPropDescription(dp, tag)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDataPoint_CON_FUN_MP_CLA'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		settings = NNDataPoint_CON_FUN_MP_CLA.getPropSettings(prop);
		settings = dp.getPropSettings(prop);
		settings = Element.getPropSettings(dp, prop);
		settings = Element.getPropSettings('NNDataPoint_CON_FUN_MP_CLA', prop);
	 
		settings = NNDataPoint_CON_FUN_MP_CLA.getPropSettings(tag);
		settings = dp.getPropSettings(tag);
		settings = Element.getPropSettings(dp, tag);
		settings = Element.getPropSettings('NNDataPoint_CON_FUN_MP_CLA', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		default = NNDataPoint_CON_FUN_MP_CLA.getPropDefault(prop);
		default = dp.getPropDefault(prop);
		default = Element.getPropDefault(dp, prop);
		default = Element.getPropDefault('NNDataPoint_CON_FUN_MP_CLA', prop);
	 
		default = NNDataPoint_CON_FUN_MP_CLA.getPropDefault(tag);
		default = dp.getPropDefault(tag);
		default = Element.getPropDefault(dp, tag);
		default = Element.getPropDefault('NNDataPoint_CON_FUN_MP_CLA', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		conditioned_default = NNDataPoint_CON_FUN_MP_CLA.getPropDefaultConditioned(prop);
		conditioned_default = dp.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(dp, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNDataPoint_CON_FUN_MP_CLA', prop);
	 
		conditioned_default = NNDataPoint_CON_FUN_MP_CLA.getPropDefaultConditioned(tag);
		conditioned_default = dp.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(dp, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNDataPoint_CON_FUN_MP_CLA', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		tag = dp.getPropTag(prop);
	 
		assert(~NNDataPoint_CON_FUN_MP_CLA.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.checkProp(prop, value) does not work.')
		assert(~dp.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(dp, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, prop, value) does not work.')
		assert(~Element.checkProp('NNDataPoint_CON_FUN_MP_CLA', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_CON_FUN_MP_CLA'', prop, value) does not work.')
	 
		assert_with_error('NNDataPoint_CON_FUN_MP_CLA.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], prop, dp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], prop, dp)
		assert_with_error('Element.checkProp(''NNDataPoint_CON_FUN_MP_CLA'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNDataPoint_CON_FUN_MP_CLA.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.checkProp(tag, value) does not work.')
		assert(~dp.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(dp, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, tag, value) does not work.')
		assert(~Element.checkProp('NNDataPoint_CON_FUN_MP_CLA', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_CON_FUN_MP_CLA'', tag, value) does not work.')
	 
		assert_with_error('NNDataPoint_CON_FUN_MP_CLA.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], tag, dp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], tag, dp)
		assert_with_error('Element.checkProp(''NNDataPoint_CON_FUN_MP_CLA'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNDataPoint_CON_FUN_MP_CLA.checkProp(prop, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.checkProp(prop, <conditioned default value>) does not work.')
		assert(dp.checkProp(prop, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(dp, prop, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDataPoint_CON_FUN_MP_CLA', prop, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_CON_FUN_MP_CLA'', prop, <conditioned default value>) does not work.')
	 
		assert(NNDataPoint_CON_FUN_MP_CLA.checkProp(tag, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.checkProp(tag, <conditioned default value>) does not work.')
		assert(dp.checkProp(tag, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'dp.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(dp, tag, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dp, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDataPoint_CON_FUN_MP_CLA', tag, Element.getPropDefaultConditioned(NNDataPoint_CON_FUN_MP_CLA, prop)), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataPoint_CON_FUN_MP_CLA'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TEMPLATE), ...
		NNDataPoint_CON_FUN_MP_CLA.ID, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.ID), ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.SUB), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS) ...
		);
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
	 
		% excluded props
		if any(prop == [NNDataPoint_CON_FUN_MP_CLA.SUB])
			continue
		end
	 
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					dp.getr(prop) == NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_CON_FUN_MP_CLA.getCategoryName(NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)) ', NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dp.getr(TAG) == NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_CON_FUN_MP_CLA.getCategoryName(NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)) ', NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dp.getPropSettings(prop))
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop)), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop), dp.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					dp.getr(prop) == NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_CON_FUN_MP_CLA.getCategoryName(NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)) ', NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dp.getr(TAG) == NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataPoint_CON_FUN_MP_CLA.getCategoryName(NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)) ', NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA']);
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dp.getPropSettings(prop))
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop)), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dp.checkFormat(dp.getPropFormat(prop), dp.get(prop), dp.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(dp.getr(prop), NNDataPoint_CON_FUN_MP_CLA.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNDataPoint_CON_FUN_MP_CLA.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(dp.getr(TAG), NNDataPoint_CON_FUN_MP_CLA.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNDataPoint_CON_FUN_MP_CLA.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TEMPLATE), ...
		NNDataPoint_CON_FUN_MP_CLA.ID, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.ID), ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.SUB), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS) ...
		);
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
	 
		% excluded props
		if any(prop == [NNDataPoint_CON_FUN_MP_CLA.SUB])
			continue
		end
	 
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dp.checkFormat(dp.getPropFormat(prop), dp.getr(prop),dp.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA']);
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA']);
	% 			assert( ...
	% 				~isa(dp.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataPoint_CON_FUN_MP_CLA.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(dp.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				dp.checkFormat(dp.getPropFormat(prop), dp.getr(prop),dp.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA']);
				assert( ...
					~isa(dp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dp.checkFormat(dp.getPropFormat(prop), dp.getr(prop),dp.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if dp.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNDataPoint_CON_FUN_MP_CLA');
					delete(ancestor(dp.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNDataPoint_CON_FUN_MP_CLA.getProps(Category.RESULT))
		for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
	 
			% excluded props
			if any(prop == [NNDataPoint_CON_FUN_MP_CLA.SUB])
				continue
			end
	 
			switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_CON_FUN_MP_CLA();
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		assert( ...
			~dp.isLocked(prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_CON_FUN_MP_CLA.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~dp.isLocked(TAG), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_CON_FUN_MP_CLA.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	dp.lock()
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_CON_FUN_MP_CLA();
	 
	warning_backup = warning('off', 'BRAPH2:NNDataPoint_CON_FUN_MP_CLA');
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		dp.lock(prop)
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_CON_FUN_MP_CLA();
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		assert( ...
			dp.isChecked(prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_CON_FUN_MP_CLA.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			dp.isChecked(TAG), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_CON_FUN_MP_CLA.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	dp.unchecked()
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		assert( ...
			~dp.isChecked(prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_CON_FUN_MP_CLA.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	dp.checked()
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		assert( ...
			dp.isChecked(prop), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			['NNDataPoint_CON_FUN_MP_CLA.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNDataPoint_CON_FUN_MP_CLA
	dp_0 = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TEMPLATE), ...
		NNDataPoint_CON_FUN_MP_CLA.ID, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.ID), ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.SUB), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS) ...
		);
	 
	% NNDataPoint_CON_FUN_MP_CLA with 1st callbacks
	dp_1 = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, dp_0.getCallback(4), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.ID, dp_0.getCallback(5), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, dp_0.getCallback(11), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, dp_0.getCallback(12) ... ...
		);
	 
	prop_number = NNDataPoint_CON_FUN_MP_CLA.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dp_1.get(prop), dp_0.get(prop)) && ~isa(dp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDataPoint_CON_FUN_MP_CLA with 2nd callbacks
	dp_2 = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, dp_1.getCallback(4), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.ID, dp_1.getCallback(5), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, dp_1.getCallback(11), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, dp_1.getCallback(12) ... ...
		);
	 
	prop_number = NNDataPoint_CON_FUN_MP_CLA.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dp_2.get(prop), dp_0.get(prop)) && ~isa(dp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDataPoint_CON_FUN_MP_CLA with 3rd callbacks
	dp_3 = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, dp_2.getCallback(4), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.ID, dp_2.getCallback(5), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, dp_2.getCallback(11), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, dp_2.getCallback(12) ... ...
		);
	 
	prop_number = NNDataPoint_CON_FUN_MP_CLA.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dp_3.get(prop), dp_0.get(prop)) && ~isa(dp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	dp = NNDataPoint_CON_FUN_MP_CLA();
	 
	dp_copy = dp.copy();
	 
	assert(dp_copy ~= dp, ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(dp_copy, dp), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		value = dp.getr(prop);
		value_copy = dp_copy.getr(prop);
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					dp_copy.isLocked(prop) == dp.isLocked(prop), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dp_copy.isChecked(prop) == dp.isChecked(prop), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dp_copy.getPropSeed(prop) == dp.getPropSeed(prop), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	dp = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TEMPLATE), ...
		NNDataPoint_CON_FUN_MP_CLA.ID, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.ID), ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.SUB), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS) ...
		);
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		if NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA']);
			% dp.memorize(prop);
			% warning(warning_backup)
		elseif NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop) == Category.EVANESCENT && dp.getPropFormat(prop) == Format.HANDLE
			dp.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNDataPoint_CON_FUN_MP_CLA');
			delete(ancestor(dp.get(prop), 'figure'))
			warning(warning_backup)
		else
			dp.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	dp_copy = dp.copy();
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		value = dp.getr(prop);
		value_copy = dp_copy.getr(prop);
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						dp_copy.isLocked(prop) == dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.isChecked(prop) == dp.isChecked(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.getPropSeed(prop) == dp.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	dp_0 = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TEMPLATE), ...
		NNDataPoint_CON_FUN_MP_CLA.ID, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.ID), ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.SUB), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS) ...
		);
	 
	dp = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, dp_0.getCallback(4), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.ID, dp_0.getCallback(5), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, dp_0.getCallback(11), ..., ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, dp_0.getCallback(12) ... ...
		);
	 
	dp_copy = dp.copy();
	dp_0_copy = dp_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
		value = dp.getr(prop);
		value_copy = dp_copy.getr(prop);
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
							'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == dp_0.getCallback(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The callback should be obtained from NNDataPoint_CON_FUN_MP_CLA.getCallback().' ...
						)
					assert( ...
						value_copy == dp_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The callback should be obtained from NNDataPoint_CON_FUN_MP_CLA.getCallback().' ...
						)
				end
	 
					assert( ...
						dp_copy.isLocked(prop) == dp.isLocked(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.isChecked(prop) == dp.isChecked(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dp_copy.getPropSeed(prop) == dp.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp_template = NNDataPoint_CON_FUN_MP_CLA();
	dp = NNDataPoint_CON_FUN_MP_CLA('TEMPLATE', dp_template);
	 
	for prop = 1:1:NNDataPoint_CON_FUN_MP_CLA.getPropNumber()
	 
		% excluded props
		if any(prop == [NNDataPoint_CON_FUN_MP_CLA.SUB])
			continue
		end
	 
		TAG = upper(NNDataPoint_CON_FUN_MP_CLA.getPropTag(prop));
		switch NNDataPoint_CON_FUN_MP_CLA.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNDataPoint_CON_FUN_MP_CLA.TEMPLATE
					assert( ...
						isa(dp.getr(prop), 'NNDataPoint_CON_FUN_MP_CLA'), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA TEMPLATE does not work. NNDataPoint_CON_FUN_MP_CLA.getr(''TEMPLATE'') should be a NNDataPoint_CON_FUN_MP_CLA element.' ...
						)
					assert( ...
						isa(dp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						'NNDataPoint_CON_FUN_MP_CLA TEMPLATE does not work. NNDataPoint_CON_FUN_MP_CLA_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(dp.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA TEMPLATE does not work. NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						dp.getr(prop).get('EL') == dp_template && dp.getr(prop).get('PROP') == prop && strcmp(dp.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA TEMPLATE does not work. NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ') should be a Callback to dp_template.' TAG '.'] ...
						)
					assert( ...
						isa(dp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
						['NNDataPoint_CON_FUN_MP_CLA TEMPLATE does not work. NNDataPoint_CON_FUN_MP_CLA_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(dp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA TEMPLATE does not work. NNDataPoint_CON_FUN_MP_CLA.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(dp_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
					['NNDataPoint_CON_FUN_MP_CLA TEMPLATE does not work. NNDataPoint_CON_FUN_MP_CLA_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TEMPLATE), ...
		NNDataPoint_CON_FUN_MP_CLA.ID, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.ID), ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.SUB), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nndatapoint_con_fun_mp_cla_to_be_erased.b2'];
	 
	Element.save(dp, filename)
	 
	dp_loaded = Element.load(filename);
	 
	assert( ...
		isequal(dp.copy(), dp_loaded), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.save(dp) and/or NNDataPoint_CON_FUN_MP_CLA.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dp = NNDataPoint_CON_FUN_MP_CLA( ...
		NNDataPoint_CON_FUN_MP_CLA.ELCLASS, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.NAME, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.DESCRIPTION, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TEMPLATE, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TEMPLATE), ...
		NNDataPoint_CON_FUN_MP_CLA.ID, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.ID), ...
		NNDataPoint_CON_FUN_MP_CLA.LABEL, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.LABEL), ...
		NNDataPoint_CON_FUN_MP_CLA.NOTES, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.NOTES), ...
		NNDataPoint_CON_FUN_MP_CLA.TOSTRING, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.INPUT, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET, NNDataPoint_CON_FUN_MP_CLA.getNoValue(), ...
		NNDataPoint_CON_FUN_MP_CLA.SUB, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.SUB), ...
		NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS, NNDataPoint_CON_FUN_MP_CLA.getPropDefault(NNDataPoint_CON_FUN_MP_CLA.TARGET_IDS) ...
		);
	 
	[json, struct, el_list] = encodeJSON(dp);
	[dp_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(dp_dec ~= dp, ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		'NNDataPoint_CON_FUN_MP_CLA.encodeJSON() or NNDataPoint_CON_FUN_MP_CLA.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNDataPoint_CON_FUN_MP_CLA.getPropFormat(prop), num2cell(NNDataPoint_CON_FUN_MP_CLA.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNDataPoint_CON_FUN_MP_CLA.getPropFormat(prop), num2cell(NNDataPoint_CON_FUN_MP_CLA.getProps())) == Format.NET)
		assert(isequal(dp_dec, dp), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA.encodeJSON() or NNDataPoint_CON_FUN_MP_CLA.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Create example files
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	data_dir = [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS'];
	if ~isdir(data_dir)
	    mkdir(data_dir);
	    
	    % Brain Atlas
	    im_ba = ImporterBrainAtlasXLS('FILE', 'aal90_atlas.xlsx');
	    ba = im_ba.get('BA');
	    ex_ba = ExporterBrainAtlasXLS( ...
	        'BA', ba, ...
	        'FILE', [data_dir filesep() 'atlas.xlsx'] ...
	        );
	    ex_ba.get('SAVE')
	    N = ba.get('BR_DICT').get('LENGTH');
	
	    % saves RNG
	    rng_settings_ = rng(); rng('default')
	
	    sex_options = {'Female' 'Male'};
	    N_subjects_group1 = 10;
	    N_subjects_group2 = 10;
	    N_subjects_group3 = 10;
	    N_tslength = 200;
	    
	    % Group 1
	    % initialize values for the WS model
	    K1 = [3 4 5 6 7];
	    beta1 = [0.02 0.1 0.3 0.5 0.8];
	    % initialize the indices where the matrices will be placed
	    indices1 = 1:1:18;
	    indices2 = 19:1:36;
	    indices3 = 37:1:54;
	    indices4 = 55:1:72;
	    indices5 = 73:1:90;
	    indices = {indices1; indices2; indices3; indices4; indices5};
	    gr1_ts1 = cell(1, N_subjects_group1); % layer 1
	    gr1_ts2 = cell(1, N_subjects_group1); % layer 2
	    gr_name1 = 'CON_FUN_MP_Group1_XLS';
	    vois1 = [
	        {{'Subject ID'} {'Age'} {'Sex'}}
	        {{} {} cell2str(sex_options)}
	        ];
	    sub_id = cell(1, N_subjects_group1);
	    for i = 1:1:N_subjects_group1 % subject number
	        sub_id(i) = {['SubjectCON_FUN_MP_' num2str(i)]};
	
	        % randomize the parameters
	        K_temp = K1(randperm(length(K1)));
	        beta_temp = beta1(randperm(length(beta1)));
	        % initialize matrix for the subject
	        A_full1 = zeros(N);
	        % loop over each module
	        for i_mod = 1:1:5
	            A_full1(indices{i_mod},indices{i_mod}) = full(adjacency(WattsStrogatz(18, K_temp(i_mod), beta_temp(i_mod))));
	        end
	        A_full1(1:length(A_full1)+1:numel(A_full1)) = 1;
	        
	        % this is needed to make the matrices positive definite
	        A_full1 = A_full1*transpose(A_full1);
	        % 10% of connections kept
	        density = 10;
	        A_full2 = A_full1;
	        sorted_vector = sort(A_full2(:));
	        index = round(length(sorted_vector) * (100 - density) / 100);
	        if index == 0
	            threshold = sorted_vector(1) - eps;
	        elseif index >= length(sorted_vector)
	            threshold = sorted_vector(end) + eps;
	        else
	            threshold = sorted_vector(index);
	        end
	        % Calculates thresholded graph
	        A_full2(A_full2 < threshold) = 0;
	        % This matrix will be covariance matrices for the two groups
	        % Specify the mean
	        mu_gr11 = ones(1, length(A_full1));
	        % calculate time series
	        R11 = mvnrnd(mu_gr11, A_full1, N_tslength);
	        % Normalize the time series
	        mean_R11 = mean(R11);
	        std_R11 = std(R11);
	        R11 = (R11 - mean_R11) ./ std_R11;
	        % place in the array
	        gr1_ts1{1, i} = R11;
	        gr1_ts2{1, i} = A_full2;
	        
	        % variables of interest
	        vois1 = [vois1; {sub_id{i}, randi(90), sex_options(randi(2))}];
	    end
	    % Create the tables - functional layer
	    %tables_gr11 = cell(size(gr1_ts1));
	    mkdir([data_dir filesep() 'Functional' filesep() gr_name1]);
	    for i_tab = 1:1:N_subjects_group1
	        T_gr11 = array2table(gr1_ts1{i_tab});
	        %tables_gr11{i_tab} = T_gr11;
	        file_name = [data_dir filesep() 'Functional' filesep() gr_name1 filesep() sub_id{i_tab} '.xlsx'];
	        writetable(T_gr11, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
	    end
	    
	    % Create the tables - connectivity layer
	    %tables_gr12 = cell(size(gr1_ts2));
	    mkdir([data_dir filesep() 'Connectivity' filesep() gr_name1]);
	    for i_tab = 1:1:N_subjects_group1
	        T_gr12 = array2table(gr1_ts2{i_tab});
	        %tables_gr12{i_tab} = T_gr12;
	        file_name = [data_dir filesep() 'Connectivity' filesep() gr_name1 filesep() sub_id{i_tab} '.xlsx'];
	        writetable(T_gr12, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
	    end
	    writetable(table(vois1), [data_dir filesep() 'Connectivity' filesep() gr_name1 '.vois.xlsx'], 'WriteVariableNames', false)
	    writetable(table(vois1), [data_dir filesep() 'Functional' filesep() gr_name1 '.vois.xlsx'], 'WriteVariableNames', false)
	    
	    % Group 2
	    % initialize values for the WS model
	    K2 = [3 7];
	    beta2 = [0.02 0.85];
	    % initialize the indices where the matrices will be placed
	    indices1 = 1:1:45;
	    indices2 = 46:1:90;
	    indices = {indices1; indices2};
	    gr2_ts1 = cell(1, N_subjects_group2); % layer 1
	    gr2_ts2 = cell(1, N_subjects_group2); % layer 2
	    gr2_name = 'CON_FUN_MP_Group2_XLS';
	    vois2 = [
	        {{'Subject ID'} {'Age'} {'Sex'}}
	        {{} {} cell2str(sex_options)}
	        ];
	    sub_id = cell(1, N_subjects_group1);
	    for i = N_subjects_group1+1:1:N_subjects_group1+N_subjects_group2 % subject number
	        sub_id(i) = {['SubjectCON_FUN_MP_' num2str(i)]};
	        
	        % randomize the parameters
	        K_temp = K2(randperm(length(K2)));
	        beta_temp = beta2(randperm(length(beta2)));
	        % initialize matrix for the subject
	        A_full1 = zeros(N);
	        % loop over each module
	        for i_mod = 1:1:2
	            A_full1(indices{i_mod},indices{i_mod}) = full(adjacency(WattsStrogatz(45, K_temp(i_mod), beta_temp(i_mod))));
	        end
	        A_full1(1:length(A_full1)+1:numel(A_full1)) = 1;
	        % this is needed to make the matrices positive definite
	        A_full1 = A_full1*transpose(A_full1);
	        
	        % 70% of connections kept
	        density = 70;
	        A_full2 = A_full1;
	        sorted_vector = sort(A_full2(:));
	        index = round(length(sorted_vector) * (100 - density) / 100);
	        if index == 0
	            threshold = sorted_vector(1) - eps;
	        elseif index >= length(sorted_vector)
	            threshold = sorted_vector(end) + eps;
	        else
	            threshold = sorted_vector(index);
	        end
	        % Calculates thresholded graph
	        A_full2(A_full2 < threshold) = 0;
	        
	        % make the adjacency matrix weighted
	        r = 0 + (0.5 - 0)*rand(size(A_full2));
	        diffA = A_full2 - r;
	        A_full2(A_full2 ~= 0) = diffA(A_full2 ~= 0);
	        % make the adjacency matrix symmetric
	        A_full2 = max(A_full2, transpose(A_full2));
	        % This matrix will be covariance matrices for the two groups
	        % Specify the mean
	        mu_gr2_1 = ones(1, length(A_full1));
	        % calculate time series
	        R21 = mvnrnd(mu_gr2_1, A_full1, N_tslength);
	        % Normalize the time series
	        mean_R21 = mean(R21);
	        std_R21 = std(R21);
	        R21 = (R21 - mean_R21) ./ std_R21;
	        % place in the array
	        gr2_ts1{1, i} = R21;
	        gr2_ts2{1, i} = A_full2;
	        
	        % variables of interest
	        vois2 = [vois2; {sub_id{i}, randi(90), sex_options(randi(2))}];
	    end
	    % Create the tables - functional layer
	    %tables_gr11 = cell(size(gr2_ts1));
	    mkdir([data_dir filesep() 'Functional' filesep() gr2_name]);
	    for i_tab = N_subjects_group1+1:1:N_subjects_group1 + N_subjects_group2
	        T_gr21 = array2table(gr2_ts1{i_tab});
	        %tables_gr21{i_tab} = T_gr21;
	        file_name = [data_dir filesep() 'Functional' filesep() gr2_name filesep() sub_id{i_tab} '.xlsx'];
	        writetable(T_gr21, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
	    end
	    
	    % Create the tables - connectivity layer
	    %tables_gr12 = cell(size(gr2_ts2));
	    mkdir([data_dir filesep() 'Connectivity' filesep() gr2_name]);
	    for i_tab = N_subjects_group1+1:1:N_subjects_group1 + N_subjects_group2
	        T_gr22 = array2table(gr2_ts2{i_tab});
	        %tables_gr22{i_tab} = T_gr22;
	        file_name = [data_dir filesep() 'Connectivity' filesep() gr2_name filesep() sub_id{i_tab} '.xlsx'];
	        writetable(T_gr22, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
	    end  
	    writetable(table(vois2), [data_dir filesep() 'Connectivity' filesep() gr2_name '.vois.xlsx'], 'WriteVariableNames', false)
	    writetable(table(vois2), [data_dir filesep() 'Functional' filesep() gr2_name '.vois.xlsx'], 'WriteVariableNames', false)
	    
	    % Group 3
	    % initialize values for the WS model
	    K3 = [6 2];
	    beta3 = [0.8 0.03];
	    % initialize the indices where the matrices will be placed
	    indices1 = 1:1:45;
	    indices2 = 46:1:90;
	    indices = {indices1; indices2};
	    gr3_ts1 = cell(1, N_subjects_group3); % layer 1
	    gr3_ts2 = cell(1, N_subjects_group3); % layer 2
	    gr3_name = 'CON_FUN_MP_Group3_XLS';
	    vois3 = [
	        {{'Subject ID'} {'Age'} {'Sex'}}
	        {{} {} cell2str(sex_options)}
	        ];
	    sub_id = cell(1, N_subjects_group3);
	    for i = N_subjects_group1+N_subjects_group2+1:1:N_subjects_group1+N_subjects_group2+N_subjects_group3 % subject number
	        sub_id(i) = {['SubjectCON_FUN_MP_' num2str(i)]};
	        
	        % randomize the parameters
	        K_temp = K3(randperm(length(K3)));
	        beta_temp = beta3(randperm(length(beta3)));
	        % initialize matrix for the subject
	        A_full1 = zeros(N);
	        % loop over each module
	        for i_mod = 1:1:2
	            A_full1(indices{i_mod},indices{i_mod}) = full(adjacency(WattsStrogatz(45, K_temp(i_mod), beta_temp(i_mod))));
	        end
	        A_full1(1:length(A_full1)+1:numel(A_full1)) = 1;
	        % this is needed to make the matrices positive definite
	        A_full1 = A_full1*transpose(A_full1);
	        
	        % 70% of connections kept
	        density = 70;
	        A_full2 = A_full1;
	        sorted_vector = sort(A_full2(:));
	        index = round(length(sorted_vector) * (100 - density) / 100);
	        if index == 0
	            threshold = sorted_vector(1) - eps;
	        elseif index >= length(sorted_vector)
	            threshold = sorted_vector(end) + eps;
	        else
	            threshold = sorted_vector(index);
	        end
	        % Calculates thresholded graph
	        A_full2(A_full2 < threshold) = 0;
	        
	        % make the adjacency matrix weighted
	        r = 0 + (0.5 - 0)*rand(size(A_full2));
	        diffA = A_full2 - r;
	        A_full2(A_full2 ~= 0) = diffA(A_full2 ~= 0);
	        % make the adjacency matrix symmetric
	        A_full2 = max(A_full2, transpose(A_full2));
	        % This matrix will be covariance matrices for the two groups
	        % Specify the mean
	        mu_gr2_1 = ones(1, length(A_full1));
	        % calculate time series
	        R21 = mvnrnd(mu_gr2_1, A_full1, N_tslength);
	        % Normalize the time series
	        mean_R21 = mean(R21);
	        std_R21 = std(R21);
	        R21 = (R21 - mean_R21) ./ std_R21;
	        % place in the array
	        gr3_ts1{1, i} = R21;
	        gr3_ts2{1, i} = A_full2;
	        
	        % variables of interest
	        vois3 = [vois3; {sub_id{i}, randi(90), sex_options(randi(2))}];
	    end
	    % Create the tables - functional layer
	    %tables_gr11 = cell(size(gr3_ts1));
	    mkdir([data_dir filesep() 'Functional' filesep() gr3_name]);
	    for i_tab = N_subjects_group1+N_subjects_group2+1:1:N_subjects_group1+N_subjects_group2+N_subjects_group3
	        T_gr31 = array2table(gr3_ts1{i_tab});
	        %tables_gr21{i_tab} = T_gr31;
	        file_name = [data_dir filesep() 'Functional' filesep() gr3_name filesep() sub_id{i_tab} '.xlsx'];
	        writetable(T_gr31, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
	    end
	    
	    % Create the tables - connectivity layer
	    %tables_gr12 = cell(size(gr3_ts2));
	    mkdir([data_dir filesep() 'Connectivity' filesep() gr3_name]);
	    for i_tab = N_subjects_group1+N_subjects_group2+1:1:N_subjects_group1+N_subjects_group2+N_subjects_group3
	        T_gr32 = array2table(gr3_ts2{i_tab});
	        %tables_gr32{i_tab} = T_gr32;
	        file_name = [data_dir filesep() 'Connectivity' filesep() gr3_name filesep() sub_id{i_tab} '.xlsx'];
	        writetable(T_gr32, file_name, 'WriteRowNames', false, 'WriteVariableNames', false)
	    end
	    writetable(table(vois3), [data_dir filesep() 'Connectivity' filesep() gr3_name '.vois.xlsx'], 'WriteVariableNames', false)
	    writetable(table(vois3), [data_dir filesep() 'Functional' filesep() gr3_name '.vois.xlsx'], 'WriteVariableNames', false)
	    
	    % reset RNG
	    rng(rng_settings_)
	end
end

%% Test 13: Create a NNDataset containg NNDataPoint_CON_FUN_MP_CLA with simulated data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% Load BrainAtlas
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'atlas.xlsx'], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Load Group 1
	% Load SubjectCON
	im_gr1 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1_CON = im_gr1.get('GR');
	
	% Load SubjectFUN
	im_gr1 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1_FUN = im_gr1.get('GR');
	
	% Combine Group of SubjectCON with Group of SubjectFUN
	co_gr1 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr1_CON, ...
	    'GR_FUN', gr1_FUN, ...
	    'WAITBAR', true ...
	    );
	
	gr1 = co_gr1.get('GR_CON_FUN_MP');
	
	
	% Load Group 2
	% Load SubjectCON
	im_gr2 = ImporterGroupSubjectCON_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Connectivity' filesep 'CON_FUN_MP_Group2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2_CON = im_gr2.get('GR');
	
	% Load SubjectFUN
	im_gr2 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'Functional' filesep 'CON_FUN_MP_Group2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2_FUN = im_gr2.get('GR');
	
	% Combine Group of SubjectCON with Group of SubjectFUN
	co_gr2 = CombineGroups_CON_FUN_MP( ...
	    'GR_CON', gr2_CON, ...
	    'GR_FUN', gr2_FUN, ...
	    'WAITBAR', true ...
	    );
	
	gr2 = co_gr2.get('GR_CON_FUN_MP');
	
	% create item lists of NNDataPoint_CON_FUN_MP_CLA
	[~, group_folder_name] = fileparts(im_gr1.get('DIRECTORY'));
	it_list1 = cellfun(@(x) NNDataPoint_CON_FUN_MP_CLA( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_IDS', {group_folder_name}), ...
	    gr1.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	[~, group_folder_name] = fileparts(im_gr2.get('DIRECTORY'));
	it_list2 = cellfun(@(x) NNDataPoint_CON_FUN_MP_CLA( ...
	    'ID', x.get('ID'), ...
	    'SUB', x, ...
	    'TARGET_IDS', {group_folder_name}), ...
	    gr2.get('SUB_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	% create NNDataPoint_CON_FUN_MP_CLA DICT items
	dp_list1 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', ...
	        'IT_LIST', it_list1 ...
	        );
	
	dp_list2 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', ...
	        'IT_LIST', it_list2 ...
	        );
	
	% create a NNDataset containing the NNDataPoint_CON_FUN_MP_CLA DICT
	d1 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', ...
	    'DP_DICT', dp_list1 ...
	    );
	
	d2 = NNDataset( ...
	    'DP_CLASS', 'NNDataPoint_CON_FUN_MP_CLA', ...
	    'DP_DICT', dp_list2 ...
	    );
	
	% Check whether the number of inputs matches
	assert(length(d1.get('INPUTS')) == gr1.get('SUB_DICT').get('LENGTH'), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA does not construct the dataset correctly. The number of the inputs should be the same as the number of imported subjects of group 1.' ...
			)
	
	assert(length(d2.get('INPUTS')) == gr2.get('SUB_DICT').get('LENGTH'), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA does not construct the dataset correctly. The number of the inputs should be the same as the number of imported subjects of group 2.' ...
			)
	
	% Check whether the number of targets matches
	assert(length(d1.get('TARGETS')) == gr1.get('SUB_DICT').get('LENGTH'), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA does not construct the dataset correctly. The number of the targets should be the same as the number of imported subjects of group 1.' ...
			)
	
	assert(length(d2.get('TARGETS')) == gr2.get('SUB_DICT').get('LENGTH'), ...
			[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
			'NNDataPoint_CON_FUN_MP_CLA does not construct the dataset correctly. The number of the targets should be the same as the number of imported subjects of group 2.' ...
			)
	
	% Check whether the content of input for a single datapoint matches
	for index = 1:1:gr1.get('SUB_DICT').get('LENGTH')
	    individual_input = d1.get('DP_DICT').get('IT', index).get('INPUT');
	    A = cell(1, 2);
	    A{1} = gr1.get('SUB_DICT').get('IT', index).get('CON');
	    A{2} = gr1.get('SUB_DICT').get('IT', index).get('FUN');
	    known_input = A;
	
	    assert(isequal(individual_input, known_input), ...
	        [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
	        'NNDataPoint_CON_FUN_MP_CLA does not construct the dataset correctly. The input value is not derived correctly.' ...
	        )
	end
	for index = 1:1:gr2.get('SUB_DICT').get('LENGTH')
	    individual_input = d2.get('DP_DICT').get('IT', index).get('INPUT');
	    A = cell(1, 2);
	    A{1} = gr2.get('SUB_DICT').get('IT', index).get('CON');
	    A{2} = gr2.get('SUB_DICT').get('IT', index).get('FUN');
	    known_input = A;
	
	    assert(isequal(individual_input, known_input), ...
	        [BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
	        'NNDataPoint_CON_FUN_MP_CLA does not construct the dataset correctly. The input value is not derived correctly.' ...
	        )
	end
end

%% Test 14: Example training-test classification
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% ensure the example data is generated
	if ~isfile([fileparts(which('NNDataPoint_CON_FUN_MP_CLA')) filesep 'Example data NN CLA CON_FUN_MP XLS' filesep 'atlas.xlsx'])
	    test_NNDataPoint_CON_FUN_MP_CLA % create example files
	end
	
	example_NN_CON_FUN_MP_CLA
end

%% Test 15: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNDataPoint_CON_FUN_MP_CLA:' BRAPH2.FAIL_TEST], ...
		[' When testing NNDataPoint_CON_FUN_MP_CLA no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 16: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

%% Test functions
function h = WattsStrogatz(N,K,beta)
% H = WattsStrogatz(N,K,beta) returns a Watts-Strogatz model graph with N
% nodes, N*K edges, mean node degree 2*K, and rewiring probability beta.
%
% beta = 0 is a ring lattice, and beta = 1 is a random graph.

% Connect each node to its K next and previous neighbors. This constructs
% indices for a ring lattice.
s = repelem((1:N)',1,K);
t = s + repmat(1:K,N,1);
t = mod(t-1,N)+1;

% Rewire the target node of each edge with probability beta
for source=1:N
    switchEdge = rand(K, 1) < beta;
    
    newTargets = rand(N, 1);
    newTargets(source) = 0;
    newTargets(s(t==source)) = 0;
    newTargets(t(source, ~switchEdge)) = 0;
    
    [~, ind] = sort(newTargets, 'descend');
    t(source, switchEdge) = ind(1:nnz(switchEdge));
end

h = graph(s,t);
end
