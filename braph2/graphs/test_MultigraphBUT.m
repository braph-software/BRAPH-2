%TEST_MULTIGRAPHBUT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	g = MultigraphBUT();
	 
	% get('ELCLASS')
	if isa(MultigraphBUT, 'ConcreteElement')
		assert(strcmp(MultigraphBUT().get('ELCLASS'), 'MultigraphBUT'), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT().get(''ELCLASS'') should return ''MultigraphBUT''.')
	end
	 
	% getClass
	assert(strcmp(MultigraphBUT.getClass(), 'MultigraphBUT'), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.getClass() should return ''MultigraphBUT''.')
	assert(strcmp(g.getClass(), 'MultigraphBUT'), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'g.getClass() should return ''MultigraphBUT''.')
	assert(strcmp(Element.getClass(g), 'MultigraphBUT'), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(g) should return ''MultigraphBUT''.')
	assert(strcmp(Element.getClass('MultigraphBUT'), 'MultigraphBUT'), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''MultigraphBUT'') should return ''MultigraphBUT''.')
	 
	% getSubclasses()
	assert(isequal(MultigraphBUT.getSubclasses(), subclasses('MultigraphBUT', [], [], true)), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.getSubclasses() should return the same result as subclasses(''MultigraphBUT'', [], [], true).')
	assert(isequal(g.getSubclasses(), subclasses('MultigraphBUT', [], [], true)), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''MultigraphBUT'', [], [], true).')
	assert(isequal(Element.getSubclasses(g), subclasses('MultigraphBUT', [], [], true)), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(g) should return the same result as subclasses(''MultigraphBUT'', [], [], true).')
	assert(isequal(Element.getSubclasses('MultigraphBUT'), subclasses('MultigraphBUT', [], [], true)), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''MultigraphBUT'') should return the same result as subclasses(''MultigraphBUT'', [], [], true).')
	 
	% getProps()
	assert(isempty(MultigraphBUT.getProps()) || isequal(MultigraphBUT.getProps(), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.getProps() should return a row vector [1:1:N].')
	assert(isempty(MultigraphBUT.getProps()) || isequal(g.getProps(), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'g.getProps() should return a row vector [1:1:N].')
	assert(isempty(MultigraphBUT.getProps()) || isequal(Element.getProps(g), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g) should return a row vector [1:1:N].')
	assert(isempty(MultigraphBUT.getProps()) || isequal(Element.getProps('MultigraphBUT'), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''MultigraphBUT'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) MultigraphBUT.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(MultigraphBUT.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.getProps(category) does not work.')
	tmp = cellfun(@(category) g.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(MultigraphBUT.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'g.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(g, category), categories, 'UniformOutput', false);
	assert(isempty(MultigraphBUT.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('MultigraphBUT', category), categories, 'UniformOutput', false);
	assert(isempty(MultigraphBUT.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MultigraphBUT.getProps())), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''MultigraphBUT'', category) does not work.')
	 
	% getPropNumber()
	assert(MultigraphBUT.getPropNumber() == length(MultigraphBUT.getProps()), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.getPropNumber() should return the number of properties.')
	assert(g.getPropNumber() == length(MultigraphBUT.getProps()), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(g) == length(MultigraphBUT.getProps()), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g) should return the number of properties.')
	assert(Element.getPropNumber('MultigraphBUT') == length(MultigraphBUT.getProps()), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''MultigraphBUT'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) MultigraphBUT.getPropNumber(category), categories)) == MultigraphBUT.getPropNumber(), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) g.getPropNumber(category), categories)) == MultigraphBUT.getPropNumber(), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(g, category), categories)) == MultigraphBUT.getPropNumber(), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('MultigraphBUT', category), categories)) == MultigraphBUT.getPropNumber(), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''MultigraphBUT'', category) does not work.')
	 
	% existsProp(prop)
	assert(~MultigraphBUT.existsProp(NaN), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.existsProp(prop) does not work.')
	assert(~g.existsProp(NaN), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'g.existsProp(prop) does not work.')
	assert(~Element.existsProp(g, NaN), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(g, prop) does not work.')
	assert(~Element.existsProp('MultigraphBUT', NaN), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''MultigraphBUT'', prop) does not work.')
	 
	assert_with_error('MultigraphBUT.existsProp(NaN)', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(''MultigraphBUT'', NaN)', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		assert(MultigraphBUT.existsProp(prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.existsProp(prop) does not work.')
		assert(g.existsProp(prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.existsProp(prop) does not work.')
		assert(Element.existsProp(g, prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(g, prop) does not work.')
		assert(Element.existsProp('MultigraphBUT', prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''MultigraphBUT'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~MultigraphBUT.existsTag(''), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.existsTag(tag) does not work.')
	assert(~g.existsTag(''), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'g.existsTag(tag) does not work.')
	assert(~Element.existsTag(g, ''), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(g, tag) does not work.')
	assert(~Element.existsTag('MultigraphBUT', ''), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''MultigraphBUT'', tag) does not work.')
	 
	assert_with_error('MultigraphBUT.existsTag('''')', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(''MultigraphBUT'', '''')', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
		assert(MultigraphBUT.existsTag(tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.existsTag(tag) does not work.')
		assert(g.existsTag(tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.existsTag(tag) does not work.')
		assert(Element.existsTag(g, tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(g, tga) does not work.')
		assert(Element.existsTag('MultigraphBUT', tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''MultigraphBUT'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		assert(MultigraphBUT.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropProp(prop) does not work.')
		assert(g.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(prop) does not work.')
		assert(Element.getPropProp(g, prop) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, prop) does not work.')
		assert(Element.getPropProp('MultigraphBUT', prop) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''MultigraphBUT'', prop) does not work.')
	 
		tag = g.getPropTag(prop);
		assert(MultigraphBUT.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropProp(tag) does not work.')
		assert(g.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(tag) does not work.')
		assert(Element.getPropProp(g, tag) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, tag) does not work.')
		assert(Element.getPropProp('MultigraphBUT', prop) == prop, ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''MultigraphBUT'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(strcmp(MultigraphBUT.getPropTag(prop), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropTag(prop) does not work.')
		assert(strcmp(g.getPropTag(prop), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(g, prop), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, prop) does not work.')
		assert(strcmp(Element.getPropTag('MultigraphBUT', prop), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''MultigraphBUT'', prop) does not work.')
	 
		assert(strcmp(MultigraphBUT.getPropTag(tag), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropTag(tag) does not work.')
		assert(strcmp(g.getPropTag(tag), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(g, tag), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, tag) does not work.')
		assert(strcmp(Element.getPropTag('MultigraphBUT', prop), tag), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''MultigraphBUT'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Category.existsCategory(MultigraphBUT.getPropCategory(prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(g.getPropCategory(prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''MultigraphBUT'', prop) does not work.')
	 
		assert(Category.existsCategory(MultigraphBUT.getPropCategory(tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(g.getPropCategory(tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''MultigraphBUT'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Format.existsFormat(MultigraphBUT.getPropFormat(prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(g.getPropFormat(prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''MultigraphBUT'', prop) does not work.')
	 
		assert(Format.existsFormat(MultigraphBUT.getPropFormat(tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(g.getPropFormat(tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''MultigraphBUT'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(ischar(MultigraphBUT.getPropDescription(prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropDescription(prop) does not work.')
		assert(ischar(g.getPropDescription(prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''MultigraphBUT'', prop) does not work.')
	 
		assert(ischar(MultigraphBUT.getPropDescription(tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.getPropDescription(tag) does not work.')
		assert(ischar(g.getPropDescription(tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''MultigraphBUT'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		settings = MultigraphBUT.getPropSettings(prop);
		settings = g.getPropSettings(prop);
		settings = Element.getPropSettings(g, prop);
		settings = Element.getPropSettings('MultigraphBUT', prop);
	 
		settings = MultigraphBUT.getPropSettings(tag);
		settings = g.getPropSettings(tag);
		settings = Element.getPropSettings(g, tag);
		settings = Element.getPropSettings('MultigraphBUT', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		default = MultigraphBUT.getPropDefault(prop);
		default = g.getPropDefault(prop);
		default = Element.getPropDefault(g, prop);
		default = Element.getPropDefault('MultigraphBUT', prop);
	 
		default = MultigraphBUT.getPropDefault(tag);
		default = g.getPropDefault(tag);
		default = Element.getPropDefault(g, tag);
		default = Element.getPropDefault('MultigraphBUT', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		conditioned_default = MultigraphBUT.getPropDefaultConditioned(prop);
		conditioned_default = g.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(g, prop);
		conditioned_default = Element.getPropDefaultConditioned('MultigraphBUT', prop);
	 
		conditioned_default = MultigraphBUT.getPropDefaultConditioned(tag);
		conditioned_default = g.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(g, tag);
		conditioned_default = Element.getPropDefaultConditioned('MultigraphBUT', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:MultigraphBUT.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(~MultigraphBUT.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.checkProp(prop, value) does not work.')
		assert(~g.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(g, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, value) does not work.')
		assert(~Element.checkProp('MultigraphBUT', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MultigraphBUT'', prop, value) does not work.')
	 
		assert_with_error('MultigraphBUT.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(''MultigraphBUT'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~MultigraphBUT.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.checkProp(tag, value) does not work.')
		assert(~g.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(g, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, value) does not work.')
		assert(~Element.checkProp('MultigraphBUT', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MultigraphBUT'', tag, value) does not work.')
	 
		assert_with_error('MultigraphBUT.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(''MultigraphBUT'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MultigraphBUT:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(MultigraphBUT.checkProp(prop, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.checkProp(prop, <conditioned default value>) does not work.')
		assert(g.checkProp(prop, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, prop, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('MultigraphBUT', prop, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MultigraphBUT'', prop, <conditioned default value>) does not work.')
	 
		assert(MultigraphBUT.checkProp(tag, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.checkProp(tag, <conditioned default value>) does not work.')
		assert(g.checkProp(tag, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, tag, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('MultigraphBUT', tag, Element.getPropDefaultConditioned(MultigraphBUT, prop)), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MultigraphBUT'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, MultigraphBUT.getPropDefault(MultigraphBUT.TEMPLATE), ...
		MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOMIZE), ...
		MultigraphBUT.RANDOM_SEED, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOM_SEED), ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, MultigraphBUT.getPropDefault(MultigraphBUT.PFGA), ...
		MultigraphBUT.PFGH, MultigraphBUT.getPropDefault(MultigraphBUT.PFGH), ...
		MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
		MultigraphBUT.SYMMETRIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SYMMETRIZE_RULE), ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SEMIPOSITIVIZE_RULE), ...
		MultigraphBUT.STANDARDIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.STANDARDIZE_RULE), ...
		MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
		MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
		);
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
	 
		% excluded props
		if any(prop == [MultigraphBUT.PFGA MultigraphBUT.PFGH])
			continue
		end
	 
		TAG = upper(MultigraphBUT.getPropTag(prop));
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					g.getr(prop) == MultigraphBUT.getNoValue(), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['Being a ' MultigraphBUT.getCategoryName(MultigraphBUT.getPropCategory(prop)) ', MultigraphBUT.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MultigraphBUT.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == MultigraphBUT.getNoValue(), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['Being a ' MultigraphBUT.getCategoryName(MultigraphBUT.getPropCategory(prop)) ', MultigraphBUT.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MultigraphBUT.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					g.getr(prop) == MultigraphBUT.getNoValue(), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['Being a ' MultigraphBUT.getCategoryName(MultigraphBUT.getPropCategory(prop)) ', MultigraphBUT.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MultigraphBUT.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == MultigraphBUT.getNoValue(), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['Being a ' MultigraphBUT.getCategoryName(MultigraphBUT.getPropCategory(prop)) ', MultigraphBUT.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MultigraphBUT.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':MultigraphBUT']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(g.getr(prop), MultigraphBUT.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by MultigraphBUT.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in MultigraphBUT.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(g.getr(TAG), MultigraphBUT.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' TAG ') must be inizialized to its default value ' ...
					'given by MultigraphBUT.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in MultigraphBUT.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, MultigraphBUT.getPropDefault(MultigraphBUT.TEMPLATE), ...
		MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOMIZE), ...
		MultigraphBUT.RANDOM_SEED, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOM_SEED), ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, MultigraphBUT.getPropDefault(MultigraphBUT.PFGA), ...
		MultigraphBUT.PFGH, MultigraphBUT.getPropDefault(MultigraphBUT.PFGH), ...
		MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
		MultigraphBUT.SYMMETRIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SYMMETRIZE_RULE), ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SEMIPOSITIVIZE_RULE), ...
		MultigraphBUT.STANDARDIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.STANDARDIZE_RULE), ...
		MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
		MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
		);
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
	 
		% excluded props
		if any(prop == [MultigraphBUT.PFGA MultigraphBUT.PFGH])
			continue
		end
	 
		TAG = upper(MultigraphBUT.getPropTag(prop));
		switch MultigraphBUT.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':MultigraphBUT']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':MultigraphBUT']);
	% 			assert( ...
	% 				~isa(g.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	% 				['MultigraphBUT.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(g.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	% 				['MultigraphBUT.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	% 				['MultigraphBUT.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':MultigraphBUT']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if g.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:MultigraphBUT');
					delete(ancestor(g.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(MultigraphBUT.getProps(Category.RESULT))
		for prop = 1:1:MultigraphBUT.getPropNumber()
	 
			% excluded props
			if any(prop == [MultigraphBUT.PFGA MultigraphBUT.PFGH])
				continue
			end
	 
			switch MultigraphBUT.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						g.isLocked(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~g.isLocked(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = MultigraphBUT();
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		TAG = upper(MultigraphBUT.getPropTag(prop));
		assert( ...
			~g.isLocked(prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			['MultigraphBUT.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~g.isLocked(TAG), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			['MultigraphBUT.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	g.lock()
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = MultigraphBUT();
	 
	warning_backup = warning('off', 'BRAPH2:MultigraphBUT');
	for prop = 1:1:MultigraphBUT.getPropNumber()
		g.lock(prop)
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = MultigraphBUT();
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		TAG = upper(MultigraphBUT.getPropTag(prop));
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			['MultigraphBUT.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			g.isChecked(TAG), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			['MultigraphBUT.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	g.unchecked()
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		assert( ...
			~g.isChecked(prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			['MultigraphBUT.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	g.checked()
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			['MultigraphBUT.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic MultigraphBUT
	g_0 = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, MultigraphBUT.getPropDefault(MultigraphBUT.TEMPLATE), ...
		MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOMIZE), ...
		MultigraphBUT.RANDOM_SEED, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOM_SEED), ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, MultigraphBUT.getPropDefault(MultigraphBUT.PFGA), ...
		MultigraphBUT.PFGH, MultigraphBUT.getPropDefault(MultigraphBUT.PFGH), ...
		MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
		MultigraphBUT.SYMMETRIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SYMMETRIZE_RULE), ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SEMIPOSITIVIZE_RULE), ...
		MultigraphBUT.STANDARDIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.STANDARDIZE_RULE), ...
		MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
		MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
		);
	 
	% MultigraphBUT with 1st callbacks
	g_1 = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, g_0.getCallback(4), ..., ...
		MultigraphBUT.ID, g_0.getCallback(5), ..., ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, g_0.getCallback(24), ..., ...
		MultigraphBUT.RANDOM_SEED, g_0.getCallback(25), ..., ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, g_0.getCallback(34), ..., ...
		MultigraphBUT.PFGH, g_0.getCallback(35), ..., ...
		MultigraphBUT.B, g_0.getCallback(36), ..., ...
		MultigraphBUT.SYMMETRIZE_RULE, g_0.getCallback(37), ..., ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, g_0.getCallback(38), ..., ...
		MultigraphBUT.STANDARDIZE_RULE, g_0.getCallback(39), ..., ...
		MultigraphBUT.ATTEMPTSPEREDGE, g_0.getCallback(40), ..., ...
		MultigraphBUT.NUMBEROFWEIGHTS, g_0.getCallback(41), ..., ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, g_0.getCallback(43) ... ...
		);
	 
	prop_number = MultigraphBUT.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(MultigraphBUT.getPropTag(prop));
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% MultigraphBUT with 2nd callbacks
	g_2 = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, g_1.getCallback(4), ..., ...
		MultigraphBUT.ID, g_1.getCallback(5), ..., ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, g_1.getCallback(24), ..., ...
		MultigraphBUT.RANDOM_SEED, g_1.getCallback(25), ..., ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, g_1.getCallback(34), ..., ...
		MultigraphBUT.PFGH, g_1.getCallback(35), ..., ...
		MultigraphBUT.B, g_1.getCallback(36), ..., ...
		MultigraphBUT.SYMMETRIZE_RULE, g_1.getCallback(37), ..., ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, g_1.getCallback(38), ..., ...
		MultigraphBUT.STANDARDIZE_RULE, g_1.getCallback(39), ..., ...
		MultigraphBUT.ATTEMPTSPEREDGE, g_1.getCallback(40), ..., ...
		MultigraphBUT.NUMBEROFWEIGHTS, g_1.getCallback(41), ..., ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, g_1.getCallback(43) ... ...
		);
	 
	prop_number = MultigraphBUT.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(MultigraphBUT.getPropTag(prop));
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% MultigraphBUT with 3rd callbacks
	g_3 = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, g_2.getCallback(4), ..., ...
		MultigraphBUT.ID, g_2.getCallback(5), ..., ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, g_2.getCallback(24), ..., ...
		MultigraphBUT.RANDOM_SEED, g_2.getCallback(25), ..., ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, g_2.getCallback(34), ..., ...
		MultigraphBUT.PFGH, g_2.getCallback(35), ..., ...
		MultigraphBUT.B, g_2.getCallback(36), ..., ...
		MultigraphBUT.SYMMETRIZE_RULE, g_2.getCallback(37), ..., ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, g_2.getCallback(38), ..., ...
		MultigraphBUT.STANDARDIZE_RULE, g_2.getCallback(39), ..., ...
		MultigraphBUT.ATTEMPTSPEREDGE, g_2.getCallback(40), ..., ...
		MultigraphBUT.NUMBEROFWEIGHTS, g_2.getCallback(41), ..., ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, g_2.getCallback(43) ... ...
		);
	 
	prop_number = MultigraphBUT.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(MultigraphBUT.getPropTag(prop));
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	g = MultigraphBUT();
	 
	g_copy = g.copy();
	 
	assert(g_copy ~= g, ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(g_copy, g), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					'MultigraphBUT.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
							'MultigraphBUT.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
							'MultigraphBUT.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					g_copy.isLocked(prop) == g.isLocked(prop), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					'MultigraphBUT.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.isChecked(prop) == g.isChecked(prop), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					'MultigraphBUT.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					'MultigraphBUT.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	g = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, MultigraphBUT.getPropDefault(MultigraphBUT.TEMPLATE), ...
		MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOMIZE), ...
		MultigraphBUT.RANDOM_SEED, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOM_SEED), ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, MultigraphBUT.getPropDefault(MultigraphBUT.PFGA), ...
		MultigraphBUT.PFGH, MultigraphBUT.getPropDefault(MultigraphBUT.PFGH), ...
		MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
		MultigraphBUT.SYMMETRIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SYMMETRIZE_RULE), ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SEMIPOSITIVIZE_RULE), ...
		MultigraphBUT.STANDARDIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.STANDARDIZE_RULE), ...
		MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
		MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
		);
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		if MultigraphBUT.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':MultigraphBUT']);
			% g.memorize(prop);
			% warning(warning_backup)
		elseif MultigraphBUT.getPropCategory(prop) == Category.EVANESCENT && g.getPropFormat(prop) == Format.HANDLE
			g.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:MultigraphBUT');
			delete(ancestor(g.get(prop), 'figure'))
			warning(warning_backup)
		else
			g.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	g_copy = g.copy();
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					'MultigraphBUT.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
							'MultigraphBUT.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
							'MultigraphBUT.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	g_0 = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, MultigraphBUT.getPropDefault(MultigraphBUT.TEMPLATE), ...
		MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOMIZE), ...
		MultigraphBUT.RANDOM_SEED, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOM_SEED), ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, MultigraphBUT.getPropDefault(MultigraphBUT.PFGA), ...
		MultigraphBUT.PFGH, MultigraphBUT.getPropDefault(MultigraphBUT.PFGH), ...
		MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
		MultigraphBUT.SYMMETRIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SYMMETRIZE_RULE), ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SEMIPOSITIVIZE_RULE), ...
		MultigraphBUT.STANDARDIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.STANDARDIZE_RULE), ...
		MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
		MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
		);
	 
	g = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, g_0.getCallback(4), ..., ...
		MultigraphBUT.ID, g_0.getCallback(5), ..., ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, g_0.getCallback(24), ..., ...
		MultigraphBUT.RANDOM_SEED, g_0.getCallback(25), ..., ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, g_0.getCallback(34), ..., ...
		MultigraphBUT.PFGH, g_0.getCallback(35), ..., ...
		MultigraphBUT.B, g_0.getCallback(36), ..., ...
		MultigraphBUT.SYMMETRIZE_RULE, g_0.getCallback(37), ..., ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, g_0.getCallback(38), ..., ...
		MultigraphBUT.STANDARDIZE_RULE, g_0.getCallback(39), ..., ...
		MultigraphBUT.ATTEMPTSPEREDGE, g_0.getCallback(40), ..., ...
		MultigraphBUT.NUMBEROFWEIGHTS, g_0.getCallback(41), ..., ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, g_0.getCallback(43) ... ...
		);
	 
	g_copy = g.copy();
	g_0_copy = g_copy.getr('ID').get('EL');
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					'MultigraphBUT.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
							'MultigraphBUT.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
							'MultigraphBUT.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == g_0.getCallback(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The callback should be obtained from MultigraphBUT.getCallback().' ...
						)
					assert( ...
						value_copy == g_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The callback should be obtained from MultigraphBUT.getCallback().' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g_template = MultigraphBUT();
	g = MultigraphBUT('TEMPLATE', g_template);
	 
	for prop = 1:1:MultigraphBUT.getPropNumber()
	 
		% excluded props
		if any(prop == [MultigraphBUT.PFGA MultigraphBUT.PFGH])
			continue
		end
	 
		TAG = upper(MultigraphBUT.getPropTag(prop));
		switch MultigraphBUT.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == MultigraphBUT.TEMPLATE
					assert( ...
						isa(g.getr(prop), 'MultigraphBUT'), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT TEMPLATE does not work. MultigraphBUT.getr(''TEMPLATE'') should be a MultigraphBUT element.' ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						'MultigraphBUT TEMPLATE does not work. MultigraphBUT_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(g.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT TEMPLATE does not work. MultigraphBUT.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						g.getr(prop).get('EL') == g_template && g.getr(prop).get('PROP') == prop && strcmp(g.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT TEMPLATE does not work. MultigraphBUT.getr(' TAG ') should be a Callback to g_template.' TAG '.'] ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
						['MultigraphBUT TEMPLATE does not work. MultigraphBUT_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT TEMPLATE does not work. MultigraphBUT.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(g_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
					['MultigraphBUT TEMPLATE does not work. MultigraphBUT_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, MultigraphBUT.getPropDefault(MultigraphBUT.TEMPLATE), ...
		MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOMIZE), ...
		MultigraphBUT.RANDOM_SEED, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOM_SEED), ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, MultigraphBUT.getPropDefault(MultigraphBUT.PFGA), ...
		MultigraphBUT.PFGH, MultigraphBUT.getPropDefault(MultigraphBUT.PFGH), ...
		MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
		MultigraphBUT.SYMMETRIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SYMMETRIZE_RULE), ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SEMIPOSITIVIZE_RULE), ...
		MultigraphBUT.STANDARDIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.STANDARDIZE_RULE), ...
		MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
		MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'multigraphbut_to_be_erased.b2'];
	 
	Element.save(g, filename)
	 
	g_loaded = Element.load(filename);
	 
	assert( ...
		isequal(g.copy(), g_loaded), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.save(g) and/or MultigraphBUT.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = MultigraphBUT( ...
		MultigraphBUT.ELCLASS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NAME, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DESCRIPTION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.TEMPLATE, MultigraphBUT.getPropDefault(MultigraphBUT.TEMPLATE), ...
		MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
		MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
		MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
		MultigraphBUT.TOSTRING, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.GRAPH_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.CONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.DIRECTIONALITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.SELFCONNECTIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NEGATIVITY_TYPE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERTICKS), ...
		MultigraphBUT.ALAYERTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.LAYERLABELS), ...
		MultigraphBUT.ALAYERLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONTICKS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONTICKS), ...
		MultigraphBUT.APARTITIONTICKS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONLABELS, MultigraphBUT.getPropDefault(MultigraphBUT.PARTITIONLABELS), ...
		MultigraphBUT.APARTITIONLABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODELABELS, MultigraphBUT.getPropDefault(MultigraphBUT.NODELABELS), ...
		MultigraphBUT.ANODELABELS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.RANDOMIZE, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOMIZE), ...
		MultigraphBUT.RANDOM_SEED, MultigraphBUT.getPropDefault(MultigraphBUT.RANDOM_SEED), ...
		MultigraphBUT.A, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.A_CHECK, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.NODENUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.LAYERNUMBER, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PARTITIONS, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.M_DICT, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.COMPATIBLE_MEASURES, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.MEASURE, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.PFGA, MultigraphBUT.getPropDefault(MultigraphBUT.PFGA), ...
		MultigraphBUT.PFGH, MultigraphBUT.getPropDefault(MultigraphBUT.PFGH), ...
		MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
		MultigraphBUT.SYMMETRIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SYMMETRIZE_RULE), ...
		MultigraphBUT.SEMIPOSITIVIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.SEMIPOSITIVIZE_RULE), ...
		MultigraphBUT.STANDARDIZE_RULE, MultigraphBUT.getPropDefault(MultigraphBUT.STANDARDIZE_RULE), ...
		MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
		MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
		MultigraphBUT.RANDOMIZATION, MultigraphBUT.getNoValue(), ...
		MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
		);
	 
	[json, struct, el_list] = encodeJSON(g);
	[g_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(g_dec ~= g, ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		'MultigraphBUT.encodeJSON() or MultigraphBUT.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) MultigraphBUT.getPropFormat(prop), num2cell(MultigraphBUT.getProps())) == Format.HANDLE) && all(cellfun(@(prop) MultigraphBUT.getPropFormat(prop), num2cell(MultigraphBUT.getProps())) == Format.NET)
		assert(isequal(g_dec, g), ...
			[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
			'MultigraphBUT.encodeJSON() or MultigraphBUT.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Constructor - Empty
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% 1
	B = [];
	g = MultigraphBUT('B', B, 'THRESHOLDS', []);
	
	g.get('A_CHECK')
	
	A = {};
	assert(isequal(g.get('A'), A), ...
	    [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	    'MultigraphBUT is not constructing well.')
	
	% 2
	B = [];
	g = MultigraphBUT('B', B, 'THRESHOLDS', [0 .1 .2 .3 .4 .5]);
	
	g.get('A_CHECK')
	
	A = g.get('A');
	assert(isequal(A{1, 1}, []) && isequal(A{2, 2}, []) && isequal(A{3, 3}, []) && isequal(A{4, 4}, []) && isequal(A{5, 5}, []) && isequal(A{6, 6}, []), ...
	    [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	    'MultigraphBUT is not constructing well.')
	
	% 3
	B = [
	    0 .1 .2 .3 .4
	    .1 0 .1 .2 .3
	    .2 .1 0 .1 .2
	    .3 .2 .1 0 .1
	    .4 .3 .2 .1 0
	    ];
	g = MultigraphBUT('B', B, 'THRESHOLDS', []);
	
	g.get('A_CHECK')
	A = {};
	assert(isequal(g.get('A'), A), ...
	    [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	    'MultigraphBUT is not constructing well.')
end

%% Test 13: Constructor - Full
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = [
	    0 .1 .2 .3 .4
	    .1 0 .1 .2 .3
	    .2 .1 0 .1 .2
	    .3 .2 .1 0 .1
	    .4 .3 .2 .1 0
	    ];
	g = MultigraphBUT('B', B, 'THRESHOLDS', [0 .1 .2 .3 .4 .5]);
	
	g.get('A_CHECK')
	
	A = g.get('A');
	assert(isequal( ...
	    A{1, 1}, ...
	    [
	    0 1 1 1 1
	    1 0 1 1 1
	    1 1 0 1 1
	    1 1 1 0 1
	    1 1 1 1 0
	    ]) ...
	    && ...
	    isequal( ...
	    A{2, 2}, ...
	    [
	    0 0 1 1 1
	    0 0 0 1 1
	    1 0 0 0 1
	    1 1 0 0 0
	    1 1 1 0 0
	    ]) ...
	    && ...
	    isequal( ...
	    A{3, 3}, ...
	    [
	    0 0 0 1 1
	    0 0 0 0 1
	    0 0 0 0 0
	    1 0 0 0 0
	    1 1 0 0 0
	    ]) ...
	    && ...
	    isequal( ...
	    A{4, 4}, ...
	    [
	    0 0 0 0 1
	    0 0 0 0 0
	    0 0 0 0 0
	    0 0 0 0 0
	    1 0 0 0 0
	    ]) ...
	    && ...
	    isequal( ...
	    A{5, 5}, ...
	    [
	    0 0 0 0 0
	    0 0 0 0 0
	    0 0 0 0 0
	    0 0 0 0 0
	    0 0 0 0 0
	    ]) ...
	    && ...
	    isequal( ...
	    A{6, 6}, ...
	    [
	    0 0 0 0 0
	    0 0 0 0 0
	    0 0 0 0 0
	    0 0 0 0 0
	    0 0 0 0 0
	    ]), ...
	    [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	    'MultigraphBUT is not constructing well.')
end

%% Test 14: Randomize Rules
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = randn(10);
	g = MultigraphBUT('B', B, 'THRESHOLDS', [0 .1 .2 .3 .4 .5]);
	
	g.set('RANDOMIZE', true);
	g.set('ATTEMPTSPEREDGE', 4);
	g.get('A_CHECK')
	
	A = g.get('A');
	
	assert(isequal(size(A{1}), size(B)), ...
	    [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	    'MultigraphBUT Randomize is not functioning well.')
	
	g2 = MultigraphBUT('B', B, 'THRESHOLDS', [0 .1 .2 .3 .4 .5]);
	g2.set('RANDOMIZE', false);
	g2.set('ATTEMPTSPEREDGE', 4);
	g2.get('A_CHECK')
	
	A2 = g2.get('A');
	random_A = g2.get('RANDOMIZATION', A2);
	
	for i = 1:length(A2)
	    if all(A2{i, i}==0, "all") %if all nodes are zero, the random matrix is also all zeros
	        assert(isequal(A2{i, i}, random_A{i, i}), ...
	            [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	            'MultigraphBUT Randomize is not functioning well.')
	    elseif isequal((length(A2{i, i}).^2)- length(A2{i, i}), sum(A2{i, i}==1, "all")) %if all nodes (except diagonal) are one, the random matrix is the same as original
	        assert(isequal(A2{i, i}, random_A{i, i}), ...
	            [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	            'MultigraphBUT Randomize is not functioning well.')
	    else
	%         assert(~isequal(A2{i, i}, random_A{i, i}), ...
	%             [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	%             'MultigraphBUT Randomize is not functioning well.')
	    end
	
	    assert(isequal(numel(find(A2{i, i})), numel(find(random_A{i, i}))), ... % check same number of nodes
	        [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	        'MultigraphBUT Randomize is not functioning well.')
	        
	    assert(issymmetric(random_A{i, i}), ... % check symmetry 
	    [BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
	    'MultigraphBUT Randomize is not functioning well.')
	end
end

%% Test 15: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.FAIL_TEST], ...
		[' When testing MultigraphBUT no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 16: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

