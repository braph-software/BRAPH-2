%TEST_ORDMLWD

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	g = OrdMlWD();
	 
	% get('ELCLASS')
	if isa(OrdMlWD, 'ConcreteElement')
		assert(strcmp(OrdMlWD().get('ELCLASS'), 'OrdMlWD'), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD().get(''ELCLASS'') should return ''OrdMlWD''.')
	end
	 
	% getClass
	assert(strcmp(OrdMlWD.getClass(), 'OrdMlWD'), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.getClass() should return ''OrdMlWD''.')
	assert(strcmp(g.getClass(), 'OrdMlWD'), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'g.getClass() should return ''OrdMlWD''.')
	assert(strcmp(Element.getClass(g), 'OrdMlWD'), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(g) should return ''OrdMlWD''.')
	assert(strcmp(Element.getClass('OrdMlWD'), 'OrdMlWD'), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''OrdMlWD'') should return ''OrdMlWD''.')
	 
	% getSubclasses()
	assert(isequal(OrdMlWD.getSubclasses(), subclasses('OrdMlWD', [], [], true)), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.getSubclasses() should return the same result as subclasses(''OrdMlWD'', [], [], true).')
	assert(isequal(g.getSubclasses(), subclasses('OrdMlWD', [], [], true)), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''OrdMlWD'', [], [], true).')
	assert(isequal(Element.getSubclasses(g), subclasses('OrdMlWD', [], [], true)), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(g) should return the same result as subclasses(''OrdMlWD'', [], [], true).')
	assert(isequal(Element.getSubclasses('OrdMlWD'), subclasses('OrdMlWD', [], [], true)), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''OrdMlWD'') should return the same result as subclasses(''OrdMlWD'', [], [], true).')
	 
	% getProps()
	assert(isempty(OrdMlWD.getProps()) || isequal(OrdMlWD.getProps(), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.getProps() should return a row vector [1:1:N].')
	assert(isempty(OrdMlWD.getProps()) || isequal(g.getProps(), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'g.getProps() should return a row vector [1:1:N].')
	assert(isempty(OrdMlWD.getProps()) || isequal(Element.getProps(g), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g) should return a row vector [1:1:N].')
	assert(isempty(OrdMlWD.getProps()) || isequal(Element.getProps('OrdMlWD'), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''OrdMlWD'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) OrdMlWD.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(OrdMlWD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.getProps(category) does not work.')
	tmp = cellfun(@(category) g.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(OrdMlWD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'g.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(g, category), categories, 'UniformOutput', false);
	assert(isempty(OrdMlWD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('OrdMlWD', category), categories, 'UniformOutput', false);
	assert(isempty(OrdMlWD.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMlWD.getProps())), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''OrdMlWD'', category) does not work.')
	 
	% getPropNumber()
	assert(OrdMlWD.getPropNumber() == length(OrdMlWD.getProps()), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.getPropNumber() should return the number of properties.')
	assert(g.getPropNumber() == length(OrdMlWD.getProps()), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(g) == length(OrdMlWD.getProps()), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g) should return the number of properties.')
	assert(Element.getPropNumber('OrdMlWD') == length(OrdMlWD.getProps()), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''OrdMlWD'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) OrdMlWD.getPropNumber(category), categories)) == OrdMlWD.getPropNumber(), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) g.getPropNumber(category), categories)) == OrdMlWD.getPropNumber(), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(g, category), categories)) == OrdMlWD.getPropNumber(), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('OrdMlWD', category), categories)) == OrdMlWD.getPropNumber(), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''OrdMlWD'', category) does not work.')
	 
	% existsProp(prop)
	assert(~OrdMlWD.existsProp(NaN), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.existsProp(prop) does not work.')
	assert(~g.existsProp(NaN), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'g.existsProp(prop) does not work.')
	assert(~Element.existsProp(g, NaN), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(g, prop) does not work.')
	assert(~Element.existsProp('OrdMlWD', NaN), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''OrdMlWD'', prop) does not work.')
	 
	assert_with_error('OrdMlWD.existsProp(NaN)', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(''OrdMlWD'', NaN)', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		assert(OrdMlWD.existsProp(prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.existsProp(prop) does not work.')
		assert(g.existsProp(prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.existsProp(prop) does not work.')
		assert(Element.existsProp(g, prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(g, prop) does not work.')
		assert(Element.existsProp('OrdMlWD', prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''OrdMlWD'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~OrdMlWD.existsTag(''), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.existsTag(tag) does not work.')
	assert(~g.existsTag(''), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'g.existsTag(tag) does not work.')
	assert(~Element.existsTag(g, ''), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(g, tag) does not work.')
	assert(~Element.existsTag('OrdMlWD', ''), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''OrdMlWD'', tag) does not work.')
	 
	assert_with_error('OrdMlWD.existsTag('''')', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(''OrdMlWD'', '''')', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
		assert(OrdMlWD.existsTag(tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.existsTag(tag) does not work.')
		assert(g.existsTag(tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.existsTag(tag) does not work.')
		assert(Element.existsTag(g, tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(g, tga) does not work.')
		assert(Element.existsTag('OrdMlWD', tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''OrdMlWD'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		assert(OrdMlWD.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropProp(prop) does not work.')
		assert(g.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(prop) does not work.')
		assert(Element.getPropProp(g, prop) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, prop) does not work.')
		assert(Element.getPropProp('OrdMlWD', prop) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''OrdMlWD'', prop) does not work.')
	 
		tag = g.getPropTag(prop);
		assert(OrdMlWD.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropProp(tag) does not work.')
		assert(g.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(tag) does not work.')
		assert(Element.getPropProp(g, tag) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, tag) does not work.')
		assert(Element.getPropProp('OrdMlWD', prop) == prop, ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''OrdMlWD'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(strcmp(OrdMlWD.getPropTag(prop), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropTag(prop) does not work.')
		assert(strcmp(g.getPropTag(prop), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(g, prop), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, prop) does not work.')
		assert(strcmp(Element.getPropTag('OrdMlWD', prop), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''OrdMlWD'', prop) does not work.')
	 
		assert(strcmp(OrdMlWD.getPropTag(tag), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropTag(tag) does not work.')
		assert(strcmp(g.getPropTag(tag), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(g, tag), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, tag) does not work.')
		assert(strcmp(Element.getPropTag('OrdMlWD', prop), tag), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''OrdMlWD'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Category.existsCategory(OrdMlWD.getPropCategory(prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(g.getPropCategory(prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''OrdMlWD'', prop) does not work.')
	 
		assert(Category.existsCategory(OrdMlWD.getPropCategory(tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(g.getPropCategory(tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''OrdMlWD'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Format.existsFormat(OrdMlWD.getPropFormat(prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(g.getPropFormat(prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''OrdMlWD'', prop) does not work.')
	 
		assert(Format.existsFormat(OrdMlWD.getPropFormat(tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(g.getPropFormat(tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''OrdMlWD'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(ischar(OrdMlWD.getPropDescription(prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropDescription(prop) does not work.')
		assert(ischar(g.getPropDescription(prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''OrdMlWD'', prop) does not work.')
	 
		assert(ischar(OrdMlWD.getPropDescription(tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.getPropDescription(tag) does not work.')
		assert(ischar(g.getPropDescription(tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''OrdMlWD'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		settings = OrdMlWD.getPropSettings(prop);
		settings = g.getPropSettings(prop);
		settings = Element.getPropSettings(g, prop);
		settings = Element.getPropSettings('OrdMlWD', prop);
	 
		settings = OrdMlWD.getPropSettings(tag);
		settings = g.getPropSettings(tag);
		settings = Element.getPropSettings(g, tag);
		settings = Element.getPropSettings('OrdMlWD', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		default = OrdMlWD.getPropDefault(prop);
		default = g.getPropDefault(prop);
		default = Element.getPropDefault(g, prop);
		default = Element.getPropDefault('OrdMlWD', prop);
	 
		default = OrdMlWD.getPropDefault(tag);
		default = g.getPropDefault(tag);
		default = Element.getPropDefault(g, tag);
		default = Element.getPropDefault('OrdMlWD', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		conditioned_default = OrdMlWD.getPropDefaultConditioned(prop);
		conditioned_default = g.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(g, prop);
		conditioned_default = Element.getPropDefaultConditioned('OrdMlWD', prop);
	 
		conditioned_default = OrdMlWD.getPropDefaultConditioned(tag);
		conditioned_default = g.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(g, tag);
		conditioned_default = Element.getPropDefaultConditioned('OrdMlWD', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:OrdMlWD.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(~OrdMlWD.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.checkProp(prop, value) does not work.')
		assert(~g.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(g, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, value) does not work.')
		assert(~Element.checkProp('OrdMlWD', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMlWD'', prop, value) does not work.')
	 
		assert_with_error('OrdMlWD.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(''OrdMlWD'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~OrdMlWD.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.checkProp(tag, value) does not work.')
		assert(~g.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(g, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, value) does not work.')
		assert(~Element.checkProp('OrdMlWD', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMlWD'', tag, value) does not work.')
	 
		assert_with_error('OrdMlWD.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(''OrdMlWD'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMlWD:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(OrdMlWD.checkProp(prop, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.checkProp(prop, <conditioned default value>) does not work.')
		assert(g.checkProp(prop, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, prop, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('OrdMlWD', prop, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMlWD'', prop, <conditioned default value>) does not work.')
	 
		assert(OrdMlWD.checkProp(tag, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.checkProp(tag, <conditioned default value>) does not work.')
		assert(g.checkProp(tag, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, tag, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('OrdMlWD', tag, Element.getPropDefaultConditioned(OrdMlWD, prop)), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMlWD'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, OrdMlWD.getPropDefault(OrdMlWD.TEMPLATE), ...
		OrdMlWD.ID, OrdMlWD.getPropDefault(OrdMlWD.ID), ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, OrdMlWD.getPropDefault(OrdMlWD.RANDOMIZE), ...
		OrdMlWD.RANDOM_SEED, OrdMlWD.getPropDefault(OrdMlWD.RANDOM_SEED), ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, OrdMlWD.getPropDefault(OrdMlWD.PFGA), ...
		OrdMlWD.PFGH, OrdMlWD.getPropDefault(OrdMlWD.PFGH), ...
		OrdMlWD.B, OrdMlWD.getPropDefault(OrdMlWD.B), ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.SEMIPOSITIVIZE_RULE), ...
		OrdMlWD.STANDARDIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.STANDARDIZE_RULE), ...
		OrdMlWD.ATTEMPTSPEREDGE, OrdMlWD.getPropDefault(OrdMlWD.ATTEMPTSPEREDGE), ...
		OrdMlWD.NUMBEROFWEIGHTS, OrdMlWD.getPropDefault(OrdMlWD.NUMBEROFWEIGHTS), ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
	 
		% excluded props
		if any(prop == [OrdMlWD.PFGA OrdMlWD.PFGH])
			continue
		end
	 
		TAG = upper(OrdMlWD.getPropTag(prop));
		switch OrdMlWD.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					g.getr(prop) == OrdMlWD.getNoValue(), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMlWD.getCategoryName(OrdMlWD.getPropCategory(prop)) ', OrdMlWD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMlWD.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == OrdMlWD.getNoValue(), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMlWD.getCategoryName(OrdMlWD.getPropCategory(prop)) ', OrdMlWD.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMlWD.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					g.getr(prop) == OrdMlWD.getNoValue(), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMlWD.getCategoryName(OrdMlWD.getPropCategory(prop)) ', OrdMlWD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMlWD.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == OrdMlWD.getNoValue(), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMlWD.getCategoryName(OrdMlWD.getPropCategory(prop)) ', OrdMlWD.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMlWD.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':OrdMlWD']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(g.getr(prop), OrdMlWD.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by OrdMlWD.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in OrdMlWD.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(g.getr(TAG), OrdMlWD.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' TAG ') must be inizialized to its default value ' ...
					'given by OrdMlWD.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in OrdMlWD.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, OrdMlWD.getPropDefault(OrdMlWD.TEMPLATE), ...
		OrdMlWD.ID, OrdMlWD.getPropDefault(OrdMlWD.ID), ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, OrdMlWD.getPropDefault(OrdMlWD.RANDOMIZE), ...
		OrdMlWD.RANDOM_SEED, OrdMlWD.getPropDefault(OrdMlWD.RANDOM_SEED), ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, OrdMlWD.getPropDefault(OrdMlWD.PFGA), ...
		OrdMlWD.PFGH, OrdMlWD.getPropDefault(OrdMlWD.PFGH), ...
		OrdMlWD.B, OrdMlWD.getPropDefault(OrdMlWD.B), ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.SEMIPOSITIVIZE_RULE), ...
		OrdMlWD.STANDARDIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.STANDARDIZE_RULE), ...
		OrdMlWD.ATTEMPTSPEREDGE, OrdMlWD.getPropDefault(OrdMlWD.ATTEMPTSPEREDGE), ...
		OrdMlWD.NUMBEROFWEIGHTS, OrdMlWD.getPropDefault(OrdMlWD.NUMBEROFWEIGHTS), ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
	 
		% excluded props
		if any(prop == [OrdMlWD.PFGA OrdMlWD.PFGH])
			continue
		end
	 
		TAG = upper(OrdMlWD.getPropTag(prop));
		switch OrdMlWD.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':OrdMlWD']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':OrdMlWD']);
	% 			assert( ...
	% 				~isa(g.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	% 				['OrdMlWD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(g.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	% 				['OrdMlWD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	% 				['OrdMlWD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':OrdMlWD']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if g.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:OrdMlWD');
					delete(ancestor(g.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(OrdMlWD.getProps(Category.RESULT))
		for prop = 1:1:OrdMlWD.getPropNumber()
	 
			% excluded props
			if any(prop == [OrdMlWD.PFGA OrdMlWD.PFGH])
				continue
			end
	 
			switch OrdMlWD.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMlWD();
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		TAG = upper(OrdMlWD.getPropTag(prop));
		assert( ...
			~g.isLocked(prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			['OrdMlWD.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~g.isLocked(TAG), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			['OrdMlWD.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	g.lock()
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		switch OrdMlWD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMlWD();
	 
	warning_backup = warning('off', 'BRAPH2:OrdMlWD');
	for prop = 1:1:OrdMlWD.getPropNumber()
		g.lock(prop)
		switch OrdMlWD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMlWD();
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		TAG = upper(OrdMlWD.getPropTag(prop));
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			['OrdMlWD.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			g.isChecked(TAG), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			['OrdMlWD.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	g.unchecked()
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		assert( ...
			~g.isChecked(prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			['OrdMlWD.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	g.checked()
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			['OrdMlWD.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic OrdMlWD
	g_0 = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, OrdMlWD.getPropDefault(OrdMlWD.TEMPLATE), ...
		OrdMlWD.ID, OrdMlWD.getPropDefault(OrdMlWD.ID), ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, OrdMlWD.getPropDefault(OrdMlWD.RANDOMIZE), ...
		OrdMlWD.RANDOM_SEED, OrdMlWD.getPropDefault(OrdMlWD.RANDOM_SEED), ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, OrdMlWD.getPropDefault(OrdMlWD.PFGA), ...
		OrdMlWD.PFGH, OrdMlWD.getPropDefault(OrdMlWD.PFGH), ...
		OrdMlWD.B, OrdMlWD.getPropDefault(OrdMlWD.B), ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.SEMIPOSITIVIZE_RULE), ...
		OrdMlWD.STANDARDIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.STANDARDIZE_RULE), ...
		OrdMlWD.ATTEMPTSPEREDGE, OrdMlWD.getPropDefault(OrdMlWD.ATTEMPTSPEREDGE), ...
		OrdMlWD.NUMBEROFWEIGHTS, OrdMlWD.getPropDefault(OrdMlWD.NUMBEROFWEIGHTS), ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	% OrdMlWD with 1st callbacks
	g_1 = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, g_0.getCallback(4), ..., ...
		OrdMlWD.ID, g_0.getCallback(5), ..., ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, g_0.getCallback(22), ..., ...
		OrdMlWD.RANDOM_SEED, g_0.getCallback(23), ..., ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, g_0.getCallback(32), ..., ...
		OrdMlWD.PFGH, g_0.getCallback(33), ..., ...
		OrdMlWD.B, g_0.getCallback(34), ..., ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, g_0.getCallback(35), ..., ...
		OrdMlWD.STANDARDIZE_RULE, g_0.getCallback(36), ..., ...
		OrdMlWD.ATTEMPTSPEREDGE, g_0.getCallback(37), ..., ...
		OrdMlWD.NUMBEROFWEIGHTS, g_0.getCallback(38), ..., ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	prop_number = OrdMlWD.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(OrdMlWD.getPropTag(prop));
		switch OrdMlWD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% OrdMlWD with 2nd callbacks
	g_2 = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, g_1.getCallback(4), ..., ...
		OrdMlWD.ID, g_1.getCallback(5), ..., ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, g_1.getCallback(22), ..., ...
		OrdMlWD.RANDOM_SEED, g_1.getCallback(23), ..., ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, g_1.getCallback(32), ..., ...
		OrdMlWD.PFGH, g_1.getCallback(33), ..., ...
		OrdMlWD.B, g_1.getCallback(34), ..., ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, g_1.getCallback(35), ..., ...
		OrdMlWD.STANDARDIZE_RULE, g_1.getCallback(36), ..., ...
		OrdMlWD.ATTEMPTSPEREDGE, g_1.getCallback(37), ..., ...
		OrdMlWD.NUMBEROFWEIGHTS, g_1.getCallback(38), ..., ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	prop_number = OrdMlWD.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(OrdMlWD.getPropTag(prop));
		switch OrdMlWD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% OrdMlWD with 3rd callbacks
	g_3 = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, g_2.getCallback(4), ..., ...
		OrdMlWD.ID, g_2.getCallback(5), ..., ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, g_2.getCallback(22), ..., ...
		OrdMlWD.RANDOM_SEED, g_2.getCallback(23), ..., ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, g_2.getCallback(32), ..., ...
		OrdMlWD.PFGH, g_2.getCallback(33), ..., ...
		OrdMlWD.B, g_2.getCallback(34), ..., ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, g_2.getCallback(35), ..., ...
		OrdMlWD.STANDARDIZE_RULE, g_2.getCallback(36), ..., ...
		OrdMlWD.ATTEMPTSPEREDGE, g_2.getCallback(37), ..., ...
		OrdMlWD.NUMBEROFWEIGHTS, g_2.getCallback(38), ..., ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	prop_number = OrdMlWD.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(OrdMlWD.getPropTag(prop));
		switch OrdMlWD.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	g = OrdMlWD();
	 
	g_copy = g.copy();
	 
	assert(g_copy ~= g, ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(g_copy, g), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch OrdMlWD.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					'OrdMlWD.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
							'OrdMlWD.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
							'OrdMlWD.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					g_copy.isLocked(prop) == g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					'OrdMlWD.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.isChecked(prop) == g.isChecked(prop), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					'OrdMlWD.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					'OrdMlWD.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	g = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, OrdMlWD.getPropDefault(OrdMlWD.TEMPLATE), ...
		OrdMlWD.ID, OrdMlWD.getPropDefault(OrdMlWD.ID), ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, OrdMlWD.getPropDefault(OrdMlWD.RANDOMIZE), ...
		OrdMlWD.RANDOM_SEED, OrdMlWD.getPropDefault(OrdMlWD.RANDOM_SEED), ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, OrdMlWD.getPropDefault(OrdMlWD.PFGA), ...
		OrdMlWD.PFGH, OrdMlWD.getPropDefault(OrdMlWD.PFGH), ...
		OrdMlWD.B, OrdMlWD.getPropDefault(OrdMlWD.B), ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.SEMIPOSITIVIZE_RULE), ...
		OrdMlWD.STANDARDIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.STANDARDIZE_RULE), ...
		OrdMlWD.ATTEMPTSPEREDGE, OrdMlWD.getPropDefault(OrdMlWD.ATTEMPTSPEREDGE), ...
		OrdMlWD.NUMBEROFWEIGHTS, OrdMlWD.getPropDefault(OrdMlWD.NUMBEROFWEIGHTS), ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		if OrdMlWD.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':OrdMlWD']);
			% g.memorize(prop);
			% warning(warning_backup)
		elseif OrdMlWD.getPropCategory(prop) == Category.EVANESCENT && g.getPropFormat(prop) == Format.HANDLE
			g.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:OrdMlWD');
			delete(ancestor(g.get(prop), 'figure'))
			warning(warning_backup)
		else
			g.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	g_copy = g.copy();
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch OrdMlWD.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					'OrdMlWD.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
							'OrdMlWD.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
							'OrdMlWD.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	g_0 = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, OrdMlWD.getPropDefault(OrdMlWD.TEMPLATE), ...
		OrdMlWD.ID, OrdMlWD.getPropDefault(OrdMlWD.ID), ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, OrdMlWD.getPropDefault(OrdMlWD.RANDOMIZE), ...
		OrdMlWD.RANDOM_SEED, OrdMlWD.getPropDefault(OrdMlWD.RANDOM_SEED), ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, OrdMlWD.getPropDefault(OrdMlWD.PFGA), ...
		OrdMlWD.PFGH, OrdMlWD.getPropDefault(OrdMlWD.PFGH), ...
		OrdMlWD.B, OrdMlWD.getPropDefault(OrdMlWD.B), ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.SEMIPOSITIVIZE_RULE), ...
		OrdMlWD.STANDARDIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.STANDARDIZE_RULE), ...
		OrdMlWD.ATTEMPTSPEREDGE, OrdMlWD.getPropDefault(OrdMlWD.ATTEMPTSPEREDGE), ...
		OrdMlWD.NUMBEROFWEIGHTS, OrdMlWD.getPropDefault(OrdMlWD.NUMBEROFWEIGHTS), ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	g = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, g_0.getCallback(4), ..., ...
		OrdMlWD.ID, g_0.getCallback(5), ..., ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, g_0.getCallback(22), ..., ...
		OrdMlWD.RANDOM_SEED, g_0.getCallback(23), ..., ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, g_0.getCallback(32), ..., ...
		OrdMlWD.PFGH, g_0.getCallback(33), ..., ...
		OrdMlWD.B, g_0.getCallback(34), ..., ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, g_0.getCallback(35), ..., ...
		OrdMlWD.STANDARDIZE_RULE, g_0.getCallback(36), ..., ...
		OrdMlWD.ATTEMPTSPEREDGE, g_0.getCallback(37), ..., ...
		OrdMlWD.NUMBEROFWEIGHTS, g_0.getCallback(38), ..., ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	g_copy = g.copy();
	g_0_copy = g_copy.getr('ID').get('EL');
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch OrdMlWD.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					'OrdMlWD.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
							'OrdMlWD.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
							'OrdMlWD.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == g_0.getCallback(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The callback should be obtained from OrdMlWD.getCallback().' ...
						)
					assert( ...
						value_copy == g_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The callback should be obtained from OrdMlWD.getCallback().' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g_template = OrdMlWD();
	g = OrdMlWD('TEMPLATE', g_template);
	 
	for prop = 1:1:OrdMlWD.getPropNumber()
	 
		% excluded props
		if any(prop == [OrdMlWD.PFGA OrdMlWD.PFGH])
			continue
		end
	 
		TAG = upper(OrdMlWD.getPropTag(prop));
		switch OrdMlWD.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == OrdMlWD.TEMPLATE
					assert( ...
						isa(g.getr(prop), 'OrdMlWD'), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD TEMPLATE does not work. OrdMlWD.getr(''TEMPLATE'') should be a OrdMlWD element.' ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						'OrdMlWD TEMPLATE does not work. OrdMlWD_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(g.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD TEMPLATE does not work. OrdMlWD.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						g.getr(prop).get('EL') == g_template && g.getr(prop).get('PROP') == prop && strcmp(g.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD TEMPLATE does not work. OrdMlWD.getr(' TAG ') should be a Callback to g_template.' TAG '.'] ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
						['OrdMlWD TEMPLATE does not work. OrdMlWD_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD TEMPLATE does not work. OrdMlWD.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(g_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
					['OrdMlWD TEMPLATE does not work. OrdMlWD_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, OrdMlWD.getPropDefault(OrdMlWD.TEMPLATE), ...
		OrdMlWD.ID, OrdMlWD.getPropDefault(OrdMlWD.ID), ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, OrdMlWD.getPropDefault(OrdMlWD.RANDOMIZE), ...
		OrdMlWD.RANDOM_SEED, OrdMlWD.getPropDefault(OrdMlWD.RANDOM_SEED), ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, OrdMlWD.getPropDefault(OrdMlWD.PFGA), ...
		OrdMlWD.PFGH, OrdMlWD.getPropDefault(OrdMlWD.PFGH), ...
		OrdMlWD.B, OrdMlWD.getPropDefault(OrdMlWD.B), ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.SEMIPOSITIVIZE_RULE), ...
		OrdMlWD.STANDARDIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.STANDARDIZE_RULE), ...
		OrdMlWD.ATTEMPTSPEREDGE, OrdMlWD.getPropDefault(OrdMlWD.ATTEMPTSPEREDGE), ...
		OrdMlWD.NUMBEROFWEIGHTS, OrdMlWD.getPropDefault(OrdMlWD.NUMBEROFWEIGHTS), ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'ordmlwd_to_be_erased.b2'];
	 
	Element.save(g, filename)
	 
	g_loaded = Element.load(filename);
	 
	assert( ...
		isequal(g.copy(), g_loaded), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.save(g) and/or OrdMlWD.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMlWD( ...
		OrdMlWD.ELCLASS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NAME, OrdMlWD.getNoValue(), ...
		OrdMlWD.DESCRIPTION, OrdMlWD.getNoValue(), ...
		OrdMlWD.TEMPLATE, OrdMlWD.getPropDefault(OrdMlWD.TEMPLATE), ...
		OrdMlWD.ID, OrdMlWD.getPropDefault(OrdMlWD.ID), ...
		OrdMlWD.LABEL, OrdMlWD.getPropDefault(OrdMlWD.LABEL), ...
		OrdMlWD.NOTES, OrdMlWD.getPropDefault(OrdMlWD.NOTES), ...
		OrdMlWD.TOSTRING, OrdMlWD.getNoValue(), ...
		OrdMlWD.GRAPH_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.CONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.DIRECTIONALITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.SELFCONNECTIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.NEGATIVITY_TYPE, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERTICKS, OrdMlWD.getPropDefault(OrdMlWD.LAYERTICKS), ...
		OrdMlWD.ALAYERTICKS, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERLABELS, OrdMlWD.getPropDefault(OrdMlWD.LAYERLABELS), ...
		OrdMlWD.ALAYERLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONLABELS, OrdMlWD.getPropDefault(OrdMlWD.PARTITIONLABELS), ...
		OrdMlWD.APARTITIONLABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODELABELS, OrdMlWD.getPropDefault(OrdMlWD.NODELABELS), ...
		OrdMlWD.ANODELABELS, OrdMlWD.getNoValue(), ...
		OrdMlWD.RANDOMIZE, OrdMlWD.getPropDefault(OrdMlWD.RANDOMIZE), ...
		OrdMlWD.RANDOM_SEED, OrdMlWD.getPropDefault(OrdMlWD.RANDOM_SEED), ...
		OrdMlWD.A, OrdMlWD.getNoValue(), ...
		OrdMlWD.A_CHECK, OrdMlWD.getNoValue(), ...
		OrdMlWD.NODENUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.LAYERNUMBER, OrdMlWD.getNoValue(), ...
		OrdMlWD.PARTITIONS, OrdMlWD.getNoValue(), ...
		OrdMlWD.M_DICT, OrdMlWD.getNoValue(), ...
		OrdMlWD.COMPATIBLE_MEASURES, OrdMlWD.getNoValue(), ...
		OrdMlWD.MEASURE, OrdMlWD.getNoValue(), ...
		OrdMlWD.PFGA, OrdMlWD.getPropDefault(OrdMlWD.PFGA), ...
		OrdMlWD.PFGH, OrdMlWD.getPropDefault(OrdMlWD.PFGH), ...
		OrdMlWD.B, OrdMlWD.getPropDefault(OrdMlWD.B), ...
		OrdMlWD.SEMIPOSITIVIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.SEMIPOSITIVIZE_RULE), ...
		OrdMlWD.STANDARDIZE_RULE, OrdMlWD.getPropDefault(OrdMlWD.STANDARDIZE_RULE), ...
		OrdMlWD.ATTEMPTSPEREDGE, OrdMlWD.getPropDefault(OrdMlWD.ATTEMPTSPEREDGE), ...
		OrdMlWD.NUMBEROFWEIGHTS, OrdMlWD.getPropDefault(OrdMlWD.NUMBEROFWEIGHTS), ...
		OrdMlWD.RANDOMIZATION, OrdMlWD.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(g);
	[g_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(g_dec ~= g, ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		'OrdMlWD.encodeJSON() or OrdMlWD.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) OrdMlWD.getPropFormat(prop), num2cell(OrdMlWD.getProps())) == Format.HANDLE) && all(cellfun(@(prop) OrdMlWD.getPropFormat(prop), num2cell(OrdMlWD.getProps())) == Format.NET)
		assert(isequal(g_dec, g), ...
			[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
			'OrdMlWD.encodeJSON() or OrdMlWD.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Constructor - Full
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B1 = rand(randi(10));
	B2 = rand(randi(10));
	B3 = rand(randi(10));
	B12 = rand(size(B1, 1),size(B2, 2));
	B13 = rand(size(B1, 1),size(B3, 2));
	B23 = rand(size(B2, 1),size(B3, 2));
	B21 = rand(size(B2, 1),size(B1, 2));
	B31 = rand(size(B3, 1),size(B1, 2));
	B32 = rand(size(B3, 1),size(B2, 2));
	B = {
	    B1                           B12                            B13
	    B21                          B2                             B23
	    B31                          B32                            B3
	    };
	g = OrdMlWD('B', B);
	g.get('A_CHECK')
	A1 = standardize(semipositivize(dediagonalize(B1)));
	A2 = standardize(semipositivize(dediagonalize(B2)));
	A3 = standardize(semipositivize(dediagonalize(B3)));
	A12 = standardize(semipositivize(B12));
	A13 = zeros(size(B13));
	A23 = standardize(semipositivize(B23));
	A21 = standardize(semipositivize(B21));
	A31 = zeros(size(B31));
	A32 = standardize(semipositivize(B32));
	B{1, 1} = A1;
	B{2, 2} = A2;
	B{3, 3} = A3;
	B{1, 2} = A12;
	B{1, 3} = A13;
	B{2, 3} = A23;
	B{2, 1} = A21;
	B{3, 1} = A31;
	B{3, 2} = A32;
	A = B;
	assert(isequal(g.get('A'), A), ...
	    [BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	    'OrdMlWD is not constructing well.')
	
	% %% ¡test!
	% %% ¡name!
	% Semipositivize Rule
	% %% ¡probability!
	% .01
	% %% ¡code!
end

%% Test 13: Randomize Rules
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B1 = rand(randi(10));
	B2 = rand(randi(10));
	B3 = rand(randi(10));
	B12 = rand(size(B1, 1),size(B2, 2));
	B13 = rand(size(B1, 1),size(B3, 2));
	B23 = rand(size(B2, 1),size(B3, 2));
	B21 = rand(size(B2, 1),size(B1, 2));
	B31 = rand(size(B3, 1),size(B1, 2));
	B32 = rand(size(B3, 1),size(B2, 2));
	B = {
	    B1                           B12                            B13
	    B21                          B2                             B23
	    B31                          B32                            B3
	    };
	g = OrdMlWD('B', B);
	g.set('RANDOMIZE', true);
	g.set('ATTEMPTSPEREDGE', 4);
	g.get('A_CHECK')
	
	A = g.get('A');
	
	assert(isequal(size(A{1}), size(B{1})), ...
	    [BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	    'OrdMlWD Randomize is not functioning well.')
	
	g2 = OrdMlWD('B', B);
	g2.set('RANDOMIZE', true);
	g2.set('ATTEMPTSPEREDGE', 4);
	g2.get('A_CHECK')
	A2 = g2.get('A');
	random_A = g2.get('RANDOMIZATION', A2);
	
	for i = 1:length(A2)
	    if all(A2{i, i}==0, "all") %if all nodes are zero, the random matrix is also all zeros
	        assert(isequal(A2{i, i}, random_A{i, i}), ...
	            [BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	            'OrdMlWD Randomize is not functioning well.')
	    elseif isequal((length(A2{i, i}).^2)- length(A2{i, i}), sum(A2{i, i}==1, "all")) %if all nodes (except diagonal) are one, the random matrix is the same as original
	        assert(isequal(A2{i, i}, random_A{i, i}), ...
	            [BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	            'OrdMlWD Randomize is not functioning well.')
	    else
	%         assert(~isequal(A2{i, i}, random_A{i, i}), ...
	%             [BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	%             'OrdMlWD Randomize is not functioning well.')
	    end
	
	    assert(isequal(numel(find(A2{i, i})), numel(find(random_A{i, i}))), ... % check same number of nodes
	        [BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
	        'OrdMlWD Randomize is not functioning well.')
	end
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':OrdMlWD:' BRAPH2.FAIL_TEST], ...
		[' When testing OrdMlWD no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

