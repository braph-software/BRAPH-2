%TEST_ORDMXBU

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	g = OrdMxBU();
	 
	% get('ELCLASS')
	if isa(OrdMxBU, 'ConcreteElement')
		assert(strcmp(OrdMxBU().get('ELCLASS'), 'OrdMxBU'), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU().get(''ELCLASS'') should return ''OrdMxBU''.')
	end
	 
	% getClass
	assert(strcmp(OrdMxBU.getClass(), 'OrdMxBU'), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.getClass() should return ''OrdMxBU''.')
	assert(strcmp(g.getClass(), 'OrdMxBU'), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'g.getClass() should return ''OrdMxBU''.')
	assert(strcmp(Element.getClass(g), 'OrdMxBU'), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(g) should return ''OrdMxBU''.')
	assert(strcmp(Element.getClass('OrdMxBU'), 'OrdMxBU'), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''OrdMxBU'') should return ''OrdMxBU''.')
	 
	% getSubclasses()
	assert(isequal(OrdMxBU.getSubclasses(), subclasses('OrdMxBU', [], [], true)), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.getSubclasses() should return the same result as subclasses(''OrdMxBU'', [], [], true).')
	assert(isequal(g.getSubclasses(), subclasses('OrdMxBU', [], [], true)), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''OrdMxBU'', [], [], true).')
	assert(isequal(Element.getSubclasses(g), subclasses('OrdMxBU', [], [], true)), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(g) should return the same result as subclasses(''OrdMxBU'', [], [], true).')
	assert(isequal(Element.getSubclasses('OrdMxBU'), subclasses('OrdMxBU', [], [], true)), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''OrdMxBU'') should return the same result as subclasses(''OrdMxBU'', [], [], true).')
	 
	% getProps()
	assert(isempty(OrdMxBU.getProps()) || isequal(OrdMxBU.getProps(), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.getProps() should return a row vector [1:1:N].')
	assert(isempty(OrdMxBU.getProps()) || isequal(g.getProps(), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'g.getProps() should return a row vector [1:1:N].')
	assert(isempty(OrdMxBU.getProps()) || isequal(Element.getProps(g), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g) should return a row vector [1:1:N].')
	assert(isempty(OrdMxBU.getProps()) || isequal(Element.getProps('OrdMxBU'), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''OrdMxBU'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) OrdMxBU.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(OrdMxBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.getProps(category) does not work.')
	tmp = cellfun(@(category) g.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(OrdMxBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'g.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(g, category), categories, 'UniformOutput', false);
	assert(isempty(OrdMxBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('OrdMxBU', category), categories, 'UniformOutput', false);
	assert(isempty(OrdMxBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(OrdMxBU.getProps())), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''OrdMxBU'', category) does not work.')
	 
	% getPropNumber()
	assert(OrdMxBU.getPropNumber() == length(OrdMxBU.getProps()), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.getPropNumber() should return the number of properties.')
	assert(g.getPropNumber() == length(OrdMxBU.getProps()), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(g) == length(OrdMxBU.getProps()), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g) should return the number of properties.')
	assert(Element.getPropNumber('OrdMxBU') == length(OrdMxBU.getProps()), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''OrdMxBU'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) OrdMxBU.getPropNumber(category), categories)) == OrdMxBU.getPropNumber(), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) g.getPropNumber(category), categories)) == OrdMxBU.getPropNumber(), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(g, category), categories)) == OrdMxBU.getPropNumber(), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('OrdMxBU', category), categories)) == OrdMxBU.getPropNumber(), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''OrdMxBU'', category) does not work.')
	 
	% existsProp(prop)
	assert(~OrdMxBU.existsProp(NaN), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.existsProp(prop) does not work.')
	assert(~g.existsProp(NaN), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'g.existsProp(prop) does not work.')
	assert(~Element.existsProp(g, NaN), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(g, prop) does not work.')
	assert(~Element.existsProp('OrdMxBU', NaN), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''OrdMxBU'', prop) does not work.')
	 
	assert_with_error('OrdMxBU.existsProp(NaN)', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(''OrdMxBU'', NaN)', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		assert(OrdMxBU.existsProp(prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.existsProp(prop) does not work.')
		assert(g.existsProp(prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.existsProp(prop) does not work.')
		assert(Element.existsProp(g, prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(g, prop) does not work.')
		assert(Element.existsProp('OrdMxBU', prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''OrdMxBU'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~OrdMxBU.existsTag(''), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.existsTag(tag) does not work.')
	assert(~g.existsTag(''), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'g.existsTag(tag) does not work.')
	assert(~Element.existsTag(g, ''), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(g, tag) does not work.')
	assert(~Element.existsTag('OrdMxBU', ''), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''OrdMxBU'', tag) does not work.')
	 
	assert_with_error('OrdMxBU.existsTag('''')', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(''OrdMxBU'', '''')', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
		assert(OrdMxBU.existsTag(tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.existsTag(tag) does not work.')
		assert(g.existsTag(tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.existsTag(tag) does not work.')
		assert(Element.existsTag(g, tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(g, tga) does not work.')
		assert(Element.existsTag('OrdMxBU', tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''OrdMxBU'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		assert(OrdMxBU.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropProp(prop) does not work.')
		assert(g.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(prop) does not work.')
		assert(Element.getPropProp(g, prop) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, prop) does not work.')
		assert(Element.getPropProp('OrdMxBU', prop) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''OrdMxBU'', prop) does not work.')
	 
		tag = g.getPropTag(prop);
		assert(OrdMxBU.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropProp(tag) does not work.')
		assert(g.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(tag) does not work.')
		assert(Element.getPropProp(g, tag) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, tag) does not work.')
		assert(Element.getPropProp('OrdMxBU', prop) == prop, ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''OrdMxBU'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(strcmp(OrdMxBU.getPropTag(prop), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropTag(prop) does not work.')
		assert(strcmp(g.getPropTag(prop), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(g, prop), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, prop) does not work.')
		assert(strcmp(Element.getPropTag('OrdMxBU', prop), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''OrdMxBU'', prop) does not work.')
	 
		assert(strcmp(OrdMxBU.getPropTag(tag), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropTag(tag) does not work.')
		assert(strcmp(g.getPropTag(tag), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(g, tag), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, tag) does not work.')
		assert(strcmp(Element.getPropTag('OrdMxBU', prop), tag), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''OrdMxBU'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Category.existsCategory(OrdMxBU.getPropCategory(prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(g.getPropCategory(prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''OrdMxBU'', prop) does not work.')
	 
		assert(Category.existsCategory(OrdMxBU.getPropCategory(tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(g.getPropCategory(tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''OrdMxBU'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Format.existsFormat(OrdMxBU.getPropFormat(prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(g.getPropFormat(prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''OrdMxBU'', prop) does not work.')
	 
		assert(Format.existsFormat(OrdMxBU.getPropFormat(tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(g.getPropFormat(tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''OrdMxBU'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(ischar(OrdMxBU.getPropDescription(prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropDescription(prop) does not work.')
		assert(ischar(g.getPropDescription(prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''OrdMxBU'', prop) does not work.')
	 
		assert(ischar(OrdMxBU.getPropDescription(tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.getPropDescription(tag) does not work.')
		assert(ischar(g.getPropDescription(tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''OrdMxBU'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		settings = OrdMxBU.getPropSettings(prop);
		settings = g.getPropSettings(prop);
		settings = Element.getPropSettings(g, prop);
		settings = Element.getPropSettings('OrdMxBU', prop);
	 
		settings = OrdMxBU.getPropSettings(tag);
		settings = g.getPropSettings(tag);
		settings = Element.getPropSettings(g, tag);
		settings = Element.getPropSettings('OrdMxBU', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		default = OrdMxBU.getPropDefault(prop);
		default = g.getPropDefault(prop);
		default = Element.getPropDefault(g, prop);
		default = Element.getPropDefault('OrdMxBU', prop);
	 
		default = OrdMxBU.getPropDefault(tag);
		default = g.getPropDefault(tag);
		default = Element.getPropDefault(g, tag);
		default = Element.getPropDefault('OrdMxBU', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		conditioned_default = OrdMxBU.getPropDefaultConditioned(prop);
		conditioned_default = g.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(g, prop);
		conditioned_default = Element.getPropDefaultConditioned('OrdMxBU', prop);
	 
		conditioned_default = OrdMxBU.getPropDefaultConditioned(tag);
		conditioned_default = g.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(g, tag);
		conditioned_default = Element.getPropDefaultConditioned('OrdMxBU', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:OrdMxBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(~OrdMxBU.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.checkProp(prop, value) does not work.')
		assert(~g.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(g, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, value) does not work.')
		assert(~Element.checkProp('OrdMxBU', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMxBU'', prop, value) does not work.')
	 
		assert_with_error('OrdMxBU.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(''OrdMxBU'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~OrdMxBU.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.checkProp(tag, value) does not work.')
		assert(~g.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(g, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, value) does not work.')
		assert(~Element.checkProp('OrdMxBU', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMxBU'', tag, value) does not work.')
	 
		assert_with_error('OrdMxBU.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(''OrdMxBU'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':OrdMxBU:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(OrdMxBU.checkProp(prop, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.checkProp(prop, <conditioned default value>) does not work.')
		assert(g.checkProp(prop, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, prop, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('OrdMxBU', prop, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMxBU'', prop, <conditioned default value>) does not work.')
	 
		assert(OrdMxBU.checkProp(tag, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.checkProp(tag, <conditioned default value>) does not work.')
		assert(g.checkProp(tag, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, tag, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('OrdMxBU', tag, Element.getPropDefaultConditioned(OrdMxBU, prop)), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''OrdMxBU'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, OrdMxBU.getPropDefault(OrdMxBU.TEMPLATE), ...
		OrdMxBU.ID, OrdMxBU.getPropDefault(OrdMxBU.ID), ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, OrdMxBU.getPropDefault(OrdMxBU.RANDOMIZE), ...
		OrdMxBU.RANDOM_SEED, OrdMxBU.getPropDefault(OrdMxBU.RANDOM_SEED), ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, OrdMxBU.getPropDefault(OrdMxBU.PFGA), ...
		OrdMxBU.PFGH, OrdMxBU.getPropDefault(OrdMxBU.PFGH), ...
		OrdMxBU.B, OrdMxBU.getPropDefault(OrdMxBU.B), ...
		OrdMxBU.SYMMETRIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SYMMETRIZE_RULE), ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SEMIPOSITIVIZE_RULE), ...
		OrdMxBU.ATTEMPTSPEREDGE, OrdMxBU.getPropDefault(OrdMxBU.ATTEMPTSPEREDGE), ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
	 
		% excluded props
		if any(prop == [OrdMxBU.PFGA OrdMxBU.PFGH])
			continue
		end
	 
		TAG = upper(OrdMxBU.getPropTag(prop));
		switch OrdMxBU.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					g.getr(prop) == OrdMxBU.getNoValue(), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMxBU.getCategoryName(OrdMxBU.getPropCategory(prop)) ', OrdMxBU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMxBU.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == OrdMxBU.getNoValue(), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMxBU.getCategoryName(OrdMxBU.getPropCategory(prop)) ', OrdMxBU.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMxBU.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					g.getr(prop) == OrdMxBU.getNoValue(), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMxBU.getCategoryName(OrdMxBU.getPropCategory(prop)) ', OrdMxBU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMxBU.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == OrdMxBU.getNoValue(), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' OrdMxBU.getCategoryName(OrdMxBU.getPropCategory(prop)) ', OrdMxBU.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in OrdMxBU.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':OrdMxBU']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(g.getr(prop), OrdMxBU.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by OrdMxBU.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in OrdMxBU.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(g.getr(TAG), OrdMxBU.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' TAG ') must be inizialized to its default value ' ...
					'given by OrdMxBU.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in OrdMxBU.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, OrdMxBU.getPropDefault(OrdMxBU.TEMPLATE), ...
		OrdMxBU.ID, OrdMxBU.getPropDefault(OrdMxBU.ID), ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, OrdMxBU.getPropDefault(OrdMxBU.RANDOMIZE), ...
		OrdMxBU.RANDOM_SEED, OrdMxBU.getPropDefault(OrdMxBU.RANDOM_SEED), ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, OrdMxBU.getPropDefault(OrdMxBU.PFGA), ...
		OrdMxBU.PFGH, OrdMxBU.getPropDefault(OrdMxBU.PFGH), ...
		OrdMxBU.B, OrdMxBU.getPropDefault(OrdMxBU.B), ...
		OrdMxBU.SYMMETRIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SYMMETRIZE_RULE), ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SEMIPOSITIVIZE_RULE), ...
		OrdMxBU.ATTEMPTSPEREDGE, OrdMxBU.getPropDefault(OrdMxBU.ATTEMPTSPEREDGE), ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
	 
		% excluded props
		if any(prop == [OrdMxBU.PFGA OrdMxBU.PFGH])
			continue
		end
	 
		TAG = upper(OrdMxBU.getPropTag(prop));
		switch OrdMxBU.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':OrdMxBU']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':OrdMxBU']);
	% 			assert( ...
	% 				~isa(g.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	% 				['OrdMxBU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(g.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	% 				['OrdMxBU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	% 				['OrdMxBU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':OrdMxBU']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if g.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:OrdMxBU');
					delete(ancestor(g.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(OrdMxBU.getProps(Category.RESULT))
		for prop = 1:1:OrdMxBU.getPropNumber()
	 
			% excluded props
			if any(prop == [OrdMxBU.PFGA OrdMxBU.PFGH])
				continue
			end
	 
			switch OrdMxBU.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMxBU();
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		TAG = upper(OrdMxBU.getPropTag(prop));
		assert( ...
			~g.isLocked(prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			['OrdMxBU.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~g.isLocked(TAG), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			['OrdMxBU.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	g.lock()
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		switch OrdMxBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMxBU();
	 
	warning_backup = warning('off', 'BRAPH2:OrdMxBU');
	for prop = 1:1:OrdMxBU.getPropNumber()
		g.lock(prop)
		switch OrdMxBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMxBU();
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		TAG = upper(OrdMxBU.getPropTag(prop));
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			['OrdMxBU.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			g.isChecked(TAG), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			['OrdMxBU.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	g.unchecked()
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		assert( ...
			~g.isChecked(prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			['OrdMxBU.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	g.checked()
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			['OrdMxBU.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic OrdMxBU
	g_0 = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, OrdMxBU.getPropDefault(OrdMxBU.TEMPLATE), ...
		OrdMxBU.ID, OrdMxBU.getPropDefault(OrdMxBU.ID), ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, OrdMxBU.getPropDefault(OrdMxBU.RANDOMIZE), ...
		OrdMxBU.RANDOM_SEED, OrdMxBU.getPropDefault(OrdMxBU.RANDOM_SEED), ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, OrdMxBU.getPropDefault(OrdMxBU.PFGA), ...
		OrdMxBU.PFGH, OrdMxBU.getPropDefault(OrdMxBU.PFGH), ...
		OrdMxBU.B, OrdMxBU.getPropDefault(OrdMxBU.B), ...
		OrdMxBU.SYMMETRIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SYMMETRIZE_RULE), ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SEMIPOSITIVIZE_RULE), ...
		OrdMxBU.ATTEMPTSPEREDGE, OrdMxBU.getPropDefault(OrdMxBU.ATTEMPTSPEREDGE), ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	% OrdMxBU with 1st callbacks
	g_1 = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, g_0.getCallback(4), ..., ...
		OrdMxBU.ID, g_0.getCallback(5), ..., ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, g_0.getCallback(22), ..., ...
		OrdMxBU.RANDOM_SEED, g_0.getCallback(23), ..., ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, g_0.getCallback(32), ..., ...
		OrdMxBU.PFGH, g_0.getCallback(33), ..., ...
		OrdMxBU.B, g_0.getCallback(34), ..., ...
		OrdMxBU.SYMMETRIZE_RULE, g_0.getCallback(35), ..., ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, g_0.getCallback(36), ..., ...
		OrdMxBU.ATTEMPTSPEREDGE, g_0.getCallback(37), ..., ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	prop_number = OrdMxBU.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(OrdMxBU.getPropTag(prop));
		switch OrdMxBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% OrdMxBU with 2nd callbacks
	g_2 = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, g_1.getCallback(4), ..., ...
		OrdMxBU.ID, g_1.getCallback(5), ..., ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, g_1.getCallback(22), ..., ...
		OrdMxBU.RANDOM_SEED, g_1.getCallback(23), ..., ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, g_1.getCallback(32), ..., ...
		OrdMxBU.PFGH, g_1.getCallback(33), ..., ...
		OrdMxBU.B, g_1.getCallback(34), ..., ...
		OrdMxBU.SYMMETRIZE_RULE, g_1.getCallback(35), ..., ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, g_1.getCallback(36), ..., ...
		OrdMxBU.ATTEMPTSPEREDGE, g_1.getCallback(37), ..., ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	prop_number = OrdMxBU.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(OrdMxBU.getPropTag(prop));
		switch OrdMxBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% OrdMxBU with 3rd callbacks
	g_3 = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, g_2.getCallback(4), ..., ...
		OrdMxBU.ID, g_2.getCallback(5), ..., ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, g_2.getCallback(22), ..., ...
		OrdMxBU.RANDOM_SEED, g_2.getCallback(23), ..., ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, g_2.getCallback(32), ..., ...
		OrdMxBU.PFGH, g_2.getCallback(33), ..., ...
		OrdMxBU.B, g_2.getCallback(34), ..., ...
		OrdMxBU.SYMMETRIZE_RULE, g_2.getCallback(35), ..., ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, g_2.getCallback(36), ..., ...
		OrdMxBU.ATTEMPTSPEREDGE, g_2.getCallback(37), ..., ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	prop_number = OrdMxBU.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(OrdMxBU.getPropTag(prop));
		switch OrdMxBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	g = OrdMxBU();
	 
	g_copy = g.copy();
	 
	assert(g_copy ~= g, ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(g_copy, g), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch OrdMxBU.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					'OrdMxBU.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
							'OrdMxBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
							'OrdMxBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					g_copy.isLocked(prop) == g.isLocked(prop), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					'OrdMxBU.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.isChecked(prop) == g.isChecked(prop), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					'OrdMxBU.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					'OrdMxBU.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	g = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, OrdMxBU.getPropDefault(OrdMxBU.TEMPLATE), ...
		OrdMxBU.ID, OrdMxBU.getPropDefault(OrdMxBU.ID), ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, OrdMxBU.getPropDefault(OrdMxBU.RANDOMIZE), ...
		OrdMxBU.RANDOM_SEED, OrdMxBU.getPropDefault(OrdMxBU.RANDOM_SEED), ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, OrdMxBU.getPropDefault(OrdMxBU.PFGA), ...
		OrdMxBU.PFGH, OrdMxBU.getPropDefault(OrdMxBU.PFGH), ...
		OrdMxBU.B, OrdMxBU.getPropDefault(OrdMxBU.B), ...
		OrdMxBU.SYMMETRIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SYMMETRIZE_RULE), ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SEMIPOSITIVIZE_RULE), ...
		OrdMxBU.ATTEMPTSPEREDGE, OrdMxBU.getPropDefault(OrdMxBU.ATTEMPTSPEREDGE), ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		if OrdMxBU.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':OrdMxBU']);
			% g.memorize(prop);
			% warning(warning_backup)
		elseif OrdMxBU.getPropCategory(prop) == Category.EVANESCENT && g.getPropFormat(prop) == Format.HANDLE
			g.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:OrdMxBU');
			delete(ancestor(g.get(prop), 'figure'))
			warning(warning_backup)
		else
			g.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	g_copy = g.copy();
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch OrdMxBU.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					'OrdMxBU.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
							'OrdMxBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
							'OrdMxBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	g_0 = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, OrdMxBU.getPropDefault(OrdMxBU.TEMPLATE), ...
		OrdMxBU.ID, OrdMxBU.getPropDefault(OrdMxBU.ID), ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, OrdMxBU.getPropDefault(OrdMxBU.RANDOMIZE), ...
		OrdMxBU.RANDOM_SEED, OrdMxBU.getPropDefault(OrdMxBU.RANDOM_SEED), ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, OrdMxBU.getPropDefault(OrdMxBU.PFGA), ...
		OrdMxBU.PFGH, OrdMxBU.getPropDefault(OrdMxBU.PFGH), ...
		OrdMxBU.B, OrdMxBU.getPropDefault(OrdMxBU.B), ...
		OrdMxBU.SYMMETRIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SYMMETRIZE_RULE), ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SEMIPOSITIVIZE_RULE), ...
		OrdMxBU.ATTEMPTSPEREDGE, OrdMxBU.getPropDefault(OrdMxBU.ATTEMPTSPEREDGE), ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	g = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, g_0.getCallback(4), ..., ...
		OrdMxBU.ID, g_0.getCallback(5), ..., ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, g_0.getCallback(22), ..., ...
		OrdMxBU.RANDOM_SEED, g_0.getCallback(23), ..., ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, g_0.getCallback(32), ..., ...
		OrdMxBU.PFGH, g_0.getCallback(33), ..., ...
		OrdMxBU.B, g_0.getCallback(34), ..., ...
		OrdMxBU.SYMMETRIZE_RULE, g_0.getCallback(35), ..., ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, g_0.getCallback(36), ..., ...
		OrdMxBU.ATTEMPTSPEREDGE, g_0.getCallback(37), ..., ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	g_copy = g.copy();
	g_0_copy = g_copy.getr('ID').get('EL');
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch OrdMxBU.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					'OrdMxBU.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
							'OrdMxBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
							'OrdMxBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == g_0.getCallback(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The callback should be obtained from OrdMxBU.getCallback().' ...
						)
					assert( ...
						value_copy == g_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The callback should be obtained from OrdMxBU.getCallback().' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g_template = OrdMxBU();
	g = OrdMxBU('TEMPLATE', g_template);
	 
	for prop = 1:1:OrdMxBU.getPropNumber()
	 
		% excluded props
		if any(prop == [OrdMxBU.PFGA OrdMxBU.PFGH])
			continue
		end
	 
		TAG = upper(OrdMxBU.getPropTag(prop));
		switch OrdMxBU.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == OrdMxBU.TEMPLATE
					assert( ...
						isa(g.getr(prop), 'OrdMxBU'), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU TEMPLATE does not work. OrdMxBU.getr(''TEMPLATE'') should be a OrdMxBU element.' ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						'OrdMxBU TEMPLATE does not work. OrdMxBU_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(g.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU TEMPLATE does not work. OrdMxBU.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						g.getr(prop).get('EL') == g_template && g.getr(prop).get('PROP') == prop && strcmp(g.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU TEMPLATE does not work. OrdMxBU.getr(' TAG ') should be a Callback to g_template.' TAG '.'] ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
						['OrdMxBU TEMPLATE does not work. OrdMxBU_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU TEMPLATE does not work. OrdMxBU.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(g_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
					['OrdMxBU TEMPLATE does not work. OrdMxBU_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, OrdMxBU.getPropDefault(OrdMxBU.TEMPLATE), ...
		OrdMxBU.ID, OrdMxBU.getPropDefault(OrdMxBU.ID), ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, OrdMxBU.getPropDefault(OrdMxBU.RANDOMIZE), ...
		OrdMxBU.RANDOM_SEED, OrdMxBU.getPropDefault(OrdMxBU.RANDOM_SEED), ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, OrdMxBU.getPropDefault(OrdMxBU.PFGA), ...
		OrdMxBU.PFGH, OrdMxBU.getPropDefault(OrdMxBU.PFGH), ...
		OrdMxBU.B, OrdMxBU.getPropDefault(OrdMxBU.B), ...
		OrdMxBU.SYMMETRIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SYMMETRIZE_RULE), ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SEMIPOSITIVIZE_RULE), ...
		OrdMxBU.ATTEMPTSPEREDGE, OrdMxBU.getPropDefault(OrdMxBU.ATTEMPTSPEREDGE), ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'ordmxbu_to_be_erased.b2'];
	 
	Element.save(g, filename)
	 
	g_loaded = Element.load(filename);
	 
	assert( ...
		isequal(g.copy(), g_loaded), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.save(g) and/or OrdMxBU.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = OrdMxBU( ...
		OrdMxBU.ELCLASS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NAME, OrdMxBU.getNoValue(), ...
		OrdMxBU.DESCRIPTION, OrdMxBU.getNoValue(), ...
		OrdMxBU.TEMPLATE, OrdMxBU.getPropDefault(OrdMxBU.TEMPLATE), ...
		OrdMxBU.ID, OrdMxBU.getPropDefault(OrdMxBU.ID), ...
		OrdMxBU.LABEL, OrdMxBU.getPropDefault(OrdMxBU.LABEL), ...
		OrdMxBU.NOTES, OrdMxBU.getPropDefault(OrdMxBU.NOTES), ...
		OrdMxBU.TOSTRING, OrdMxBU.getNoValue(), ...
		OrdMxBU.GRAPH_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.CONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.DIRECTIONALITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.SELFCONNECTIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.NEGATIVITY_TYPE, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERTICKS, OrdMxBU.getPropDefault(OrdMxBU.LAYERTICKS), ...
		OrdMxBU.ALAYERTICKS, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERLABELS, OrdMxBU.getPropDefault(OrdMxBU.LAYERLABELS), ...
		OrdMxBU.ALAYERLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONLABELS, OrdMxBU.getPropDefault(OrdMxBU.PARTITIONLABELS), ...
		OrdMxBU.APARTITIONLABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODELABELS, OrdMxBU.getPropDefault(OrdMxBU.NODELABELS), ...
		OrdMxBU.ANODELABELS, OrdMxBU.getNoValue(), ...
		OrdMxBU.RANDOMIZE, OrdMxBU.getPropDefault(OrdMxBU.RANDOMIZE), ...
		OrdMxBU.RANDOM_SEED, OrdMxBU.getPropDefault(OrdMxBU.RANDOM_SEED), ...
		OrdMxBU.A, OrdMxBU.getNoValue(), ...
		OrdMxBU.A_CHECK, OrdMxBU.getNoValue(), ...
		OrdMxBU.NODENUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.LAYERNUMBER, OrdMxBU.getNoValue(), ...
		OrdMxBU.PARTITIONS, OrdMxBU.getNoValue(), ...
		OrdMxBU.M_DICT, OrdMxBU.getNoValue(), ...
		OrdMxBU.COMPATIBLE_MEASURES, OrdMxBU.getNoValue(), ...
		OrdMxBU.MEASURE, OrdMxBU.getNoValue(), ...
		OrdMxBU.PFGA, OrdMxBU.getPropDefault(OrdMxBU.PFGA), ...
		OrdMxBU.PFGH, OrdMxBU.getPropDefault(OrdMxBU.PFGH), ...
		OrdMxBU.B, OrdMxBU.getPropDefault(OrdMxBU.B), ...
		OrdMxBU.SYMMETRIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SYMMETRIZE_RULE), ...
		OrdMxBU.SEMIPOSITIVIZE_RULE, OrdMxBU.getPropDefault(OrdMxBU.SEMIPOSITIVIZE_RULE), ...
		OrdMxBU.ATTEMPTSPEREDGE, OrdMxBU.getPropDefault(OrdMxBU.ATTEMPTSPEREDGE), ...
		OrdMxBU.RANDOMIZATION, OrdMxBU.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(g);
	[g_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(g_dec ~= g, ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		'OrdMxBU.encodeJSON() or OrdMxBU.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) OrdMxBU.getPropFormat(prop), num2cell(OrdMxBU.getProps())) == Format.HANDLE) && all(cellfun(@(prop) OrdMxBU.getPropFormat(prop), num2cell(OrdMxBU.getProps())) == Format.NET)
		assert(isequal(g_dec, g), ...
			[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
			'OrdMxBU.encodeJSON() or OrdMxBU.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Constructor - Full
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B1 = rand(randi(10));
	B = {B1, B1, B1}; %#ok<PROPLC>
	g = OrdMxBU('B', B);
	
	g.get('A_CHECK')
	
	A1 = symmetrize(binarize(semipositivize(dediagonalize(B1))));
	A = {
	    A1                               eye(length(A1))        zeros(length(A1))
	    eye(length(A1))      A1                                 eye(length(A1))
	    zeros(length(A1))   eye(length(A1))         A1
	    };
	assert(isequal(g.get('A'), A), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
end

%% Test 13: Symmetrize and Semipositivize Rules
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = randn(randi(10));
	
	g0 = OrdMxBU('B', {B, B, B}); % 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'max'
	A = dediagonalize(max(B, B') > 0);
	A0 = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g0.get('A'), A0), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_max = OrdMxBU('B', {B, B, B}, 'SYMMETRIZE_RULE', 'max'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A = dediagonalize(max(B, B') > 0);
	A_max = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_max.get('A'), A_max), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_sum = OrdMxBU('B', {B, B, B}, 'SYMMETRIZE_RULE', 'sum'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A = dediagonalize(B + B' > 0);
	A_sum = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_sum.get('A'), A_sum), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_average = OrdMxBU('B', {B, B, B}, 'SYMMETRIZE_RULE', 'average'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A = dediagonalize((B + B') / 2 > 0);
	A_average = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_average.get('A'), A_average), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_min = OrdMxBU('B', {B, B, B}, 'SYMMETRIZE_RULE', 'min'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A = dediagonalize(min(B, B') > 0);
	A_min = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_min.get('A'), A_min), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_zero = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'zero'); % 'SYMMETRIZE_RULE', 'max'
	A = dediagonalize(max(B, B') > 0);
	A_zero = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_zero.get('A'), A_zero), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_zero_max = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'max');
	A = dediagonalize(max(B, B') > 0);
	A_zero_max = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_zero_max.get('A'), A_zero_max), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_zero_sum = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'sum');
	A = dediagonalize(B + B' > 0);
	A_zero_sum = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_zero_sum.get('A'), A_zero_sum), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_zero_average = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'average');
	A = dediagonalize((B + B') / 2 > 0);
	A_zero_average = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_zero_average.get('A'), A_zero_average), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_zero_min = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'min');
	A = dediagonalize(min(B, B') > 0);
	A_zero_min = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_zero_min.get('A'), A_zero_min), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_absolute = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'absolute'); % 'SYMMETRIZE_RULE', 'max'
	A = dediagonalize(max(B, B') ~= 0);
	A_absolute = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_absolute.get('A'), A_absolute), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_absolute_max = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'max');
	A = dediagonalize(max(B, B') ~= 0);
	A_absolute_max = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_absolute_max.get('A'), A_absolute_max), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_absolute_sum = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'sum');
	A = dediagonalize(B + B' ~= 0);
	A_absolute_sum = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_absolute_sum.get('A'), A_absolute_sum), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_absolute_average = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'average');
	A = dediagonalize((B + B') / 2~= 0);
	A_absolute_average = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_absolute_average.get('A'), A_absolute_average), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
	
	g_absolute_min = OrdMxBU('B', {B, B, B}, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'min');
	A = dediagonalize(min(B, B') ~= 0);
	A_absolute_min = {
	    A                               eye(length(B))      zeros(length(B))
	    eye(length(B))      A                               eye(length(B))
	    zeros(length(B))  eye(length(B))        A
	    };
	assert(isequal(g_absolute_min.get('A'), A_absolute_min), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU is not constructing well.')
end

%% Test 14: Randomize Rules
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B1 = randn(10);
	B = {B1, B1, B1}; %#ok<PROPLC>
	g = OrdMxBU('B', B);
	g.set('RANDOMIZE', true);
	g.set('ATTEMPTSPEREDGE', 4);
	g.get('A_CHECK')
	
	A = g.get('A');
	
	assert(isequal(size(A{1}), size(B{1})), ...
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU Randomize is not functioning well.')
	
	g2 = OrdMxBU('B', B);
	g2.set('RANDOMIZE', false);
	g2.set('ATTEMPTSPEREDGE', 4);
	g2.get('A_CHECK')
	
	A2 = g2.get('A');
	random_A = g2.get('RANDOMIZATION', A2);
	
	for i = 1:length(A2)
	
	    if all(A2{i, i}==0, "all") %if all nodes are zero, the random matrix is also all zeros
	        assert(isequal(A2{i, i}, random_A{i, i}), ...
	            [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	            'OrdMxBU Randomize is not functioning well.')
	    elseif isequal((length(A2{i, i}).^2)- length(A2{i, i}), sum(A2{i, i}==1, "all")) %if all nodes (except diagonal) are one, the random matrix is the same as original
	        assert(isequal(A2{i, i}, random_A{i, i}), ...
	            [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	            'OrdMxBU Randomize is not functioning well.')
	    else
	%         assert(~isequal(A2{i, i}, random_A{i, i}), ...
	%             [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	%             'OrdMxBU Randomize is not functioning well.')
	    end
	
	    assert(isequal(numel(find(A2{i, i})), numel(find(random_A{i, i}))), ... % check same number of nodes
	        [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	        'OrdMxBU Randomize is not functioning well.')
	        
	    assert(issymmetric(random_A{i, i}), ... % check symmetry 
	    [BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
	    'OrdMxBU Randomize is not functioning well.')
	end
end

%% Test 15: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':OrdMxBU:' BRAPH2.FAIL_TEST], ...
		[' When testing OrdMxBU no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 16: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

