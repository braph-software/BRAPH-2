%TEST_GRAPHBU

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	g = GraphBU();
	 
	% get('ELCLASS')
	if isa(GraphBU, 'ConcreteElement')
		assert(strcmp(GraphBU().get('ELCLASS'), 'GraphBU'), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU().get(''ELCLASS'') should return ''GraphBU''.')
	end
	 
	% getBuild()
	assert(GraphBU.getBuild() == 1 && GraphBU.getBuild() > 0, ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.getBuild() should return the GraphBU build number.')
	assert(g.getBuild() == 1 && g.getBuild() > 0 , ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.getBuild() should return the GraphBU build number.')
	assert(Element.getBuild(g) == 1 && Element.getBuild(g) > 0, ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(g) should return the GraphBU build number.')
	assert(Element.getBuild('GraphBU') == 1 && Element.getBuild('GraphBU') > 0, ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''GraphBU'') should return the GraphBU build number.')
	 
	% getClass()
	assert(strcmp(GraphBU.getClass(), 'GraphBU'), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.getClass() should return ''GraphBU''.')
	assert(strcmp(g.getClass(), 'GraphBU'), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.getClass() should return ''GraphBU''.')
	assert(strcmp(Element.getClass(g), 'GraphBU'), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(g) should return ''GraphBU''.')
	assert(strcmp(Element.getClass('GraphBU'), 'GraphBU'), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''GraphBU'') should return ''GraphBU''.')
	 
	% getSubclasses()
	assert(isequal(GraphBU.getSubclasses(), subclasses('GraphBU', [], [], true)), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.getSubclasses() should return the same result as subclasses(''GraphBU'', [], [], true).')
	assert(isequal(g.getSubclasses(), subclasses('GraphBU', [], [], true)), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''GraphBU'', [], [], true).')
	assert(isequal(Element.getSubclasses(g), subclasses('GraphBU', [], [], true)), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(g) should return the same result as subclasses(''GraphBU'', [], [], true).')
	assert(isequal(Element.getSubclasses('GraphBU'), subclasses('GraphBU', [], [], true)), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''GraphBU'') should return the same result as subclasses(''GraphBU'', [], [], true).')
	 
	% getProps()
	assert(isempty(GraphBU.getProps()) || isequal(GraphBU.getProps(), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.getProps() should return a row vector [1:1:N].')
	assert(isempty(GraphBU.getProps()) || isequal(g.getProps(), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.getProps() should return a row vector [1:1:N].')
	assert(isempty(GraphBU.getProps()) || isequal(Element.getProps(g), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g) should return a row vector [1:1:N].')
	assert(isempty(GraphBU.getProps()) || isequal(Element.getProps('GraphBU'), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''GraphBU'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) GraphBU.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(GraphBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.getProps(category) does not work.')
	tmp = cellfun(@(category) g.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(GraphBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(g, category), categories, 'UniformOutput', false);
	assert(isempty(GraphBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(g, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('GraphBU', category), categories, 'UniformOutput', false);
	assert(isempty(GraphBU.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GraphBU.getProps())), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''GraphBU'', category) does not work.')
	 
	% getPropNumber()
	assert(GraphBU.getPropNumber() == length(GraphBU.getProps()), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.getPropNumber() should return the number of properties.')
	assert(g.getPropNumber() == length(GraphBU.getProps()), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(g) == length(GraphBU.getProps()), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g) should return the number of properties.')
	assert(Element.getPropNumber('GraphBU') == length(GraphBU.getProps()), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''GraphBU'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) GraphBU.getPropNumber(category), categories)) == GraphBU.getPropNumber(), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) g.getPropNumber(category), categories)) == GraphBU.getPropNumber(), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(g, category), categories)) == GraphBU.getPropNumber(), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(g, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('GraphBU', category), categories)) == GraphBU.getPropNumber(), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''GraphBU'', category) does not work.')
	 
	% existsProp(prop)
	assert(~GraphBU.existsProp(NaN), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.existsProp(prop) does not work.')
	assert(~g.existsProp(NaN), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.existsProp(prop) does not work.')
	assert(~Element.existsProp(g, NaN), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(g, prop) does not work.')
	assert(~Element.existsProp('GraphBU', NaN), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''GraphBU'', prop) does not work.')
	 
	assert_with_error('GraphBU.existsProp(NaN)', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsProp(''GraphBU'', NaN)', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:GraphBU.getPropNumber()
		assert(GraphBU.existsProp(prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.existsProp(prop) does not work.')
		assert(g.existsProp(prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.existsProp(prop) does not work.')
		assert(Element.existsProp(g, prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(g, prop) does not work.')
		assert(Element.existsProp('GraphBU', prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''GraphBU'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~GraphBU.existsTag(''), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.existsTag(tag) does not work.')
	assert(~g.existsTag(''), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'g.existsTag(tag) does not work.')
	assert(~Element.existsTag(g, ''), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(g, tag) does not work.')
	assert(~Element.existsTag('GraphBU', ''), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''GraphBU'', tag) does not work.')
	 
	assert_with_error('GraphBU.existsTag('''')', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], g)
	assert_with_error('Element.existsTag(''GraphBU'', '''')', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
		assert(GraphBU.existsTag(tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.existsTag(tag) does not work.')
		assert(g.existsTag(tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.existsTag(tag) does not work.')
		assert(Element.existsTag(g, tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(g, tga) does not work.')
		assert(Element.existsTag('GraphBU', tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''GraphBU'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		assert(GraphBU.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropProp(prop) does not work.')
		assert(g.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(prop) does not work.')
		assert(Element.getPropProp(g, prop) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, prop) does not work.')
		assert(Element.getPropProp('GraphBU', prop) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''GraphBU'', prop) does not work.')
	 
		tag = g.getPropTag(prop);
		assert(GraphBU.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropProp(tag) does not work.')
		assert(g.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropProp(tag) does not work.')
		assert(Element.getPropProp(g, tag) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(g, tag) does not work.')
		assert(Element.getPropProp('GraphBU', prop) == prop, ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''GraphBU'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(strcmp(GraphBU.getPropTag(prop), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropTag(prop) does not work.')
		assert(strcmp(g.getPropTag(prop), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(g, prop), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, prop) does not work.')
		assert(strcmp(Element.getPropTag('GraphBU', prop), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''GraphBU'', prop) does not work.')
	 
		assert(strcmp(GraphBU.getPropTag(tag), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropTag(tag) does not work.')
		assert(strcmp(g.getPropTag(tag), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(g, tag), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(g, tag) does not work.')
		assert(strcmp(Element.getPropTag('GraphBU', prop), tag), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''GraphBU'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Category.existsCategory(GraphBU.getPropCategory(prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(g.getPropCategory(prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''GraphBU'', prop) does not work.')
	 
		assert(Category.existsCategory(GraphBU.getPropCategory(tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(g.getPropCategory(tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(g, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(g, tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''GraphBU'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(Format.existsFormat(GraphBU.getPropFormat(prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(g.getPropFormat(prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''GraphBU'', prop) does not work.')
	 
		assert(Format.existsFormat(GraphBU.getPropFormat(tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(g.getPropFormat(tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(g, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(g, tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''GraphBU'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(ischar(GraphBU.getPropDescription(prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropDescription(prop) does not work.')
		assert(ischar(g.getPropDescription(prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, prop) does not work.')
		assert(ischar(Element.getPropDescription(g, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''GraphBU'', prop) does not work.')
	 
		assert(ischar(GraphBU.getPropDescription(tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.getPropDescription(tag) does not work.')
		assert(ischar(g.getPropDescription(tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(g, tag) does not work.')
		assert(ischar(Element.getPropDescription(g, tag)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''GraphBU'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		settings = GraphBU.getPropSettings(prop);
		settings = g.getPropSettings(prop);
		settings = Element.getPropSettings(g, prop);
		settings = Element.getPropSettings('GraphBU', prop);
	 
		settings = GraphBU.getPropSettings(tag);
		settings = g.getPropSettings(tag);
		settings = Element.getPropSettings(g, tag);
		settings = Element.getPropSettings('GraphBU', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		default = GraphBU.getPropDefault(prop);
		default = g.getPropDefault(prop);
		default = Element.getPropDefault(g, prop);
		default = Element.getPropDefault('GraphBU', prop);
	 
		default = GraphBU.getPropDefault(tag);
		default = g.getPropDefault(tag);
		default = Element.getPropDefault(g, tag);
		default = Element.getPropDefault('GraphBU', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		conditioned_default = GraphBU.getPropDefaultConditioned(prop);
		conditioned_default = g.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(g, prop);
		conditioned_default = Element.getPropDefaultConditioned('GraphBU', prop);
	 
		conditioned_default = GraphBU.getPropDefaultConditioned(tag);
		conditioned_default = g.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(g, tag);
		conditioned_default = Element.getPropDefaultConditioned('GraphBU', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:GraphBU.getPropNumber()
		tag = g.getPropTag(prop);
	 
		assert(~GraphBU.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.checkProp(prop, value) does not work.')
		assert(~g.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(g, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, value) does not work.')
		assert(~Element.checkProp('GraphBU', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GraphBU'', prop, value) does not work.')
	 
		assert_with_error('GraphBU.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], prop, g)
		assert_with_error('Element.checkProp(''GraphBU'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~GraphBU.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.checkProp(tag, value) does not work.')
		assert(~g.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(g, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, value) does not work.')
		assert(~Element.checkProp('GraphBU', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GraphBU'', tag, value) does not work.')
	 
		assert_with_error('GraphBU.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], tag, g)
		assert_with_error('Element.checkProp(''GraphBU'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GraphBU:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(GraphBU.checkProp(prop, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.checkProp(prop, <conditioned default value>) does not work.')
		assert(g.checkProp(prop, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, prop, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('GraphBU', prop, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GraphBU'', prop, <conditioned default value>) does not work.')
	 
		assert(GraphBU.checkProp(tag, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.checkProp(tag, <conditioned default value>) does not work.')
		assert(g.checkProp(tag, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'g.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(g, tag, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(g, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('GraphBU', tag, Element.getPropDefaultConditioned(GraphBU, prop)), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GraphBU'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, GraphBU.getPropDefault(GraphBU.TEMPLATE), ...
		GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, GraphBU.getPropDefault(GraphBU.RANDOMIZE), ...
		GraphBU.RANDOM_SEED, GraphBU.getPropDefault(GraphBU.RANDOM_SEED), ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, GraphBU.getPropDefault(GraphBU.PFGA), ...
		GraphBU.PFGH, GraphBU.getPropDefault(GraphBU.PFGH), ...
		GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
		GraphBU.SYMMETRIZE_RULE, GraphBU.getPropDefault(GraphBU.SYMMETRIZE_RULE), ...
		GraphBU.SEMIPOSITIVIZE_RULE, GraphBU.getPropDefault(GraphBU.SEMIPOSITIVIZE_RULE), ...
		GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE), ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	for prop = 1:1:GraphBU.getPropNumber()
	 
		% excluded props
		if any(prop == [GraphBU.PFGA GraphBU.PFGH])
			continue
		end
	 
		TAG = upper(GraphBU.getPropTag(prop));
		switch GraphBU.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					g.getr(prop) == GraphBU.getNoValue(), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' GraphBU.getCategoryName(GraphBU.getPropCategory(prop)) ', GraphBU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GraphBU.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == GraphBU.getNoValue(), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' GraphBU.getCategoryName(GraphBU.getPropCategory(prop)) ', GraphBU.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GraphBU.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					g.getr(prop) == GraphBU.getNoValue(), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' GraphBU.getCategoryName(GraphBU.getPropCategory(prop)) ', GraphBU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GraphBU.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					g.getr(TAG) == GraphBU.getNoValue(), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['Being a ' GraphBU.getCategoryName(GraphBU.getPropCategory(prop)) ', GraphBU.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GraphBU.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':GraphBU']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(g.getPropSettings(prop))
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(g.getr(prop), GraphBU.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by GraphBU.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in GraphBU.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(g.getr(TAG), GraphBU.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' TAG ') must be inizialized to its default value ' ...
					'given by GraphBU.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in GraphBU.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, GraphBU.getPropDefault(GraphBU.TEMPLATE), ...
		GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, GraphBU.getPropDefault(GraphBU.RANDOMIZE), ...
		GraphBU.RANDOM_SEED, GraphBU.getPropDefault(GraphBU.RANDOM_SEED), ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, GraphBU.getPropDefault(GraphBU.PFGA), ...
		GraphBU.PFGH, GraphBU.getPropDefault(GraphBU.PFGH), ...
		GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
		GraphBU.SYMMETRIZE_RULE, GraphBU.getPropDefault(GraphBU.SYMMETRIZE_RULE), ...
		GraphBU.SEMIPOSITIVIZE_RULE, GraphBU.getPropDefault(GraphBU.SEMIPOSITIVIZE_RULE), ...
		GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE), ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	for prop = 1:1:GraphBU.getPropNumber()
	 
		% excluded props
		if any(prop == [GraphBU.PFGA GraphBU.PFGH])
			continue
		end
	 
		TAG = upper(GraphBU.getPropTag(prop));
		switch GraphBU.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':GraphBU']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':GraphBU']);
	% 			assert( ...
	% 				~isa(g.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	% 				['GraphBU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(g.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	% 				['GraphBU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	% 				['GraphBU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':GraphBU']);
				assert( ...
					~isa(g.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(g.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if g.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:GraphBU');
					delete(ancestor(g.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(GraphBU.getProps(Category.RESULT))
		for prop = 1:1:GraphBU.getPropNumber()
	 
			% excluded props
			if any(prop == [GraphBU.PFGA GraphBU.PFGH])
				continue
			end
	 
			switch GraphBU.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						g.isLocked(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~g.isLocked(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = GraphBU();
	 
	for prop = 1:1:GraphBU.getPropNumber()
		TAG = upper(GraphBU.getPropTag(prop));
		assert( ...
			~g.isLocked(prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			['GraphBU.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~g.isLocked(TAG), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			['GraphBU.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	g.lock()
	 
	for prop = 1:1:GraphBU.getPropNumber()
		switch GraphBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = GraphBU();
	 
	warning_backup = warning('off', 'BRAPH2:GraphBU');
	for prop = 1:1:GraphBU.getPropNumber()
		g.lock(prop)
		switch GraphBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					g.isLocked(prop), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~g.isLocked(prop), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = GraphBU();
	 
	for prop = 1:1:GraphBU.getPropNumber()
		TAG = upper(GraphBU.getPropTag(prop));
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			['GraphBU.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			g.isChecked(TAG), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			['GraphBU.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	g.unchecked()
	 
	for prop = 1:1:GraphBU.getPropNumber()
		assert( ...
			~g.isChecked(prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			['GraphBU.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	g.checked()
	 
	for prop = 1:1:GraphBU.getPropNumber()
		assert( ...
			g.isChecked(prop), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			['GraphBU.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic GraphBU
	g_0 = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, GraphBU.getPropDefault(GraphBU.TEMPLATE), ...
		GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, GraphBU.getPropDefault(GraphBU.RANDOMIZE), ...
		GraphBU.RANDOM_SEED, GraphBU.getPropDefault(GraphBU.RANDOM_SEED), ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, GraphBU.getPropDefault(GraphBU.PFGA), ...
		GraphBU.PFGH, GraphBU.getPropDefault(GraphBU.PFGH), ...
		GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
		GraphBU.SYMMETRIZE_RULE, GraphBU.getPropDefault(GraphBU.SYMMETRIZE_RULE), ...
		GraphBU.SEMIPOSITIVIZE_RULE, GraphBU.getPropDefault(GraphBU.SEMIPOSITIVIZE_RULE), ...
		GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE), ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	% GraphBU with 1st callbacks
	g_1 = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, g_0.getCallback(4), ..., ...
		GraphBU.ID, g_0.getCallback(5), ..., ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, g_0.getCallback(24), ..., ...
		GraphBU.RANDOM_SEED, g_0.getCallback(25), ..., ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, g_0.getCallback(34), ..., ...
		GraphBU.PFGH, g_0.getCallback(35), ..., ...
		GraphBU.B, g_0.getCallback(36), ..., ...
		GraphBU.SYMMETRIZE_RULE, g_0.getCallback(37), ..., ...
		GraphBU.SEMIPOSITIVIZE_RULE, g_0.getCallback(38), ..., ...
		GraphBU.ATTEMPTSPEREDGE, g_0.getCallback(39), ..., ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	prop_number = GraphBU.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GraphBU.getPropTag(prop));
		switch GraphBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% GraphBU with 2nd callbacks
	g_2 = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, g_1.getCallback(4), ..., ...
		GraphBU.ID, g_1.getCallback(5), ..., ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, g_1.getCallback(24), ..., ...
		GraphBU.RANDOM_SEED, g_1.getCallback(25), ..., ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, g_1.getCallback(34), ..., ...
		GraphBU.PFGH, g_1.getCallback(35), ..., ...
		GraphBU.B, g_1.getCallback(36), ..., ...
		GraphBU.SYMMETRIZE_RULE, g_1.getCallback(37), ..., ...
		GraphBU.SEMIPOSITIVIZE_RULE, g_1.getCallback(38), ..., ...
		GraphBU.ATTEMPTSPEREDGE, g_1.getCallback(39), ..., ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	prop_number = GraphBU.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GraphBU.getPropTag(prop));
		switch GraphBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% GraphBU with 3rd callbacks
	g_3 = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, g_2.getCallback(4), ..., ...
		GraphBU.ID, g_2.getCallback(5), ..., ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, g_2.getCallback(24), ..., ...
		GraphBU.RANDOM_SEED, g_2.getCallback(25), ..., ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, g_2.getCallback(34), ..., ...
		GraphBU.PFGH, g_2.getCallback(35), ..., ...
		GraphBU.B, g_2.getCallback(36), ..., ...
		GraphBU.SYMMETRIZE_RULE, g_2.getCallback(37), ..., ...
		GraphBU.SEMIPOSITIVIZE_RULE, g_2.getCallback(38), ..., ...
		GraphBU.ATTEMPTSPEREDGE, g_2.getCallback(39), ..., ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	prop_number = GraphBU.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GraphBU.getPropTag(prop));
		switch GraphBU.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(g_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	g = GraphBU();
	 
	g_copy = g.copy();
	 
	assert(g_copy ~= g, ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(g_copy, g), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:GraphBU.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch GraphBU.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					'GraphBU.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
							'GraphBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
							'GraphBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					g_copy.isLocked(prop) == g.isLocked(prop), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					'GraphBU.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.isChecked(prop) == g.isChecked(prop), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					'GraphBU.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					'GraphBU.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	g = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, GraphBU.getPropDefault(GraphBU.TEMPLATE), ...
		GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, GraphBU.getPropDefault(GraphBU.RANDOMIZE), ...
		GraphBU.RANDOM_SEED, GraphBU.getPropDefault(GraphBU.RANDOM_SEED), ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, GraphBU.getPropDefault(GraphBU.PFGA), ...
		GraphBU.PFGH, GraphBU.getPropDefault(GraphBU.PFGH), ...
		GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
		GraphBU.SYMMETRIZE_RULE, GraphBU.getPropDefault(GraphBU.SYMMETRIZE_RULE), ...
		GraphBU.SEMIPOSITIVIZE_RULE, GraphBU.getPropDefault(GraphBU.SEMIPOSITIVIZE_RULE), ...
		GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE), ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	for prop = 1:1:GraphBU.getPropNumber()
		if GraphBU.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':GraphBU']);
			% g.memorize(prop);
			% warning(warning_backup)
		elseif GraphBU.getPropCategory(prop) == Category.EVANESCENT && g.getPropFormat(prop) == Format.HANDLE
			g.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:GraphBU');
			delete(ancestor(g.get(prop), 'figure'))
			warning(warning_backup)
		else
			g.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	g_copy = g.copy();
	 
	for prop = 1:1:GraphBU.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch GraphBU.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					'GraphBU.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
							'GraphBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
							'GraphBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	g_0 = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, GraphBU.getPropDefault(GraphBU.TEMPLATE), ...
		GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, GraphBU.getPropDefault(GraphBU.RANDOMIZE), ...
		GraphBU.RANDOM_SEED, GraphBU.getPropDefault(GraphBU.RANDOM_SEED), ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, GraphBU.getPropDefault(GraphBU.PFGA), ...
		GraphBU.PFGH, GraphBU.getPropDefault(GraphBU.PFGH), ...
		GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
		GraphBU.SYMMETRIZE_RULE, GraphBU.getPropDefault(GraphBU.SYMMETRIZE_RULE), ...
		GraphBU.SEMIPOSITIVIZE_RULE, GraphBU.getPropDefault(GraphBU.SEMIPOSITIVIZE_RULE), ...
		GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE), ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	g = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, g_0.getCallback(4), ..., ...
		GraphBU.ID, g_0.getCallback(5), ..., ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, g_0.getCallback(24), ..., ...
		GraphBU.RANDOM_SEED, g_0.getCallback(25), ..., ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, g_0.getCallback(34), ..., ...
		GraphBU.PFGH, g_0.getCallback(35), ..., ...
		GraphBU.B, g_0.getCallback(36), ..., ...
		GraphBU.SYMMETRIZE_RULE, g_0.getCallback(37), ..., ...
		GraphBU.SEMIPOSITIVIZE_RULE, g_0.getCallback(38), ..., ...
		GraphBU.ATTEMPTSPEREDGE, g_0.getCallback(39), ..., ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	g_copy = g.copy();
	g_0_copy = g_copy.getr('ID').get('EL');
	 
	for prop = 1:1:GraphBU.getPropNumber()
		value = g.getr(prop);
		value_copy = g_copy.getr(prop);
		switch GraphBU.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					'GraphBU.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
							'GraphBU.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
							'GraphBU.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == g_0.getCallback(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The callback should be obtained from GraphBU.getCallback().' ...
						)
					assert( ...
						value_copy == g_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The callback should be obtained from GraphBU.getCallback().' ...
						)
				end
	 
					assert( ...
						g_copy.isLocked(prop) == g.isLocked(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.isChecked(prop) == g.isChecked(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						g_copy.getPropSeed(prop) == g.getPropSeed(prop), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g_template = GraphBU();
	g = GraphBU('TEMPLATE', g_template);
	 
	for prop = 1:1:GraphBU.getPropNumber()
	 
		% excluded props
		if any(prop == [GraphBU.PFGA GraphBU.PFGH])
			continue
		end
	 
		TAG = upper(GraphBU.getPropTag(prop));
		switch GraphBU.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == GraphBU.TEMPLATE
					assert( ...
						isa(g.getr(prop), 'GraphBU'), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU TEMPLATE does not work. GraphBU.getr(''TEMPLATE'') should be a GraphBU element.' ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						'GraphBU TEMPLATE does not work. GraphBU_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(g.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU TEMPLATE does not work. GraphBU.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						g.getr(prop).get('EL') == g_template && g.getr(prop).get('PROP') == prop && strcmp(g.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU TEMPLATE does not work. GraphBU.getr(' TAG ') should be a Callback to g_template.' TAG '.'] ...
						)
					assert( ...
						isa(g_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
						['GraphBU TEMPLATE does not work. GraphBU_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(g.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU TEMPLATE does not work. GraphBU.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(g_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
					['GraphBU TEMPLATE does not work. GraphBU_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, GraphBU.getPropDefault(GraphBU.TEMPLATE), ...
		GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, GraphBU.getPropDefault(GraphBU.RANDOMIZE), ...
		GraphBU.RANDOM_SEED, GraphBU.getPropDefault(GraphBU.RANDOM_SEED), ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, GraphBU.getPropDefault(GraphBU.PFGA), ...
		GraphBU.PFGH, GraphBU.getPropDefault(GraphBU.PFGH), ...
		GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
		GraphBU.SYMMETRIZE_RULE, GraphBU.getPropDefault(GraphBU.SYMMETRIZE_RULE), ...
		GraphBU.SEMIPOSITIVIZE_RULE, GraphBU.getPropDefault(GraphBU.SEMIPOSITIVIZE_RULE), ...
		GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE), ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'graphbu_to_be_erased.b2'];
	 
	Element.save(g, filename)
	 
	g_loaded = Element.load(filename);
	 
	assert( ...
		isequal(g.copy(), g_loaded), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.save(g) and/or GraphBU.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	g = GraphBU( ...
		GraphBU.ELCLASS, GraphBU.getNoValue(), ...
		GraphBU.NAME, GraphBU.getNoValue(), ...
		GraphBU.DESCRIPTION, GraphBU.getNoValue(), ...
		GraphBU.TEMPLATE, GraphBU.getPropDefault(GraphBU.TEMPLATE), ...
		GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
		GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
		GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
		GraphBU.TOSTRING, GraphBU.getNoValue(), ...
		GraphBU.GRAPH_TYPE, GraphBU.getNoValue(), ...
		GraphBU.CONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.DIRECTIONALITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.SELFCONNECTIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.NEGATIVITY_TYPE, GraphBU.getNoValue(), ...
		GraphBU.LAYERTICKS, GraphBU.getPropDefault(GraphBU.LAYERTICKS), ...
		GraphBU.ALAYERTICKS, GraphBU.getNoValue(), ...
		GraphBU.LAYERLABELS, GraphBU.getPropDefault(GraphBU.LAYERLABELS), ...
		GraphBU.ALAYERLABELS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONTICKS, GraphBU.getPropDefault(GraphBU.PARTITIONTICKS), ...
		GraphBU.APARTITIONTICKS, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONLABELS, GraphBU.getPropDefault(GraphBU.PARTITIONLABELS), ...
		GraphBU.APARTITIONLABELS, GraphBU.getNoValue(), ...
		GraphBU.NODELABELS, GraphBU.getPropDefault(GraphBU.NODELABELS), ...
		GraphBU.ANODELABELS, GraphBU.getNoValue(), ...
		GraphBU.RANDOMIZE, GraphBU.getPropDefault(GraphBU.RANDOMIZE), ...
		GraphBU.RANDOM_SEED, GraphBU.getPropDefault(GraphBU.RANDOM_SEED), ...
		GraphBU.A, GraphBU.getNoValue(), ...
		GraphBU.A_CHECK, GraphBU.getNoValue(), ...
		GraphBU.NODENUMBER, GraphBU.getNoValue(), ...
		GraphBU.LAYERNUMBER, GraphBU.getNoValue(), ...
		GraphBU.PARTITIONS, GraphBU.getNoValue(), ...
		GraphBU.M_DICT, GraphBU.getNoValue(), ...
		GraphBU.COMPATIBLE_MEASURES, GraphBU.getNoValue(), ...
		GraphBU.MEASURE, GraphBU.getNoValue(), ...
		GraphBU.PFGA, GraphBU.getPropDefault(GraphBU.PFGA), ...
		GraphBU.PFGH, GraphBU.getPropDefault(GraphBU.PFGH), ...
		GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
		GraphBU.SYMMETRIZE_RULE, GraphBU.getPropDefault(GraphBU.SYMMETRIZE_RULE), ...
		GraphBU.SEMIPOSITIVIZE_RULE, GraphBU.getPropDefault(GraphBU.SEMIPOSITIVIZE_RULE), ...
		GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE), ...
		GraphBU.RANDOMIZATION, GraphBU.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(g);
	[g_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(g_dec ~= g, ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		'GraphBU.encodeJSON() or GraphBU.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) GraphBU.getPropFormat(prop), num2cell(GraphBU.getProps())) == Format.HANDLE) && all(cellfun(@(prop) GraphBU.getPropFormat(prop), num2cell(GraphBU.getProps())) == Format.NET)
		assert(isequal(g_dec, g), ...
			[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
			'GraphBU.encodeJSON() or GraphBU.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Constructor - Empty
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = [];
	g = GraphBU('B', B);
	
	g.get('A_CHECK');
	
	A = {symmetrize(binarize(semipositivize(dediagonalize(B))))};
	assert(isequal(g.get('A'), A), ...
	       [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	       'GraphBU is not constructing well.')
end

%% Test 13: Constructor - Full
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = randn(randi(10));
	g = GraphBU('B', B);
	
	g.get('A_CHECK')
	
	A = {symmetrize(binarize(semipositivize(dediagonalize(B))))};
	assert(isequal(g.get('A'), A), ...
	       [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	       'GraphBU is not constructing well.')
end

%% Test 14: Symmetrize and Semipositivize Rules
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = randn(randi(10));
	
	g0 = GraphBU('B', B); % 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'max'
	A0 = {dediagonalize(max(B, B') > 0)};
	assert(isequal(g0.get('A'), A0), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_max = GraphBU('B', B, 'SYMMETRIZE_RULE', 'max'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A_max = {dediagonalize(max(B, B') > 0)};
	assert(isequal(g_max.get('A'), A_max), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_sum = GraphBU('B', B, 'SYMMETRIZE_RULE', 'sum'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A_sum = {dediagonalize(B + B' > 0)};
	assert(isequal(g_sum.get('A'), A_sum), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_average = GraphBU('B', B, 'SYMMETRIZE_RULE', 'average'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A_average = {dediagonalize((B + B') / 2 > 0)};
	assert(isequal(g_average.get('A'), A_average), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_min = GraphBU('B', B, 'SYMMETRIZE_RULE', 'min'); % 'SEMIPOSITIVIZE_RULE', 'zero'
	A_min = {dediagonalize(min(B, B') > 0)};
	assert(isequal(g_min.get('A'), A_min), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_zero = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'zero'); % 'SYMMETRIZE_RULE', 'max'
	A_zero = {dediagonalize(max(B, B') > 0)};
	assert(isequal(g_zero.get('A'), A_zero), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_zero_max = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'max');
	A_zero_max = {dediagonalize(max(B, B') > 0)};
	assert(isequal(g_zero_max.get('A'), A_zero_max), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_zero_sum = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'sum');
	A_zero_sum = {dediagonalize(B + B' > 0)};
	assert(isequal(g_zero_sum.get('A'), A_zero_sum), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_zero_average = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'average');
	A_zero_average = {dediagonalize((B + B') / 2 > 0)};
	assert(isequal(g_zero_average.get('A'), A_zero_average), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_zero_min = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'zero', 'SYMMETRIZE_RULE', 'min');
	A_zero_min = {dediagonalize(min(B, B') > 0)};
	assert(isequal(g_zero_min.get('A'), A_zero_min), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_absolute = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'absolute'); % 'SYMMETRIZE_RULE', 'max'
	A_absolute = {dediagonalize(max(B, B') ~= 0)};
	assert(isequal(g_absolute.get('A'), A_absolute), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_absolute_max = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'max');
	A_absolute_max = {dediagonalize(max(B, B') ~= 0)};
	assert(isequal(g_absolute_max.get('A'), A_absolute_max), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_absolute_sum = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'sum');
	A_absolute_sum = {dediagonalize(B + B' ~= 0)};
	assert(isequal(g_absolute_sum.get('A'), A_absolute_sum), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_absolute_average = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'average');
	A_absolute_average = {dediagonalize((B + B') / 2~= 0)};
	assert(isequal(g_absolute_average.get('A'), A_absolute_average), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
	
	g_absolute_min = GraphBU('B', B, 'SEMIPOSITIVIZE_RULE', 'absolute', 'SYMMETRIZE_RULE', 'min');
	A_absolute_min = {dediagonalize(min(B, B') ~= 0)};
	assert(isequal(g_absolute_min.get('A'), A_absolute_min), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU is not constructing well.')
end

%% Test 15: Randomize Rules
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = randn(10);
	
	g = GraphBU('B', B);
	g.set('RANDOMIZE', true);
	g.set('ATTEMPTSPEREDGE', 4);
	
	A = g.get('A');
	
	assert(isequal(size(A{1}), size(B)), ... % check equal size
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU Randomize is not functioning well.')
	
	g2 = GraphBU('B', B);
	g2.set('RANDOMIZE', false);
	g2.set('ATTEMPTSPEREDGE', 4);
	A2 = g2.get('A');
	random_A = g2.get('RANDOMIZATION', A2);
	
	if all(A2{1}==0, "all") %if all nodes are zero, the random matrix is also all zeros
	    assert(isequal(A2{1}, random_A), ...
	        [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	        'GraphBU Randomize is not functioning well.')
	elseif isequal((length(A2{1}).^2)- length(A2{1}), sum(A2{1}==1, "all")) %if all nodes (except diagonal) are one, the random matrix is the same as original
	    assert(isequal(A2{1}, random_A), ...
	        [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	        'GraphBU Randomize is not functioning well.')
	else
	%     assert(~isequal(A2{1}, random_A), ...
	%         [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	%         'GraphBU Randomize is not functioning well.')
	end
	
	d1 = g.get('MEASURE', 'Degree');
	d2 = g2.get('MEASURE', 'Degree');
	
	assert(isequal(d1.get('M'), d2.get('M')), ...
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU Randomize is not functioning well.')
	    
	assert(isequal(numel(find(A2{1})), numel(find(random_A))), ... % check same number of nodes
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU Randomize is not functioning well.')
	
	assert(issymmetric(random_A), ... % check symmetry 
	[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	'GraphBU Randomize is not functioning well.')
	
	deg_A = sum(A2{1});
	deg_B = sum(random_A);
	[h, p, ks2stat] = kstest2(deg_A, deg_B);
	
	assert(isequal(0, h), ... % check same degree distribution
	    [BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
	    'GraphBU Randomize is not functioning well.')
end

%% Test 16: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.FAIL_TEST], ...
		[' When testing GraphBU no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 17: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

