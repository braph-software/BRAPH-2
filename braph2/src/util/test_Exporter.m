%TEST_EXPORTER

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	ex = Exporter();
	 
	% get('ELCLASS')
	if isa(Exporter, 'ConcreteElement')
		assert(strcmp(Exporter().get('ELCLASS'), 'Exporter'), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter().get(''ELCLASS'') should return ''Exporter''.')
	end
	 
	% getBuild()
	assert(Exporter.getBuild() == 1 && Exporter.getBuild() > 0, ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.getBuild() should return the Exporter build number.')
	assert(ex.getBuild() == 1 && ex.getBuild() > 0 , ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.getBuild() should return the Exporter build number.')
	assert(Element.getBuild(ex) == 1 && Element.getBuild(ex) > 0, ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(ex) should return the Exporter build number.')
	assert(Element.getBuild('Exporter') == 1 && Element.getBuild('Exporter') > 0, ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''Exporter'') should return the Exporter build number.')
	 
	% getClass()
	assert(strcmp(Exporter.getClass(), 'Exporter'), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.getClass() should return ''Exporter''.')
	assert(strcmp(ex.getClass(), 'Exporter'), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.getClass() should return ''Exporter''.')
	assert(strcmp(Element.getClass(ex), 'Exporter'), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(ex) should return ''Exporter''.')
	assert(strcmp(Element.getClass('Exporter'), 'Exporter'), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''Exporter'') should return ''Exporter''.')
	 
	% getSubclasses()
	assert(isequal(Exporter.getSubclasses(), subclasses('Exporter', [], [], true)), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.getSubclasses() should return the same result as subclasses(''Exporter'', [], [], true).')
	assert(isequal(ex.getSubclasses(), subclasses('Exporter', [], [], true)), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''Exporter'', [], [], true).')
	assert(isequal(Element.getSubclasses(ex), subclasses('Exporter', [], [], true)), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(ex) should return the same result as subclasses(''Exporter'', [], [], true).')
	assert(isequal(Element.getSubclasses('Exporter'), subclasses('Exporter', [], [], true)), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''Exporter'') should return the same result as subclasses(''Exporter'', [], [], true).')
	 
	% getProps()
	assert(isempty(Exporter.getProps()) || isequal(Exporter.getProps(), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.getProps() should return a row vector [1:1:N].')
	assert(isempty(Exporter.getProps()) || isequal(ex.getProps(), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.getProps() should return a row vector [1:1:N].')
	assert(isempty(Exporter.getProps()) || isequal(Element.getProps(ex), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ex) should return a row vector [1:1:N].')
	assert(isempty(Exporter.getProps()) || isequal(Element.getProps('Exporter'), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Exporter'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) Exporter.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Exporter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.getProps(category) does not work.')
	tmp = cellfun(@(category) ex.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Exporter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(ex, category), categories, 'UniformOutput', false);
	assert(isempty(Exporter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ex, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('Exporter', category), categories, 'UniformOutput', false);
	assert(isempty(Exporter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Exporter.getProps())), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Exporter'', category) does not work.')
	 
	% getPropNumber()
	assert(Exporter.getPropNumber() == length(Exporter.getProps()), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.getPropNumber() should return the number of properties.')
	assert(ex.getPropNumber() == length(Exporter.getProps()), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(ex) == length(Exporter.getProps()), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ex) should return the number of properties.')
	assert(Element.getPropNumber('Exporter') == length(Exporter.getProps()), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Exporter'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) Exporter.getPropNumber(category), categories)) == Exporter.getPropNumber(), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) ex.getPropNumber(category), categories)) == Exporter.getPropNumber(), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(ex, category), categories)) == Exporter.getPropNumber(), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ex, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('Exporter', category), categories)) == Exporter.getPropNumber(), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Exporter'', category) does not work.')
	 
	% existsProp(prop)
	assert(~Exporter.existsProp(NaN), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.existsProp(prop) does not work.')
	assert(~ex.existsProp(NaN), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.existsProp(prop) does not work.')
	assert(~Element.existsProp(ex, NaN), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(ex, prop) does not work.')
	assert(~Element.existsProp('Exporter', NaN), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''Exporter'', prop) does not work.')
	 
	assert_with_error('Exporter.existsProp(NaN)', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], ex)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], ex)
	assert_with_error('Element.existsProp(''Exporter'', NaN)', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Exporter.getPropNumber()
		assert(Exporter.existsProp(prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.existsProp(prop) does not work.')
		assert(ex.existsProp(prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.existsProp(prop) does not work.')
		assert(Element.existsProp(ex, prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(ex, prop) does not work.')
		assert(Element.existsProp('Exporter', prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''Exporter'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~Exporter.existsTag(''), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.existsTag(tag) does not work.')
	assert(~ex.existsTag(''), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'ex.existsTag(tag) does not work.')
	assert(~Element.existsTag(ex, ''), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(ex, tag) does not work.')
	assert(~Element.existsTag('Exporter', ''), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''Exporter'', tag) does not work.')
	 
	assert_with_error('Exporter.existsTag('''')', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], ex)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], ex)
	assert_with_error('Element.existsTag(''Exporter'', '''')', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
		assert(Exporter.existsTag(tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.existsTag(tag) does not work.')
		assert(ex.existsTag(tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.existsTag(tag) does not work.')
		assert(Element.existsTag(ex, tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(ex, tga) does not work.')
		assert(Element.existsTag('Exporter', tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''Exporter'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		assert(Exporter.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropProp(prop) does not work.')
		assert(ex.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropProp(prop) does not work.')
		assert(Element.getPropProp(ex, prop) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ex, prop) does not work.')
		assert(Element.getPropProp('Exporter', prop) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Exporter'', prop) does not work.')
	 
		tag = ex.getPropTag(prop);
		assert(Exporter.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropProp(tag) does not work.')
		assert(ex.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropProp(tag) does not work.')
		assert(Element.getPropProp(ex, tag) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ex, tag) does not work.')
		assert(Element.getPropProp('Exporter', prop) == prop, ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Exporter'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		assert(strcmp(Exporter.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropTag(prop) does not work.')
		assert(strcmp(ex.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(ex, prop), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ex, prop) does not work.')
		assert(strcmp(Element.getPropTag('Exporter', prop), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Exporter'', prop) does not work.')
	 
		assert(strcmp(Exporter.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropTag(tag) does not work.')
		assert(strcmp(ex.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(ex, tag), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ex, tag) does not work.')
		assert(strcmp(Element.getPropTag('Exporter', prop), tag), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Exporter'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		assert(Category.existsCategory(Exporter.getPropCategory(prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(ex.getPropCategory(prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ex, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ex, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ex, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Exporter'', prop) does not work.')
	 
		assert(Category.existsCategory(Exporter.getPropCategory(tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(ex.getPropCategory(tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ex, tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ex, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ex, tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Exporter'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		assert(Format.existsFormat(Exporter.getPropFormat(prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(ex.getPropFormat(prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ex, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ex, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ex, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Exporter'', prop) does not work.')
	 
		assert(Format.existsFormat(Exporter.getPropFormat(tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(ex.getPropFormat(tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ex, tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ex, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ex, tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Exporter'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		assert(ischar(Exporter.getPropDescription(prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropDescription(prop) does not work.')
		assert(ischar(ex.getPropDescription(prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(ex, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ex, prop) does not work.')
		assert(ischar(Element.getPropDescription(ex, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Exporter'', prop) does not work.')
	 
		assert(ischar(Exporter.getPropDescription(tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.getPropDescription(tag) does not work.')
		assert(ischar(ex.getPropDescription(tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(ex, tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ex, tag) does not work.')
		assert(ischar(Element.getPropDescription(ex, tag)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Exporter'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		settings = Exporter.getPropSettings(prop);
		settings = ex.getPropSettings(prop);
		settings = Element.getPropSettings(ex, prop);
		settings = Element.getPropSettings('Exporter', prop);
	 
		settings = Exporter.getPropSettings(tag);
		settings = ex.getPropSettings(tag);
		settings = Element.getPropSettings(ex, tag);
		settings = Element.getPropSettings('Exporter', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		default = Exporter.getPropDefault(prop);
		default = ex.getPropDefault(prop);
		default = Element.getPropDefault(ex, prop);
		default = Element.getPropDefault('Exporter', prop);
	 
		default = Exporter.getPropDefault(tag);
		default = ex.getPropDefault(tag);
		default = Element.getPropDefault(ex, tag);
		default = Element.getPropDefault('Exporter', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		conditioned_default = Exporter.getPropDefaultConditioned(prop);
		conditioned_default = ex.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(ex, prop);
		conditioned_default = Element.getPropDefaultConditioned('Exporter', prop);
	 
		conditioned_default = Exporter.getPropDefaultConditioned(tag);
		conditioned_default = ex.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(ex, tag);
		conditioned_default = Element.getPropDefaultConditioned('Exporter', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:Exporter.getPropNumber()
		tag = ex.getPropTag(prop);
	 
		assert(~Exporter.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.checkProp(prop, value) does not work.')
		assert(~ex.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(ex, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ex, prop, value) does not work.')
		assert(~Element.checkProp('Exporter', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Exporter'', prop, value) does not work.')
	 
		assert_with_error('Exporter.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], prop, ex)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], prop, ex)
		assert_with_error('Element.checkProp(''Exporter'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~Exporter.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.checkProp(tag, value) does not work.')
		assert(~ex.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(ex, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ex, tag, value) does not work.')
		assert(~Element.checkProp('Exporter', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Exporter'', tag, value) does not work.')
	 
		assert_with_error('Exporter.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], tag, ex)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], tag, ex)
		assert_with_error('Element.checkProp(''Exporter'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Exporter:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(Exporter.checkProp(prop, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.checkProp(prop, <conditioned default value>) does not work.')
		assert(ex.checkProp(prop, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(ex, prop, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ex, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('Exporter', prop, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Exporter'', prop, <conditioned default value>) does not work.')
	 
		assert(Exporter.checkProp(tag, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.checkProp(tag, <conditioned default value>) does not work.')
		assert(ex.checkProp(tag, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'ex.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(ex, tag, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ex, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('Exporter', tag, Element.getPropDefaultConditioned(Exporter, prop)), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Exporter'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, Exporter.getPropDefault(Exporter.TEMPLATE), ...
		Exporter.ID, Exporter.getPropDefault(Exporter.ID), ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, Exporter.getPropDefault(Exporter.WAITBAR) ...
		);
	 
	for prop = 1:1:Exporter.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Exporter.getPropTag(prop));
		switch Exporter.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					ex.getr(prop) == Exporter.getNoValue(), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Being a ' Exporter.getCategoryName(Exporter.getPropCategory(prop)) ', Exporter.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Exporter.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ex.getr(TAG) == Exporter.getNoValue(), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Being a ' Exporter.getCategoryName(Exporter.getPropCategory(prop)) ', Exporter.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Exporter.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(ex.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ex.getPropSettings(prop))
					assert( ...
						ex.checkFormat(ex.getPropFormat(prop), ex.get(prop)), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ex.checkFormat(ex.getPropFormat(prop), ex.get(prop), ex.getPropSettings(prop)), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					ex.getr(prop) == Exporter.getNoValue(), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Being a ' Exporter.getCategoryName(Exporter.getPropCategory(prop)) ', Exporter.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Exporter.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ex.getr(TAG) == Exporter.getNoValue(), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Being a ' Exporter.getCategoryName(Exporter.getPropCategory(prop)) ', Exporter.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Exporter.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':Exporter']);
				assert( ...
					~isa(ex.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ex.getPropSettings(prop))
					assert( ...
						ex.checkFormat(ex.getPropFormat(prop), ex.get(prop)), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ex.checkFormat(ex.getPropFormat(prop), ex.get(prop), ex.getPropSettings(prop)), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(ex.getr(prop), Exporter.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by Exporter.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Exporter.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(ex.getr(TAG), Exporter.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' TAG ') must be inizialized to its default value ' ...
					'given by Exporter.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Exporter.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, Exporter.getPropDefault(Exporter.TEMPLATE), ...
		Exporter.ID, Exporter.getPropDefault(Exporter.ID), ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, Exporter.getPropDefault(Exporter.WAITBAR) ...
		);
	 
	for prop = 1:1:Exporter.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Exporter.getPropTag(prop));
		switch Exporter.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(ex.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ex.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ex.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ex.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ex.checkFormat(ex.getPropFormat(prop), ex.getr(prop),ex.getPropSettings(prop)), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':Exporter']);
				assert( ...
					~isa(ex.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ex.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':Exporter']);
	% 			assert( ...
	% 				~isa(ex.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
	% 				['Exporter.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(ex.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
	% 				['Exporter.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				ex.checkFormat(ex.getPropFormat(prop), ex.getr(prop),ex.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
	% 				['Exporter.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':Exporter']);
				assert( ...
					~isa(ex.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(ex.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ex.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ex.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ex.checkFormat(ex.getPropFormat(prop), ex.getr(prop),ex.getPropSettings(prop)), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if ex.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:Exporter');
					delete(ancestor(ex.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(Exporter.getProps(Category.RESULT))
		for prop = 1:1:Exporter.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch Exporter.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						ex.isLocked(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~ex.isLocked(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex = Exporter();
	 
	for prop = 1:1:Exporter.getPropNumber()
		TAG = upper(Exporter.getPropTag(prop));
		assert( ...
			~ex.isLocked(prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			['Exporter.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~ex.isLocked(TAG), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			['Exporter.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	ex.lock()
	 
	for prop = 1:1:Exporter.getPropNumber()
		switch Exporter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					ex.isLocked(prop), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~ex.isLocked(prop), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex = Exporter();
	 
	warning_backup = warning('off', 'BRAPH2:Exporter');
	for prop = 1:1:Exporter.getPropNumber()
		ex.lock(prop)
		switch Exporter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					ex.isLocked(prop), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~ex.isLocked(prop), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex = Exporter();
	 
	for prop = 1:1:Exporter.getPropNumber()
		TAG = upper(Exporter.getPropTag(prop));
		assert( ...
			ex.isChecked(prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			['Exporter.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			ex.isChecked(TAG), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			['Exporter.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	ex.unchecked()
	 
	for prop = 1:1:Exporter.getPropNumber()
		assert( ...
			~ex.isChecked(prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			['Exporter.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	ex.checked()
	 
	for prop = 1:1:Exporter.getPropNumber()
		assert( ...
			ex.isChecked(prop), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			['Exporter.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic Exporter
	ex_0 = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, Exporter.getPropDefault(Exporter.TEMPLATE), ...
		Exporter.ID, Exporter.getPropDefault(Exporter.ID), ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, Exporter.getPropDefault(Exporter.WAITBAR) ...
		);
	 
	% Exporter with 1st callbacks
	ex_1 = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, ex_0.getCallback(4), ..., ...
		Exporter.ID, ex_0.getCallback(5), ..., ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, ex_0.getCallback(9) ... ...
		);
	 
	prop_number = Exporter.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Exporter.getPropTag(prop));
		switch Exporter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ex_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ex_1.get(prop), ex_0.get(prop)) && ~isa(ex_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ex_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Exporter with 2nd callbacks
	ex_2 = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, ex_1.getCallback(4), ..., ...
		Exporter.ID, ex_1.getCallback(5), ..., ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, ex_1.getCallback(9) ... ...
		);
	 
	prop_number = Exporter.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Exporter.getPropTag(prop));
		switch Exporter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ex_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ex_2.get(prop), ex_0.get(prop)) && ~isa(ex_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ex_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Exporter with 3rd callbacks
	ex_3 = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, ex_2.getCallback(4), ..., ...
		Exporter.ID, ex_2.getCallback(5), ..., ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, ex_2.getCallback(9) ... ...
		);
	 
	prop_number = Exporter.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Exporter.getPropTag(prop));
		switch Exporter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ex_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ex_3.get(prop), ex_0.get(prop)) && ~isa(ex_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ex_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	ex = Exporter();
	 
	ex_copy = ex.copy();
	 
	assert(ex_copy ~= ex, ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(ex_copy, ex), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:Exporter.getPropNumber()
		value = ex.getr(prop);
		value_copy = ex_copy.getr(prop);
		switch Exporter.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					'Exporter.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
							'Exporter.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
							'Exporter.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					ex_copy.isLocked(prop) == ex.isLocked(prop), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					'Exporter.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ex_copy.isChecked(prop) == ex.isChecked(prop), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					'Exporter.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ex_copy.getPropSeed(prop) == ex.getPropSeed(prop), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					'Exporter.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	ex = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, Exporter.getPropDefault(Exporter.TEMPLATE), ...
		Exporter.ID, Exporter.getPropDefault(Exporter.ID), ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, Exporter.getPropDefault(Exporter.WAITBAR) ...
		);
	 
	for prop = 1:1:Exporter.getPropNumber()
		if Exporter.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':Exporter']);
			% ex.memorize(prop);
			% warning(warning_backup)
		elseif Exporter.getPropCategory(prop) == Category.EVANESCENT && ex.getPropFormat(prop) == Format.HANDLE
			ex.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:Exporter');
			delete(ancestor(ex.get(prop), 'figure'))
			warning(warning_backup)
		else
			ex.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	ex_copy = ex.copy();
	 
	for prop = 1:1:Exporter.getPropNumber()
		value = ex.getr(prop);
		value_copy = ex_copy.getr(prop);
		switch Exporter.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					'Exporter.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
							'Exporter.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
							'Exporter.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						ex_copy.isLocked(prop) == ex.isLocked(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ex_copy.isChecked(prop) == ex.isChecked(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ex_copy.getPropSeed(prop) == ex.getPropSeed(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	ex_0 = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, Exporter.getPropDefault(Exporter.TEMPLATE), ...
		Exporter.ID, Exporter.getPropDefault(Exporter.ID), ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, Exporter.getPropDefault(Exporter.WAITBAR) ...
		);
	 
	ex = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, ex_0.getCallback(4), ..., ...
		Exporter.ID, ex_0.getCallback(5), ..., ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, ex_0.getCallback(9) ... ...
		);
	 
	ex_copy = ex.copy();
	ex_0_copy = ex_copy.getr('ID').get('EL');
	 
	for prop = 1:1:Exporter.getPropNumber()
		value = ex.getr(prop);
		value_copy = ex_copy.getr(prop);
		switch Exporter.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					'Exporter.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
							'Exporter.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
							'Exporter.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == ex_0.getCallback(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The callback should be obtained from Exporter.getCallback().' ...
						)
					assert( ...
						value_copy == ex_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The callback should be obtained from Exporter.getCallback().' ...
						)
				end
	 
					assert( ...
						ex_copy.isLocked(prop) == ex.isLocked(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ex_copy.isChecked(prop) == ex.isChecked(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ex_copy.getPropSeed(prop) == ex.getPropSeed(prop), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex_template = Exporter();
	ex = Exporter('TEMPLATE', ex_template);
	 
	for prop = 1:1:Exporter.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Exporter.getPropTag(prop));
		switch Exporter.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == Exporter.TEMPLATE
					assert( ...
						isa(ex.getr(prop), 'Exporter'), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter TEMPLATE does not work. Exporter.getr(''TEMPLATE'') should be a Exporter element.' ...
						)
					assert( ...
						isa(ex_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						'Exporter TEMPLATE does not work. Exporter_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(ex.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter TEMPLATE does not work. Exporter.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						ex.getr(prop).get('EL') == ex_template && ex.getr(prop).get('PROP') == prop && strcmp(ex.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter TEMPLATE does not work. Exporter.getr(' TAG ') should be a Callback to ex_template.' TAG '.'] ...
						)
					assert( ...
						isa(ex_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
						['Exporter TEMPLATE does not work. Exporter_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(ex.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter TEMPLATE does not work. Exporter.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(ex_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
					['Exporter TEMPLATE does not work. Exporter_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, Exporter.getPropDefault(Exporter.TEMPLATE), ...
		Exporter.ID, Exporter.getPropDefault(Exporter.ID), ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, Exporter.getPropDefault(Exporter.WAITBAR) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'exporter_to_be_erased.b2'];
	 
	Element.save(ex, filename)
	 
	ex_loaded = Element.load(filename);
	 
	assert( ...
		isequal(ex.copy(), ex_loaded), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.save(ex) and/or Exporter.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ex = Exporter( ...
		Exporter.ELCLASS, Exporter.getNoValue(), ...
		Exporter.NAME, Exporter.getNoValue(), ...
		Exporter.DESCRIPTION, Exporter.getNoValue(), ...
		Exporter.TEMPLATE, Exporter.getPropDefault(Exporter.TEMPLATE), ...
		Exporter.ID, Exporter.getPropDefault(Exporter.ID), ...
		Exporter.LABEL, Exporter.getPropDefault(Exporter.LABEL), ...
		Exporter.NOTES, Exporter.getPropDefault(Exporter.NOTES), ...
		Exporter.TOSTRING, Exporter.getNoValue(), ...
		Exporter.WAITBAR, Exporter.getPropDefault(Exporter.WAITBAR) ...
		);
	 
	[json, struct, el_list] = encodeJSON(ex);
	[ex_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(ex_dec ~= ex, ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		'Exporter.encodeJSON() or Exporter.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) Exporter.getPropFormat(prop), num2cell(Exporter.getProps())) == Format.HANDLE) && all(cellfun(@(prop) Exporter.getPropFormat(prop), num2cell(Exporter.getProps())) == Format.NET)
		assert(isequal(ex_dec, ex), ...
			[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
			'Exporter.encodeJSON() or Exporter.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':Exporter:' BRAPH2.FAIL_TEST], ...
		[' When testing Exporter no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

