%TEST_GUIFIG

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	categories = num2cell(Category.getCategories());
	gui = GUIFig();
	 
	% get('ELCLASS')
	if isa(GUIFig, 'ConcreteElement')
		assert(strcmp(GUIFig().get('ELCLASS'), 'GUIFig'), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig().get(''ELCLASS'') should return ''GUIFig''.')
	end
	 
	% getBuild()
	assert(GUIFig.getBuild() == 1 && GUIFig.getBuild() > 0, ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.getBuild() should return the GUIFig build number.')
	assert(gui.getBuild() == 1 && gui.getBuild() > 0 , ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.getBuild() should return the GUIFig build number.')
	assert(Element.getBuild(gui) == 1 && Element.getBuild(gui) > 0, ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(gui) should return the GUIFig build number.')
	assert(Element.getBuild('GUIFig') == 1 && Element.getBuild('GUIFig') > 0, ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''GUIFig'') should return the GUIFig build number.')
	 
	% getClass()
	assert(strcmp(GUIFig.getClass(), 'GUIFig'), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.getClass() should return ''GUIFig''.')
	assert(strcmp(gui.getClass(), 'GUIFig'), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.getClass() should return ''GUIFig''.')
	assert(strcmp(Element.getClass(gui), 'GUIFig'), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(gui) should return ''GUIFig''.')
	assert(strcmp(Element.getClass('GUIFig'), 'GUIFig'), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''GUIFig'') should return ''GUIFig''.')
	 
	% getSubclasses()
	assert(isequal(GUIFig.getSubclasses(), subclasses('GUIFig', [], [], true)), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.getSubclasses() should return the same result as subclasses(''GUIFig'', [], [], true).')
	assert(isequal(gui.getSubclasses(), subclasses('GUIFig', [], [], true)), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''GUIFig'', [], [], true).')
	assert(isequal(Element.getSubclasses(gui), subclasses('GUIFig', [], [], true)), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(gui) should return the same result as subclasses(''GUIFig'', [], [], true).')
	assert(isequal(Element.getSubclasses('GUIFig'), subclasses('GUIFig', [], [], true)), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''GUIFig'') should return the same result as subclasses(''GUIFig'', [], [], true).')
	 
	% getProps()
	assert(isempty(GUIFig.getProps()) || isequal(GUIFig.getProps(), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.getProps() should return a row vector [1:1:N].')
	assert(isempty(GUIFig.getProps()) || isequal(gui.getProps(), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.getProps() should return a row vector [1:1:N].')
	assert(isempty(GUIFig.getProps()) || isequal(Element.getProps(gui), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(gui) should return a row vector [1:1:N].')
	assert(isempty(GUIFig.getProps()) || isequal(Element.getProps('GUIFig'), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''GUIFig'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) GUIFig.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(GUIFig.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.getProps(category) does not work.')
	tmp = cellfun(@(category) gui.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(GUIFig.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(gui, category), categories, 'UniformOutput', false);
	assert(isempty(GUIFig.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(gui, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('GUIFig', category), categories, 'UniformOutput', false);
	assert(isempty(GUIFig.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GUIFig.getProps())), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''GUIFig'', category) does not work.')
	 
	% getPropNumber()
	assert(GUIFig.getPropNumber() == length(GUIFig.getProps()), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.getPropNumber() should return the number of properties.')
	assert(gui.getPropNumber() == length(GUIFig.getProps()), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(gui) == length(GUIFig.getProps()), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(gui) should return the number of properties.')
	assert(Element.getPropNumber('GUIFig') == length(GUIFig.getProps()), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''GUIFig'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) GUIFig.getPropNumber(category), categories)) == GUIFig.getPropNumber(), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) gui.getPropNumber(category), categories)) == GUIFig.getPropNumber(), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(gui, category), categories)) == GUIFig.getPropNumber(), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(gui, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('GUIFig', category), categories)) == GUIFig.getPropNumber(), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''GUIFig'', category) does not work.')
	 
	% existsProp(prop)
	assert(~GUIFig.existsProp(NaN), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.existsProp(prop) does not work.')
	assert(~gui.existsProp(NaN), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.existsProp(prop) does not work.')
	assert(~Element.existsProp(gui, NaN), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(gui, prop) does not work.')
	assert(~Element.existsProp('GUIFig', NaN), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''GUIFig'', prop) does not work.')
	 
	assert_with_error('GUIFig.existsProp(NaN)', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], gui)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], gui)
	assert_with_error('Element.existsProp(''GUIFig'', NaN)', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:GUIFig.getPropNumber()
		assert(GUIFig.existsProp(prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.existsProp(prop) does not work.')
		assert(gui.existsProp(prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.existsProp(prop) does not work.')
		assert(Element.existsProp(gui, prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(gui, prop) does not work.')
		assert(Element.existsProp('GUIFig', prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''GUIFig'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~GUIFig.existsTag(''), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.existsTag(tag) does not work.')
	assert(~gui.existsTag(''), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'gui.existsTag(tag) does not work.')
	assert(~Element.existsTag(gui, ''), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(gui, tag) does not work.')
	assert(~Element.existsTag('GUIFig', ''), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''GUIFig'', tag) does not work.')
	 
	assert_with_error('GUIFig.existsTag('''')', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], gui)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], gui)
	assert_with_error('Element.existsTag(''GUIFig'', '''')', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
		assert(GUIFig.existsTag(tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.existsTag(tag) does not work.')
		assert(gui.existsTag(tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.existsTag(tag) does not work.')
		assert(Element.existsTag(gui, tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(gui, tga) does not work.')
		assert(Element.existsTag('GUIFig', tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''GUIFig'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		assert(GUIFig.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropProp(prop) does not work.')
		assert(gui.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropProp(prop) does not work.')
		assert(Element.getPropProp(gui, prop) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(gui, prop) does not work.')
		assert(Element.getPropProp('GUIFig', prop) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''GUIFig'', prop) does not work.')
	 
		tag = gui.getPropTag(prop);
		assert(GUIFig.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropProp(tag) does not work.')
		assert(gui.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropProp(tag) does not work.')
		assert(Element.getPropProp(gui, tag) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(gui, tag) does not work.')
		assert(Element.getPropProp('GUIFig', prop) == prop, ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''GUIFig'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		assert(strcmp(GUIFig.getPropTag(prop), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropTag(prop) does not work.')
		assert(strcmp(gui.getPropTag(prop), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(gui, prop), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(gui, prop) does not work.')
		assert(strcmp(Element.getPropTag('GUIFig', prop), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''GUIFig'', prop) does not work.')
	 
		assert(strcmp(GUIFig.getPropTag(tag), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropTag(tag) does not work.')
		assert(strcmp(gui.getPropTag(tag), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(gui, tag), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(gui, tag) does not work.')
		assert(strcmp(Element.getPropTag('GUIFig', prop), tag), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''GUIFig'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		assert(Category.existsCategory(GUIFig.getPropCategory(prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(gui.getPropCategory(prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gui, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(gui, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gui, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''GUIFig'', prop) does not work.')
	 
		assert(Category.existsCategory(GUIFig.getPropCategory(tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(gui.getPropCategory(tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gui, tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(gui, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gui, tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''GUIFig'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		assert(Format.existsFormat(GUIFig.getPropFormat(prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(gui.getPropFormat(prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gui, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(gui, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gui, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''GUIFig'', prop) does not work.')
	 
		assert(Format.existsFormat(GUIFig.getPropFormat(tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(gui.getPropFormat(tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gui, tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(gui, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gui, tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''GUIFig'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		assert(ischar(GUIFig.getPropDescription(prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropDescription(prop) does not work.')
		assert(ischar(gui.getPropDescription(prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(gui, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(gui, prop) does not work.')
		assert(ischar(Element.getPropDescription(gui, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''GUIFig'', prop) does not work.')
	 
		assert(ischar(GUIFig.getPropDescription(tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.getPropDescription(tag) does not work.')
		assert(ischar(gui.getPropDescription(tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(gui, tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(gui, tag) does not work.')
		assert(ischar(Element.getPropDescription(gui, tag)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''GUIFig'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		settings = GUIFig.getPropSettings(prop);
		settings = gui.getPropSettings(prop);
		settings = Element.getPropSettings(gui, prop);
		settings = Element.getPropSettings('GUIFig', prop);
	 
		settings = GUIFig.getPropSettings(tag);
		settings = gui.getPropSettings(tag);
		settings = Element.getPropSettings(gui, tag);
		settings = Element.getPropSettings('GUIFig', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		default = GUIFig.getPropDefault(prop);
		default = gui.getPropDefault(prop);
		default = Element.getPropDefault(gui, prop);
		default = Element.getPropDefault('GUIFig', prop);
	 
		default = GUIFig.getPropDefault(tag);
		default = gui.getPropDefault(tag);
		default = Element.getPropDefault(gui, tag);
		default = Element.getPropDefault('GUIFig', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		conditioned_default = GUIFig.getPropDefaultConditioned(prop);
		conditioned_default = gui.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(gui, prop);
		conditioned_default = Element.getPropDefaultConditioned('GUIFig', prop);
	 
		conditioned_default = GUIFig.getPropDefaultConditioned(tag);
		conditioned_default = gui.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(gui, tag);
		conditioned_default = Element.getPropDefaultConditioned('GUIFig', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:GUIFig.getPropNumber()
		tag = gui.getPropTag(prop);
	 
		assert(~GUIFig.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.checkProp(prop, value) does not work.')
		assert(~gui.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(gui, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gui, prop, value) does not work.')
		assert(~Element.checkProp('GUIFig', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GUIFig'', prop, value) does not work.')
	 
		assert_with_error('GUIFig.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], prop, gui)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], prop, gui)
		assert_with_error('Element.checkProp(''GUIFig'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~GUIFig.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.checkProp(tag, value) does not work.')
		assert(~gui.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(gui, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gui, tag, value) does not work.')
		assert(~Element.checkProp('GUIFig', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GUIFig'', tag, value) does not work.')
	 
		assert_with_error('GUIFig.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], tag, gui)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], tag, gui)
		assert_with_error('Element.checkProp(''GUIFig'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GUIFig:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(GUIFig.checkProp(prop, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.checkProp(prop, <conditioned default value>) does not work.')
		assert(gui.checkProp(prop, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(gui, prop, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gui, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('GUIFig', prop, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GUIFig'', prop, <conditioned default value>) does not work.')
	 
		assert(GUIFig.checkProp(tag, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.checkProp(tag, <conditioned default value>) does not work.')
		assert(gui.checkProp(tag, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'gui.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(gui, tag, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gui, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('GUIFig', tag, Element.getPropDefaultConditioned(GUIFig, prop)), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GUIFig'', tag, <conditioned default value>) does not work.')
	 
	end
	 
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, GUIFig.getPropDefault(GUIFig.TEMPLATE), ...
		GUIFig.ID, GUIFig.getPropDefault(GUIFig.ID), ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, GUIFig.getPropDefault(GUIFig.WAITBAR), ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, GUIFig.getPropDefault(GUIFig.TITLE), ...
		GUIFig.POSITION, GUIFig.getPropDefault(GUIFig.POSITION), ...
		GUIFig.BKGCOLOR, GUIFig.getPropDefault(GUIFig.BKGCOLOR), ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, GUIFig.getPropDefault(GUIFig.MENUBAR), ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, GUIFig.getPropDefault(GUIFig.MENU_ABOUT), ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, GUIFig.getPropDefault(GUIFig.TOOLBAR), ...
		GUIFig.TOOL_ABOUT, GUIFig.getPropDefault(GUIFig.TOOL_ABOUT), ...
		GUIFig.CLOSEREQ, GUIFig.getPropDefault(GUIFig.CLOSEREQ), ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, GUIFig.getPropDefault(GUIFig.PF), ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, GUIFig.getPropDefault(GUIFig.GUI_LAYOUT), ...
		GUIFig.GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.GUI_SETTINGS), ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, GUIFig.getPropDefault(GUIFig.MENU_FILE), ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, GUIFig.getPropDefault(GUIFig.MENU_PRINT), ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.MENU_GUI_SETTINGS), ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, GUIFig.getPropDefault(GUIFig.MENU_PERSONALIZE), ...
		GUIFig.TOOL_FILE, GUIFig.getPropDefault(GUIFig.TOOL_FILE), ...
		GUIFig.TOOL_PRINT, GUIFig.getPropDefault(GUIFig.TOOL_PRINT), ...
		GUIFig.TOOL_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.TOOL_GUI_SETTINGS) ...
		);
	 
	for prop = 1:1:GUIFig.getPropNumber()
	 
		% excluded props
		if any(prop == [GUIFig.H GUIFig.PF GUIFig.GUI_LAYOUT GUIFig.GUI_SETTINGS GUIFig.H_MENUBAR GUIFig.H_MENU_ABOUT GUIFig.H_TOOLBAR GUIFig.H_TOOLS])
			continue
		end
	 
		TAG = upper(GUIFig.getPropTag(prop));
		switch GUIFig.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					gui.getr(prop) == GUIFig.getNoValue(), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['Being a ' GUIFig.getCategoryName(GUIFig.getPropCategory(prop)) ', GUIFig.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GUIFig.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					gui.getr(TAG) == GUIFig.getNoValue(), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['Being a ' GUIFig.getCategoryName(GUIFig.getPropCategory(prop)) ', GUIFig.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GUIFig.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(gui.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(gui.getPropSettings(prop))
					assert( ...
						gui.checkFormat(gui.getPropFormat(prop), gui.get(prop)), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						gui.checkFormat(gui.getPropFormat(prop), gui.get(prop), gui.getPropSettings(prop)), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					gui.getr(prop) == GUIFig.getNoValue(), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['Being a ' GUIFig.getCategoryName(GUIFig.getPropCategory(prop)) ', GUIFig.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GUIFig.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					gui.getr(TAG) == GUIFig.getNoValue(), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['Being a ' GUIFig.getCategoryName(GUIFig.getPropCategory(prop)) ', GUIFig.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GUIFig.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':GUIFig']);
				assert( ...
					~isa(gui.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(gui.getPropSettings(prop))
					assert( ...
						gui.checkFormat(gui.getPropFormat(prop), gui.get(prop)), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						gui.checkFormat(gui.getPropFormat(prop), gui.get(prop), gui.getPropSettings(prop)), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(gui.getr(prop), GUIFig.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by GUIFig.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in GUIFig.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(gui.getr(TAG), GUIFig.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' TAG ') must be inizialized to its default value ' ...
					'given by GUIFig.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in GUIFig.getr(' TAG ').'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, GUIFig.getPropDefault(GUIFig.TEMPLATE), ...
		GUIFig.ID, GUIFig.getPropDefault(GUIFig.ID), ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, GUIFig.getPropDefault(GUIFig.WAITBAR), ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, GUIFig.getPropDefault(GUIFig.TITLE), ...
		GUIFig.POSITION, GUIFig.getPropDefault(GUIFig.POSITION), ...
		GUIFig.BKGCOLOR, GUIFig.getPropDefault(GUIFig.BKGCOLOR), ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, GUIFig.getPropDefault(GUIFig.MENUBAR), ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, GUIFig.getPropDefault(GUIFig.MENU_ABOUT), ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, GUIFig.getPropDefault(GUIFig.TOOLBAR), ...
		GUIFig.TOOL_ABOUT, GUIFig.getPropDefault(GUIFig.TOOL_ABOUT), ...
		GUIFig.CLOSEREQ, GUIFig.getPropDefault(GUIFig.CLOSEREQ), ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, GUIFig.getPropDefault(GUIFig.PF), ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, GUIFig.getPropDefault(GUIFig.GUI_LAYOUT), ...
		GUIFig.GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.GUI_SETTINGS), ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, GUIFig.getPropDefault(GUIFig.MENU_FILE), ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, GUIFig.getPropDefault(GUIFig.MENU_PRINT), ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.MENU_GUI_SETTINGS), ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, GUIFig.getPropDefault(GUIFig.MENU_PERSONALIZE), ...
		GUIFig.TOOL_FILE, GUIFig.getPropDefault(GUIFig.TOOL_FILE), ...
		GUIFig.TOOL_PRINT, GUIFig.getPropDefault(GUIFig.TOOL_PRINT), ...
		GUIFig.TOOL_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.TOOL_GUI_SETTINGS) ...
		);
	 
	for prop = 1:1:GUIFig.getPropNumber()
	 
		% excluded props
		if any(prop == [GUIFig.H GUIFig.PF GUIFig.GUI_LAYOUT GUIFig.GUI_SETTINGS GUIFig.H_MENUBAR GUIFig.H_MENU_ABOUT GUIFig.H_TOOLBAR GUIFig.H_TOOLS])
			continue
		end
	 
		TAG = upper(GUIFig.getPropTag(prop));
		switch GUIFig.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(gui.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(gui.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(gui.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(gui.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					gui.checkFormat(gui.getPropFormat(prop), gui.getr(prop),gui.getPropSettings(prop)), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':GUIFig']);
				assert( ...
					~isa(gui.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(gui.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':GUIFig']);
	% 			assert( ...
	% 				~isa(gui.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
	% 				['GUIFig.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(gui.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
	% 				['GUIFig.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				gui.checkFormat(gui.getPropFormat(prop), gui.getr(prop),gui.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
	% 				['GUIFig.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':GUIFig']);
				assert( ...
					~isa(gui.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(gui.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(gui.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(gui.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					gui.checkFormat(gui.getPropFormat(prop), gui.getr(prop),gui.getPropSettings(prop)), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if gui.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:GUIFig');
					delete(ancestor(gui.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(GUIFig.getProps(Category.RESULT))
		for prop = 1:1:GUIFig.getPropNumber()
	 
			% excluded props
			if any(prop == [GUIFig.H GUIFig.PF GUIFig.GUI_LAYOUT GUIFig.GUI_SETTINGS GUIFig.H_MENUBAR GUIFig.H_MENU_ABOUT GUIFig.H_TOOLBAR GUIFig.H_TOOLS])
				continue
			end
	 
			switch GUIFig.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						gui.isLocked(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~gui.isLocked(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui = GUIFig();
	 
	for prop = 1:1:GUIFig.getPropNumber()
		TAG = upper(GUIFig.getPropTag(prop));
		assert( ...
			~gui.isLocked(prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			['GUIFig.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~gui.isLocked(TAG), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			['GUIFig.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	gui.lock()
	 
	for prop = 1:1:GUIFig.getPropNumber()
		switch GUIFig.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					gui.isLocked(prop), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~gui.isLocked(prop), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui = GUIFig();
	 
	warning_backup = warning('off', 'BRAPH2:GUIFig');
	for prop = 1:1:GUIFig.getPropNumber()
		gui.lock(prop)
		switch GUIFig.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					gui.isLocked(prop), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~gui.isLocked(prop), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui = GUIFig();
	 
	for prop = 1:1:GUIFig.getPropNumber()
		TAG = upper(GUIFig.getPropTag(prop));
		assert( ...
			gui.isChecked(prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			['GUIFig.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			gui.isChecked(TAG), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			['GUIFig.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	gui.unchecked()
	 
	for prop = 1:1:GUIFig.getPropNumber()
		assert( ...
			~gui.isChecked(prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			['GUIFig.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	gui.checked()
	 
	for prop = 1:1:GUIFig.getPropNumber()
		assert( ...
			gui.isChecked(prop), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			['GUIFig.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	% basic GUIFig
	gui_0 = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, GUIFig.getPropDefault(GUIFig.TEMPLATE), ...
		GUIFig.ID, GUIFig.getPropDefault(GUIFig.ID), ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, GUIFig.getPropDefault(GUIFig.WAITBAR), ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, GUIFig.getPropDefault(GUIFig.TITLE), ...
		GUIFig.POSITION, GUIFig.getPropDefault(GUIFig.POSITION), ...
		GUIFig.BKGCOLOR, GUIFig.getPropDefault(GUIFig.BKGCOLOR), ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, GUIFig.getPropDefault(GUIFig.MENUBAR), ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, GUIFig.getPropDefault(GUIFig.MENU_ABOUT), ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, GUIFig.getPropDefault(GUIFig.TOOLBAR), ...
		GUIFig.TOOL_ABOUT, GUIFig.getPropDefault(GUIFig.TOOL_ABOUT), ...
		GUIFig.CLOSEREQ, GUIFig.getPropDefault(GUIFig.CLOSEREQ), ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, GUIFig.getPropDefault(GUIFig.PF), ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, GUIFig.getPropDefault(GUIFig.GUI_LAYOUT), ...
		GUIFig.GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.GUI_SETTINGS), ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, GUIFig.getPropDefault(GUIFig.MENU_FILE), ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, GUIFig.getPropDefault(GUIFig.MENU_PRINT), ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.MENU_GUI_SETTINGS), ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, GUIFig.getPropDefault(GUIFig.MENU_PERSONALIZE), ...
		GUIFig.TOOL_FILE, GUIFig.getPropDefault(GUIFig.TOOL_FILE), ...
		GUIFig.TOOL_PRINT, GUIFig.getPropDefault(GUIFig.TOOL_PRINT), ...
		GUIFig.TOOL_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.TOOL_GUI_SETTINGS) ...
		);
	 
	% GUIFig with 1st callbacks
	gui_1 = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, gui_0.getCallback(4), ..., ...
		GUIFig.ID, gui_0.getCallback(5), ..., ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, gui_0.getCallback(9), ..., ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, gui_0.getCallback(12), ..., ...
		GUIFig.POSITION, gui_0.getCallback(13), ..., ...
		GUIFig.BKGCOLOR, gui_0.getCallback(14), ..., ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, gui_0.getCallback(16), ..., ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, gui_0.getCallback(18), ..., ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, gui_0.getCallback(21), ..., ...
		GUIFig.TOOL_ABOUT, gui_0.getCallback(22), ..., ...
		GUIFig.CLOSEREQ, gui_0.getCallback(23), ..., ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, gui_0.getCallback(30), ..., ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, gui_0.getCallback(33), ..., ...
		GUIFig.GUI_SETTINGS, gui_0.getCallback(34), ..., ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, gui_0.getCallback(36), ..., ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, gui_0.getCallback(38), ..., ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, gui_0.getCallback(40), ..., ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, gui_0.getCallback(42), ..., ...
		GUIFig.TOOL_FILE, gui_0.getCallback(43), ..., ...
		GUIFig.TOOL_PRINT, gui_0.getCallback(44), ..., ...
		GUIFig.TOOL_GUI_SETTINGS, gui_0.getCallback(45) ... ...
		);
	 
	prop_number = GUIFig.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GUIFig.getPropTag(prop));
		switch GUIFig.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gui_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gui_1.get(prop), gui_0.get(prop)) && ~isa(gui_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gui_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% GUIFig with 2nd callbacks
	gui_2 = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, gui_1.getCallback(4), ..., ...
		GUIFig.ID, gui_1.getCallback(5), ..., ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, gui_1.getCallback(9), ..., ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, gui_1.getCallback(12), ..., ...
		GUIFig.POSITION, gui_1.getCallback(13), ..., ...
		GUIFig.BKGCOLOR, gui_1.getCallback(14), ..., ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, gui_1.getCallback(16), ..., ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, gui_1.getCallback(18), ..., ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, gui_1.getCallback(21), ..., ...
		GUIFig.TOOL_ABOUT, gui_1.getCallback(22), ..., ...
		GUIFig.CLOSEREQ, gui_1.getCallback(23), ..., ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, gui_1.getCallback(30), ..., ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, gui_1.getCallback(33), ..., ...
		GUIFig.GUI_SETTINGS, gui_1.getCallback(34), ..., ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, gui_1.getCallback(36), ..., ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, gui_1.getCallback(38), ..., ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, gui_1.getCallback(40), ..., ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, gui_1.getCallback(42), ..., ...
		GUIFig.TOOL_FILE, gui_1.getCallback(43), ..., ...
		GUIFig.TOOL_PRINT, gui_1.getCallback(44), ..., ...
		GUIFig.TOOL_GUI_SETTINGS, gui_1.getCallback(45) ... ...
		);
	 
	prop_number = GUIFig.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GUIFig.getPropTag(prop));
		switch GUIFig.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gui_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gui_2.get(prop), gui_0.get(prop)) && ~isa(gui_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gui_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% GUIFig with 3rd callbacks
	gui_3 = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, gui_2.getCallback(4), ..., ...
		GUIFig.ID, gui_2.getCallback(5), ..., ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, gui_2.getCallback(9), ..., ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, gui_2.getCallback(12), ..., ...
		GUIFig.POSITION, gui_2.getCallback(13), ..., ...
		GUIFig.BKGCOLOR, gui_2.getCallback(14), ..., ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, gui_2.getCallback(16), ..., ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, gui_2.getCallback(18), ..., ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, gui_2.getCallback(21), ..., ...
		GUIFig.TOOL_ABOUT, gui_2.getCallback(22), ..., ...
		GUIFig.CLOSEREQ, gui_2.getCallback(23), ..., ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, gui_2.getCallback(30), ..., ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, gui_2.getCallback(33), ..., ...
		GUIFig.GUI_SETTINGS, gui_2.getCallback(34), ..., ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, gui_2.getCallback(36), ..., ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, gui_2.getCallback(38), ..., ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, gui_2.getCallback(40), ..., ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, gui_2.getCallback(42), ..., ...
		GUIFig.TOOL_FILE, gui_2.getCallback(43), ..., ...
		GUIFig.TOOL_PRINT, gui_2.getCallback(44), ..., ...
		GUIFig.TOOL_GUI_SETTINGS, gui_2.getCallback(45) ... ...
		);
	 
	prop_number = GUIFig.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GUIFig.getPropTag(prop));
		switch GUIFig.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gui_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gui_3.get(prop), gui_0.get(prop)) && ~isa(gui_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gui_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	% copy empty element
	gui = GUIFig();
	 
	gui_copy = gui.copy();
	 
	assert(gui_copy ~= gui, ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(gui_copy, gui), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:GUIFig.getPropNumber()
		value = gui.getr(prop);
		value_copy = gui_copy.getr(prop);
		switch GUIFig.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					'GUIFig.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
							'GUIFig.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
							'GUIFig.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					gui_copy.isLocked(prop) == gui.isLocked(prop), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					'GUIFig.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					gui_copy.isChecked(prop) == gui.isChecked(prop), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					'GUIFig.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					gui_copy.getPropSeed(prop) == gui.getPropSeed(prop), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					'GUIFig.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	gui = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, GUIFig.getPropDefault(GUIFig.TEMPLATE), ...
		GUIFig.ID, GUIFig.getPropDefault(GUIFig.ID), ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, GUIFig.getPropDefault(GUIFig.WAITBAR), ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, GUIFig.getPropDefault(GUIFig.TITLE), ...
		GUIFig.POSITION, GUIFig.getPropDefault(GUIFig.POSITION), ...
		GUIFig.BKGCOLOR, GUIFig.getPropDefault(GUIFig.BKGCOLOR), ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, GUIFig.getPropDefault(GUIFig.MENUBAR), ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, GUIFig.getPropDefault(GUIFig.MENU_ABOUT), ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, GUIFig.getPropDefault(GUIFig.TOOLBAR), ...
		GUIFig.TOOL_ABOUT, GUIFig.getPropDefault(GUIFig.TOOL_ABOUT), ...
		GUIFig.CLOSEREQ, GUIFig.getPropDefault(GUIFig.CLOSEREQ), ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, GUIFig.getPropDefault(GUIFig.PF), ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, GUIFig.getPropDefault(GUIFig.GUI_LAYOUT), ...
		GUIFig.GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.GUI_SETTINGS), ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, GUIFig.getPropDefault(GUIFig.MENU_FILE), ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, GUIFig.getPropDefault(GUIFig.MENU_PRINT), ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.MENU_GUI_SETTINGS), ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, GUIFig.getPropDefault(GUIFig.MENU_PERSONALIZE), ...
		GUIFig.TOOL_FILE, GUIFig.getPropDefault(GUIFig.TOOL_FILE), ...
		GUIFig.TOOL_PRINT, GUIFig.getPropDefault(GUIFig.TOOL_PRINT), ...
		GUIFig.TOOL_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.TOOL_GUI_SETTINGS) ...
		);
	 
	for prop = 1:1:GUIFig.getPropNumber()
		if GUIFig.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':GUIFig']);
			% gui.memorize(prop);
			% warning(warning_backup)
		elseif GUIFig.getPropCategory(prop) == Category.EVANESCENT && gui.getPropFormat(prop) == Format.HANDLE
			gui.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:GUIFig');
			delete(ancestor(gui.get(prop), 'figure'))
			warning(warning_backup)
		else
			gui.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	gui_copy = gui.copy();
	 
	for prop = 1:1:GUIFig.getPropNumber()
		value = gui.getr(prop);
		value_copy = gui_copy.getr(prop);
		switch GUIFig.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					'GUIFig.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
							'GUIFig.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
							'GUIFig.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						gui_copy.isLocked(prop) == gui.isLocked(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gui_copy.isChecked(prop) == gui.isChecked(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gui_copy.getPropSeed(prop) == gui.getPropSeed(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	gui_0 = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, GUIFig.getPropDefault(GUIFig.TEMPLATE), ...
		GUIFig.ID, GUIFig.getPropDefault(GUIFig.ID), ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, GUIFig.getPropDefault(GUIFig.WAITBAR), ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, GUIFig.getPropDefault(GUIFig.TITLE), ...
		GUIFig.POSITION, GUIFig.getPropDefault(GUIFig.POSITION), ...
		GUIFig.BKGCOLOR, GUIFig.getPropDefault(GUIFig.BKGCOLOR), ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, GUIFig.getPropDefault(GUIFig.MENUBAR), ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, GUIFig.getPropDefault(GUIFig.MENU_ABOUT), ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, GUIFig.getPropDefault(GUIFig.TOOLBAR), ...
		GUIFig.TOOL_ABOUT, GUIFig.getPropDefault(GUIFig.TOOL_ABOUT), ...
		GUIFig.CLOSEREQ, GUIFig.getPropDefault(GUIFig.CLOSEREQ), ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, GUIFig.getPropDefault(GUIFig.PF), ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, GUIFig.getPropDefault(GUIFig.GUI_LAYOUT), ...
		GUIFig.GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.GUI_SETTINGS), ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, GUIFig.getPropDefault(GUIFig.MENU_FILE), ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, GUIFig.getPropDefault(GUIFig.MENU_PRINT), ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.MENU_GUI_SETTINGS), ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, GUIFig.getPropDefault(GUIFig.MENU_PERSONALIZE), ...
		GUIFig.TOOL_FILE, GUIFig.getPropDefault(GUIFig.TOOL_FILE), ...
		GUIFig.TOOL_PRINT, GUIFig.getPropDefault(GUIFig.TOOL_PRINT), ...
		GUIFig.TOOL_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.TOOL_GUI_SETTINGS) ...
		);
	 
	gui = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, gui_0.getCallback(4), ..., ...
		GUIFig.ID, gui_0.getCallback(5), ..., ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, gui_0.getCallback(9), ..., ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, gui_0.getCallback(12), ..., ...
		GUIFig.POSITION, gui_0.getCallback(13), ..., ...
		GUIFig.BKGCOLOR, gui_0.getCallback(14), ..., ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, gui_0.getCallback(16), ..., ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, gui_0.getCallback(18), ..., ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, gui_0.getCallback(21), ..., ...
		GUIFig.TOOL_ABOUT, gui_0.getCallback(22), ..., ...
		GUIFig.CLOSEREQ, gui_0.getCallback(23), ..., ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, gui_0.getCallback(30), ..., ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, gui_0.getCallback(33), ..., ...
		GUIFig.GUI_SETTINGS, gui_0.getCallback(34), ..., ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, gui_0.getCallback(36), ..., ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, gui_0.getCallback(38), ..., ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, gui_0.getCallback(40), ..., ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, gui_0.getCallback(42), ..., ...
		GUIFig.TOOL_FILE, gui_0.getCallback(43), ..., ...
		GUIFig.TOOL_PRINT, gui_0.getCallback(44), ..., ...
		GUIFig.TOOL_GUI_SETTINGS, gui_0.getCallback(45) ... ...
		);
	 
	gui_copy = gui.copy();
	gui_0_copy = gui_copy.getr('ID').get('EL');
	 
	for prop = 1:1:GUIFig.getPropNumber()
		value = gui.getr(prop);
		value_copy = gui_copy.getr(prop);
		switch GUIFig.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					'GUIFig.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
							'GUIFig.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
							'GUIFig.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == gui_0.getCallback(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The callback should be obtained from GUIFig.getCallback().' ...
						)
					assert( ...
						value_copy == gui_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The callback should be obtained from GUIFig.getCallback().' ...
						)
				end
	 
					assert( ...
						gui_copy.isLocked(prop) == gui.isLocked(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gui_copy.isChecked(prop) == gui.isChecked(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gui_copy.getPropSeed(prop) == gui.getPropSeed(prop), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui_template = GUIFig();
	gui = GUIFig('TEMPLATE', gui_template);
	 
	for prop = 1:1:GUIFig.getPropNumber()
	 
		% excluded props
		if any(prop == [GUIFig.H GUIFig.PF GUIFig.GUI_LAYOUT GUIFig.GUI_SETTINGS GUIFig.H_MENUBAR GUIFig.H_MENU_ABOUT GUIFig.H_TOOLBAR GUIFig.H_TOOLS])
			continue
		end
	 
		TAG = upper(GUIFig.getPropTag(prop));
		switch GUIFig.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == GUIFig.TEMPLATE
					assert( ...
						isa(gui.getr(prop), 'GUIFig'), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig TEMPLATE does not work. GUIFig.getr(''TEMPLATE'') should be a GUIFig element.' ...
						)
					assert( ...
						isa(gui_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						'GUIFig TEMPLATE does not work. GUIFig_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(gui.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig TEMPLATE does not work. GUIFig.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						gui.getr(prop).get('EL') == gui_template && gui.getr(prop).get('PROP') == prop && strcmp(gui.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig TEMPLATE does not work. GUIFig.getr(' TAG ') should be a Callback to gui_template.' TAG '.'] ...
						)
					assert( ...
						isa(gui_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
						['GUIFig TEMPLATE does not work. GUIFig_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(gui.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig TEMPLATE does not work. GUIFig.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(gui_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
					['GUIFig TEMPLATE does not work. GUIFig_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, GUIFig.getPropDefault(GUIFig.TEMPLATE), ...
		GUIFig.ID, GUIFig.getPropDefault(GUIFig.ID), ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, GUIFig.getPropDefault(GUIFig.WAITBAR), ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, GUIFig.getPropDefault(GUIFig.TITLE), ...
		GUIFig.POSITION, GUIFig.getPropDefault(GUIFig.POSITION), ...
		GUIFig.BKGCOLOR, GUIFig.getPropDefault(GUIFig.BKGCOLOR), ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, GUIFig.getPropDefault(GUIFig.MENUBAR), ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, GUIFig.getPropDefault(GUIFig.MENU_ABOUT), ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, GUIFig.getPropDefault(GUIFig.TOOLBAR), ...
		GUIFig.TOOL_ABOUT, GUIFig.getPropDefault(GUIFig.TOOL_ABOUT), ...
		GUIFig.CLOSEREQ, GUIFig.getPropDefault(GUIFig.CLOSEREQ), ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, GUIFig.getPropDefault(GUIFig.PF), ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, GUIFig.getPropDefault(GUIFig.GUI_LAYOUT), ...
		GUIFig.GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.GUI_SETTINGS), ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, GUIFig.getPropDefault(GUIFig.MENU_FILE), ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, GUIFig.getPropDefault(GUIFig.MENU_PRINT), ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.MENU_GUI_SETTINGS), ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, GUIFig.getPropDefault(GUIFig.MENU_PERSONALIZE), ...
		GUIFig.TOOL_FILE, GUIFig.getPropDefault(GUIFig.TOOL_FILE), ...
		GUIFig.TOOL_PRINT, GUIFig.getPropDefault(GUIFig.TOOL_PRINT), ...
		GUIFig.TOOL_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.TOOL_GUI_SETTINGS) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'guifig_to_be_erased.b2'];
	 
	Element.save(gui, filename)
	 
	gui_loaded = Element.load(filename);
	 
	assert( ...
		isequal(gui.copy(), gui_loaded), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.save(gui) and/or GUIFig.load() do not work.' ...
		)
	 
	delete(filename)
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	gui = GUIFig( ...
		GUIFig.ELCLASS, GUIFig.getNoValue(), ...
		GUIFig.NAME, GUIFig.getNoValue(), ...
		GUIFig.DESCRIPTION, GUIFig.getNoValue(), ...
		GUIFig.TEMPLATE, GUIFig.getPropDefault(GUIFig.TEMPLATE), ...
		GUIFig.ID, GUIFig.getPropDefault(GUIFig.ID), ...
		GUIFig.LABEL, GUIFig.getPropDefault(GUIFig.LABEL), ...
		GUIFig.NOTES, GUIFig.getPropDefault(GUIFig.NOTES), ...
		GUIFig.TOSTRING, GUIFig.getNoValue(), ...
		GUIFig.WAITBAR, GUIFig.getPropDefault(GUIFig.WAITBAR), ...
		GUIFig.DRAW, GUIFig.getNoValue(), ...
		GUIFig.DRAWN, GUIFig.getNoValue(), ...
		GUIFig.TITLE, GUIFig.getPropDefault(GUIFig.TITLE), ...
		GUIFig.POSITION, GUIFig.getPropDefault(GUIFig.POSITION), ...
		GUIFig.BKGCOLOR, GUIFig.getPropDefault(GUIFig.BKGCOLOR), ...
		GUIFig.H_MENUBAR, GUIFig.getNoValue(), ...
		GUIFig.MENUBAR, GUIFig.getPropDefault(GUIFig.MENUBAR), ...
		GUIFig.H_MENU_ABOUT, GUIFig.getNoValue(), ...
		GUIFig.MENU_ABOUT, GUIFig.getPropDefault(GUIFig.MENU_ABOUT), ...
		GUIFig.H_TOOLBAR, GUIFig.getNoValue(), ...
		GUIFig.H_TOOLS, GUIFig.getNoValue(), ...
		GUIFig.TOOLBAR, GUIFig.getPropDefault(GUIFig.TOOLBAR), ...
		GUIFig.TOOL_ABOUT, GUIFig.getPropDefault(GUIFig.TOOL_ABOUT), ...
		GUIFig.CLOSEREQ, GUIFig.getPropDefault(GUIFig.CLOSEREQ), ...
		GUIFig.H, GUIFig.getNoValue(), ...
		GUIFig.RESIZE, GUIFig.getNoValue(), ...
		GUIFig.SHOW, GUIFig.getNoValue(), ...
		GUIFig.HIDE, GUIFig.getNoValue(), ...
		GUIFig.DELETE, GUIFig.getNoValue(), ...
		GUIFig.CLOSE, GUIFig.getNoValue(), ...
		GUIFig.PF, GUIFig.getPropDefault(GUIFig.PF), ...
		GUIFig.FILE, GUIFig.getPropDefault(GUIFig.FILE), ...
		GUIFig.TEXT_FILE, GUIFig.getNoValue(), ...
		GUIFig.GUI_LAYOUT, GUIFig.getPropDefault(GUIFig.GUI_LAYOUT), ...
		GUIFig.GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.GUI_SETTINGS), ...
		GUIFig.H_MENU_FILE, GUIFig.getNoValue(), ...
		GUIFig.MENU_FILE, GUIFig.getPropDefault(GUIFig.MENU_FILE), ...
		GUIFig.H_MENU_PRINT, GUIFig.getNoValue(), ...
		GUIFig.MENU_PRINT, GUIFig.getPropDefault(GUIFig.MENU_PRINT), ...
		GUIFig.H_MENU_GUI_SETTINGS, GUIFig.getNoValue(), ...
		GUIFig.MENU_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.MENU_GUI_SETTINGS), ...
		GUIFig.H_MENU_PERSONALIZE, GUIFig.getNoValue(), ...
		GUIFig.MENU_PERSONALIZE, GUIFig.getPropDefault(GUIFig.MENU_PERSONALIZE), ...
		GUIFig.TOOL_FILE, GUIFig.getPropDefault(GUIFig.TOOL_FILE), ...
		GUIFig.TOOL_PRINT, GUIFig.getPropDefault(GUIFig.TOOL_PRINT), ...
		GUIFig.TOOL_GUI_SETTINGS, GUIFig.getPropDefault(GUIFig.TOOL_GUI_SETTINGS) ...
		);
	 
	[json, struct, el_list] = encodeJSON(gui);
	[gui_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(gui_dec ~= gui, ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		'GUIFig.encodeJSON() or GUIFig.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) GUIFig.getPropFormat(prop), num2cell(GUIFig.getProps())) == Format.HANDLE) && all(cellfun(@(prop) GUIFig.getPropFormat(prop), num2cell(GUIFig.getProps())) == Format.NET)
		assert(isequal(gui_dec, gui), ...
			[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
			'GUIFig.encodeJSON() or GUIFig.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 12: Remove Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	warning('off', [BRAPH2.STR ':GUIFig'])
	assert(length(findall(0, 'type', 'figure')) == 17)
	delete(findall(0, 'type', 'figure'))
	warning('on', [BRAPH2.STR ':GUIFig'])
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 13: Basics
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	pf = PanelFig();
	gui = GUIFig('PF', pf, 'POSITION', [0 .5 .1 .5], 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	f = gui.get('H');
	assert(check_graphics(f, 'figure'))
	
	gui_layout = gui.memorize('GUI_LAYOUT');
	gui_layout.get('DRAW')
	gui_layout.get('SHOW')
	f_layout = gui_layout.get('H');
	assert(check_graphics(f_layout, 'figure'))
	
	gui_settings = gui.memorize('GUI_SETTINGS');
	gui_settings.get('DRAW')
	gui_settings.get('SHOW')
	f_settings = gui_settings.get('H');
	assert(check_graphics(f_settings, 'figure'))
	
	% All these tests only work using PanelPropItem instead of SettingsPositionPP
	%
	% gui_item_1 = gui_settings.get('PE').get('PR_DICT').get('IT', 2).memorize('GUI_ITEM');
	% gui_item_1.get('DRAW')
	% gui_item_1.get('SHOW')
	% 
	% gui_item_2 = gui_item_1.get('PE').get('PR_DICT').get('IT', 3).memorize('GUI_ITEM');
	% gui_item_2.get('DRAW')
	% gui_item_2.get('SHOW')
	% 
	% gui_item_3 = gui_item_2.get('PE').get('PR_DICT').get('IT', 3).memorize('GUI_ITEM');
	% gui_item_3.get('DRAW')
	% gui_item_3.get('SHOW')
	% 
	% gui_item_4 = gui_item_3.get('PE').get('PR_DICT').get('IT', 3).memorize('GUI_ITEM');
	% gui_item_4.get('DRAW')
	% gui_item_4.get('SHOW')
	% 
	% gui_item_5 = gui_item_4.get('PE').get('PR_DICT').get('IT', 3).memorize('GUI_ITEM');
	% gui_item_5.get('DRAW')
	% gui_item_5.get('SHOW')
	
	gui.get('CLOSE')
	
	gui.get('HIDE')
	gui.get('CLOSE')
	assert(isa(gui.getr('H'), 'NoValue'))
	assert(~check_graphics(f, 'figure'))
	assert(isa(gui_layout.getr('H'), 'NoValue'))
	assert(~check_graphics(f_layout, 'figure'))
	assert(isa(gui_settings.getr('H'), 'NoValue'))
	assert(~check_graphics(f_settings, 'figure'))
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':GUIFig:' BRAPH2.FAIL_TEST], ...
		[' When testing GUIFig no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':GUIFig'])
	
	delete(findall(0, 'type', 'figure'))
	
	warning('on', [BRAPH2.STR ':GUIFig'])
end

