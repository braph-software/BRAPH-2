%TEST_PIPELINECODE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	pc = PipelineCode();
	 
	% get('ELCLASS')
	if isa(PipelineCode, 'ConcreteElement')
		assert(strcmp(PipelineCode().get('ELCLASS'), 'PipelineCode'), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode().get(''ELCLASS'') should return ''PipelineCode''.')
	end
	 
	% getBuild()
	assert(PipelineCode.getBuild() == 1 && PipelineCode.getBuild() > 0, ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.getBuild() should return the PipelineCode build number.')
	assert(pc.getBuild() == 1 && pc.getBuild() > 0 , ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.getBuild() should return the PipelineCode build number.')
	assert(Element.getBuild(pc) == 1 && Element.getBuild(pc) > 0, ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(pc) should return the PipelineCode build number.')
	assert(Element.getBuild('PipelineCode') == 1 && Element.getBuild('PipelineCode') > 0, ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''PipelineCode'') should return the PipelineCode build number.')
	 
	% getClass()
	assert(strcmp(PipelineCode.getClass(), 'PipelineCode'), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.getClass() should return ''PipelineCode''.')
	assert(strcmp(pc.getClass(), 'PipelineCode'), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.getClass() should return ''PipelineCode''.')
	assert(strcmp(Element.getClass(pc), 'PipelineCode'), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(pc) should return ''PipelineCode''.')
	assert(strcmp(Element.getClass('PipelineCode'), 'PipelineCode'), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''PipelineCode'') should return ''PipelineCode''.')
	 
	% getSubclasses()
	assert(isequal(PipelineCode.getSubclasses(), subclasses('PipelineCode', [], [], true)), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.getSubclasses() should return the same result as subclasses(''PipelineCode'', [], [], true).')
	assert(isequal(pc.getSubclasses(), subclasses('PipelineCode', [], [], true)), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''PipelineCode'', [], [], true).')
	assert(isequal(Element.getSubclasses(pc), subclasses('PipelineCode', [], [], true)), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(pc) should return the same result as subclasses(''PipelineCode'', [], [], true).')
	assert(isequal(Element.getSubclasses('PipelineCode'), subclasses('PipelineCode', [], [], true)), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''PipelineCode'') should return the same result as subclasses(''PipelineCode'', [], [], true).')
	 
	% getProps()
	assert(isempty(PipelineCode.getProps()) || isequal(PipelineCode.getProps(), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.getProps() should return a row vector [1:1:N].')
	assert(isempty(PipelineCode.getProps()) || isequal(pc.getProps(), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.getProps() should return a row vector [1:1:N].')
	assert(isempty(PipelineCode.getProps()) || isequal(Element.getProps(pc), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pc) should return a row vector [1:1:N].')
	assert(isempty(PipelineCode.getProps()) || isequal(Element.getProps('PipelineCode'), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PipelineCode'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) PipelineCode.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PipelineCode.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.getProps(category) does not work.')
	tmp = cellfun(@(category) pc.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PipelineCode.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(pc, category), categories, 'UniformOutput', false);
	assert(isempty(PipelineCode.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pc, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('PipelineCode', category), categories, 'UniformOutput', false);
	assert(isempty(PipelineCode.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineCode.getProps())), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PipelineCode'', category) does not work.')
	 
	% getPropNumber()
	assert(PipelineCode.getPropNumber() == length(PipelineCode.getProps()), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.getPropNumber() should return the number of properties.')
	assert(pc.getPropNumber() == length(PipelineCode.getProps()), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(pc) == length(PipelineCode.getProps()), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pc) should return the number of properties.')
	assert(Element.getPropNumber('PipelineCode') == length(PipelineCode.getProps()), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PipelineCode'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) PipelineCode.getPropNumber(category), categories)) == PipelineCode.getPropNumber(), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) pc.getPropNumber(category), categories)) == PipelineCode.getPropNumber(), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(pc, category), categories)) == PipelineCode.getPropNumber(), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pc, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('PipelineCode', category), categories)) == PipelineCode.getPropNumber(), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PipelineCode'', category) does not work.')
	 
	% existsProp(prop)
	assert(~PipelineCode.existsProp(NaN), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.existsProp(prop) does not work.')
	assert(~pc.existsProp(NaN), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.existsProp(prop) does not work.')
	assert(~Element.existsProp(pc, NaN), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(pc, prop) does not work.')
	assert(~Element.existsProp('PipelineCode', NaN), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''PipelineCode'', prop) does not work.')
	 
	assert_with_error('PipelineCode.existsProp(NaN)', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], pc)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], pc)
	assert_with_error('Element.existsProp(''PipelineCode'', NaN)', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		assert(PipelineCode.existsProp(prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.existsProp(prop) does not work.')
		assert(pc.existsProp(prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.existsProp(prop) does not work.')
		assert(Element.existsProp(pc, prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(pc, prop) does not work.')
		assert(Element.existsProp('PipelineCode', prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''PipelineCode'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~PipelineCode.existsTag(''), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.existsTag(tag) does not work.')
	assert(~pc.existsTag(''), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'pc.existsTag(tag) does not work.')
	assert(~Element.existsTag(pc, ''), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(pc, tag) does not work.')
	assert(~Element.existsTag('PipelineCode', ''), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''PipelineCode'', tag) does not work.')
	 
	assert_with_error('PipelineCode.existsTag('''')', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], pc)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], pc)
	assert_with_error('Element.existsTag(''PipelineCode'', '''')', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
		assert(PipelineCode.existsTag(tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.existsTag(tag) does not work.')
		assert(pc.existsTag(tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.existsTag(tag) does not work.')
		assert(Element.existsTag(pc, tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(pc, tga) does not work.')
		assert(Element.existsTag('PipelineCode', tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''PipelineCode'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		assert(PipelineCode.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropProp(prop) does not work.')
		assert(pc.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropProp(prop) does not work.')
		assert(Element.getPropProp(pc, prop) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pc, prop) does not work.')
		assert(Element.getPropProp('PipelineCode', prop) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PipelineCode'', prop) does not work.')
	 
		tag = pc.getPropTag(prop);
		assert(PipelineCode.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropProp(tag) does not work.')
		assert(pc.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropProp(tag) does not work.')
		assert(Element.getPropProp(pc, tag) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pc, tag) does not work.')
		assert(Element.getPropProp('PipelineCode', prop) == prop, ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PipelineCode'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		assert(strcmp(PipelineCode.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropTag(prop) does not work.')
		assert(strcmp(pc.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(pc, prop), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pc, prop) does not work.')
		assert(strcmp(Element.getPropTag('PipelineCode', prop), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PipelineCode'', prop) does not work.')
	 
		assert(strcmp(PipelineCode.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropTag(tag) does not work.')
		assert(strcmp(pc.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(pc, tag), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pc, tag) does not work.')
		assert(strcmp(Element.getPropTag('PipelineCode', prop), tag), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PipelineCode'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		assert(Category.existsCategory(PipelineCode.getPropCategory(prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(pc.getPropCategory(prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pc, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pc, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pc, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PipelineCode'', prop) does not work.')
	 
		assert(Category.existsCategory(PipelineCode.getPropCategory(tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(pc.getPropCategory(tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pc, tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pc, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pc, tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PipelineCode'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		assert(Format.existsFormat(PipelineCode.getPropFormat(prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(pc.getPropFormat(prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pc, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pc, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pc, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PipelineCode'', prop) does not work.')
	 
		assert(Format.existsFormat(PipelineCode.getPropFormat(tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(pc.getPropFormat(tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pc, tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pc, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pc, tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PipelineCode'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		assert(ischar(PipelineCode.getPropDescription(prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropDescription(prop) does not work.')
		assert(ischar(pc.getPropDescription(prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(pc, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pc, prop) does not work.')
		assert(ischar(Element.getPropDescription(pc, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PipelineCode'', prop) does not work.')
	 
		assert(ischar(PipelineCode.getPropDescription(tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.getPropDescription(tag) does not work.')
		assert(ischar(pc.getPropDescription(tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(pc, tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pc, tag) does not work.')
		assert(ischar(Element.getPropDescription(pc, tag)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PipelineCode'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		settings = PipelineCode.getPropSettings(prop);
		settings = pc.getPropSettings(prop);
		settings = Element.getPropSettings(pc, prop);
		settings = Element.getPropSettings('PipelineCode', prop);
	 
		settings = PipelineCode.getPropSettings(tag);
		settings = pc.getPropSettings(tag);
		settings = Element.getPropSettings(pc, tag);
		settings = Element.getPropSettings('PipelineCode', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		default = PipelineCode.getPropDefault(prop);
		default = pc.getPropDefault(prop);
		default = Element.getPropDefault(pc, prop);
		default = Element.getPropDefault('PipelineCode', prop);
	 
		default = PipelineCode.getPropDefault(tag);
		default = pc.getPropDefault(tag);
		default = Element.getPropDefault(pc, tag);
		default = Element.getPropDefault('PipelineCode', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		conditioned_default = PipelineCode.getPropDefaultConditioned(prop);
		conditioned_default = pc.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(pc, prop);
		conditioned_default = Element.getPropDefaultConditioned('PipelineCode', prop);
	 
		conditioned_default = PipelineCode.getPropDefaultConditioned(tag);
		conditioned_default = pc.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(pc, tag);
		conditioned_default = Element.getPropDefaultConditioned('PipelineCode', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:PipelineCode.getPropNumber()
		tag = pc.getPropTag(prop);
	 
		assert(~PipelineCode.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.checkProp(prop, value) does not work.')
		assert(~pc.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(pc, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pc, prop, value) does not work.')
		assert(~Element.checkProp('PipelineCode', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineCode'', prop, value) does not work.')
	 
		assert_with_error('PipelineCode.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], prop, pc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], prop, pc)
		assert_with_error('Element.checkProp(''PipelineCode'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~PipelineCode.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.checkProp(tag, value) does not work.')
		assert(~pc.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(pc, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pc, tag, value) does not work.')
		assert(~Element.checkProp('PipelineCode', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineCode'', tag, value) does not work.')
	 
		assert_with_error('PipelineCode.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], tag, pc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], tag, pc)
		assert_with_error('Element.checkProp(''PipelineCode'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineCode:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(PipelineCode.checkProp(prop, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.checkProp(prop, <conditioned default value>) does not work.')
		assert(pc.checkProp(prop, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(pc, prop, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pc, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('PipelineCode', prop, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineCode'', prop, <conditioned default value>) does not work.')
	 
		assert(PipelineCode.checkProp(tag, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.checkProp(tag, <conditioned default value>) does not work.')
		assert(pc.checkProp(tag, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'pc.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(pc, tag, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pc, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('PipelineCode', tag, Element.getPropDefaultConditioned(PipelineCode, prop)), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineCode'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, PipelineCode.getPropDefault(PipelineCode.TEMPLATE), ...
		PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
		PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
		PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
		);
	 
	for prop = 1:1:PipelineCode.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PipelineCode.getPropTag(prop));
		switch PipelineCode.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					pc.getr(prop) == PipelineCode.getNoValue(), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineCode.getCategoryName(PipelineCode.getPropCategory(prop)) ', PipelineCode.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineCode.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pc.getr(TAG) == PipelineCode.getNoValue(), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineCode.getCategoryName(PipelineCode.getPropCategory(prop)) ', PipelineCode.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineCode.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(pc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pc.getPropSettings(prop))
					assert( ...
						pc.checkFormat(pc.getPropFormat(prop), pc.get(prop)), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pc.checkFormat(pc.getPropFormat(prop), pc.get(prop), pc.getPropSettings(prop)), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					pc.getr(prop) == PipelineCode.getNoValue(), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineCode.getCategoryName(PipelineCode.getPropCategory(prop)) ', PipelineCode.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineCode.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pc.getr(TAG) == PipelineCode.getNoValue(), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineCode.getCategoryName(PipelineCode.getPropCategory(prop)) ', PipelineCode.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineCode.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':PipelineCode']);
				assert( ...
					~isa(pc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pc.getPropSettings(prop))
					assert( ...
						pc.checkFormat(pc.getPropFormat(prop), pc.get(prop)), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pc.checkFormat(pc.getPropFormat(prop), pc.get(prop), pc.getPropSettings(prop)), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(pc.getr(prop), PipelineCode.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by PipelineCode.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PipelineCode.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(pc.getr(TAG), PipelineCode.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' TAG ') must be inizialized to its default value ' ...
					'given by PipelineCode.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PipelineCode.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, PipelineCode.getPropDefault(PipelineCode.TEMPLATE), ...
		PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
		PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
		PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
		);
	 
	for prop = 1:1:PipelineCode.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PipelineCode.getPropTag(prop));
		switch PipelineCode.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(pc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pc.checkFormat(pc.getPropFormat(prop), pc.getr(prop),pc.getPropSettings(prop)), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':PipelineCode']);
				assert( ...
					~isa(pc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':PipelineCode']);
	% 			assert( ...
	% 				~isa(pc.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
	% 				['PipelineCode.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(pc.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
	% 				['PipelineCode.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				pc.checkFormat(pc.getPropFormat(prop), pc.getr(prop),pc.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
	% 				['PipelineCode.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':PipelineCode']);
				assert( ...
					~isa(pc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(pc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pc.checkFormat(pc.getPropFormat(prop), pc.getr(prop),pc.getPropSettings(prop)), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if pc.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:PipelineCode');
					delete(ancestor(pc.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(PipelineCode.getProps(Category.RESULT))
		for prop = 1:1:PipelineCode.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch PipelineCode.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						pc.isLocked(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~pc.isLocked(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc = PipelineCode();
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		TAG = upper(PipelineCode.getPropTag(prop));
		assert( ...
			~pc.isLocked(prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			['PipelineCode.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~pc.isLocked(TAG), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			['PipelineCode.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	pc.lock()
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		switch PipelineCode.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					pc.isLocked(prop), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~pc.isLocked(prop), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc = PipelineCode();
	 
	warning_backup = warning('off', 'BRAPH2:PipelineCode');
	for prop = 1:1:PipelineCode.getPropNumber()
		pc.lock(prop)
		switch PipelineCode.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					pc.isLocked(prop), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~pc.isLocked(prop), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc = PipelineCode();
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		TAG = upper(PipelineCode.getPropTag(prop));
		assert( ...
			pc.isChecked(prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			['PipelineCode.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			pc.isChecked(TAG), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			['PipelineCode.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	pc.unchecked()
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		assert( ...
			~pc.isChecked(prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			['PipelineCode.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	pc.checked()
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		assert( ...
			pc.isChecked(prop), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			['PipelineCode.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic PipelineCode
	pc_0 = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, PipelineCode.getPropDefault(PipelineCode.TEMPLATE), ...
		PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
		PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
		PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
		);
	 
	% PipelineCode with 1st callbacks
	pc_1 = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, pc_0.getCallback(4), ..., ...
		PipelineCode.ID, pc_0.getCallback(5), ..., ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, pc_0.getCallback(11), ..., ...
		PipelineCode.CODE, pc_0.getCallback(12), ..., ...
		PipelineCode.EL, pc_0.getCallback(13) ... ...
		);
	 
	prop_number = PipelineCode.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PipelineCode.getPropTag(prop));
		switch PipelineCode.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pc_1.get(prop), pc_0.get(prop)) && ~isa(pc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PipelineCode with 2nd callbacks
	pc_2 = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, pc_1.getCallback(4), ..., ...
		PipelineCode.ID, pc_1.getCallback(5), ..., ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, pc_1.getCallback(11), ..., ...
		PipelineCode.CODE, pc_1.getCallback(12), ..., ...
		PipelineCode.EL, pc_1.getCallback(13) ... ...
		);
	 
	prop_number = PipelineCode.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PipelineCode.getPropTag(prop));
		switch PipelineCode.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pc_2.get(prop), pc_0.get(prop)) && ~isa(pc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PipelineCode with 3rd callbacks
	pc_3 = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, pc_2.getCallback(4), ..., ...
		PipelineCode.ID, pc_2.getCallback(5), ..., ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, pc_2.getCallback(11), ..., ...
		PipelineCode.CODE, pc_2.getCallback(12), ..., ...
		PipelineCode.EL, pc_2.getCallback(13) ... ...
		);
	 
	prop_number = PipelineCode.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PipelineCode.getPropTag(prop));
		switch PipelineCode.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pc_3.get(prop), pc_0.get(prop)) && ~isa(pc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	pc = PipelineCode();
	 
	pc_copy = pc.copy();
	 
	assert(pc_copy ~= pc, ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(pc_copy, pc), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		value = pc.getr(prop);
		value_copy = pc_copy.getr(prop);
		switch PipelineCode.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					'PipelineCode.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
							'PipelineCode.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
							'PipelineCode.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					pc_copy.isLocked(prop) == pc.isLocked(prop), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					'PipelineCode.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pc_copy.isChecked(prop) == pc.isChecked(prop), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					'PipelineCode.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pc_copy.getPropSeed(prop) == pc.getPropSeed(prop), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					'PipelineCode.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	pc = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, PipelineCode.getPropDefault(PipelineCode.TEMPLATE), ...
		PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
		PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
		PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
		);
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		if PipelineCode.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':PipelineCode']);
			% pc.memorize(prop);
			% warning(warning_backup)
		elseif PipelineCode.getPropCategory(prop) == Category.EVANESCENT && pc.getPropFormat(prop) == Format.HANDLE
			pc.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:PipelineCode');
			delete(ancestor(pc.get(prop), 'figure'))
			warning(warning_backup)
		else
			pc.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	pc_copy = pc.copy();
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		value = pc.getr(prop);
		value_copy = pc_copy.getr(prop);
		switch PipelineCode.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					'PipelineCode.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
							'PipelineCode.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
							'PipelineCode.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						pc_copy.isLocked(prop) == pc.isLocked(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pc_copy.isChecked(prop) == pc.isChecked(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pc_copy.getPropSeed(prop) == pc.getPropSeed(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	pc_0 = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, PipelineCode.getPropDefault(PipelineCode.TEMPLATE), ...
		PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
		PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
		PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
		);
	 
	pc = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, pc_0.getCallback(4), ..., ...
		PipelineCode.ID, pc_0.getCallback(5), ..., ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, pc_0.getCallback(11), ..., ...
		PipelineCode.CODE, pc_0.getCallback(12), ..., ...
		PipelineCode.EL, pc_0.getCallback(13) ... ...
		);
	 
	pc_copy = pc.copy();
	pc_0_copy = pc_copy.getr('ID').get('EL');
	 
	for prop = 1:1:PipelineCode.getPropNumber()
		value = pc.getr(prop);
		value_copy = pc_copy.getr(prop);
		switch PipelineCode.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					'PipelineCode.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
							'PipelineCode.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
							'PipelineCode.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == pc_0.getCallback(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The callback should be obtained from PipelineCode.getCallback().' ...
						)
					assert( ...
						value_copy == pc_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The callback should be obtained from PipelineCode.getCallback().' ...
						)
				end
	 
					assert( ...
						pc_copy.isLocked(prop) == pc.isLocked(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pc_copy.isChecked(prop) == pc.isChecked(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pc_copy.getPropSeed(prop) == pc.getPropSeed(prop), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc_template = PipelineCode();
	pc = PipelineCode('TEMPLATE', pc_template);
	 
	for prop = 1:1:PipelineCode.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PipelineCode.getPropTag(prop));
		switch PipelineCode.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == PipelineCode.TEMPLATE
					assert( ...
						isa(pc.getr(prop), 'PipelineCode'), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode TEMPLATE does not work. PipelineCode.getr(''TEMPLATE'') should be a PipelineCode element.' ...
						)
					assert( ...
						isa(pc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						'PipelineCode TEMPLATE does not work. PipelineCode_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(pc.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode TEMPLATE does not work. PipelineCode.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						pc.getr(prop).get('EL') == pc_template && pc.getr(prop).get('PROP') == prop && strcmp(pc.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode TEMPLATE does not work. PipelineCode.getr(' TAG ') should be a Callback to pc_template.' TAG '.'] ...
						)
					assert( ...
						isa(pc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
						['PipelineCode TEMPLATE does not work. PipelineCode_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(pc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode TEMPLATE does not work. PipelineCode.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(pc_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
					['PipelineCode TEMPLATE does not work. PipelineCode_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, PipelineCode.getPropDefault(PipelineCode.TEMPLATE), ...
		PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
		PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
		PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'pipelinecode_to_be_erased.b2'];
	 
	Element.save(pc, filename)
	 
	pc_loaded = Element.load(filename);
	 
	assert( ...
		isequal(pc.copy(), pc_loaded), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.save(pc) and/or PipelineCode.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pc = PipelineCode( ...
		PipelineCode.ELCLASS, PipelineCode.getNoValue(), ...
		PipelineCode.NAME, PipelineCode.getNoValue(), ...
		PipelineCode.DESCRIPTION, PipelineCode.getNoValue(), ...
		PipelineCode.TEMPLATE, PipelineCode.getPropDefault(PipelineCode.TEMPLATE), ...
		PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
		PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
		PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
		PipelineCode.TOSTRING, PipelineCode.getNoValue(), ...
		PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
		PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
		PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
		PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
		PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
		);
	 
	[json, struct, el_list] = encodeJSON(pc);
	[pc_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(pc_dec ~= pc, ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		'PipelineCode.encodeJSON() or PipelineCode.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) PipelineCode.getPropFormat(prop), num2cell(PipelineCode.getProps())) == Format.HANDLE) && all(cellfun(@(prop) PipelineCode.getPropFormat(prop), num2cell(PipelineCode.getProps())) == Format.NET)
		assert(isequal(pc_dec, pc), ...
			[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
			'PipelineCode.encodeJSON() or PipelineCode.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Error with keyword moniker
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.FAIL_TEST], ...
		[' When testing PipelineCode no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

