%TEST_PIPELINESECTION

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	ps = PipelineSection();
	 
	% get('ELCLASS')
	if isa(PipelineSection, 'ConcreteElement')
		assert(strcmp(PipelineSection().get('ELCLASS'), 'PipelineSection'), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection().get(''ELCLASS'') should return ''PipelineSection''.')
	end
	 
	% getClass
	assert(strcmp(PipelineSection.getClass(), 'PipelineSection'), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.getClass() should return ''PipelineSection''.')
	assert(strcmp(ps.getClass(), 'PipelineSection'), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'ps.getClass() should return ''PipelineSection''.')
	assert(strcmp(Element.getClass(ps), 'PipelineSection'), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(ps) should return ''PipelineSection''.')
	assert(strcmp(Element.getClass('PipelineSection'), 'PipelineSection'), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''PipelineSection'') should return ''PipelineSection''.')
	 
	% getSubclasses()
	assert(isequal(PipelineSection.getSubclasses(), subclasses('PipelineSection', [], [], true)), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.getSubclasses() should return the same result as subclasses(''PipelineSection'', [], [], true).')
	assert(isequal(ps.getSubclasses(), subclasses('PipelineSection', [], [], true)), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''PipelineSection'', [], [], true).')
	assert(isequal(Element.getSubclasses(ps), subclasses('PipelineSection', [], [], true)), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(ps) should return the same result as subclasses(''PipelineSection'', [], [], true).')
	assert(isequal(Element.getSubclasses('PipelineSection'), subclasses('PipelineSection', [], [], true)), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''PipelineSection'') should return the same result as subclasses(''PipelineSection'', [], [], true).')
	 
	% getProps()
	assert(isempty(PipelineSection.getProps()) || isequal(PipelineSection.getProps(), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.getProps() should return a row vector [1:1:N].')
	assert(isempty(PipelineSection.getProps()) || isequal(ps.getProps(), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'ps.getProps() should return a row vector [1:1:N].')
	assert(isempty(PipelineSection.getProps()) || isequal(Element.getProps(ps), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ps) should return a row vector [1:1:N].')
	assert(isempty(PipelineSection.getProps()) || isequal(Element.getProps('PipelineSection'), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PipelineSection'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) PipelineSection.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PipelineSection.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.getProps(category) does not work.')
	tmp = cellfun(@(category) ps.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PipelineSection.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'ps.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(ps, category), categories, 'UniformOutput', false);
	assert(isempty(PipelineSection.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ps, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('PipelineSection', category), categories, 'UniformOutput', false);
	assert(isempty(PipelineSection.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PipelineSection.getProps())), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PipelineSection'', category) does not work.')
	 
	% getPropNumber()
	assert(PipelineSection.getPropNumber() == length(PipelineSection.getProps()), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.getPropNumber() should return the number of properties.')
	assert(ps.getPropNumber() == length(PipelineSection.getProps()), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'ps.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(ps) == length(PipelineSection.getProps()), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ps) should return the number of properties.')
	assert(Element.getPropNumber('PipelineSection') == length(PipelineSection.getProps()), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PipelineSection'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) PipelineSection.getPropNumber(category), categories)) == PipelineSection.getPropNumber(), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) ps.getPropNumber(category), categories)) == PipelineSection.getPropNumber(), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'ps.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(ps, category), categories)) == PipelineSection.getPropNumber(), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ps, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('PipelineSection', category), categories)) == PipelineSection.getPropNumber(), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PipelineSection'', category) does not work.')
	 
	% existsProp(prop)
	assert(~PipelineSection.existsProp(NaN), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.existsProp(prop) does not work.')
	assert(~ps.existsProp(NaN), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'ps.existsProp(prop) does not work.')
	assert(~Element.existsProp(ps, NaN), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(ps, prop) does not work.')
	assert(~Element.existsProp('PipelineSection', NaN), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''PipelineSection'', prop) does not work.')
	 
	assert_with_error('PipelineSection.existsProp(NaN)', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], ps)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], ps)
	assert_with_error('Element.existsProp(''PipelineSection'', NaN)', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		assert(PipelineSection.existsProp(prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.existsProp(prop) does not work.')
		assert(ps.existsProp(prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.existsProp(prop) does not work.')
		assert(Element.existsProp(ps, prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(ps, prop) does not work.')
		assert(Element.existsProp('PipelineSection', prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''PipelineSection'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~PipelineSection.existsTag(''), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.existsTag(tag) does not work.')
	assert(~ps.existsTag(''), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'ps.existsTag(tag) does not work.')
	assert(~Element.existsTag(ps, ''), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(ps, tag) does not work.')
	assert(~Element.existsTag('PipelineSection', ''), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''PipelineSection'', tag) does not work.')
	 
	assert_with_error('PipelineSection.existsTag('''')', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], ps)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], ps)
	assert_with_error('Element.existsTag(''PipelineSection'', '''')', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
		assert(PipelineSection.existsTag(tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.existsTag(tag) does not work.')
		assert(ps.existsTag(tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.existsTag(tag) does not work.')
		assert(Element.existsTag(ps, tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(ps, tga) does not work.')
		assert(Element.existsTag('PipelineSection', tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''PipelineSection'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		assert(PipelineSection.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropProp(prop) does not work.')
		assert(ps.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropProp(prop) does not work.')
		assert(Element.getPropProp(ps, prop) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ps, prop) does not work.')
		assert(Element.getPropProp('PipelineSection', prop) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PipelineSection'', prop) does not work.')
	 
		tag = ps.getPropTag(prop);
		assert(PipelineSection.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropProp(tag) does not work.')
		assert(ps.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropProp(tag) does not work.')
		assert(Element.getPropProp(ps, tag) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ps, tag) does not work.')
		assert(Element.getPropProp('PipelineSection', prop) == prop, ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PipelineSection'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		assert(strcmp(PipelineSection.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropTag(prop) does not work.')
		assert(strcmp(ps.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(ps, prop), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ps, prop) does not work.')
		assert(strcmp(Element.getPropTag('PipelineSection', prop), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PipelineSection'', prop) does not work.')
	 
		assert(strcmp(PipelineSection.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropTag(tag) does not work.')
		assert(strcmp(ps.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(ps, tag), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ps, tag) does not work.')
		assert(strcmp(Element.getPropTag('PipelineSection', prop), tag), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PipelineSection'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		assert(Category.existsCategory(PipelineSection.getPropCategory(prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(ps.getPropCategory(prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ps, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ps, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ps, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PipelineSection'', prop) does not work.')
	 
		assert(Category.existsCategory(PipelineSection.getPropCategory(tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(ps.getPropCategory(tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ps, tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ps, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ps, tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PipelineSection'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		assert(Format.existsFormat(PipelineSection.getPropFormat(prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(ps.getPropFormat(prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ps, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ps, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ps, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PipelineSection'', prop) does not work.')
	 
		assert(Format.existsFormat(PipelineSection.getPropFormat(tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(ps.getPropFormat(tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ps, tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ps, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ps, tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PipelineSection'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		assert(ischar(PipelineSection.getPropDescription(prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropDescription(prop) does not work.')
		assert(ischar(ps.getPropDescription(prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(ps, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ps, prop) does not work.')
		assert(ischar(Element.getPropDescription(ps, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PipelineSection'', prop) does not work.')
	 
		assert(ischar(PipelineSection.getPropDescription(tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.getPropDescription(tag) does not work.')
		assert(ischar(ps.getPropDescription(tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(ps, tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ps, tag) does not work.')
		assert(ischar(Element.getPropDescription(ps, tag)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PipelineSection'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		settings = PipelineSection.getPropSettings(prop);
		settings = ps.getPropSettings(prop);
		settings = Element.getPropSettings(ps, prop);
		settings = Element.getPropSettings('PipelineSection', prop);
	 
		settings = PipelineSection.getPropSettings(tag);
		settings = ps.getPropSettings(tag);
		settings = Element.getPropSettings(ps, tag);
		settings = Element.getPropSettings('PipelineSection', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		default = PipelineSection.getPropDefault(prop);
		default = ps.getPropDefault(prop);
		default = Element.getPropDefault(ps, prop);
		default = Element.getPropDefault('PipelineSection', prop);
	 
		default = PipelineSection.getPropDefault(tag);
		default = ps.getPropDefault(tag);
		default = Element.getPropDefault(ps, tag);
		default = Element.getPropDefault('PipelineSection', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		conditioned_default = PipelineSection.getPropDefaultConditioned(prop);
		conditioned_default = ps.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(ps, prop);
		conditioned_default = Element.getPropDefaultConditioned('PipelineSection', prop);
	 
		conditioned_default = PipelineSection.getPropDefaultConditioned(tag);
		conditioned_default = ps.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(ps, tag);
		conditioned_default = Element.getPropDefaultConditioned('PipelineSection', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:PipelineSection.getPropNumber()
		tag = ps.getPropTag(prop);
	 
		assert(~PipelineSection.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.checkProp(prop, value) does not work.')
		assert(~ps.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(ps, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ps, prop, value) does not work.')
		assert(~Element.checkProp('PipelineSection', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineSection'', prop, value) does not work.')
	 
		assert_with_error('PipelineSection.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], prop, ps)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], prop, ps)
		assert_with_error('Element.checkProp(''PipelineSection'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~PipelineSection.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.checkProp(tag, value) does not work.')
		assert(~ps.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(ps, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ps, tag, value) does not work.')
		assert(~Element.checkProp('PipelineSection', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineSection'', tag, value) does not work.')
	 
		assert_with_error('PipelineSection.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], tag, ps)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], tag, ps)
		assert_with_error('Element.checkProp(''PipelineSection'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PipelineSection:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(PipelineSection.checkProp(prop, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.checkProp(prop, <conditioned default value>) does not work.')
		assert(ps.checkProp(prop, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(ps, prop, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ps, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('PipelineSection', prop, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineSection'', prop, <conditioned default value>) does not work.')
	 
		assert(PipelineSection.checkProp(tag, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.checkProp(tag, <conditioned default value>) does not work.')
		assert(ps.checkProp(tag, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'ps.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(ps, tag, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ps, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('PipelineSection', tag, Element.getPropDefaultConditioned(PipelineSection, prop)), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PipelineSection'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, PipelineSection.getPropDefault(PipelineSection.TEMPLATE), ...
		PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
		);
	 
	for prop = 1:1:PipelineSection.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PipelineSection.getPropTag(prop));
		switch PipelineSection.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					ps.getr(prop) == PipelineSection.getNoValue(), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineSection.getCategoryName(PipelineSection.getPropCategory(prop)) ', PipelineSection.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineSection.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ps.getr(TAG) == PipelineSection.getNoValue(), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineSection.getCategoryName(PipelineSection.getPropCategory(prop)) ', PipelineSection.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineSection.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(ps.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ps.getPropSettings(prop))
					assert( ...
						ps.checkFormat(ps.getPropFormat(prop), ps.get(prop)), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ps.checkFormat(ps.getPropFormat(prop), ps.get(prop), ps.getPropSettings(prop)), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					ps.getr(prop) == PipelineSection.getNoValue(), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineSection.getCategoryName(PipelineSection.getPropCategory(prop)) ', PipelineSection.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineSection.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ps.getr(TAG) == PipelineSection.getNoValue(), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['Being a ' PipelineSection.getCategoryName(PipelineSection.getPropCategory(prop)) ', PipelineSection.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PipelineSection.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':PipelineSection']);
				assert( ...
					~isa(ps.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ps.getPropSettings(prop))
					assert( ...
						ps.checkFormat(ps.getPropFormat(prop), ps.get(prop)), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ps.checkFormat(ps.getPropFormat(prop), ps.get(prop), ps.getPropSettings(prop)), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(ps.getr(prop), PipelineSection.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by PipelineSection.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PipelineSection.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(ps.getr(TAG), PipelineSection.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' TAG ') must be inizialized to its default value ' ...
					'given by PipelineSection.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PipelineSection.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, PipelineSection.getPropDefault(PipelineSection.TEMPLATE), ...
		PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
		);
	 
	for prop = 1:1:PipelineSection.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PipelineSection.getPropTag(prop));
		switch PipelineSection.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(ps.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ps.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ps.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ps.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ps.checkFormat(ps.getPropFormat(prop), ps.getr(prop),ps.getPropSettings(prop)), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':PipelineSection']);
				assert( ...
					~isa(ps.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ps.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':PipelineSection']);
	% 			assert( ...
	% 				~isa(ps.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
	% 				['PipelineSection.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(ps.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
	% 				['PipelineSection.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				ps.checkFormat(ps.getPropFormat(prop), ps.getr(prop),ps.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
	% 				['PipelineSection.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':PipelineSection']);
				assert( ...
					~isa(ps.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(ps.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ps.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ps.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ps.checkFormat(ps.getPropFormat(prop), ps.getr(prop),ps.getPropSettings(prop)), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if ps.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:PipelineSection');
					delete(ancestor(ps.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(PipelineSection.getProps(Category.RESULT))
		for prop = 1:1:PipelineSection.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch PipelineSection.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						ps.isLocked(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~ps.isLocked(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps = PipelineSection();
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		TAG = upper(PipelineSection.getPropTag(prop));
		assert( ...
			~ps.isLocked(prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			['PipelineSection.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~ps.isLocked(TAG), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			['PipelineSection.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	ps.lock()
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		switch PipelineSection.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					ps.isLocked(prop), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~ps.isLocked(prop), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps = PipelineSection();
	 
	warning_backup = warning('off', 'BRAPH2:PipelineSection');
	for prop = 1:1:PipelineSection.getPropNumber()
		ps.lock(prop)
		switch PipelineSection.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					ps.isLocked(prop), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~ps.isLocked(prop), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps = PipelineSection();
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		TAG = upper(PipelineSection.getPropTag(prop));
		assert( ...
			ps.isChecked(prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			['PipelineSection.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			ps.isChecked(TAG), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			['PipelineSection.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	ps.unchecked()
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		assert( ...
			~ps.isChecked(prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			['PipelineSection.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	ps.checked()
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		assert( ...
			ps.isChecked(prop), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			['PipelineSection.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic PipelineSection
	ps_0 = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, PipelineSection.getPropDefault(PipelineSection.TEMPLATE), ...
		PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
		);
	 
	% PipelineSection with 1st callbacks
	ps_1 = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, ps_0.getCallback(4), ..., ...
		PipelineSection.ID, ps_0.getCallback(5), ..., ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, ps_0.getCallback(9) ... ...
		);
	 
	prop_number = PipelineSection.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PipelineSection.getPropTag(prop));
		switch PipelineSection.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ps_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ps_1.get(prop), ps_0.get(prop)) && ~isa(ps_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ps_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PipelineSection with 2nd callbacks
	ps_2 = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, ps_1.getCallback(4), ..., ...
		PipelineSection.ID, ps_1.getCallback(5), ..., ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, ps_1.getCallback(9) ... ...
		);
	 
	prop_number = PipelineSection.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PipelineSection.getPropTag(prop));
		switch PipelineSection.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ps_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ps_2.get(prop), ps_0.get(prop)) && ~isa(ps_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ps_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PipelineSection with 3rd callbacks
	ps_3 = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, ps_2.getCallback(4), ..., ...
		PipelineSection.ID, ps_2.getCallback(5), ..., ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, ps_2.getCallback(9) ... ...
		);
	 
	prop_number = PipelineSection.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PipelineSection.getPropTag(prop));
		switch PipelineSection.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ps_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ps_3.get(prop), ps_0.get(prop)) && ~isa(ps_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ps_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	ps = PipelineSection();
	 
	ps_copy = ps.copy();
	 
	assert(ps_copy ~= ps, ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(ps_copy, ps), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		value = ps.getr(prop);
		value_copy = ps_copy.getr(prop);
		switch PipelineSection.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					'PipelineSection.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
							'PipelineSection.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
							'PipelineSection.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					ps_copy.isLocked(prop) == ps.isLocked(prop), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					'PipelineSection.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ps_copy.isChecked(prop) == ps.isChecked(prop), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					'PipelineSection.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ps_copy.getPropSeed(prop) == ps.getPropSeed(prop), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					'PipelineSection.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	ps = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, PipelineSection.getPropDefault(PipelineSection.TEMPLATE), ...
		PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
		);
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		if PipelineSection.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':PipelineSection']);
			% ps.memorize(prop);
			% warning(warning_backup)
		elseif PipelineSection.getPropCategory(prop) == Category.EVANESCENT && ps.getPropFormat(prop) == Format.HANDLE
			ps.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:PipelineSection');
			delete(ancestor(ps.get(prop), 'figure'))
			warning(warning_backup)
		else
			ps.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	ps_copy = ps.copy();
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		value = ps.getr(prop);
		value_copy = ps_copy.getr(prop);
		switch PipelineSection.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					'PipelineSection.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
							'PipelineSection.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
							'PipelineSection.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						ps_copy.isLocked(prop) == ps.isLocked(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ps_copy.isChecked(prop) == ps.isChecked(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ps_copy.getPropSeed(prop) == ps.getPropSeed(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	ps_0 = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, PipelineSection.getPropDefault(PipelineSection.TEMPLATE), ...
		PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
		);
	 
	ps = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, ps_0.getCallback(4), ..., ...
		PipelineSection.ID, ps_0.getCallback(5), ..., ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, ps_0.getCallback(9) ... ...
		);
	 
	ps_copy = ps.copy();
	ps_0_copy = ps_copy.getr('ID').get('EL');
	 
	for prop = 1:1:PipelineSection.getPropNumber()
		value = ps.getr(prop);
		value_copy = ps_copy.getr(prop);
		switch PipelineSection.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					'PipelineSection.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
							'PipelineSection.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
							'PipelineSection.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == ps_0.getCallback(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The callback should be obtained from PipelineSection.getCallback().' ...
						)
					assert( ...
						value_copy == ps_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The callback should be obtained from PipelineSection.getCallback().' ...
						)
				end
	 
					assert( ...
						ps_copy.isLocked(prop) == ps.isLocked(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ps_copy.isChecked(prop) == ps.isChecked(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ps_copy.getPropSeed(prop) == ps.getPropSeed(prop), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps_template = PipelineSection();
	ps = PipelineSection('TEMPLATE', ps_template);
	 
	for prop = 1:1:PipelineSection.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PipelineSection.getPropTag(prop));
		switch PipelineSection.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == PipelineSection.TEMPLATE
					assert( ...
						isa(ps.getr(prop), 'PipelineSection'), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection TEMPLATE does not work. PipelineSection.getr(''TEMPLATE'') should be a PipelineSection element.' ...
						)
					assert( ...
						isa(ps_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						'PipelineSection TEMPLATE does not work. PipelineSection_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(ps.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection TEMPLATE does not work. PipelineSection.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						ps.getr(prop).get('EL') == ps_template && ps.getr(prop).get('PROP') == prop && strcmp(ps.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection TEMPLATE does not work. PipelineSection.getr(' TAG ') should be a Callback to ps_template.' TAG '.'] ...
						)
					assert( ...
						isa(ps_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
						['PipelineSection TEMPLATE does not work. PipelineSection_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(ps.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection TEMPLATE does not work. PipelineSection.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(ps_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
					['PipelineSection TEMPLATE does not work. PipelineSection_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, PipelineSection.getPropDefault(PipelineSection.TEMPLATE), ...
		PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'pipelinesection_to_be_erased.b2'];
	 
	Element.save(ps, filename)
	 
	ps_loaded = Element.load(filename);
	 
	assert( ...
		isequal(ps.copy(), ps_loaded), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.save(ps) and/or PipelineSection.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ps = PipelineSection( ...
		PipelineSection.ELCLASS, PipelineSection.getNoValue(), ...
		PipelineSection.NAME, PipelineSection.getNoValue(), ...
		PipelineSection.DESCRIPTION, PipelineSection.getNoValue(), ...
		PipelineSection.TEMPLATE, PipelineSection.getPropDefault(PipelineSection.TEMPLATE), ...
		PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
		PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
		PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
		PipelineSection.TOSTRING, PipelineSection.getNoValue(), ...
		PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
		);
	 
	[json, struct, el_list] = encodeJSON(ps);
	[ps_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(ps_dec ~= ps, ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		'PipelineSection.encodeJSON() or PipelineSection.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) PipelineSection.getPropFormat(prop), num2cell(PipelineSection.getProps())) == Format.HANDLE) && all(cellfun(@(prop) PipelineSection.getPropFormat(prop), num2cell(PipelineSection.getProps())) == Format.NET)
		assert(isequal(ps_dec, ps), ...
			[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
			'PipelineSection.encodeJSON() or PipelineSection.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.FAIL_TEST], ...
		[' When testing PipelineSection no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

