%TEST_SETTINGSAREA

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	st = SettingsArea();
	 
	% get('ELCLASS')
	if isa(SettingsArea, 'ConcreteElement')
		assert(strcmp(SettingsArea().get('ELCLASS'), 'SettingsArea'), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea().get(''ELCLASS'') should return ''SettingsArea''.')
	end
	 
	% getBuild()
	assert(SettingsArea.getBuild() == 1 && SettingsArea.getBuild() > 0, ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.getBuild() should return the SettingsArea build number.')
	assert(st.getBuild() == 1 && st.getBuild() > 0 , ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.getBuild() should return the SettingsArea build number.')
	assert(Element.getBuild(st) == 1 && Element.getBuild(st) > 0, ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(st) should return the SettingsArea build number.')
	assert(Element.getBuild('SettingsArea') == 1 && Element.getBuild('SettingsArea') > 0, ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''SettingsArea'') should return the SettingsArea build number.')
	 
	% getClass()
	assert(strcmp(SettingsArea.getClass(), 'SettingsArea'), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.getClass() should return ''SettingsArea''.')
	assert(strcmp(st.getClass(), 'SettingsArea'), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.getClass() should return ''SettingsArea''.')
	assert(strcmp(Element.getClass(st), 'SettingsArea'), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(st) should return ''SettingsArea''.')
	assert(strcmp(Element.getClass('SettingsArea'), 'SettingsArea'), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''SettingsArea'') should return ''SettingsArea''.')
	 
	% getSubclasses()
	assert(isequal(SettingsArea.getSubclasses(), subclasses('SettingsArea', [], [], true)), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.getSubclasses() should return the same result as subclasses(''SettingsArea'', [], [], true).')
	assert(isequal(st.getSubclasses(), subclasses('SettingsArea', [], [], true)), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''SettingsArea'', [], [], true).')
	assert(isequal(Element.getSubclasses(st), subclasses('SettingsArea', [], [], true)), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(st) should return the same result as subclasses(''SettingsArea'', [], [], true).')
	assert(isequal(Element.getSubclasses('SettingsArea'), subclasses('SettingsArea', [], [], true)), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''SettingsArea'') should return the same result as subclasses(''SettingsArea'', [], [], true).')
	 
	% getProps()
	assert(isempty(SettingsArea.getProps()) || isequal(SettingsArea.getProps(), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.getProps() should return a row vector [1:1:N].')
	assert(isempty(SettingsArea.getProps()) || isequal(st.getProps(), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.getProps() should return a row vector [1:1:N].')
	assert(isempty(SettingsArea.getProps()) || isequal(Element.getProps(st), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(st) should return a row vector [1:1:N].')
	assert(isempty(SettingsArea.getProps()) || isequal(Element.getProps('SettingsArea'), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SettingsArea'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) SettingsArea.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SettingsArea.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.getProps(category) does not work.')
	tmp = cellfun(@(category) st.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SettingsArea.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(st, category), categories, 'UniformOutput', false);
	assert(isempty(SettingsArea.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(st, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('SettingsArea', category), categories, 'UniformOutput', false);
	assert(isempty(SettingsArea.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SettingsArea.getProps())), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SettingsArea'', category) does not work.')
	 
	% getPropNumber()
	assert(SettingsArea.getPropNumber() == length(SettingsArea.getProps()), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.getPropNumber() should return the number of properties.')
	assert(st.getPropNumber() == length(SettingsArea.getProps()), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(st) == length(SettingsArea.getProps()), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(st) should return the number of properties.')
	assert(Element.getPropNumber('SettingsArea') == length(SettingsArea.getProps()), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SettingsArea'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) SettingsArea.getPropNumber(category), categories)) == SettingsArea.getPropNumber(), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) st.getPropNumber(category), categories)) == SettingsArea.getPropNumber(), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(st, category), categories)) == SettingsArea.getPropNumber(), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(st, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('SettingsArea', category), categories)) == SettingsArea.getPropNumber(), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SettingsArea'', category) does not work.')
	 
	% existsProp(prop)
	assert(~SettingsArea.existsProp(NaN), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.existsProp(prop) does not work.')
	assert(~st.existsProp(NaN), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.existsProp(prop) does not work.')
	assert(~Element.existsProp(st, NaN), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(st, prop) does not work.')
	assert(~Element.existsProp('SettingsArea', NaN), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''SettingsArea'', prop) does not work.')
	 
	assert_with_error('SettingsArea.existsProp(NaN)', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], st)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], st)
	assert_with_error('Element.existsProp(''SettingsArea'', NaN)', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		assert(SettingsArea.existsProp(prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.existsProp(prop) does not work.')
		assert(st.existsProp(prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.existsProp(prop) does not work.')
		assert(Element.existsProp(st, prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(st, prop) does not work.')
		assert(Element.existsProp('SettingsArea', prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''SettingsArea'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~SettingsArea.existsTag(''), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.existsTag(tag) does not work.')
	assert(~st.existsTag(''), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'st.existsTag(tag) does not work.')
	assert(~Element.existsTag(st, ''), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(st, tag) does not work.')
	assert(~Element.existsTag('SettingsArea', ''), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''SettingsArea'', tag) does not work.')
	 
	assert_with_error('SettingsArea.existsTag('''')', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], st)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], st)
	assert_with_error('Element.existsTag(''SettingsArea'', '''')', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
		assert(SettingsArea.existsTag(tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.existsTag(tag) does not work.')
		assert(st.existsTag(tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.existsTag(tag) does not work.')
		assert(Element.existsTag(st, tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(st, tga) does not work.')
		assert(Element.existsTag('SettingsArea', tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''SettingsArea'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		assert(SettingsArea.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropProp(prop) does not work.')
		assert(st.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropProp(prop) does not work.')
		assert(Element.getPropProp(st, prop) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(st, prop) does not work.')
		assert(Element.getPropProp('SettingsArea', prop) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SettingsArea'', prop) does not work.')
	 
		tag = st.getPropTag(prop);
		assert(SettingsArea.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropProp(tag) does not work.')
		assert(st.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropProp(tag) does not work.')
		assert(Element.getPropProp(st, tag) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(st, tag) does not work.')
		assert(Element.getPropProp('SettingsArea', prop) == prop, ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SettingsArea'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		assert(strcmp(SettingsArea.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropTag(prop) does not work.')
		assert(strcmp(st.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(st, prop), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(st, prop) does not work.')
		assert(strcmp(Element.getPropTag('SettingsArea', prop), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SettingsArea'', prop) does not work.')
	 
		assert(strcmp(SettingsArea.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropTag(tag) does not work.')
		assert(strcmp(st.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(st, tag), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(st, tag) does not work.')
		assert(strcmp(Element.getPropTag('SettingsArea', prop), tag), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SettingsArea'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		assert(Category.existsCategory(SettingsArea.getPropCategory(prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(st.getPropCategory(prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(st, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(st, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(st, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SettingsArea'', prop) does not work.')
	 
		assert(Category.existsCategory(SettingsArea.getPropCategory(tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(st.getPropCategory(tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(st, tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(st, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(st, tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SettingsArea'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		assert(Format.existsFormat(SettingsArea.getPropFormat(prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(st.getPropFormat(prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(st, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(st, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(st, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SettingsArea'', prop) does not work.')
	 
		assert(Format.existsFormat(SettingsArea.getPropFormat(tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(st.getPropFormat(tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(st, tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(st, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(st, tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SettingsArea'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		assert(ischar(SettingsArea.getPropDescription(prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropDescription(prop) does not work.')
		assert(ischar(st.getPropDescription(prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(st, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(st, prop) does not work.')
		assert(ischar(Element.getPropDescription(st, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SettingsArea'', prop) does not work.')
	 
		assert(ischar(SettingsArea.getPropDescription(tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.getPropDescription(tag) does not work.')
		assert(ischar(st.getPropDescription(tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(st, tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(st, tag) does not work.')
		assert(ischar(Element.getPropDescription(st, tag)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SettingsArea'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		settings = SettingsArea.getPropSettings(prop);
		settings = st.getPropSettings(prop);
		settings = Element.getPropSettings(st, prop);
		settings = Element.getPropSettings('SettingsArea', prop);
	 
		settings = SettingsArea.getPropSettings(tag);
		settings = st.getPropSettings(tag);
		settings = Element.getPropSettings(st, tag);
		settings = Element.getPropSettings('SettingsArea', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		default = SettingsArea.getPropDefault(prop);
		default = st.getPropDefault(prop);
		default = Element.getPropDefault(st, prop);
		default = Element.getPropDefault('SettingsArea', prop);
	 
		default = SettingsArea.getPropDefault(tag);
		default = st.getPropDefault(tag);
		default = Element.getPropDefault(st, tag);
		default = Element.getPropDefault('SettingsArea', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		conditioned_default = SettingsArea.getPropDefaultConditioned(prop);
		conditioned_default = st.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(st, prop);
		conditioned_default = Element.getPropDefaultConditioned('SettingsArea', prop);
	 
		conditioned_default = SettingsArea.getPropDefaultConditioned(tag);
		conditioned_default = st.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(st, tag);
		conditioned_default = Element.getPropDefaultConditioned('SettingsArea', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:SettingsArea.getPropNumber()
		tag = st.getPropTag(prop);
	 
		assert(~SettingsArea.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.checkProp(prop, value) does not work.')
		assert(~st.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(st, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(st, prop, value) does not work.')
		assert(~Element.checkProp('SettingsArea', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SettingsArea'', prop, value) does not work.')
	 
		assert_with_error('SettingsArea.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], prop, st)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], prop, st)
		assert_with_error('Element.checkProp(''SettingsArea'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~SettingsArea.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.checkProp(tag, value) does not work.')
		assert(~st.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(st, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(st, tag, value) does not work.')
		assert(~Element.checkProp('SettingsArea', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SettingsArea'', tag, value) does not work.')
	 
		assert_with_error('SettingsArea.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], tag, st)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], tag, st)
		assert_with_error('Element.checkProp(''SettingsArea'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SettingsArea:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(SettingsArea.checkProp(prop, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.checkProp(prop, <conditioned default value>) does not work.')
		assert(st.checkProp(prop, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(st, prop, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(st, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('SettingsArea', prop, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SettingsArea'', prop, <conditioned default value>) does not work.')
	 
		assert(SettingsArea.checkProp(tag, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.checkProp(tag, <conditioned default value>) does not work.')
		assert(st.checkProp(tag, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'st.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(st, tag, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(st, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('SettingsArea', tag, Element.getPropDefaultConditioned(SettingsArea, prop)), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SettingsArea'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, SettingsArea.getPropDefault(SettingsArea.TEMPLATE), ...
		SettingsArea.ID, SettingsArea.getPropDefault(SettingsArea.ID), ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, SettingsArea.getPropDefault(SettingsArea.PANEL), ...
		SettingsArea.PROP, SettingsArea.getPropDefault(SettingsArea.PROP), ...
		SettingsArea.TAG, SettingsArea.getPropDefault(SettingsArea.TAG), ...
		SettingsArea.I, SettingsArea.getPropDefault(SettingsArea.I), ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, SettingsArea.getPropDefault(SettingsArea.VISIBLE), ...
		SettingsArea.X, SettingsArea.getPropDefault(SettingsArea.X), ...
		SettingsArea.Y, SettingsArea.getPropDefault(SettingsArea.Y), ...
		SettingsArea.Z, SettingsArea.getPropDefault(SettingsArea.Z), ...
		SettingsArea.FACECOLOR, SettingsArea.getPropDefault(SettingsArea.FACECOLOR), ...
		SettingsArea.FACEALPHA, SettingsArea.getPropDefault(SettingsArea.FACEALPHA), ...
		SettingsArea.EDGECOLOR, SettingsArea.getPropDefault(SettingsArea.EDGECOLOR), ...
		SettingsArea.EDGEALPHA, SettingsArea.getPropDefault(SettingsArea.EDGEALPHA) ...
		);
	 
	for prop = 1:1:SettingsArea.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SettingsArea.getPropTag(prop));
		switch SettingsArea.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					st.getr(prop) == SettingsArea.getNoValue(), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['Being a ' SettingsArea.getCategoryName(SettingsArea.getPropCategory(prop)) ', SettingsArea.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SettingsArea.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					st.getr(TAG) == SettingsArea.getNoValue(), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['Being a ' SettingsArea.getCategoryName(SettingsArea.getPropCategory(prop)) ', SettingsArea.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SettingsArea.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(st.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(st.getPropSettings(prop))
					assert( ...
						st.checkFormat(st.getPropFormat(prop), st.get(prop)), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						st.checkFormat(st.getPropFormat(prop), st.get(prop), st.getPropSettings(prop)), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					st.getr(prop) == SettingsArea.getNoValue(), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['Being a ' SettingsArea.getCategoryName(SettingsArea.getPropCategory(prop)) ', SettingsArea.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SettingsArea.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					st.getr(TAG) == SettingsArea.getNoValue(), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['Being a ' SettingsArea.getCategoryName(SettingsArea.getPropCategory(prop)) ', SettingsArea.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SettingsArea.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':SettingsArea']);
				assert( ...
					~isa(st.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(st.getPropSettings(prop))
					assert( ...
						st.checkFormat(st.getPropFormat(prop), st.get(prop)), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						st.checkFormat(st.getPropFormat(prop), st.get(prop), st.getPropSettings(prop)), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(st.getr(prop), SettingsArea.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by SettingsArea.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SettingsArea.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(st.getr(TAG), SettingsArea.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' TAG ') must be inizialized to its default value ' ...
					'given by SettingsArea.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SettingsArea.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, SettingsArea.getPropDefault(SettingsArea.TEMPLATE), ...
		SettingsArea.ID, SettingsArea.getPropDefault(SettingsArea.ID), ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, SettingsArea.getPropDefault(SettingsArea.PANEL), ...
		SettingsArea.PROP, SettingsArea.getPropDefault(SettingsArea.PROP), ...
		SettingsArea.TAG, SettingsArea.getPropDefault(SettingsArea.TAG), ...
		SettingsArea.I, SettingsArea.getPropDefault(SettingsArea.I), ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, SettingsArea.getPropDefault(SettingsArea.VISIBLE), ...
		SettingsArea.X, SettingsArea.getPropDefault(SettingsArea.X), ...
		SettingsArea.Y, SettingsArea.getPropDefault(SettingsArea.Y), ...
		SettingsArea.Z, SettingsArea.getPropDefault(SettingsArea.Z), ...
		SettingsArea.FACECOLOR, SettingsArea.getPropDefault(SettingsArea.FACECOLOR), ...
		SettingsArea.FACEALPHA, SettingsArea.getPropDefault(SettingsArea.FACEALPHA), ...
		SettingsArea.EDGECOLOR, SettingsArea.getPropDefault(SettingsArea.EDGECOLOR), ...
		SettingsArea.EDGEALPHA, SettingsArea.getPropDefault(SettingsArea.EDGEALPHA) ...
		);
	 
	for prop = 1:1:SettingsArea.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SettingsArea.getPropTag(prop));
		switch SettingsArea.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(st.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(st.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(st.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(st.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					st.checkFormat(st.getPropFormat(prop), st.getr(prop),st.getPropSettings(prop)), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':SettingsArea']);
				assert( ...
					~isa(st.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(st.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':SettingsArea']);
	% 			assert( ...
	% 				~isa(st.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
	% 				['SettingsArea.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(st.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
	% 				['SettingsArea.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				st.checkFormat(st.getPropFormat(prop), st.getr(prop),st.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
	% 				['SettingsArea.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':SettingsArea']);
				assert( ...
					~isa(st.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(st.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(st.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(st.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					st.checkFormat(st.getPropFormat(prop), st.getr(prop),st.getPropSettings(prop)), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if st.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:SettingsArea');
					delete(ancestor(st.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(SettingsArea.getProps(Category.RESULT))
		for prop = 1:1:SettingsArea.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch SettingsArea.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						st.isLocked(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~st.isLocked(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st = SettingsArea();
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		TAG = upper(SettingsArea.getPropTag(prop));
		assert( ...
			~st.isLocked(prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			['SettingsArea.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~st.isLocked(TAG), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			['SettingsArea.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	st.lock()
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		switch SettingsArea.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					st.isLocked(prop), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~st.isLocked(prop), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st = SettingsArea();
	 
	warning_backup = warning('off', 'BRAPH2:SettingsArea');
	for prop = 1:1:SettingsArea.getPropNumber()
		st.lock(prop)
		switch SettingsArea.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					st.isLocked(prop), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~st.isLocked(prop), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st = SettingsArea();
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		TAG = upper(SettingsArea.getPropTag(prop));
		assert( ...
			st.isChecked(prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			['SettingsArea.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			st.isChecked(TAG), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			['SettingsArea.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	st.unchecked()
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		assert( ...
			~st.isChecked(prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			['SettingsArea.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	st.checked()
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		assert( ...
			st.isChecked(prop), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			['SettingsArea.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic SettingsArea
	st_0 = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, SettingsArea.getPropDefault(SettingsArea.TEMPLATE), ...
		SettingsArea.ID, SettingsArea.getPropDefault(SettingsArea.ID), ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, SettingsArea.getPropDefault(SettingsArea.PANEL), ...
		SettingsArea.PROP, SettingsArea.getPropDefault(SettingsArea.PROP), ...
		SettingsArea.TAG, SettingsArea.getPropDefault(SettingsArea.TAG), ...
		SettingsArea.I, SettingsArea.getPropDefault(SettingsArea.I), ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, SettingsArea.getPropDefault(SettingsArea.VISIBLE), ...
		SettingsArea.X, SettingsArea.getPropDefault(SettingsArea.X), ...
		SettingsArea.Y, SettingsArea.getPropDefault(SettingsArea.Y), ...
		SettingsArea.Z, SettingsArea.getPropDefault(SettingsArea.Z), ...
		SettingsArea.FACECOLOR, SettingsArea.getPropDefault(SettingsArea.FACECOLOR), ...
		SettingsArea.FACEALPHA, SettingsArea.getPropDefault(SettingsArea.FACEALPHA), ...
		SettingsArea.EDGECOLOR, SettingsArea.getPropDefault(SettingsArea.EDGECOLOR), ...
		SettingsArea.EDGEALPHA, SettingsArea.getPropDefault(SettingsArea.EDGEALPHA) ...
		);
	 
	% SettingsArea with 1st callbacks
	st_1 = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, st_0.getCallback(4), ..., ...
		SettingsArea.ID, st_0.getCallback(5), ..., ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, st_0.getCallback(9), ..., ...
		SettingsArea.PROP, st_0.getCallback(10), ..., ...
		SettingsArea.TAG, st_0.getCallback(11), ..., ...
		SettingsArea.I, st_0.getCallback(12), ..., ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, st_0.getCallback(15), ..., ...
		SettingsArea.X, st_0.getCallback(16), ..., ...
		SettingsArea.Y, st_0.getCallback(17), ..., ...
		SettingsArea.Z, st_0.getCallback(18), ..., ...
		SettingsArea.FACECOLOR, st_0.getCallback(19), ..., ...
		SettingsArea.FACEALPHA, st_0.getCallback(20), ..., ...
		SettingsArea.EDGECOLOR, st_0.getCallback(21), ..., ...
		SettingsArea.EDGEALPHA, st_0.getCallback(22) ... ...
		);
	 
	prop_number = SettingsArea.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SettingsArea.getPropTag(prop));
		switch SettingsArea.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(st_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(st_1.get(prop), st_0.get(prop)) && ~isa(st_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(st_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SettingsArea with 2nd callbacks
	st_2 = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, st_1.getCallback(4), ..., ...
		SettingsArea.ID, st_1.getCallback(5), ..., ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, st_1.getCallback(9), ..., ...
		SettingsArea.PROP, st_1.getCallback(10), ..., ...
		SettingsArea.TAG, st_1.getCallback(11), ..., ...
		SettingsArea.I, st_1.getCallback(12), ..., ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, st_1.getCallback(15), ..., ...
		SettingsArea.X, st_1.getCallback(16), ..., ...
		SettingsArea.Y, st_1.getCallback(17), ..., ...
		SettingsArea.Z, st_1.getCallback(18), ..., ...
		SettingsArea.FACECOLOR, st_1.getCallback(19), ..., ...
		SettingsArea.FACEALPHA, st_1.getCallback(20), ..., ...
		SettingsArea.EDGECOLOR, st_1.getCallback(21), ..., ...
		SettingsArea.EDGEALPHA, st_1.getCallback(22) ... ...
		);
	 
	prop_number = SettingsArea.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SettingsArea.getPropTag(prop));
		switch SettingsArea.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(st_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(st_2.get(prop), st_0.get(prop)) && ~isa(st_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(st_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SettingsArea with 3rd callbacks
	st_3 = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, st_2.getCallback(4), ..., ...
		SettingsArea.ID, st_2.getCallback(5), ..., ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, st_2.getCallback(9), ..., ...
		SettingsArea.PROP, st_2.getCallback(10), ..., ...
		SettingsArea.TAG, st_2.getCallback(11), ..., ...
		SettingsArea.I, st_2.getCallback(12), ..., ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, st_2.getCallback(15), ..., ...
		SettingsArea.X, st_2.getCallback(16), ..., ...
		SettingsArea.Y, st_2.getCallback(17), ..., ...
		SettingsArea.Z, st_2.getCallback(18), ..., ...
		SettingsArea.FACECOLOR, st_2.getCallback(19), ..., ...
		SettingsArea.FACEALPHA, st_2.getCallback(20), ..., ...
		SettingsArea.EDGECOLOR, st_2.getCallback(21), ..., ...
		SettingsArea.EDGEALPHA, st_2.getCallback(22) ... ...
		);
	 
	prop_number = SettingsArea.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SettingsArea.getPropTag(prop));
		switch SettingsArea.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(st_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(st_3.get(prop), st_0.get(prop)) && ~isa(st_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(st_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	st = SettingsArea();
	 
	st_copy = st.copy();
	 
	assert(st_copy ~= st, ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(st_copy, st), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		value = st.getr(prop);
		value_copy = st_copy.getr(prop);
		switch SettingsArea.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					'SettingsArea.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
							'SettingsArea.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
							'SettingsArea.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					st_copy.isLocked(prop) == st.isLocked(prop), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					'SettingsArea.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					st_copy.isChecked(prop) == st.isChecked(prop), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					'SettingsArea.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					st_copy.getPropSeed(prop) == st.getPropSeed(prop), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					'SettingsArea.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	st = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, SettingsArea.getPropDefault(SettingsArea.TEMPLATE), ...
		SettingsArea.ID, SettingsArea.getPropDefault(SettingsArea.ID), ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, SettingsArea.getPropDefault(SettingsArea.PANEL), ...
		SettingsArea.PROP, SettingsArea.getPropDefault(SettingsArea.PROP), ...
		SettingsArea.TAG, SettingsArea.getPropDefault(SettingsArea.TAG), ...
		SettingsArea.I, SettingsArea.getPropDefault(SettingsArea.I), ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, SettingsArea.getPropDefault(SettingsArea.VISIBLE), ...
		SettingsArea.X, SettingsArea.getPropDefault(SettingsArea.X), ...
		SettingsArea.Y, SettingsArea.getPropDefault(SettingsArea.Y), ...
		SettingsArea.Z, SettingsArea.getPropDefault(SettingsArea.Z), ...
		SettingsArea.FACECOLOR, SettingsArea.getPropDefault(SettingsArea.FACECOLOR), ...
		SettingsArea.FACEALPHA, SettingsArea.getPropDefault(SettingsArea.FACEALPHA), ...
		SettingsArea.EDGECOLOR, SettingsArea.getPropDefault(SettingsArea.EDGECOLOR), ...
		SettingsArea.EDGEALPHA, SettingsArea.getPropDefault(SettingsArea.EDGEALPHA) ...
		);
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		if SettingsArea.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':SettingsArea']);
			% st.memorize(prop);
			% warning(warning_backup)
		elseif SettingsArea.getPropCategory(prop) == Category.EVANESCENT && st.getPropFormat(prop) == Format.HANDLE
			st.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:SettingsArea');
			delete(ancestor(st.get(prop), 'figure'))
			warning(warning_backup)
		else
			st.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	st_copy = st.copy();
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		value = st.getr(prop);
		value_copy = st_copy.getr(prop);
		switch SettingsArea.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					'SettingsArea.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
							'SettingsArea.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
							'SettingsArea.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						st_copy.isLocked(prop) == st.isLocked(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						st_copy.isChecked(prop) == st.isChecked(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						st_copy.getPropSeed(prop) == st.getPropSeed(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	st_0 = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, SettingsArea.getPropDefault(SettingsArea.TEMPLATE), ...
		SettingsArea.ID, SettingsArea.getPropDefault(SettingsArea.ID), ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, SettingsArea.getPropDefault(SettingsArea.PANEL), ...
		SettingsArea.PROP, SettingsArea.getPropDefault(SettingsArea.PROP), ...
		SettingsArea.TAG, SettingsArea.getPropDefault(SettingsArea.TAG), ...
		SettingsArea.I, SettingsArea.getPropDefault(SettingsArea.I), ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, SettingsArea.getPropDefault(SettingsArea.VISIBLE), ...
		SettingsArea.X, SettingsArea.getPropDefault(SettingsArea.X), ...
		SettingsArea.Y, SettingsArea.getPropDefault(SettingsArea.Y), ...
		SettingsArea.Z, SettingsArea.getPropDefault(SettingsArea.Z), ...
		SettingsArea.FACECOLOR, SettingsArea.getPropDefault(SettingsArea.FACECOLOR), ...
		SettingsArea.FACEALPHA, SettingsArea.getPropDefault(SettingsArea.FACEALPHA), ...
		SettingsArea.EDGECOLOR, SettingsArea.getPropDefault(SettingsArea.EDGECOLOR), ...
		SettingsArea.EDGEALPHA, SettingsArea.getPropDefault(SettingsArea.EDGEALPHA) ...
		);
	 
	st = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, st_0.getCallback(4), ..., ...
		SettingsArea.ID, st_0.getCallback(5), ..., ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, st_0.getCallback(9), ..., ...
		SettingsArea.PROP, st_0.getCallback(10), ..., ...
		SettingsArea.TAG, st_0.getCallback(11), ..., ...
		SettingsArea.I, st_0.getCallback(12), ..., ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, st_0.getCallback(15), ..., ...
		SettingsArea.X, st_0.getCallback(16), ..., ...
		SettingsArea.Y, st_0.getCallback(17), ..., ...
		SettingsArea.Z, st_0.getCallback(18), ..., ...
		SettingsArea.FACECOLOR, st_0.getCallback(19), ..., ...
		SettingsArea.FACEALPHA, st_0.getCallback(20), ..., ...
		SettingsArea.EDGECOLOR, st_0.getCallback(21), ..., ...
		SettingsArea.EDGEALPHA, st_0.getCallback(22) ... ...
		);
	 
	st_copy = st.copy();
	st_0_copy = st_copy.getr('ID').get('EL');
	 
	for prop = 1:1:SettingsArea.getPropNumber()
		value = st.getr(prop);
		value_copy = st_copy.getr(prop);
		switch SettingsArea.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					'SettingsArea.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
							'SettingsArea.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
							'SettingsArea.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == st_0.getCallback(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The callback should be obtained from SettingsArea.getCallback().' ...
						)
					assert( ...
						value_copy == st_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The callback should be obtained from SettingsArea.getCallback().' ...
						)
				end
	 
					assert( ...
						st_copy.isLocked(prop) == st.isLocked(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						st_copy.isChecked(prop) == st.isChecked(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						st_copy.getPropSeed(prop) == st.getPropSeed(prop), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st_template = SettingsArea();
	st = SettingsArea('TEMPLATE', st_template);
	 
	for prop = 1:1:SettingsArea.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SettingsArea.getPropTag(prop));
		switch SettingsArea.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == SettingsArea.TEMPLATE
					assert( ...
						isa(st.getr(prop), 'SettingsArea'), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea TEMPLATE does not work. SettingsArea.getr(''TEMPLATE'') should be a SettingsArea element.' ...
						)
					assert( ...
						isa(st_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						'SettingsArea TEMPLATE does not work. SettingsArea_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(st.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea TEMPLATE does not work. SettingsArea.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						st.getr(prop).get('EL') == st_template && st.getr(prop).get('PROP') == prop && strcmp(st.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea TEMPLATE does not work. SettingsArea.getr(' TAG ') should be a Callback to st_template.' TAG '.'] ...
						)
					assert( ...
						isa(st_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
						['SettingsArea TEMPLATE does not work. SettingsArea_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(st.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea TEMPLATE does not work. SettingsArea.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(st_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
					['SettingsArea TEMPLATE does not work. SettingsArea_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, SettingsArea.getPropDefault(SettingsArea.TEMPLATE), ...
		SettingsArea.ID, SettingsArea.getPropDefault(SettingsArea.ID), ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, SettingsArea.getPropDefault(SettingsArea.PANEL), ...
		SettingsArea.PROP, SettingsArea.getPropDefault(SettingsArea.PROP), ...
		SettingsArea.TAG, SettingsArea.getPropDefault(SettingsArea.TAG), ...
		SettingsArea.I, SettingsArea.getPropDefault(SettingsArea.I), ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, SettingsArea.getPropDefault(SettingsArea.VISIBLE), ...
		SettingsArea.X, SettingsArea.getPropDefault(SettingsArea.X), ...
		SettingsArea.Y, SettingsArea.getPropDefault(SettingsArea.Y), ...
		SettingsArea.Z, SettingsArea.getPropDefault(SettingsArea.Z), ...
		SettingsArea.FACECOLOR, SettingsArea.getPropDefault(SettingsArea.FACECOLOR), ...
		SettingsArea.FACEALPHA, SettingsArea.getPropDefault(SettingsArea.FACEALPHA), ...
		SettingsArea.EDGECOLOR, SettingsArea.getPropDefault(SettingsArea.EDGECOLOR), ...
		SettingsArea.EDGEALPHA, SettingsArea.getPropDefault(SettingsArea.EDGEALPHA) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'settingsarea_to_be_erased.b2'];
	 
	Element.save(st, filename)
	 
	st_loaded = Element.load(filename);
	 
	assert( ...
		isequal(st.copy(), st_loaded), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.save(st) and/or SettingsArea.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	st = SettingsArea( ...
		SettingsArea.ELCLASS, SettingsArea.getNoValue(), ...
		SettingsArea.NAME, SettingsArea.getNoValue(), ...
		SettingsArea.DESCRIPTION, SettingsArea.getNoValue(), ...
		SettingsArea.TEMPLATE, SettingsArea.getPropDefault(SettingsArea.TEMPLATE), ...
		SettingsArea.ID, SettingsArea.getPropDefault(SettingsArea.ID), ...
		SettingsArea.LABEL, SettingsArea.getPropDefault(SettingsArea.LABEL), ...
		SettingsArea.NOTES, SettingsArea.getPropDefault(SettingsArea.NOTES), ...
		SettingsArea.TOSTRING, SettingsArea.getNoValue(), ...
		SettingsArea.PANEL, SettingsArea.getPropDefault(SettingsArea.PANEL), ...
		SettingsArea.PROP, SettingsArea.getPropDefault(SettingsArea.PROP), ...
		SettingsArea.TAG, SettingsArea.getPropDefault(SettingsArea.TAG), ...
		SettingsArea.I, SettingsArea.getPropDefault(SettingsArea.I), ...
		SettingsArea.H, SettingsArea.getNoValue(), ...
		SettingsArea.SETUP, SettingsArea.getNoValue(), ...
		SettingsArea.VISIBLE, SettingsArea.getPropDefault(SettingsArea.VISIBLE), ...
		SettingsArea.X, SettingsArea.getPropDefault(SettingsArea.X), ...
		SettingsArea.Y, SettingsArea.getPropDefault(SettingsArea.Y), ...
		SettingsArea.Z, SettingsArea.getPropDefault(SettingsArea.Z), ...
		SettingsArea.FACECOLOR, SettingsArea.getPropDefault(SettingsArea.FACECOLOR), ...
		SettingsArea.FACEALPHA, SettingsArea.getPropDefault(SettingsArea.FACEALPHA), ...
		SettingsArea.EDGECOLOR, SettingsArea.getPropDefault(SettingsArea.EDGECOLOR), ...
		SettingsArea.EDGEALPHA, SettingsArea.getPropDefault(SettingsArea.EDGEALPHA) ...
		);
	 
	[json, struct, el_list] = encodeJSON(st);
	[st_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(st_dec ~= st, ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		'SettingsArea.encodeJSON() or SettingsArea.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) SettingsArea.getPropFormat(prop), num2cell(SettingsArea.getProps())) == Format.HANDLE) && all(cellfun(@(prop) SettingsArea.getPropFormat(prop), num2cell(SettingsArea.getProps())) == Format.NET)
		assert(isequal(st_dec, st), ...
			[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
			'SettingsArea.encodeJSON() or SettingsArea.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':SettingsArea:' BRAPH2.FAIL_TEST], ...
		[' When testing SettingsArea no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

