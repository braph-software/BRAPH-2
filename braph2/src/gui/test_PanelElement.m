%TEST_PANELELEMENT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	categories = num2cell(Category.getCategories());
	pe = PanelElement();
	 
	% get('ELCLASS')
	if isa(PanelElement, 'ConcreteElement')
		assert(strcmp(PanelElement().get('ELCLASS'), 'PanelElement'), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement().get(''ELCLASS'') should return ''PanelElement''.')
	end
	 
	% getClass
	assert(strcmp(PanelElement.getClass(), 'PanelElement'), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.getClass() should return ''PanelElement''.')
	assert(strcmp(pe.getClass(), 'PanelElement'), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'pe.getClass() should return ''PanelElement''.')
	assert(strcmp(Element.getClass(pe), 'PanelElement'), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(pe) should return ''PanelElement''.')
	assert(strcmp(Element.getClass('PanelElement'), 'PanelElement'), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''PanelElement'') should return ''PanelElement''.')
	 
	% getSubclasses()
	assert(isequal(PanelElement.getSubclasses(), subclasses('PanelElement', [], [], true)), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.getSubclasses() should return the same result as subclasses(''PanelElement'', [], [], true).')
	assert(isequal(pe.getSubclasses(), subclasses('PanelElement', [], [], true)), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''PanelElement'', [], [], true).')
	assert(isequal(Element.getSubclasses(pe), subclasses('PanelElement', [], [], true)), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(pe) should return the same result as subclasses(''PanelElement'', [], [], true).')
	assert(isequal(Element.getSubclasses('PanelElement'), subclasses('PanelElement', [], [], true)), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''PanelElement'') should return the same result as subclasses(''PanelElement'', [], [], true).')
	 
	% getProps()
	assert(isempty(PanelElement.getProps()) || isequal(PanelElement.getProps(), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.getProps() should return a row vector [1:1:N].')
	assert(isempty(PanelElement.getProps()) || isequal(pe.getProps(), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'pe.getProps() should return a row vector [1:1:N].')
	assert(isempty(PanelElement.getProps()) || isequal(Element.getProps(pe), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pe) should return a row vector [1:1:N].')
	assert(isempty(PanelElement.getProps()) || isequal(Element.getProps('PanelElement'), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PanelElement'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) PanelElement.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PanelElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.getProps(category) does not work.')
	tmp = cellfun(@(category) pe.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PanelElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'pe.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(pe, category), categories, 'UniformOutput', false);
	assert(isempty(PanelElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pe, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('PanelElement', category), categories, 'UniformOutput', false);
	assert(isempty(PanelElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PanelElement.getProps())), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PanelElement'', category) does not work.')
	 
	% getPropNumber()
	assert(PanelElement.getPropNumber() == length(PanelElement.getProps()), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.getPropNumber() should return the number of properties.')
	assert(pe.getPropNumber() == length(PanelElement.getProps()), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'pe.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(pe) == length(PanelElement.getProps()), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pe) should return the number of properties.')
	assert(Element.getPropNumber('PanelElement') == length(PanelElement.getProps()), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PanelElement'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) PanelElement.getPropNumber(category), categories)) == PanelElement.getPropNumber(), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) pe.getPropNumber(category), categories)) == PanelElement.getPropNumber(), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'pe.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(pe, category), categories)) == PanelElement.getPropNumber(), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pe, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('PanelElement', category), categories)) == PanelElement.getPropNumber(), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PanelElement'', category) does not work.')
	 
	% existsProp(prop)
	assert(~PanelElement.existsProp(NaN), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.existsProp(prop) does not work.')
	assert(~pe.existsProp(NaN), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'pe.existsProp(prop) does not work.')
	assert(~Element.existsProp(pe, NaN), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(pe, prop) does not work.')
	assert(~Element.existsProp('PanelElement', NaN), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''PanelElement'', prop) does not work.')
	 
	assert_with_error('PanelElement.existsProp(NaN)', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], pe)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], pe)
	assert_with_error('Element.existsProp(''PanelElement'', NaN)', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PanelElement.getPropNumber()
		assert(PanelElement.existsProp(prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.existsProp(prop) does not work.')
		assert(pe.existsProp(prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.existsProp(prop) does not work.')
		assert(Element.existsProp(pe, prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(pe, prop) does not work.')
		assert(Element.existsProp('PanelElement', prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''PanelElement'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~PanelElement.existsTag(''), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.existsTag(tag) does not work.')
	assert(~pe.existsTag(''), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'pe.existsTag(tag) does not work.')
	assert(~Element.existsTag(pe, ''), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(pe, tag) does not work.')
	assert(~Element.existsTag('PanelElement', ''), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''PanelElement'', tag) does not work.')
	 
	assert_with_error('PanelElement.existsTag('''')', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], pe)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], pe)
	assert_with_error('Element.existsTag(''PanelElement'', '''')', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
		assert(PanelElement.existsTag(tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.existsTag(tag) does not work.')
		assert(pe.existsTag(tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.existsTag(tag) does not work.')
		assert(Element.existsTag(pe, tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(pe, tga) does not work.')
		assert(Element.existsTag('PanelElement', tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''PanelElement'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		assert(PanelElement.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropProp(prop) does not work.')
		assert(pe.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropProp(prop) does not work.')
		assert(Element.getPropProp(pe, prop) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pe, prop) does not work.')
		assert(Element.getPropProp('PanelElement', prop) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PanelElement'', prop) does not work.')
	 
		tag = pe.getPropTag(prop);
		assert(PanelElement.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropProp(tag) does not work.')
		assert(pe.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropProp(tag) does not work.')
		assert(Element.getPropProp(pe, tag) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pe, tag) does not work.')
		assert(Element.getPropProp('PanelElement', prop) == prop, ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PanelElement'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		assert(strcmp(PanelElement.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropTag(prop) does not work.')
		assert(strcmp(pe.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(pe, prop), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pe, prop) does not work.')
		assert(strcmp(Element.getPropTag('PanelElement', prop), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PanelElement'', prop) does not work.')
	 
		assert(strcmp(PanelElement.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropTag(tag) does not work.')
		assert(strcmp(pe.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(pe, tag), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pe, tag) does not work.')
		assert(strcmp(Element.getPropTag('PanelElement', prop), tag), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PanelElement'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		assert(Category.existsCategory(PanelElement.getPropCategory(prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(pe.getPropCategory(prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pe, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pe, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pe, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PanelElement'', prop) does not work.')
	 
		assert(Category.existsCategory(PanelElement.getPropCategory(tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(pe.getPropCategory(tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pe, tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pe, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pe, tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PanelElement'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		assert(Format.existsFormat(PanelElement.getPropFormat(prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(pe.getPropFormat(prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pe, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pe, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pe, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PanelElement'', prop) does not work.')
	 
		assert(Format.existsFormat(PanelElement.getPropFormat(tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(pe.getPropFormat(tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pe, tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pe, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pe, tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PanelElement'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		assert(ischar(PanelElement.getPropDescription(prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropDescription(prop) does not work.')
		assert(ischar(pe.getPropDescription(prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(pe, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pe, prop) does not work.')
		assert(ischar(Element.getPropDescription(pe, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PanelElement'', prop) does not work.')
	 
		assert(ischar(PanelElement.getPropDescription(tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.getPropDescription(tag) does not work.')
		assert(ischar(pe.getPropDescription(tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(pe, tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pe, tag) does not work.')
		assert(ischar(Element.getPropDescription(pe, tag)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PanelElement'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		settings = PanelElement.getPropSettings(prop);
		settings = pe.getPropSettings(prop);
		settings = Element.getPropSettings(pe, prop);
		settings = Element.getPropSettings('PanelElement', prop);
	 
		settings = PanelElement.getPropSettings(tag);
		settings = pe.getPropSettings(tag);
		settings = Element.getPropSettings(pe, tag);
		settings = Element.getPropSettings('PanelElement', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		default = PanelElement.getPropDefault(prop);
		default = pe.getPropDefault(prop);
		default = Element.getPropDefault(pe, prop);
		default = Element.getPropDefault('PanelElement', prop);
	 
		default = PanelElement.getPropDefault(tag);
		default = pe.getPropDefault(tag);
		default = Element.getPropDefault(pe, tag);
		default = Element.getPropDefault('PanelElement', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		conditioned_default = PanelElement.getPropDefaultConditioned(prop);
		conditioned_default = pe.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(pe, prop);
		conditioned_default = Element.getPropDefaultConditioned('PanelElement', prop);
	 
		conditioned_default = PanelElement.getPropDefaultConditioned(tag);
		conditioned_default = pe.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(pe, tag);
		conditioned_default = Element.getPropDefaultConditioned('PanelElement', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:PanelElement.getPropNumber()
		tag = pe.getPropTag(prop);
	 
		assert(~PanelElement.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.checkProp(prop, value) does not work.')
		assert(~pe.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(pe, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pe, prop, value) does not work.')
		assert(~Element.checkProp('PanelElement', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PanelElement'', prop, value) does not work.')
	 
		assert_with_error('PanelElement.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], prop, pe)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], prop, pe)
		assert_with_error('Element.checkProp(''PanelElement'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~PanelElement.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.checkProp(tag, value) does not work.')
		assert(~pe.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(pe, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pe, tag, value) does not work.')
		assert(~Element.checkProp('PanelElement', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PanelElement'', tag, value) does not work.')
	 
		assert_with_error('PanelElement.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], tag, pe)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], tag, pe)
		assert_with_error('Element.checkProp(''PanelElement'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PanelElement:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(PanelElement.checkProp(prop, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.checkProp(prop, <conditioned default value>) does not work.')
		assert(pe.checkProp(prop, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(pe, prop, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pe, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('PanelElement', prop, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PanelElement'', prop, <conditioned default value>) does not work.')
	 
		assert(PanelElement.checkProp(tag, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.checkProp(tag, <conditioned default value>) does not work.')
		assert(pe.checkProp(tag, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'pe.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(pe, tag, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pe, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('PanelElement', tag, Element.getPropDefaultConditioned(PanelElement, prop)), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PanelElement'', tag, <conditioned default value>) does not work.')
	 
	end
	 
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, PanelElement.getPropDefault(PanelElement.TEMPLATE), ...
		PanelElement.ID, PanelElement.getPropDefault(PanelElement.ID), ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, PanelElement.getPropDefault(PanelElement.WAITBAR), ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, PanelElement.getPropDefault(PanelElement.PARENT), ...
		PanelElement.BKGCOLOR, PanelElement.getPropDefault(PanelElement.BKGCOLOR), ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, PanelElement.getPropDefault(PanelElement.EL), ...
		PanelElement.PR_ORDER, PanelElement.getPropDefault(PanelElement.PR_ORDER), ...
		PanelElement.PR_TITLE, PanelElement.getPropDefault(PanelElement.PR_TITLE), ...
		PanelElement.PR_VISIBLE, PanelElement.getPropDefault(PanelElement.PR_VISIBLE), ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, PanelElement.getPropDefault(PanelElement.MIN_WIDTH), ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	for prop = 1:1:PanelElement.getPropNumber()
	 
		% excluded props
		if any(prop == [PanelElement.H_WAITBAR PanelElement.PARENT PanelElement.H PanelElement.PR_ORDER PanelElement.PR_TITLE PanelElement.PR_VISIBLE PanelElement.PR_DICT])
			continue
		end
	 
		TAG = upper(PanelElement.getPropTag(prop));
		switch PanelElement.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					pe.getr(prop) == PanelElement.getNoValue(), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' PanelElement.getCategoryName(PanelElement.getPropCategory(prop)) ', PanelElement.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PanelElement.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pe.getr(TAG) == PanelElement.getNoValue(), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' PanelElement.getCategoryName(PanelElement.getPropCategory(prop)) ', PanelElement.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PanelElement.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(pe.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pe.getPropSettings(prop))
					assert( ...
						pe.checkFormat(pe.getPropFormat(prop), pe.get(prop)), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pe.checkFormat(pe.getPropFormat(prop), pe.get(prop), pe.getPropSettings(prop)), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					pe.getr(prop) == PanelElement.getNoValue(), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' PanelElement.getCategoryName(PanelElement.getPropCategory(prop)) ', PanelElement.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PanelElement.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pe.getr(TAG) == PanelElement.getNoValue(), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' PanelElement.getCategoryName(PanelElement.getPropCategory(prop)) ', PanelElement.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PanelElement.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':PanelElement']);
				assert( ...
					~isa(pe.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pe.getPropSettings(prop))
					assert( ...
						pe.checkFormat(pe.getPropFormat(prop), pe.get(prop)), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pe.checkFormat(pe.getPropFormat(prop), pe.get(prop), pe.getPropSettings(prop)), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(pe.getr(prop), PanelElement.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by PanelElement.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PanelElement.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(pe.getr(TAG), PanelElement.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' TAG ') must be inizialized to its default value ' ...
					'given by PanelElement.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PanelElement.getr(' TAG ').'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, PanelElement.getPropDefault(PanelElement.TEMPLATE), ...
		PanelElement.ID, PanelElement.getPropDefault(PanelElement.ID), ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, PanelElement.getPropDefault(PanelElement.WAITBAR), ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, PanelElement.getPropDefault(PanelElement.PARENT), ...
		PanelElement.BKGCOLOR, PanelElement.getPropDefault(PanelElement.BKGCOLOR), ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, PanelElement.getPropDefault(PanelElement.EL), ...
		PanelElement.PR_ORDER, PanelElement.getPropDefault(PanelElement.PR_ORDER), ...
		PanelElement.PR_TITLE, PanelElement.getPropDefault(PanelElement.PR_TITLE), ...
		PanelElement.PR_VISIBLE, PanelElement.getPropDefault(PanelElement.PR_VISIBLE), ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, PanelElement.getPropDefault(PanelElement.MIN_WIDTH), ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	for prop = 1:1:PanelElement.getPropNumber()
	 
		% excluded props
		if any(prop == [PanelElement.H_WAITBAR PanelElement.PARENT PanelElement.H PanelElement.PR_ORDER PanelElement.PR_TITLE PanelElement.PR_VISIBLE PanelElement.PR_DICT])
			continue
		end
	 
		TAG = upper(PanelElement.getPropTag(prop));
		switch PanelElement.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(pe.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pe.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pe.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pe.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pe.checkFormat(pe.getPropFormat(prop), pe.getr(prop),pe.getPropSettings(prop)), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':PanelElement']);
				assert( ...
					~isa(pe.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pe.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':PanelElement']);
	% 			assert( ...
	% 				~isa(pe.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
	% 				['PanelElement.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(pe.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
	% 				['PanelElement.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				pe.checkFormat(pe.getPropFormat(prop), pe.getr(prop),pe.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
	% 				['PanelElement.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':PanelElement']);
				assert( ...
					~isa(pe.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(pe.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pe.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pe.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pe.checkFormat(pe.getPropFormat(prop), pe.getr(prop),pe.getPropSettings(prop)), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if pe.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:PanelElement');
					delete(ancestor(pe.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(PanelElement.getProps(Category.RESULT))
		for prop = 1:1:PanelElement.getPropNumber()
	 
			% excluded props
			if any(prop == [PanelElement.H_WAITBAR PanelElement.PARENT PanelElement.H PanelElement.PR_ORDER PanelElement.PR_TITLE PanelElement.PR_VISIBLE PanelElement.PR_DICT])
				continue
			end
	 
			switch PanelElement.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						pe.isLocked(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~pe.isLocked(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe = PanelElement();
	 
	for prop = 1:1:PanelElement.getPropNumber()
		TAG = upper(PanelElement.getPropTag(prop));
		assert( ...
			~pe.isLocked(prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			['PanelElement.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~pe.isLocked(TAG), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			['PanelElement.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	pe.lock()
	 
	for prop = 1:1:PanelElement.getPropNumber()
		switch PanelElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					pe.isLocked(prop), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~pe.isLocked(prop), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe = PanelElement();
	 
	warning_backup = warning('off', 'BRAPH2:PanelElement');
	for prop = 1:1:PanelElement.getPropNumber()
		pe.lock(prop)
		switch PanelElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					pe.isLocked(prop), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~pe.isLocked(prop), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe = PanelElement();
	 
	for prop = 1:1:PanelElement.getPropNumber()
		TAG = upper(PanelElement.getPropTag(prop));
		assert( ...
			pe.isChecked(prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			['PanelElement.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			pe.isChecked(TAG), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			['PanelElement.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	pe.unchecked()
	 
	for prop = 1:1:PanelElement.getPropNumber()
		assert( ...
			~pe.isChecked(prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			['PanelElement.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	pe.checked()
	 
	for prop = 1:1:PanelElement.getPropNumber()
		assert( ...
			pe.isChecked(prop), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			['PanelElement.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	% basic PanelElement
	pe_0 = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, PanelElement.getPropDefault(PanelElement.TEMPLATE), ...
		PanelElement.ID, PanelElement.getPropDefault(PanelElement.ID), ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, PanelElement.getPropDefault(PanelElement.WAITBAR), ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, PanelElement.getPropDefault(PanelElement.PARENT), ...
		PanelElement.BKGCOLOR, PanelElement.getPropDefault(PanelElement.BKGCOLOR), ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, PanelElement.getPropDefault(PanelElement.EL), ...
		PanelElement.PR_ORDER, PanelElement.getPropDefault(PanelElement.PR_ORDER), ...
		PanelElement.PR_TITLE, PanelElement.getPropDefault(PanelElement.PR_TITLE), ...
		PanelElement.PR_VISIBLE, PanelElement.getPropDefault(PanelElement.PR_VISIBLE), ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, PanelElement.getPropDefault(PanelElement.MIN_WIDTH), ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	% PanelElement with 1st callbacks
	pe_1 = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, pe_0.getCallback(4), ..., ...
		PanelElement.ID, pe_0.getCallback(5), ..., ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, pe_0.getCallback(9), ..., ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, pe_0.getCallback(13), ..., ...
		PanelElement.BKGCOLOR, pe_0.getCallback(14), ..., ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, pe_0.getCallback(20), ..., ...
		PanelElement.PR_ORDER, pe_0.getCallback(21), ..., ...
		PanelElement.PR_TITLE, pe_0.getCallback(22), ..., ...
		PanelElement.PR_VISIBLE, pe_0.getCallback(23), ..., ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, pe_0.getCallback(25), ..., ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	prop_number = PanelElement.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PanelElement.getPropTag(prop));
		switch PanelElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pe_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pe_1.get(prop), pe_0.get(prop)) && ~isa(pe_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pe_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PanelElement with 2nd callbacks
	pe_2 = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, pe_1.getCallback(4), ..., ...
		PanelElement.ID, pe_1.getCallback(5), ..., ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, pe_1.getCallback(9), ..., ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, pe_1.getCallback(13), ..., ...
		PanelElement.BKGCOLOR, pe_1.getCallback(14), ..., ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, pe_1.getCallback(20), ..., ...
		PanelElement.PR_ORDER, pe_1.getCallback(21), ..., ...
		PanelElement.PR_TITLE, pe_1.getCallback(22), ..., ...
		PanelElement.PR_VISIBLE, pe_1.getCallback(23), ..., ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, pe_1.getCallback(25), ..., ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	prop_number = PanelElement.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PanelElement.getPropTag(prop));
		switch PanelElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pe_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pe_2.get(prop), pe_0.get(prop)) && ~isa(pe_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pe_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PanelElement with 3rd callbacks
	pe_3 = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, pe_2.getCallback(4), ..., ...
		PanelElement.ID, pe_2.getCallback(5), ..., ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, pe_2.getCallback(9), ..., ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, pe_2.getCallback(13), ..., ...
		PanelElement.BKGCOLOR, pe_2.getCallback(14), ..., ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, pe_2.getCallback(20), ..., ...
		PanelElement.PR_ORDER, pe_2.getCallback(21), ..., ...
		PanelElement.PR_TITLE, pe_2.getCallback(22), ..., ...
		PanelElement.PR_VISIBLE, pe_2.getCallback(23), ..., ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, pe_2.getCallback(25), ..., ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	prop_number = PanelElement.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PanelElement.getPropTag(prop));
		switch PanelElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pe_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pe_3.get(prop), pe_0.get(prop)) && ~isa(pe_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pe_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	% copy empty element
	pe = PanelElement();
	 
	pe_copy = pe.copy();
	 
	assert(pe_copy ~= pe, ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(pe_copy, pe), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:PanelElement.getPropNumber()
		value = pe.getr(prop);
		value_copy = pe_copy.getr(prop);
		switch PanelElement.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					'PanelElement.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
							'PanelElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
							'PanelElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					pe_copy.isLocked(prop) == pe.isLocked(prop), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					'PanelElement.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pe_copy.isChecked(prop) == pe.isChecked(prop), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					'PanelElement.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pe_copy.getPropSeed(prop) == pe.getPropSeed(prop), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					'PanelElement.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	pe = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, PanelElement.getPropDefault(PanelElement.TEMPLATE), ...
		PanelElement.ID, PanelElement.getPropDefault(PanelElement.ID), ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, PanelElement.getPropDefault(PanelElement.WAITBAR), ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, PanelElement.getPropDefault(PanelElement.PARENT), ...
		PanelElement.BKGCOLOR, PanelElement.getPropDefault(PanelElement.BKGCOLOR), ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, PanelElement.getPropDefault(PanelElement.EL), ...
		PanelElement.PR_ORDER, PanelElement.getPropDefault(PanelElement.PR_ORDER), ...
		PanelElement.PR_TITLE, PanelElement.getPropDefault(PanelElement.PR_TITLE), ...
		PanelElement.PR_VISIBLE, PanelElement.getPropDefault(PanelElement.PR_VISIBLE), ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, PanelElement.getPropDefault(PanelElement.MIN_WIDTH), ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	for prop = 1:1:PanelElement.getPropNumber()
		if PanelElement.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':PanelElement']);
			% pe.memorize(prop);
			% warning(warning_backup)
		elseif PanelElement.getPropCategory(prop) == Category.EVANESCENT && pe.getPropFormat(prop) == Format.HANDLE
			pe.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:PanelElement');
			delete(ancestor(pe.get(prop), 'figure'))
			warning(warning_backup)
		else
			pe.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	pe_copy = pe.copy();
	 
	for prop = 1:1:PanelElement.getPropNumber()
		value = pe.getr(prop);
		value_copy = pe_copy.getr(prop);
		switch PanelElement.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					'PanelElement.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
							'PanelElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
							'PanelElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						pe_copy.isLocked(prop) == pe.isLocked(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pe_copy.isChecked(prop) == pe.isChecked(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pe_copy.getPropSeed(prop) == pe.getPropSeed(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	pe_0 = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, PanelElement.getPropDefault(PanelElement.TEMPLATE), ...
		PanelElement.ID, PanelElement.getPropDefault(PanelElement.ID), ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, PanelElement.getPropDefault(PanelElement.WAITBAR), ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, PanelElement.getPropDefault(PanelElement.PARENT), ...
		PanelElement.BKGCOLOR, PanelElement.getPropDefault(PanelElement.BKGCOLOR), ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, PanelElement.getPropDefault(PanelElement.EL), ...
		PanelElement.PR_ORDER, PanelElement.getPropDefault(PanelElement.PR_ORDER), ...
		PanelElement.PR_TITLE, PanelElement.getPropDefault(PanelElement.PR_TITLE), ...
		PanelElement.PR_VISIBLE, PanelElement.getPropDefault(PanelElement.PR_VISIBLE), ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, PanelElement.getPropDefault(PanelElement.MIN_WIDTH), ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	pe = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, pe_0.getCallback(4), ..., ...
		PanelElement.ID, pe_0.getCallback(5), ..., ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, pe_0.getCallback(9), ..., ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, pe_0.getCallback(13), ..., ...
		PanelElement.BKGCOLOR, pe_0.getCallback(14), ..., ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, pe_0.getCallback(20), ..., ...
		PanelElement.PR_ORDER, pe_0.getCallback(21), ..., ...
		PanelElement.PR_TITLE, pe_0.getCallback(22), ..., ...
		PanelElement.PR_VISIBLE, pe_0.getCallback(23), ..., ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, pe_0.getCallback(25), ..., ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	pe_copy = pe.copy();
	pe_0_copy = pe_copy.getr('ID').get('EL');
	 
	for prop = 1:1:PanelElement.getPropNumber()
		value = pe.getr(prop);
		value_copy = pe_copy.getr(prop);
		switch PanelElement.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					'PanelElement.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
							'PanelElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
							'PanelElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == pe_0.getCallback(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The callback should be obtained from PanelElement.getCallback().' ...
						)
					assert( ...
						value_copy == pe_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The callback should be obtained from PanelElement.getCallback().' ...
						)
				end
	 
					assert( ...
						pe_copy.isLocked(prop) == pe.isLocked(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pe_copy.isChecked(prop) == pe.isChecked(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pe_copy.getPropSeed(prop) == pe.getPropSeed(prop), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe_template = PanelElement();
	pe = PanelElement('TEMPLATE', pe_template);
	 
	for prop = 1:1:PanelElement.getPropNumber()
	 
		% excluded props
		if any(prop == [PanelElement.H_WAITBAR PanelElement.PARENT PanelElement.H PanelElement.PR_ORDER PanelElement.PR_TITLE PanelElement.PR_VISIBLE PanelElement.PR_DICT])
			continue
		end
	 
		TAG = upper(PanelElement.getPropTag(prop));
		switch PanelElement.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == PanelElement.TEMPLATE
					assert( ...
						isa(pe.getr(prop), 'PanelElement'), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement TEMPLATE does not work. PanelElement.getr(''TEMPLATE'') should be a PanelElement element.' ...
						)
					assert( ...
						isa(pe_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						'PanelElement TEMPLATE does not work. PanelElement_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(pe.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement TEMPLATE does not work. PanelElement.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						pe.getr(prop).get('EL') == pe_template && pe.getr(prop).get('PROP') == prop && strcmp(pe.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement TEMPLATE does not work. PanelElement.getr(' TAG ') should be a Callback to pe_template.' TAG '.'] ...
						)
					assert( ...
						isa(pe_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
						['PanelElement TEMPLATE does not work. PanelElement_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(pe.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement TEMPLATE does not work. PanelElement.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(pe_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
					['PanelElement TEMPLATE does not work. PanelElement_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, PanelElement.getPropDefault(PanelElement.TEMPLATE), ...
		PanelElement.ID, PanelElement.getPropDefault(PanelElement.ID), ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, PanelElement.getPropDefault(PanelElement.WAITBAR), ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, PanelElement.getPropDefault(PanelElement.PARENT), ...
		PanelElement.BKGCOLOR, PanelElement.getPropDefault(PanelElement.BKGCOLOR), ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, PanelElement.getPropDefault(PanelElement.EL), ...
		PanelElement.PR_ORDER, PanelElement.getPropDefault(PanelElement.PR_ORDER), ...
		PanelElement.PR_TITLE, PanelElement.getPropDefault(PanelElement.PR_TITLE), ...
		PanelElement.PR_VISIBLE, PanelElement.getPropDefault(PanelElement.PR_VISIBLE), ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, PanelElement.getPropDefault(PanelElement.MIN_WIDTH), ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'panelelement_to_be_erased.b2'];
	 
	Element.save(pe, filename)
	 
	pe_loaded = Element.load(filename);
	 
	assert( ...
		isequal(pe.copy(), pe_loaded), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.save(pe) and/or PanelElement.load() do not work.' ...
		)
	 
	delete(filename)
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	pe = PanelElement( ...
		PanelElement.ELCLASS, PanelElement.getNoValue(), ...
		PanelElement.NAME, PanelElement.getNoValue(), ...
		PanelElement.DESCRIPTION, PanelElement.getNoValue(), ...
		PanelElement.TEMPLATE, PanelElement.getPropDefault(PanelElement.TEMPLATE), ...
		PanelElement.ID, PanelElement.getPropDefault(PanelElement.ID), ...
		PanelElement.LABEL, PanelElement.getPropDefault(PanelElement.LABEL), ...
		PanelElement.NOTES, PanelElement.getPropDefault(PanelElement.NOTES), ...
		PanelElement.TOSTRING, PanelElement.getNoValue(), ...
		PanelElement.WAITBAR, PanelElement.getPropDefault(PanelElement.WAITBAR), ...
		PanelElement.H_WAITBAR, PanelElement.getNoValue(), ...
		PanelElement.DRAW, PanelElement.getNoValue(), ...
		PanelElement.DRAWN, PanelElement.getNoValue(), ...
		PanelElement.PARENT, PanelElement.getPropDefault(PanelElement.PARENT), ...
		PanelElement.BKGCOLOR, PanelElement.getPropDefault(PanelElement.BKGCOLOR), ...
		PanelElement.H, PanelElement.getNoValue(), ...
		PanelElement.SHOW, PanelElement.getNoValue(), ...
		PanelElement.HIDE, PanelElement.getNoValue(), ...
		PanelElement.DELETE, PanelElement.getNoValue(), ...
		PanelElement.CLOSE, PanelElement.getNoValue(), ...
		PanelElement.EL, PanelElement.getPropDefault(PanelElement.EL), ...
		PanelElement.PR_ORDER, PanelElement.getPropDefault(PanelElement.PR_ORDER), ...
		PanelElement.PR_TITLE, PanelElement.getPropDefault(PanelElement.PR_TITLE), ...
		PanelElement.PR_VISIBLE, PanelElement.getPropDefault(PanelElement.PR_VISIBLE), ...
		PanelElement.PR_DICT, PanelElement.getNoValue(), ...
		PanelElement.MIN_WIDTH, PanelElement.getPropDefault(PanelElement.MIN_WIDTH), ...
		PanelElement.RESIZEX, PanelElement.getNoValue(), ...
		PanelElement.RESIZEY, PanelElement.getNoValue(), ...
		PanelElement.LISTENER_PPHEIGHT, PanelElement.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(pe);
	[pe_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(pe_dec ~= pe, ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		'PanelElement.encodeJSON() or PanelElement.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) PanelElement.getPropFormat(prop), num2cell(PanelElement.getProps())) == Format.HANDLE) && all(cellfun(@(prop) PanelElement.getPropFormat(prop), num2cell(PanelElement.getProps())) == Format.NET)
		assert(isequal(pe_dec, pe), ...
			[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
			'PanelElement.encodeJSON() or PanelElement.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 12: Remove Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	warning('off', [BRAPH2.STR ':PanelElement'])
	assert(length(findall(0, 'type', 'figure')) == 2)
	delete(findall(0, 'type', 'figure'))
	warning('on', [BRAPH2.STR ':PanelElement'])
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 13: Example 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	gui = GUI('MENUBAR', true, 'MENU_ABOUT', true, 'TOOLBAR', true, 'TOOL_ABOUT', true, 'CLOSEREQ', false);
	pe = PanelElement('PARENT', gui);
	el = pe.memorize('EL');
	pe.get('DRAW')
	pe.get('SHOW')
	assert(isequal(pe.get('H').get('ColumnWidth'), {'1x'}))
	
	pe.get('RESIZEX')
	assert(isequal(pe.get('H').get('ColumnWidth'), {300}))
	
	pe.get('RESIZEY')
	% cellfun(@(pr) assert(h(pr.get('H')) == pr.get('HEIGHT')), pe.get('PR_DICT').get('IT_LIST'), 'UniformOutput', false)
	
	gui.set('POSITION', [0 .8 1 .2])
	pe.get('RESIZEX')
	assert(~isequal(pe.get('H').get('ColumnWidth'), {300}))
	
	gui.set('POSITION', [0 0 .1 1])
	pe.get('RESIZEX')
	assert(isequal(pe.get('H').get('ColumnWidth'), {300}))
	
	% set(gui.memorize('H'), 'SizeChangedFcn', 'pe.get(''RESIZEX'')')
	
	pe.get('CLOSE')
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 14: Example 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	if exist('ETA_LN', 'class') == 8
	    
	    et = ETA_LN();
	% % % et = ETA( ...
	% % %     'PROP_STRING_M', 'mmm', ...
	% % %     'PROP_STRING_P', 'ppp', ...
	% % %     'PROP_STRING_D', 'ddd', ...
	% % %     'PROP_LOGICAL_M', true, ...
	% % %     'PROP_LOGICAL_P', false, ...
	% % %     'PROP_LOGICAL_D', false, ...
	% % %     'PROP_OPTION_M', 'two', ... 
	% % %     'PROP_OPTION_P', 'three', ...
	% % %     'PROP_OPTION_D', '', ...
	% % %     'PROP_CLASS_M', 'ETA', ...
	% % %     'PROP_CLASS_P', 'ETA', ...
	% % %     'PROP_CLASS_D', 'PanelElement', ...
	% % %     'PROP_CLASSLIST_M', {'ETA'}, ...
	% % %     'PROP_CLASSLIST_P', {'Element', 'ETA', 'PanelElement'}, ...
	% % %     'PROP_CLASSLIST_D', {}, ...
	% % %     'PROP_ITEM_M', ETA('PROP_STRING_M', 'ETA trial'), ...
	% % %     'PROP_ITEM_P', ETB('ID', 'BR trial 2'), ...
	% % %     'PROP_ITEM_D', ETB('ID', 'BR trial 3'), ...
	% % %     'PROP_ITEMLIST_M', {ETA('PROP_STRING_M', 'ETA trial 1'), ETA('PROP_STRING_M', 'ETA trial 2'), ETA('PROP_STRING_M', 'ETA trial 3')}, ...
	% % %     'PROP_ITEMLIST_P', {ETB('ID', 'BR trial 1'), ETB('ID', 'BR trial 2'), ETB('ID', 'BR trial 3')}, ...
	% % %     'PROP_ITEMLIST_D', {}, ...
	% % %     'PROP_IDICT_M', IndexedDictionary('IT_CLASS', 'ETA', 'IT_KEY', ETA.getPropProp('PROP_STRING_D')), ...
	% % %     'PROP_IDICT_P', IndexedDictionary('IT_CLASS', 'ETB', 'IT_LIST', {ETB('ID', 'BR trial A'), ETB('ID', 'BR trial B'), ETB('ID', 'BR trial C')}), ...
	% % %     'PROP_IDICT_D', IndexedDictionary(), ...
	% % %     'PROP_SCALAR_M', 1, ...
	% % %     'PROP_SCALAR_P', 3, ...
	% % %     'PROP_SCALAR_D', 10, ...
	% % %     'PROP_RVECTOR_M', ones(1, 10), ...
	% % %     'PROP_RVECTOR_P', zeros(1, 10), ...
	% % %     'PROP_RVECTOR_D', rand(1, 10), ...
	% % %     'PROP_CVECTOR_M', ones(10, 1), ...
	% % %     'PROP_CVECTOR_P', zeros(10, 1), ...
	% % %     'PROP_CVECTOR_D', rand(10, 1), ...
	% % %     'PROP_MATRIX_M', zeros(8,10), ...
	% % %     'PROP_MATRIX_P', randn(10), ...
	% % %     'PROP_MATRIX_D', rand(12), ...
	% % %     'PROP_SMATRIX_M', eye(4), ...
	% % %     'PROP_SMATRIX_P', randn(3), ...
	% % %     'PROP_SMATRIX_D', rand(5), ...
	% % %     'PROP_CELL_M', {randn(4), randn(4), randn(4); randn(4), randn(4), randn(4); randn(4), randn(4), randn(4)}, ...
	% % %     'PROP_CELL_P', {eye(10)}, ...
	% % %     'PROP_CELL_D', {randn(2), randn(2); randn(2), randn(2)} ...
	% % %     );
	
	    gui = GUI('MENUBAR', true, 'MENU_ABOUT', true, 'TOOLBAR', true, 'TOOL_ABOUT', true, 'CLOSEREQ', false);
	    % set(gui.memorize('H'), 'SizeChangedFcn', 'pe.get(''RESIZEX'')')
	    pe = PanelElement('PARENT', gui, 'EL', et);
	    pe.get('DRAW')
	    pe.get('SHOW')
	    pe.get('RESIZEY')
	    
	    pe.get('PR_DICT').get('IT', 'ID').set('HEIGHT', 200)
	    % cellfun(@(pr) assert(h(pr.get('H')) == pr.get('HEIGHT')), pe.get('PR_DICT').get('IT_LIST'), 'UniformOutput', false)
	    
	    pe.get('CLOSE')
	end
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 15: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':PanelElement:' BRAPH2.FAIL_TEST], ...
		[' When testing PanelElement no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

%% Test 16: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':PanelElement'])
	
	delete(findall(0, 'type', 'figure'))
	
	warning('on', [BRAPH2.STR ':PanelElement'])
end

