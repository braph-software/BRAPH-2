%TEST_PANEL

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	categories = num2cell(Category.getCategories());
	pn = Panel();
	 
	% get('ELCLASS')
	if isa(Panel, 'ConcreteElement')
		assert(strcmp(Panel().get('ELCLASS'), 'Panel'), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel().get(''ELCLASS'') should return ''Panel''.')
	end
	 
	% getBuild()
	assert(Panel.getBuild() == 1 && Panel.getBuild() > 0, ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.getBuild() should return the Panel build number.')
	assert(pn.getBuild() == 1 && pn.getBuild() > 0 , ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.getBuild() should return the Panel build number.')
	assert(Element.getBuild(pn) == 1 && Element.getBuild(pn) > 0, ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(pn) should return the Panel build number.')
	assert(Element.getBuild('Panel') == 1 && Element.getBuild('Panel') > 0, ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''Panel'') should return the Panel build number.')
	 
	% getClass()
	assert(strcmp(Panel.getClass(), 'Panel'), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.getClass() should return ''Panel''.')
	assert(strcmp(pn.getClass(), 'Panel'), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.getClass() should return ''Panel''.')
	assert(strcmp(Element.getClass(pn), 'Panel'), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(pn) should return ''Panel''.')
	assert(strcmp(Element.getClass('Panel'), 'Panel'), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''Panel'') should return ''Panel''.')
	 
	% getSubclasses()
	assert(isequal(Panel.getSubclasses(), subclasses('Panel', [], [], true)), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.getSubclasses() should return the same result as subclasses(''Panel'', [], [], true).')
	assert(isequal(pn.getSubclasses(), subclasses('Panel', [], [], true)), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''Panel'', [], [], true).')
	assert(isequal(Element.getSubclasses(pn), subclasses('Panel', [], [], true)), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(pn) should return the same result as subclasses(''Panel'', [], [], true).')
	assert(isequal(Element.getSubclasses('Panel'), subclasses('Panel', [], [], true)), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''Panel'') should return the same result as subclasses(''Panel'', [], [], true).')
	 
	% getProps()
	assert(isempty(Panel.getProps()) || isequal(Panel.getProps(), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.getProps() should return a row vector [1:1:N].')
	assert(isempty(Panel.getProps()) || isequal(pn.getProps(), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.getProps() should return a row vector [1:1:N].')
	assert(isempty(Panel.getProps()) || isequal(Element.getProps(pn), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pn) should return a row vector [1:1:N].')
	assert(isempty(Panel.getProps()) || isequal(Element.getProps('Panel'), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Panel'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) Panel.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Panel.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.getProps(category) does not work.')
	tmp = cellfun(@(category) pn.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Panel.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(pn, category), categories, 'UniformOutput', false);
	assert(isempty(Panel.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pn, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('Panel', category), categories, 'UniformOutput', false);
	assert(isempty(Panel.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Panel.getProps())), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Panel'', category) does not work.')
	 
	% getPropNumber()
	assert(Panel.getPropNumber() == length(Panel.getProps()), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.getPropNumber() should return the number of properties.')
	assert(pn.getPropNumber() == length(Panel.getProps()), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(pn) == length(Panel.getProps()), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pn) should return the number of properties.')
	assert(Element.getPropNumber('Panel') == length(Panel.getProps()), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Panel'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) Panel.getPropNumber(category), categories)) == Panel.getPropNumber(), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) pn.getPropNumber(category), categories)) == Panel.getPropNumber(), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(pn, category), categories)) == Panel.getPropNumber(), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pn, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('Panel', category), categories)) == Panel.getPropNumber(), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Panel'', category) does not work.')
	 
	% existsProp(prop)
	assert(~Panel.existsProp(NaN), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.existsProp(prop) does not work.')
	assert(~pn.existsProp(NaN), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.existsProp(prop) does not work.')
	assert(~Element.existsProp(pn, NaN), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(pn, prop) does not work.')
	assert(~Element.existsProp('Panel', NaN), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''Panel'', prop) does not work.')
	 
	assert_with_error('Panel.existsProp(NaN)', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], pn)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], pn)
	assert_with_error('Element.existsProp(''Panel'', NaN)', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Panel.getPropNumber()
		assert(Panel.existsProp(prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.existsProp(prop) does not work.')
		assert(pn.existsProp(prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.existsProp(prop) does not work.')
		assert(Element.existsProp(pn, prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(pn, prop) does not work.')
		assert(Element.existsProp('Panel', prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''Panel'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~Panel.existsTag(''), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.existsTag(tag) does not work.')
	assert(~pn.existsTag(''), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'pn.existsTag(tag) does not work.')
	assert(~Element.existsTag(pn, ''), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(pn, tag) does not work.')
	assert(~Element.existsTag('Panel', ''), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''Panel'', tag) does not work.')
	 
	assert_with_error('Panel.existsTag('''')', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], pn)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], pn)
	assert_with_error('Element.existsTag(''Panel'', '''')', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
		assert(Panel.existsTag(tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.existsTag(tag) does not work.')
		assert(pn.existsTag(tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.existsTag(tag) does not work.')
		assert(Element.existsTag(pn, tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(pn, tga) does not work.')
		assert(Element.existsTag('Panel', tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''Panel'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:Panel.getPropNumber()
		assert(Panel.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropProp(prop) does not work.')
		assert(pn.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropProp(prop) does not work.')
		assert(Element.getPropProp(pn, prop) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pn, prop) does not work.')
		assert(Element.getPropProp('Panel', prop) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Panel'', prop) does not work.')
	 
		tag = pn.getPropTag(prop);
		assert(Panel.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropProp(tag) does not work.')
		assert(pn.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropProp(tag) does not work.')
		assert(Element.getPropProp(pn, tag) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pn, tag) does not work.')
		assert(Element.getPropProp('Panel', prop) == prop, ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Panel'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		assert(strcmp(Panel.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropTag(prop) does not work.')
		assert(strcmp(pn.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(pn, prop), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pn, prop) does not work.')
		assert(strcmp(Element.getPropTag('Panel', prop), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Panel'', prop) does not work.')
	 
		assert(strcmp(Panel.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropTag(tag) does not work.')
		assert(strcmp(pn.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(pn, tag), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pn, tag) does not work.')
		assert(strcmp(Element.getPropTag('Panel', prop), tag), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Panel'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		assert(Category.existsCategory(Panel.getPropCategory(prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(pn.getPropCategory(prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pn, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pn, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pn, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Panel'', prop) does not work.')
	 
		assert(Category.existsCategory(Panel.getPropCategory(tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(pn.getPropCategory(tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pn, tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pn, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pn, tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Panel'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		assert(Format.existsFormat(Panel.getPropFormat(prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(pn.getPropFormat(prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pn, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pn, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pn, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Panel'', prop) does not work.')
	 
		assert(Format.existsFormat(Panel.getPropFormat(tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(pn.getPropFormat(tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pn, tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pn, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pn, tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Panel'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		assert(ischar(Panel.getPropDescription(prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropDescription(prop) does not work.')
		assert(ischar(pn.getPropDescription(prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(pn, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pn, prop) does not work.')
		assert(ischar(Element.getPropDescription(pn, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Panel'', prop) does not work.')
	 
		assert(ischar(Panel.getPropDescription(tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.getPropDescription(tag) does not work.')
		assert(ischar(pn.getPropDescription(tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(pn, tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pn, tag) does not work.')
		assert(ischar(Element.getPropDescription(pn, tag)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Panel'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		settings = Panel.getPropSettings(prop);
		settings = pn.getPropSettings(prop);
		settings = Element.getPropSettings(pn, prop);
		settings = Element.getPropSettings('Panel', prop);
	 
		settings = Panel.getPropSettings(tag);
		settings = pn.getPropSettings(tag);
		settings = Element.getPropSettings(pn, tag);
		settings = Element.getPropSettings('Panel', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		default = Panel.getPropDefault(prop);
		default = pn.getPropDefault(prop);
		default = Element.getPropDefault(pn, prop);
		default = Element.getPropDefault('Panel', prop);
	 
		default = Panel.getPropDefault(tag);
		default = pn.getPropDefault(tag);
		default = Element.getPropDefault(pn, tag);
		default = Element.getPropDefault('Panel', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		conditioned_default = Panel.getPropDefaultConditioned(prop);
		conditioned_default = pn.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(pn, prop);
		conditioned_default = Element.getPropDefaultConditioned('Panel', prop);
	 
		conditioned_default = Panel.getPropDefaultConditioned(tag);
		conditioned_default = pn.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(pn, tag);
		conditioned_default = Element.getPropDefaultConditioned('Panel', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:Panel.getPropNumber()
		tag = pn.getPropTag(prop);
	 
		assert(~Panel.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.checkProp(prop, value) does not work.')
		assert(~pn.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(pn, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pn, prop, value) does not work.')
		assert(~Element.checkProp('Panel', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Panel'', prop, value) does not work.')
	 
		assert_with_error('Panel.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], prop, pn)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], prop, pn)
		assert_with_error('Element.checkProp(''Panel'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~Panel.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.checkProp(tag, value) does not work.')
		assert(~pn.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(pn, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pn, tag, value) does not work.')
		assert(~Element.checkProp('Panel', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Panel'', tag, value) does not work.')
	 
		assert_with_error('Panel.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], tag, pn)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], tag, pn)
		assert_with_error('Element.checkProp(''Panel'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Panel:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(Panel.checkProp(prop, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.checkProp(prop, <conditioned default value>) does not work.')
		assert(pn.checkProp(prop, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(pn, prop, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pn, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('Panel', prop, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Panel'', prop, <conditioned default value>) does not work.')
	 
		assert(Panel.checkProp(tag, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.checkProp(tag, <conditioned default value>) does not work.')
		assert(pn.checkProp(tag, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'pn.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(pn, tag, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pn, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('Panel', tag, Element.getPropDefaultConditioned(Panel, prop)), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Panel'', tag, <conditioned default value>) does not work.')
	 
	end
	 
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, Panel.getPropDefault(Panel.TEMPLATE), ...
		Panel.ID, Panel.getPropDefault(Panel.ID), ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, Panel.getPropDefault(Panel.WAITBAR), ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, Panel.getPropDefault(Panel.PARENT), ...
		Panel.BKGCOLOR, Panel.getPropDefault(Panel.BKGCOLOR), ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	for prop = 1:1:Panel.getPropNumber()
	 
		% excluded props
		if any(prop == [Panel.PARENT Panel.H])
			continue
		end
	 
		TAG = upper(Panel.getPropTag(prop));
		switch Panel.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					pn.getr(prop) == Panel.getNoValue(), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Being a ' Panel.getCategoryName(Panel.getPropCategory(prop)) ', Panel.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Panel.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pn.getr(TAG) == Panel.getNoValue(), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Being a ' Panel.getCategoryName(Panel.getPropCategory(prop)) ', Panel.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Panel.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(pn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pn.getPropSettings(prop))
					assert( ...
						pn.checkFormat(pn.getPropFormat(prop), pn.get(prop)), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pn.checkFormat(pn.getPropFormat(prop), pn.get(prop), pn.getPropSettings(prop)), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					pn.getr(prop) == Panel.getNoValue(), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Being a ' Panel.getCategoryName(Panel.getPropCategory(prop)) ', Panel.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Panel.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pn.getr(TAG) == Panel.getNoValue(), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Being a ' Panel.getCategoryName(Panel.getPropCategory(prop)) ', Panel.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Panel.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':Panel']);
				assert( ...
					~isa(pn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pn.getPropSettings(prop))
					assert( ...
						pn.checkFormat(pn.getPropFormat(prop), pn.get(prop)), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pn.checkFormat(pn.getPropFormat(prop), pn.get(prop), pn.getPropSettings(prop)), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(pn.getr(prop), Panel.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by Panel.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Panel.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(pn.getr(TAG), Panel.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' TAG ') must be inizialized to its default value ' ...
					'given by Panel.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Panel.getr(' TAG ').'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, Panel.getPropDefault(Panel.TEMPLATE), ...
		Panel.ID, Panel.getPropDefault(Panel.ID), ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, Panel.getPropDefault(Panel.WAITBAR), ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, Panel.getPropDefault(Panel.PARENT), ...
		Panel.BKGCOLOR, Panel.getPropDefault(Panel.BKGCOLOR), ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	for prop = 1:1:Panel.getPropNumber()
	 
		% excluded props
		if any(prop == [Panel.PARENT Panel.H])
			continue
		end
	 
		TAG = upper(Panel.getPropTag(prop));
		switch Panel.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(pn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pn.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pn.checkFormat(pn.getPropFormat(prop), pn.getr(prop),pn.getPropSettings(prop)), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':Panel']);
				assert( ...
					~isa(pn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':Panel']);
	% 			assert( ...
	% 				~isa(pn.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
	% 				['Panel.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(pn.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
	% 				['Panel.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				pn.checkFormat(pn.getPropFormat(prop), pn.getr(prop),pn.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
	% 				['Panel.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':Panel']);
				assert( ...
					~isa(pn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(pn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pn.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pn.checkFormat(pn.getPropFormat(prop), pn.getr(prop),pn.getPropSettings(prop)), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if pn.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:Panel');
					delete(ancestor(pn.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(Panel.getProps(Category.RESULT))
		for prop = 1:1:Panel.getPropNumber()
	 
			% excluded props
			if any(prop == [Panel.PARENT Panel.H])
				continue
			end
	 
			switch Panel.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						pn.isLocked(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~pn.isLocked(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn = Panel();
	 
	for prop = 1:1:Panel.getPropNumber()
		TAG = upper(Panel.getPropTag(prop));
		assert( ...
			~pn.isLocked(prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			['Panel.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~pn.isLocked(TAG), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			['Panel.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	pn.lock()
	 
	for prop = 1:1:Panel.getPropNumber()
		switch Panel.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					pn.isLocked(prop), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~pn.isLocked(prop), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn = Panel();
	 
	warning_backup = warning('off', 'BRAPH2:Panel');
	for prop = 1:1:Panel.getPropNumber()
		pn.lock(prop)
		switch Panel.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					pn.isLocked(prop), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~pn.isLocked(prop), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn = Panel();
	 
	for prop = 1:1:Panel.getPropNumber()
		TAG = upper(Panel.getPropTag(prop));
		assert( ...
			pn.isChecked(prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			['Panel.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			pn.isChecked(TAG), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			['Panel.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	pn.unchecked()
	 
	for prop = 1:1:Panel.getPropNumber()
		assert( ...
			~pn.isChecked(prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			['Panel.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	pn.checked()
	 
	for prop = 1:1:Panel.getPropNumber()
		assert( ...
			pn.isChecked(prop), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			['Panel.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	% basic Panel
	pn_0 = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, Panel.getPropDefault(Panel.TEMPLATE), ...
		Panel.ID, Panel.getPropDefault(Panel.ID), ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, Panel.getPropDefault(Panel.WAITBAR), ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, Panel.getPropDefault(Panel.PARENT), ...
		Panel.BKGCOLOR, Panel.getPropDefault(Panel.BKGCOLOR), ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	% Panel with 1st callbacks
	pn_1 = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, pn_0.getCallback(4), ..., ...
		Panel.ID, pn_0.getCallback(5), ..., ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, pn_0.getCallback(9), ..., ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, pn_0.getCallback(13), ..., ...
		Panel.BKGCOLOR, pn_0.getCallback(14), ..., ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	prop_number = Panel.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Panel.getPropTag(prop));
		switch Panel.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pn_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pn_1.get(prop), pn_0.get(prop)) && ~isa(pn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pn_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Panel with 2nd callbacks
	pn_2 = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, pn_1.getCallback(4), ..., ...
		Panel.ID, pn_1.getCallback(5), ..., ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, pn_1.getCallback(9), ..., ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, pn_1.getCallback(13), ..., ...
		Panel.BKGCOLOR, pn_1.getCallback(14), ..., ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	prop_number = Panel.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Panel.getPropTag(prop));
		switch Panel.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pn_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pn_2.get(prop), pn_0.get(prop)) && ~isa(pn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pn_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Panel with 3rd callbacks
	pn_3 = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, pn_2.getCallback(4), ..., ...
		Panel.ID, pn_2.getCallback(5), ..., ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, pn_2.getCallback(9), ..., ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, pn_2.getCallback(13), ..., ...
		Panel.BKGCOLOR, pn_2.getCallback(14), ..., ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	prop_number = Panel.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Panel.getPropTag(prop));
		switch Panel.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pn_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pn_3.get(prop), pn_0.get(prop)) && ~isa(pn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pn_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	% copy empty element
	pn = Panel();
	 
	pn_copy = pn.copy();
	 
	assert(pn_copy ~= pn, ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(pn_copy, pn), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:Panel.getPropNumber()
		value = pn.getr(prop);
		value_copy = pn_copy.getr(prop);
		switch Panel.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					'Panel.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
							'Panel.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
							'Panel.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					pn_copy.isLocked(prop) == pn.isLocked(prop), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					'Panel.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pn_copy.isChecked(prop) == pn.isChecked(prop), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					'Panel.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pn_copy.getPropSeed(prop) == pn.getPropSeed(prop), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					'Panel.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	pn = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, Panel.getPropDefault(Panel.TEMPLATE), ...
		Panel.ID, Panel.getPropDefault(Panel.ID), ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, Panel.getPropDefault(Panel.WAITBAR), ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, Panel.getPropDefault(Panel.PARENT), ...
		Panel.BKGCOLOR, Panel.getPropDefault(Panel.BKGCOLOR), ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	for prop = 1:1:Panel.getPropNumber()
		if Panel.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':Panel']);
			% pn.memorize(prop);
			% warning(warning_backup)
		elseif Panel.getPropCategory(prop) == Category.EVANESCENT && pn.getPropFormat(prop) == Format.HANDLE
			pn.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:Panel');
			delete(ancestor(pn.get(prop), 'figure'))
			warning(warning_backup)
		else
			pn.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	pn_copy = pn.copy();
	 
	for prop = 1:1:Panel.getPropNumber()
		value = pn.getr(prop);
		value_copy = pn_copy.getr(prop);
		switch Panel.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					'Panel.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
							'Panel.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
							'Panel.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						pn_copy.isLocked(prop) == pn.isLocked(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pn_copy.isChecked(prop) == pn.isChecked(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pn_copy.getPropSeed(prop) == pn.getPropSeed(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	pn_0 = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, Panel.getPropDefault(Panel.TEMPLATE), ...
		Panel.ID, Panel.getPropDefault(Panel.ID), ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, Panel.getPropDefault(Panel.WAITBAR), ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, Panel.getPropDefault(Panel.PARENT), ...
		Panel.BKGCOLOR, Panel.getPropDefault(Panel.BKGCOLOR), ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	pn = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, pn_0.getCallback(4), ..., ...
		Panel.ID, pn_0.getCallback(5), ..., ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, pn_0.getCallback(9), ..., ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, pn_0.getCallback(13), ..., ...
		Panel.BKGCOLOR, pn_0.getCallback(14), ..., ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	pn_copy = pn.copy();
	pn_0_copy = pn_copy.getr('ID').get('EL');
	 
	for prop = 1:1:Panel.getPropNumber()
		value = pn.getr(prop);
		value_copy = pn_copy.getr(prop);
		switch Panel.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					'Panel.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
							'Panel.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
							'Panel.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == pn_0.getCallback(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The callback should be obtained from Panel.getCallback().' ...
						)
					assert( ...
						value_copy == pn_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The callback should be obtained from Panel.getCallback().' ...
						)
				end
	 
					assert( ...
						pn_copy.isLocked(prop) == pn.isLocked(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pn_copy.isChecked(prop) == pn.isChecked(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pn_copy.getPropSeed(prop) == pn.getPropSeed(prop), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn_template = Panel();
	pn = Panel('TEMPLATE', pn_template);
	 
	for prop = 1:1:Panel.getPropNumber()
	 
		% excluded props
		if any(prop == [Panel.PARENT Panel.H])
			continue
		end
	 
		TAG = upper(Panel.getPropTag(prop));
		switch Panel.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == Panel.TEMPLATE
					assert( ...
						isa(pn.getr(prop), 'Panel'), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel TEMPLATE does not work. Panel.getr(''TEMPLATE'') should be a Panel element.' ...
						)
					assert( ...
						isa(pn_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						'Panel TEMPLATE does not work. Panel_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(pn.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel TEMPLATE does not work. Panel.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						pn.getr(prop).get('EL') == pn_template && pn.getr(prop).get('PROP') == prop && strcmp(pn.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel TEMPLATE does not work. Panel.getr(' TAG ') should be a Callback to pn_template.' TAG '.'] ...
						)
					assert( ...
						isa(pn_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
						['Panel TEMPLATE does not work. Panel_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(pn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel TEMPLATE does not work. Panel.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(pn_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
					['Panel TEMPLATE does not work. Panel_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, Panel.getPropDefault(Panel.TEMPLATE), ...
		Panel.ID, Panel.getPropDefault(Panel.ID), ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, Panel.getPropDefault(Panel.WAITBAR), ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, Panel.getPropDefault(Panel.PARENT), ...
		Panel.BKGCOLOR, Panel.getPropDefault(Panel.BKGCOLOR), ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'panel_to_be_erased.b2'];
	 
	Element.save(pn, filename)
	 
	pn_loaded = Element.load(filename);
	 
	assert( ...
		isequal(pn.copy(), pn_loaded), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.save(pn) and/or Panel.load() do not work.' ...
		)
	 
	delete(filename)
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	pn = Panel( ...
		Panel.ELCLASS, Panel.getNoValue(), ...
		Panel.NAME, Panel.getNoValue(), ...
		Panel.DESCRIPTION, Panel.getNoValue(), ...
		Panel.TEMPLATE, Panel.getPropDefault(Panel.TEMPLATE), ...
		Panel.ID, Panel.getPropDefault(Panel.ID), ...
		Panel.LABEL, Panel.getPropDefault(Panel.LABEL), ...
		Panel.NOTES, Panel.getPropDefault(Panel.NOTES), ...
		Panel.TOSTRING, Panel.getNoValue(), ...
		Panel.WAITBAR, Panel.getPropDefault(Panel.WAITBAR), ...
		Panel.H_WAITBAR, Panel.getNoValue(), ...
		Panel.DRAW, Panel.getNoValue(), ...
		Panel.DRAWN, Panel.getNoValue(), ...
		Panel.PARENT, Panel.getPropDefault(Panel.PARENT), ...
		Panel.BKGCOLOR, Panel.getPropDefault(Panel.BKGCOLOR), ...
		Panel.H, Panel.getNoValue(), ...
		Panel.SHOW, Panel.getNoValue(), ...
		Panel.HIDE, Panel.getNoValue(), ...
		Panel.DELETE, Panel.getNoValue(), ...
		Panel.CLOSE, Panel.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(pn);
	[pn_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(pn_dec ~= pn, ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		'Panel.encodeJSON() or Panel.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) Panel.getPropFormat(prop), num2cell(Panel.getProps())) == Format.HANDLE) && all(cellfun(@(prop) Panel.getPropFormat(prop), num2cell(Panel.getProps())) == Format.NET)
		assert(isequal(pn_dec, pn), ...
			[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
			'Panel.encodeJSON() or Panel.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 12: Remove Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	warning('off', [BRAPH2.STR ':Panel'])
	assert(length(findall(0, 'type', 'figure')) == 2)
	delete(findall(0, 'type', 'figure'))
	warning('on', [BRAPH2.STR ':Panel'])
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 13: Example
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	gui = GUI('CLOSEREQ', false);
	
	pn = Panel( ...
	    'PARENT', gui, ...
	    'BKGCOLOR', [1 0 0] ...
	    );
	assert(~pn.get('DRAWN'))
	
	for i = 1:2
	    pn.get('DRAW', 'Units', 'normalized', 'Position', [.25 .25 .50 .50])
	    assert(pn.get('DRAWN'))
	    p = pn.get('H');
	    assert(check_graphics(p, 'uipanel'))
	    f = pn.get('PARENT').get('H');
	    assert(check_graphics(f, 'figure'))
	
	    pn.get('SHOW')
	    assert(pn.get('DRAWN'))
	
	    pn.get('HIDE')
	    assert(pn.get('DRAWN'))
	
	    pn.get('SHOW')
	    assert(pn.get('DRAWN'))
	
	    pn.get('CLOSE')
	    assert(~pn.get('DRAWN'))
	    assert(~check_graphics(pn, 'uipanel'))
	    assert(isa(pn.getr('H'), 'NoValue'))
	    assert(~check_graphics(f, 'figure'))
	    assert(isa(pn.get('PARENT').getr('H'), 'NoValue'))
	end
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':Panel:' BRAPH2.FAIL_TEST], ...
		[' When testing Panel no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
	
	warning('on', [BRAPH2.STR ':Panel'])
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	warning('off', [BRAPH2.STR ':Panel'])
	
	delete(findall(0, 'type', 'figure'))
	
	warning('on', [BRAPH2.STR ':Panel'])
end

