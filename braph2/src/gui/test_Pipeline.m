%TEST_PIPELINE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	pip = Pipeline();
	 
	% get('ELCLASS')
	if isa(Pipeline, 'ConcreteElement')
		assert(strcmp(Pipeline().get('ELCLASS'), 'Pipeline'), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline().get(''ELCLASS'') should return ''Pipeline''.')
	end
	 
	% getBuild()
	assert(Pipeline.getBuild() == 1 && Pipeline.getBuild() > 0, ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.getBuild() should return the Pipeline build number.')
	assert(pip.getBuild() == 1 && pip.getBuild() > 0 , ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.getBuild() should return the Pipeline build number.')
	assert(Element.getBuild(pip) == 1 && Element.getBuild(pip) > 0, ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(pip) should return the Pipeline build number.')
	assert(Element.getBuild('Pipeline') == 1 && Element.getBuild('Pipeline') > 0, ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''Pipeline'') should return the Pipeline build number.')
	 
	% getClass()
	assert(strcmp(Pipeline.getClass(), 'Pipeline'), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.getClass() should return ''Pipeline''.')
	assert(strcmp(pip.getClass(), 'Pipeline'), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.getClass() should return ''Pipeline''.')
	assert(strcmp(Element.getClass(pip), 'Pipeline'), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(pip) should return ''Pipeline''.')
	assert(strcmp(Element.getClass('Pipeline'), 'Pipeline'), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''Pipeline'') should return ''Pipeline''.')
	 
	% getSubclasses()
	assert(isequal(Pipeline.getSubclasses(), subclasses('Pipeline', [], [], true)), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.getSubclasses() should return the same result as subclasses(''Pipeline'', [], [], true).')
	assert(isequal(pip.getSubclasses(), subclasses('Pipeline', [], [], true)), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''Pipeline'', [], [], true).')
	assert(isequal(Element.getSubclasses(pip), subclasses('Pipeline', [], [], true)), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(pip) should return the same result as subclasses(''Pipeline'', [], [], true).')
	assert(isequal(Element.getSubclasses('Pipeline'), subclasses('Pipeline', [], [], true)), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''Pipeline'') should return the same result as subclasses(''Pipeline'', [], [], true).')
	 
	% getProps()
	assert(isempty(Pipeline.getProps()) || isequal(Pipeline.getProps(), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.getProps() should return a row vector [1:1:N].')
	assert(isempty(Pipeline.getProps()) || isequal(pip.getProps(), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.getProps() should return a row vector [1:1:N].')
	assert(isempty(Pipeline.getProps()) || isequal(Element.getProps(pip), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pip) should return a row vector [1:1:N].')
	assert(isempty(Pipeline.getProps()) || isequal(Element.getProps('Pipeline'), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Pipeline'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) Pipeline.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Pipeline.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.getProps(category) does not work.')
	tmp = cellfun(@(category) pip.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Pipeline.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(pip, category), categories, 'UniformOutput', false);
	assert(isempty(Pipeline.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pip, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('Pipeline', category), categories, 'UniformOutput', false);
	assert(isempty(Pipeline.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Pipeline.getProps())), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Pipeline'', category) does not work.')
	 
	% getPropNumber()
	assert(Pipeline.getPropNumber() == length(Pipeline.getProps()), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.getPropNumber() should return the number of properties.')
	assert(pip.getPropNumber() == length(Pipeline.getProps()), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(pip) == length(Pipeline.getProps()), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pip) should return the number of properties.')
	assert(Element.getPropNumber('Pipeline') == length(Pipeline.getProps()), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Pipeline'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) Pipeline.getPropNumber(category), categories)) == Pipeline.getPropNumber(), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) pip.getPropNumber(category), categories)) == Pipeline.getPropNumber(), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(pip, category), categories)) == Pipeline.getPropNumber(), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pip, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('Pipeline', category), categories)) == Pipeline.getPropNumber(), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Pipeline'', category) does not work.')
	 
	% existsProp(prop)
	assert(~Pipeline.existsProp(NaN), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.existsProp(prop) does not work.')
	assert(~pip.existsProp(NaN), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.existsProp(prop) does not work.')
	assert(~Element.existsProp(pip, NaN), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(pip, prop) does not work.')
	assert(~Element.existsProp('Pipeline', NaN), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''Pipeline'', prop) does not work.')
	 
	assert_with_error('Pipeline.existsProp(NaN)', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], pip)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], pip)
	assert_with_error('Element.existsProp(''Pipeline'', NaN)', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Pipeline.getPropNumber()
		assert(Pipeline.existsProp(prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.existsProp(prop) does not work.')
		assert(pip.existsProp(prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.existsProp(prop) does not work.')
		assert(Element.existsProp(pip, prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(pip, prop) does not work.')
		assert(Element.existsProp('Pipeline', prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''Pipeline'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~Pipeline.existsTag(''), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.existsTag(tag) does not work.')
	assert(~pip.existsTag(''), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'pip.existsTag(tag) does not work.')
	assert(~Element.existsTag(pip, ''), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(pip, tag) does not work.')
	assert(~Element.existsTag('Pipeline', ''), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''Pipeline'', tag) does not work.')
	 
	assert_with_error('Pipeline.existsTag('''')', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], pip)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], pip)
	assert_with_error('Element.existsTag(''Pipeline'', '''')', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
		assert(Pipeline.existsTag(tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.existsTag(tag) does not work.')
		assert(pip.existsTag(tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.existsTag(tag) does not work.')
		assert(Element.existsTag(pip, tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(pip, tga) does not work.')
		assert(Element.existsTag('Pipeline', tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''Pipeline'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		assert(Pipeline.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropProp(prop) does not work.')
		assert(pip.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropProp(prop) does not work.')
		assert(Element.getPropProp(pip, prop) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pip, prop) does not work.')
		assert(Element.getPropProp('Pipeline', prop) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Pipeline'', prop) does not work.')
	 
		tag = pip.getPropTag(prop);
		assert(Pipeline.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropProp(tag) does not work.')
		assert(pip.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropProp(tag) does not work.')
		assert(Element.getPropProp(pip, tag) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pip, tag) does not work.')
		assert(Element.getPropProp('Pipeline', prop) == prop, ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Pipeline'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		assert(strcmp(Pipeline.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropTag(prop) does not work.')
		assert(strcmp(pip.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(pip, prop), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pip, prop) does not work.')
		assert(strcmp(Element.getPropTag('Pipeline', prop), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Pipeline'', prop) does not work.')
	 
		assert(strcmp(Pipeline.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropTag(tag) does not work.')
		assert(strcmp(pip.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(pip, tag), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pip, tag) does not work.')
		assert(strcmp(Element.getPropTag('Pipeline', prop), tag), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Pipeline'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		assert(Category.existsCategory(Pipeline.getPropCategory(prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(pip.getPropCategory(prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pip, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pip, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pip, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Pipeline'', prop) does not work.')
	 
		assert(Category.existsCategory(Pipeline.getPropCategory(tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(pip.getPropCategory(tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pip, tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pip, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pip, tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Pipeline'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		assert(Format.existsFormat(Pipeline.getPropFormat(prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(pip.getPropFormat(prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pip, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pip, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pip, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Pipeline'', prop) does not work.')
	 
		assert(Format.existsFormat(Pipeline.getPropFormat(tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(pip.getPropFormat(tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pip, tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pip, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pip, tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Pipeline'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		assert(ischar(Pipeline.getPropDescription(prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropDescription(prop) does not work.')
		assert(ischar(pip.getPropDescription(prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(pip, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pip, prop) does not work.')
		assert(ischar(Element.getPropDescription(pip, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Pipeline'', prop) does not work.')
	 
		assert(ischar(Pipeline.getPropDescription(tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.getPropDescription(tag) does not work.')
		assert(ischar(pip.getPropDescription(tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(pip, tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pip, tag) does not work.')
		assert(ischar(Element.getPropDescription(pip, tag)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Pipeline'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		settings = Pipeline.getPropSettings(prop);
		settings = pip.getPropSettings(prop);
		settings = Element.getPropSettings(pip, prop);
		settings = Element.getPropSettings('Pipeline', prop);
	 
		settings = Pipeline.getPropSettings(tag);
		settings = pip.getPropSettings(tag);
		settings = Element.getPropSettings(pip, tag);
		settings = Element.getPropSettings('Pipeline', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		default = Pipeline.getPropDefault(prop);
		default = pip.getPropDefault(prop);
		default = Element.getPropDefault(pip, prop);
		default = Element.getPropDefault('Pipeline', prop);
	 
		default = Pipeline.getPropDefault(tag);
		default = pip.getPropDefault(tag);
		default = Element.getPropDefault(pip, tag);
		default = Element.getPropDefault('Pipeline', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		conditioned_default = Pipeline.getPropDefaultConditioned(prop);
		conditioned_default = pip.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(pip, prop);
		conditioned_default = Element.getPropDefaultConditioned('Pipeline', prop);
	 
		conditioned_default = Pipeline.getPropDefaultConditioned(tag);
		conditioned_default = pip.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(pip, tag);
		conditioned_default = Element.getPropDefaultConditioned('Pipeline', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:Pipeline.getPropNumber()
		tag = pip.getPropTag(prop);
	 
		assert(~Pipeline.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.checkProp(prop, value) does not work.')
		assert(~pip.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(pip, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pip, prop, value) does not work.')
		assert(~Element.checkProp('Pipeline', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Pipeline'', prop, value) does not work.')
	 
		assert_with_error('Pipeline.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], prop, pip)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], prop, pip)
		assert_with_error('Element.checkProp(''Pipeline'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~Pipeline.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.checkProp(tag, value) does not work.')
		assert(~pip.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(pip, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pip, tag, value) does not work.')
		assert(~Element.checkProp('Pipeline', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Pipeline'', tag, value) does not work.')
	 
		assert_with_error('Pipeline.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], tag, pip)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], tag, pip)
		assert_with_error('Element.checkProp(''Pipeline'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Pipeline:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(Pipeline.checkProp(prop, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.checkProp(prop, <conditioned default value>) does not work.')
		assert(pip.checkProp(prop, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(pip, prop, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pip, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('Pipeline', prop, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Pipeline'', prop, <conditioned default value>) does not work.')
	 
		assert(Pipeline.checkProp(tag, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.checkProp(tag, <conditioned default value>) does not work.')
		assert(pip.checkProp(tag, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'pip.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(pip, tag, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pip, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('Pipeline', tag, Element.getPropDefaultConditioned(Pipeline, prop)), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Pipeline'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, Pipeline.getPropDefault(Pipeline.TEMPLATE), ...
		Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
		);
	 
	for prop = 1:1:Pipeline.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Pipeline.getPropTag(prop));
		switch Pipeline.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					pip.getr(prop) == Pipeline.getNoValue(), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Being a ' Pipeline.getCategoryName(Pipeline.getPropCategory(prop)) ', Pipeline.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Pipeline.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pip.getr(TAG) == Pipeline.getNoValue(), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Being a ' Pipeline.getCategoryName(Pipeline.getPropCategory(prop)) ', Pipeline.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Pipeline.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(pip.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pip.getPropSettings(prop))
					assert( ...
						pip.checkFormat(pip.getPropFormat(prop), pip.get(prop)), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pip.checkFormat(pip.getPropFormat(prop), pip.get(prop), pip.getPropSettings(prop)), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					pip.getr(prop) == Pipeline.getNoValue(), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Being a ' Pipeline.getCategoryName(Pipeline.getPropCategory(prop)) ', Pipeline.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Pipeline.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pip.getr(TAG) == Pipeline.getNoValue(), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Being a ' Pipeline.getCategoryName(Pipeline.getPropCategory(prop)) ', Pipeline.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Pipeline.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':Pipeline']);
				assert( ...
					~isa(pip.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pip.getPropSettings(prop))
					assert( ...
						pip.checkFormat(pip.getPropFormat(prop), pip.get(prop)), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pip.checkFormat(pip.getPropFormat(prop), pip.get(prop), pip.getPropSettings(prop)), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(pip.getr(prop), Pipeline.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by Pipeline.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Pipeline.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(pip.getr(TAG), Pipeline.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' TAG ') must be inizialized to its default value ' ...
					'given by Pipeline.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Pipeline.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, Pipeline.getPropDefault(Pipeline.TEMPLATE), ...
		Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
		);
	 
	for prop = 1:1:Pipeline.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Pipeline.getPropTag(prop));
		switch Pipeline.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(pip.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pip.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pip.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pip.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pip.checkFormat(pip.getPropFormat(prop), pip.getr(prop),pip.getPropSettings(prop)), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':Pipeline']);
				assert( ...
					~isa(pip.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pip.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':Pipeline']);
	% 			assert( ...
	% 				~isa(pip.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
	% 				['Pipeline.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(pip.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
	% 				['Pipeline.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				pip.checkFormat(pip.getPropFormat(prop), pip.getr(prop),pip.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
	% 				['Pipeline.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':Pipeline']);
				assert( ...
					~isa(pip.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(pip.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pip.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pip.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pip.checkFormat(pip.getPropFormat(prop), pip.getr(prop),pip.getPropSettings(prop)), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if pip.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:Pipeline');
					delete(ancestor(pip.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(Pipeline.getProps(Category.RESULT))
		for prop = 1:1:Pipeline.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch Pipeline.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						pip.isLocked(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~pip.isLocked(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip = Pipeline();
	 
	for prop = 1:1:Pipeline.getPropNumber()
		TAG = upper(Pipeline.getPropTag(prop));
		assert( ...
			~pip.isLocked(prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			['Pipeline.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~pip.isLocked(TAG), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			['Pipeline.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	pip.lock()
	 
	for prop = 1:1:Pipeline.getPropNumber()
		switch Pipeline.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					pip.isLocked(prop), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~pip.isLocked(prop), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip = Pipeline();
	 
	warning_backup = warning('off', 'BRAPH2:Pipeline');
	for prop = 1:1:Pipeline.getPropNumber()
		pip.lock(prop)
		switch Pipeline.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					pip.isLocked(prop), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~pip.isLocked(prop), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip = Pipeline();
	 
	for prop = 1:1:Pipeline.getPropNumber()
		TAG = upper(Pipeline.getPropTag(prop));
		assert( ...
			pip.isChecked(prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			['Pipeline.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			pip.isChecked(TAG), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			['Pipeline.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	pip.unchecked()
	 
	for prop = 1:1:Pipeline.getPropNumber()
		assert( ...
			~pip.isChecked(prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			['Pipeline.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	pip.checked()
	 
	for prop = 1:1:Pipeline.getPropNumber()
		assert( ...
			pip.isChecked(prop), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			['Pipeline.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic Pipeline
	pip_0 = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, Pipeline.getPropDefault(Pipeline.TEMPLATE), ...
		Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
		);
	 
	% Pipeline with 1st callbacks
	pip_1 = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, pip_0.getCallback(4), ..., ...
		Pipeline.ID, pip_0.getCallback(5), ..., ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, pip_0.getCallback(11) ... ...
		);
	 
	prop_number = Pipeline.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Pipeline.getPropTag(prop));
		switch Pipeline.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pip_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pip_1.get(prop), pip_0.get(prop)) && ~isa(pip_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pip_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Pipeline with 2nd callbacks
	pip_2 = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, pip_1.getCallback(4), ..., ...
		Pipeline.ID, pip_1.getCallback(5), ..., ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, pip_1.getCallback(11) ... ...
		);
	 
	prop_number = Pipeline.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Pipeline.getPropTag(prop));
		switch Pipeline.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pip_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pip_2.get(prop), pip_0.get(prop)) && ~isa(pip_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pip_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Pipeline with 3rd callbacks
	pip_3 = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, pip_2.getCallback(4), ..., ...
		Pipeline.ID, pip_2.getCallback(5), ..., ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, pip_2.getCallback(11) ... ...
		);
	 
	prop_number = Pipeline.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Pipeline.getPropTag(prop));
		switch Pipeline.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pip_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pip_3.get(prop), pip_0.get(prop)) && ~isa(pip_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pip_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	pip = Pipeline();
	 
	pip_copy = pip.copy();
	 
	assert(pip_copy ~= pip, ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(pip_copy, pip), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:Pipeline.getPropNumber()
		value = pip.getr(prop);
		value_copy = pip_copy.getr(prop);
		switch Pipeline.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					'Pipeline.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
							'Pipeline.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
							'Pipeline.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					pip_copy.isLocked(prop) == pip.isLocked(prop), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					'Pipeline.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pip_copy.isChecked(prop) == pip.isChecked(prop), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					'Pipeline.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pip_copy.getPropSeed(prop) == pip.getPropSeed(prop), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					'Pipeline.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	pip = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, Pipeline.getPropDefault(Pipeline.TEMPLATE), ...
		Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
		);
	 
	for prop = 1:1:Pipeline.getPropNumber()
		if Pipeline.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':Pipeline']);
			% pip.memorize(prop);
			% warning(warning_backup)
		elseif Pipeline.getPropCategory(prop) == Category.EVANESCENT && pip.getPropFormat(prop) == Format.HANDLE
			pip.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:Pipeline');
			delete(ancestor(pip.get(prop), 'figure'))
			warning(warning_backup)
		else
			pip.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	pip_copy = pip.copy();
	 
	for prop = 1:1:Pipeline.getPropNumber()
		value = pip.getr(prop);
		value_copy = pip_copy.getr(prop);
		switch Pipeline.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					'Pipeline.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
							'Pipeline.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
							'Pipeline.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						pip_copy.isLocked(prop) == pip.isLocked(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pip_copy.isChecked(prop) == pip.isChecked(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pip_copy.getPropSeed(prop) == pip.getPropSeed(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	pip_0 = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, Pipeline.getPropDefault(Pipeline.TEMPLATE), ...
		Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
		);
	 
	pip = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, pip_0.getCallback(4), ..., ...
		Pipeline.ID, pip_0.getCallback(5), ..., ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, pip_0.getCallback(11) ... ...
		);
	 
	pip_copy = pip.copy();
	pip_0_copy = pip_copy.getr('ID').get('EL');
	 
	for prop = 1:1:Pipeline.getPropNumber()
		value = pip.getr(prop);
		value_copy = pip_copy.getr(prop);
		switch Pipeline.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					'Pipeline.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
							'Pipeline.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
							'Pipeline.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == pip_0.getCallback(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The callback should be obtained from Pipeline.getCallback().' ...
						)
					assert( ...
						value_copy == pip_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The callback should be obtained from Pipeline.getCallback().' ...
						)
				end
	 
					assert( ...
						pip_copy.isLocked(prop) == pip.isLocked(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pip_copy.isChecked(prop) == pip.isChecked(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pip_copy.getPropSeed(prop) == pip.getPropSeed(prop), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip_template = Pipeline();
	pip = Pipeline('TEMPLATE', pip_template);
	 
	for prop = 1:1:Pipeline.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Pipeline.getPropTag(prop));
		switch Pipeline.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == Pipeline.TEMPLATE
					assert( ...
						isa(pip.getr(prop), 'Pipeline'), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline TEMPLATE does not work. Pipeline.getr(''TEMPLATE'') should be a Pipeline element.' ...
						)
					assert( ...
						isa(pip_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						'Pipeline TEMPLATE does not work. Pipeline_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(pip.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline TEMPLATE does not work. Pipeline.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						pip.getr(prop).get('EL') == pip_template && pip.getr(prop).get('PROP') == prop && strcmp(pip.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline TEMPLATE does not work. Pipeline.getr(' TAG ') should be a Callback to pip_template.' TAG '.'] ...
						)
					assert( ...
						isa(pip_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
						['Pipeline TEMPLATE does not work. Pipeline_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(pip.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline TEMPLATE does not work. Pipeline.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(pip_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
					['Pipeline TEMPLATE does not work. Pipeline_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, Pipeline.getPropDefault(Pipeline.TEMPLATE), ...
		Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'pipeline_to_be_erased.b2'];
	 
	Element.save(pip, filename)
	 
	pip_loaded = Element.load(filename);
	 
	assert( ...
		isequal(pip.copy(), pip_loaded), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.save(pip) and/or Pipeline.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pip = Pipeline( ...
		Pipeline.ELCLASS, Pipeline.getNoValue(), ...
		Pipeline.NAME, Pipeline.getNoValue(), ...
		Pipeline.DESCRIPTION, Pipeline.getNoValue(), ...
		Pipeline.TEMPLATE, Pipeline.getPropDefault(Pipeline.TEMPLATE), ...
		Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
		Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
		Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
		Pipeline.TOSTRING, Pipeline.getNoValue(), ...
		Pipeline.README, Pipeline.getPropDefault(Pipeline.README), ...
		Pipeline.PDF, Pipeline.getPropDefault(Pipeline.PDF), ...
		Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
		);
	 
	[json, struct, el_list] = encodeJSON(pip);
	[pip_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(pip_dec ~= pip, ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		'Pipeline.encodeJSON() or Pipeline.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) Pipeline.getPropFormat(prop), num2cell(Pipeline.getProps())) == Format.HANDLE) && all(cellfun(@(prop) Pipeline.getPropFormat(prop), num2cell(Pipeline.getProps())) == Format.NET)
		assert(isequal(pip_dec, pip), ...
			[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
			'Pipeline.encodeJSON() or Pipeline.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.FAIL_TEST], ...
		[' When testing Pipeline no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

