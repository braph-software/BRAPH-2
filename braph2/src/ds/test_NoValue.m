%TEST_NOVALUE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	nv = NoValue();
	 
	% get('ELCLASS')
	if isa(NoValue, 'ConcreteElement')
		assert(strcmp(NoValue().get('ELCLASS'), 'NoValue'), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue().get(''ELCLASS'') should return ''NoValue''.')
	end
	 
	% getClass
	assert(strcmp(NoValue.getClass(), 'NoValue'), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.getClass() should return ''NoValue''.')
	assert(strcmp(nv.getClass(), 'NoValue'), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'nv.getClass() should return ''NoValue''.')
	assert(strcmp(Element.getClass(nv), 'NoValue'), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nv) should return ''NoValue''.')
	assert(strcmp(Element.getClass('NoValue'), 'NoValue'), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NoValue'') should return ''NoValue''.')
	 
	% getSubclasses()
	assert(isequal(NoValue.getSubclasses(), subclasses('NoValue', [], [], true)), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.getSubclasses() should return the same result as subclasses(''NoValue'', [], [], true).')
	assert(isequal(nv.getSubclasses(), subclasses('NoValue', [], [], true)), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NoValue'', [], [], true).')
	assert(isequal(Element.getSubclasses(nv), subclasses('NoValue', [], [], true)), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nv) should return the same result as subclasses(''NoValue'', [], [], true).')
	assert(isequal(Element.getSubclasses('NoValue'), subclasses('NoValue', [], [], true)), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NoValue'') should return the same result as subclasses(''NoValue'', [], [], true).')
	 
	% getProps()
	assert(isempty(NoValue.getProps()) || isequal(NoValue.getProps(), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.getProps() should return a row vector [1:1:N].')
	assert(isempty(NoValue.getProps()) || isequal(nv.getProps(), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'nv.getProps() should return a row vector [1:1:N].')
	assert(isempty(NoValue.getProps()) || isequal(Element.getProps(nv), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nv) should return a row vector [1:1:N].')
	assert(isempty(NoValue.getProps()) || isequal(Element.getProps('NoValue'), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NoValue'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NoValue.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NoValue.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.getProps(category) does not work.')
	tmp = cellfun(@(category) nv.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NoValue.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'nv.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nv, category), categories, 'UniformOutput', false);
	assert(isempty(NoValue.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nv, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NoValue', category), categories, 'UniformOutput', false);
	assert(isempty(NoValue.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NoValue.getProps())), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NoValue'', category) does not work.')
	 
	% getPropNumber()
	assert(NoValue.getPropNumber() == length(NoValue.getProps()), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.getPropNumber() should return the number of properties.')
	assert(nv.getPropNumber() == length(NoValue.getProps()), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'nv.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nv) == length(NoValue.getProps()), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nv) should return the number of properties.')
	assert(Element.getPropNumber('NoValue') == length(NoValue.getProps()), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NoValue'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NoValue.getPropNumber(category), categories)) == NoValue.getPropNumber(), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nv.getPropNumber(category), categories)) == NoValue.getPropNumber(), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'nv.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nv, category), categories)) == NoValue.getPropNumber(), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nv, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NoValue', category), categories)) == NoValue.getPropNumber(), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NoValue'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NoValue.existsProp(NaN), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.existsProp(prop) does not work.')
	assert(~nv.existsProp(NaN), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'nv.existsProp(prop) does not work.')
	assert(~Element.existsProp(nv, NaN), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nv, prop) does not work.')
	assert(~Element.existsProp('NoValue', NaN), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NoValue'', prop) does not work.')
	 
	assert_with_error('NoValue.existsProp(NaN)', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], nv)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], nv)
	assert_with_error('Element.existsProp(''NoValue'', NaN)', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NoValue.getPropNumber()
		assert(NoValue.existsProp(prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.existsProp(prop) does not work.')
		assert(nv.existsProp(prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.existsProp(prop) does not work.')
		assert(Element.existsProp(nv, prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nv, prop) does not work.')
		assert(Element.existsProp('NoValue', prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NoValue'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NoValue.existsTag(''), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'NoValue.existsTag(tag) does not work.')
	assert(~nv.existsTag(''), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'nv.existsTag(tag) does not work.')
	assert(~Element.existsTag(nv, ''), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nv, tag) does not work.')
	assert(~Element.existsTag('NoValue', ''), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NoValue'', tag) does not work.')
	 
	assert_with_error('NoValue.existsTag('''')', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], nv)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], nv)
	assert_with_error('Element.existsTag(''NoValue'', '''')', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
		assert(NoValue.existsTag(tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.existsTag(tag) does not work.')
		assert(nv.existsTag(tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.existsTag(tag) does not work.')
		assert(Element.existsTag(nv, tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nv, tga) does not work.')
		assert(Element.existsTag('NoValue', tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NoValue'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		assert(NoValue.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropProp(prop) does not work.')
		assert(nv.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nv, prop) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nv, prop) does not work.')
		assert(Element.getPropProp('NoValue', prop) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NoValue'', prop) does not work.')
	 
		tag = nv.getPropTag(prop);
		assert(NoValue.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropProp(tag) does not work.')
		assert(nv.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nv, tag) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nv, tag) does not work.')
		assert(Element.getPropProp('NoValue', prop) == prop, ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NoValue'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		assert(strcmp(NoValue.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropTag(prop) does not work.')
		assert(strcmp(nv.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nv, prop), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nv, prop) does not work.')
		assert(strcmp(Element.getPropTag('NoValue', prop), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NoValue'', prop) does not work.')
	 
		assert(strcmp(NoValue.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropTag(tag) does not work.')
		assert(strcmp(nv.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nv, tag), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nv, tag) does not work.')
		assert(strcmp(Element.getPropTag('NoValue', prop), tag), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NoValue'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		assert(Category.existsCategory(NoValue.getPropCategory(prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nv.getPropCategory(prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nv, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nv, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nv, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NoValue'', prop) does not work.')
	 
		assert(Category.existsCategory(NoValue.getPropCategory(tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nv.getPropCategory(tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nv, tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nv, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nv, tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NoValue'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		assert(Format.existsFormat(NoValue.getPropFormat(prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nv.getPropFormat(prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nv, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nv, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nv, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NoValue'', prop) does not work.')
	 
		assert(Format.existsFormat(NoValue.getPropFormat(tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nv.getPropFormat(tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nv, tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nv, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nv, tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NoValue'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		assert(ischar(NoValue.getPropDescription(prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropDescription(prop) does not work.')
		assert(ischar(nv.getPropDescription(prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nv, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nv, prop) does not work.')
		assert(ischar(Element.getPropDescription(nv, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NoValue'', prop) does not work.')
	 
		assert(ischar(NoValue.getPropDescription(tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.getPropDescription(tag) does not work.')
		assert(ischar(nv.getPropDescription(tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nv, tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nv, tag) does not work.')
		assert(ischar(Element.getPropDescription(nv, tag)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NoValue'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		settings = NoValue.getPropSettings(prop);
		settings = nv.getPropSettings(prop);
		settings = Element.getPropSettings(nv, prop);
		settings = Element.getPropSettings('NoValue', prop);
	 
		settings = NoValue.getPropSettings(tag);
		settings = nv.getPropSettings(tag);
		settings = Element.getPropSettings(nv, tag);
		settings = Element.getPropSettings('NoValue', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		default = NoValue.getPropDefault(prop);
		default = nv.getPropDefault(prop);
		default = Element.getPropDefault(nv, prop);
		default = Element.getPropDefault('NoValue', prop);
	 
		default = NoValue.getPropDefault(tag);
		default = nv.getPropDefault(tag);
		default = Element.getPropDefault(nv, tag);
		default = Element.getPropDefault('NoValue', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		conditioned_default = NoValue.getPropDefaultConditioned(prop);
		conditioned_default = nv.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nv, prop);
		conditioned_default = Element.getPropDefaultConditioned('NoValue', prop);
	 
		conditioned_default = NoValue.getPropDefaultConditioned(tag);
		conditioned_default = nv.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nv, tag);
		conditioned_default = Element.getPropDefaultConditioned('NoValue', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NoValue.getPropNumber()
		tag = nv.getPropTag(prop);
	 
		assert(~NoValue.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.checkProp(prop, value) does not work.')
		assert(~nv.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nv, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nv, prop, value) does not work.')
		assert(~Element.checkProp('NoValue', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NoValue'', prop, value) does not work.')
	 
		assert_with_error('NoValue.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], prop, nv)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], prop, nv)
		assert_with_error('Element.checkProp(''NoValue'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NoValue.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.checkProp(tag, value) does not work.')
		assert(~nv.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nv, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nv, tag, value) does not work.')
		assert(~Element.checkProp('NoValue', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NoValue'', tag, value) does not work.')
	 
		assert_with_error('NoValue.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], tag, nv)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], tag, nv)
		assert_with_error('Element.checkProp(''NoValue'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NoValue:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NoValue.checkProp(prop, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.checkProp(prop, <conditioned default value>) does not work.')
		assert(nv.checkProp(prop, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nv, prop, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nv, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NoValue', prop, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NoValue'', prop, <conditioned default value>) does not work.')
	 
		assert(NoValue.checkProp(tag, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'NoValue.checkProp(tag, <conditioned default value>) does not work.')
		assert(nv.checkProp(tag, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'nv.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nv, tag, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nv, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NoValue', tag, Element.getPropDefaultConditioned(NoValue, prop)), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NoValue'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% this test is not implemented for Callback and NoValue
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% this test is not implemented for Callback and NoValue
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nv = NoValue();
	 
	for prop = 1:1:NoValue.getPropNumber()
		TAG = upper(NoValue.getPropTag(prop));
		assert( ...
			~nv.isLocked(prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			['NoValue.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nv.isLocked(TAG), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			['NoValue.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nv.lock()
	 
	for prop = 1:1:NoValue.getPropNumber()
		switch NoValue.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nv.isLocked(prop), ...
					[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
					['NoValue.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nv.isLocked(prop), ...
					[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
					['NoValue.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nv = NoValue();
	 
	warning_backup = warning('off', 'BRAPH2:NoValue');
	for prop = 1:1:NoValue.getPropNumber()
		nv.lock(prop)
		switch NoValue.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nv.isLocked(prop), ...
					[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
					['NoValue.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nv.isLocked(prop), ...
					[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
					['NoValue.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nv = NoValue();
	 
	for prop = 1:1:NoValue.getPropNumber()
		TAG = upper(NoValue.getPropTag(prop));
		assert( ...
			nv.isChecked(prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			['NoValue.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nv.isChecked(TAG), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			['NoValue.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nv.unchecked()
	 
	for prop = 1:1:NoValue.getPropNumber()
		assert( ...
			~nv.isChecked(prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			['NoValue.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nv.checked()
	 
	for prop = 1:1:NoValue.getPropNumber()
		assert( ...
			nv.isChecked(prop), ...
			[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
			['NoValue.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% this test is not implemented for Callback and NoValue
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% this test is not implemented for Callback and NoValue
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% this test is not implemented for Callback and NoValue
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% this test is not implemented for Callback and NoValue
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% this test is not implemented for Callback and NoValue
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.FAIL_TEST], ...
		[' When testing NoValue no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

