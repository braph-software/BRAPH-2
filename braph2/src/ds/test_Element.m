%TEST_URELEMENT

%% Test 1: Inspection methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    el = Element();
    
    % getBuild()
    assert(Element.getBuild() == BRAPH2.BUILD, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        ['Element.getBuild() should return ' int2str(BRAPH2.BUILD) '.'])
    assert(el.getBuild() == BRAPH2.BUILD, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        ['el.getBuild() should return ' int2str(BRAPH2.BUILD) '.'])
    assert(Element.getBuild(el) == BRAPH2.BUILD, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        ['Element.getBuild(el) should return ' int2str(BRAPH2.BUILD) '.'])
    assert(Element.getBuild('Element') == BRAPH2.BUILD, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        ['Element.getBuild(''Element'') should return ' int2str(BRAPH2.BUILD) '.'])

    % getClass()
    assert(strcmp(Element.getClass(), 'Element'), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getClass() should return ''Element''.')
    assert(strcmp(el.getClass(), 'Element'), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'el.getClass() should return ''Element''.')
    assert(strcmp(Element.getClass(el), 'Element'), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getClass(el) should return ''Element''.')
    assert(strcmp(Element.getClass('Element'), 'Element'), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getClass(''Element'') should return ''Element''.')

    % getSubclasses()
    assert(isequal(Element.getSubclasses(), subclasses('Element', [], [], true)), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getSubclasses() should return the same result as subclasses(''Element'', [], [], true).')
    assert(isequal(el.getSubclasses(), subclasses('Element', [], [], true)), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'el.getSubclasses() should return the same result as subclasses(''Element'', [], [], true).')
    assert(isequal(Element.getSubclasses(el), subclasses('Element', [], [], true)), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getSubclasses(el) should return the same result as subclasses(''Element'', [], [], true).')
    assert(isequal(Element.getSubclasses('Element'), subclasses('Element', [], [], true)), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getSubclasses(''Element'') should return the same result as subclasses(''Element'', [], [], true).')
    
    % getProps([category])
    assert(isempty(Element.getProps()), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getProps() should return [].')
    assert(isempty(el.getProps()), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'el.getProps() should return [].')
    assert(isempty(Element.getProps(el)), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getProps(el) should return [].')
    assert(isempty(Element.getProps('Element')), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getProps(''Element'') should return [].')
    for category = Category.getCategories()
        assert(isempty(Element.getProps(category)), ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['Element.getProps(''' category ''') should return [].'])
        assert(isempty(el.getProps(category)), ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['el.getProps(''' category ''') should return [].'])
        assert(isempty(Element.getProps(el, category)), ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['Element.getProps(el, ''' category ''') should return [].'])
        assert(isempty(Element.getProps('Element', category)), ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['Element.getProps(''Element'', ''' category ''') should return [].'])
    end
    
    % getPropNumber([category])
    assert(Element.getPropNumber() == 0, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getPropNumber() should return 0.')
    assert(el.getPropNumber() == 0, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'el.getPropNumber() should return 0.')
    assert(Element.getPropNumber(el) == 0, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getPropNumber(el) should return 0.')
    assert(Element.getPropNumber('Element') == 0, ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.getPropNumber(''Element'') should return 0.')
    for category = Category.getCategories()
        assert(Element.getPropNumber(category) == 0, ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['Element.getPropNumber(''' category ''') should return 0.'])
        assert(el.getPropNumber(category) == 0, ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['el.getPropNumber(''' category ''') should return 0.'])
        assert(Element.getPropNumber(el, category) == 0, ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['Element.getPropNumber(el, ''' category ''') should return 0.'])
        assert(Element.getPropNumber('Element', category) == 0, ...
            [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
            ['Element.getPropNumber(''Element'', ''' category ''') should return 0.'])
    end
    
    % existsProp(prop)
    assert(~Element.existsProp(NaN), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.existsProp(prop) does not work.')
    assert(~el.existsProp(NaN), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'el.existsProp(prop) does not work.')
    assert(~Element.existsProp(el, NaN), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.existsProp(el, prop) does not work.')
    assert(~Element.existsProp('Element', NaN), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.existsProp(''Element'', prop) does not work.')
    
    assert_with_error('Element.existsProp(NaN)', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT])
    assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT], el)
    assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT], el)
    assert_with_error('Element.existsProp(''Element'', NaN)', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT])
    
    % existsTag(tag)
    assert(~Element.existsTag(''), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.existsTag(tag) does not work.')
    assert(~el.existsTag(''), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'el.existsProp(tag) does not work.')
    assert(~Element.existsTag(el, ''), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.existsTag(el, tag) does not work.')
    assert(~Element.existsTag('Element', ''), ...
        [BRAPH2.STR ':Element:' BRAPH2.FAIL_TEST], ...
        'Element.existsTag(''Element'', tag) does not work.')
    
    assert_with_error('Element.existsTag('''')', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT])
    assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT], el)
    assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT], el)
    assert_with_error('Element.existsTag(''Element'', '''')', [BRAPH2.STR ':Element:' BRAPH2.WRONG_INPUT])
    
    % getPropProp(pointer)
    % pass
    
    % getPropTag(pointer)
    % pass
    
    % getPropCategory(pointer)
    % pass

    % getPropFormat(pointer)
    % pass
    
    % getPropDescription(pointer)
    % pass
    
    % getPropSettings(pointer)
    % pass
    
    % getPropDefault(pointer)
    % pass
    
    % getPropDefaultConditioned(pointer)
    % pass
    
    % checkProp(pointer, value)
    % pass
end
