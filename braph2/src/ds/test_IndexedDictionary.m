%TEST_INDEXEDDICTIONARY

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	idict = IndexedDictionary();
	 
	% get('ELCLASS')
	if isa(IndexedDictionary, 'ConcreteElement')
		assert(strcmp(IndexedDictionary().get('ELCLASS'), 'IndexedDictionary'), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary().get(''ELCLASS'') should return ''IndexedDictionary''.')
	end
	 
	% getClass
	assert(strcmp(IndexedDictionary.getClass(), 'IndexedDictionary'), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.getClass() should return ''IndexedDictionary''.')
	assert(strcmp(idict.getClass(), 'IndexedDictionary'), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'idict.getClass() should return ''IndexedDictionary''.')
	assert(strcmp(Element.getClass(idict), 'IndexedDictionary'), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(idict) should return ''IndexedDictionary''.')
	assert(strcmp(Element.getClass('IndexedDictionary'), 'IndexedDictionary'), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''IndexedDictionary'') should return ''IndexedDictionary''.')
	 
	% getSubclasses()
	assert(isequal(IndexedDictionary.getSubclasses(), subclasses('IndexedDictionary', [], [], true)), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.getSubclasses() should return the same result as subclasses(''IndexedDictionary'', [], [], true).')
	assert(isequal(idict.getSubclasses(), subclasses('IndexedDictionary', [], [], true)), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''IndexedDictionary'', [], [], true).')
	assert(isequal(Element.getSubclasses(idict), subclasses('IndexedDictionary', [], [], true)), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(idict) should return the same result as subclasses(''IndexedDictionary'', [], [], true).')
	assert(isequal(Element.getSubclasses('IndexedDictionary'), subclasses('IndexedDictionary', [], [], true)), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''IndexedDictionary'') should return the same result as subclasses(''IndexedDictionary'', [], [], true).')
	 
	% getProps()
	assert(isempty(IndexedDictionary.getProps()) || isequal(IndexedDictionary.getProps(), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndexedDictionary.getProps()) || isequal(idict.getProps(), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'idict.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndexedDictionary.getProps()) || isequal(Element.getProps(idict), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(idict) should return a row vector [1:1:N].')
	assert(isempty(IndexedDictionary.getProps()) || isequal(Element.getProps('IndexedDictionary'), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndexedDictionary'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) IndexedDictionary.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndexedDictionary.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.getProps(category) does not work.')
	tmp = cellfun(@(category) idict.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndexedDictionary.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'idict.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(idict, category), categories, 'UniformOutput', false);
	assert(isempty(IndexedDictionary.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(idict, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('IndexedDictionary', category), categories, 'UniformOutput', false);
	assert(isempty(IndexedDictionary.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndexedDictionary.getProps())), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndexedDictionary'', category) does not work.')
	 
	% getPropNumber()
	assert(IndexedDictionary.getPropNumber() == length(IndexedDictionary.getProps()), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.getPropNumber() should return the number of properties.')
	assert(idict.getPropNumber() == length(IndexedDictionary.getProps()), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'idict.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(idict) == length(IndexedDictionary.getProps()), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(idict) should return the number of properties.')
	assert(Element.getPropNumber('IndexedDictionary') == length(IndexedDictionary.getProps()), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndexedDictionary'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) IndexedDictionary.getPropNumber(category), categories)) == IndexedDictionary.getPropNumber(), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) idict.getPropNumber(category), categories)) == IndexedDictionary.getPropNumber(), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'idict.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(idict, category), categories)) == IndexedDictionary.getPropNumber(), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(idict, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('IndexedDictionary', category), categories)) == IndexedDictionary.getPropNumber(), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndexedDictionary'', category) does not work.')
	 
	% existsProp(prop)
	assert(~IndexedDictionary.existsProp(NaN), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.existsProp(prop) does not work.')
	assert(~idict.existsProp(NaN), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'idict.existsProp(prop) does not work.')
	assert(~Element.existsProp(idict, NaN), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(idict, prop) does not work.')
	assert(~Element.existsProp('IndexedDictionary', NaN), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''IndexedDictionary'', prop) does not work.')
	 
	assert_with_error('IndexedDictionary.existsProp(NaN)', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], idict)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], idict)
	assert_with_error('Element.existsProp(''IndexedDictionary'', NaN)', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		assert(IndexedDictionary.existsProp(prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.existsProp(prop) does not work.')
		assert(idict.existsProp(prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.existsProp(prop) does not work.')
		assert(Element.existsProp(idict, prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(idict, prop) does not work.')
		assert(Element.existsProp('IndexedDictionary', prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''IndexedDictionary'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~IndexedDictionary.existsTag(''), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.existsTag(tag) does not work.')
	assert(~idict.existsTag(''), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'idict.existsTag(tag) does not work.')
	assert(~Element.existsTag(idict, ''), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(idict, tag) does not work.')
	assert(~Element.existsTag('IndexedDictionary', ''), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''IndexedDictionary'', tag) does not work.')
	 
	assert_with_error('IndexedDictionary.existsTag('''')', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], idict)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], idict)
	assert_with_error('Element.existsTag(''IndexedDictionary'', '''')', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
		assert(IndexedDictionary.existsTag(tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.existsTag(tag) does not work.')
		assert(idict.existsTag(tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.existsTag(tag) does not work.')
		assert(Element.existsTag(idict, tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(idict, tga) does not work.')
		assert(Element.existsTag('IndexedDictionary', tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''IndexedDictionary'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		assert(IndexedDictionary.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropProp(prop) does not work.')
		assert(idict.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropProp(prop) does not work.')
		assert(Element.getPropProp(idict, prop) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(idict, prop) does not work.')
		assert(Element.getPropProp('IndexedDictionary', prop) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndexedDictionary'', prop) does not work.')
	 
		tag = idict.getPropTag(prop);
		assert(IndexedDictionary.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropProp(tag) does not work.')
		assert(idict.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropProp(tag) does not work.')
		assert(Element.getPropProp(idict, tag) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(idict, tag) does not work.')
		assert(Element.getPropProp('IndexedDictionary', prop) == prop, ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndexedDictionary'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		assert(strcmp(IndexedDictionary.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropTag(prop) does not work.')
		assert(strcmp(idict.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(idict, prop), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(idict, prop) does not work.')
		assert(strcmp(Element.getPropTag('IndexedDictionary', prop), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndexedDictionary'', prop) does not work.')
	 
		assert(strcmp(IndexedDictionary.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropTag(tag) does not work.')
		assert(strcmp(idict.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(idict, tag), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(idict, tag) does not work.')
		assert(strcmp(Element.getPropTag('IndexedDictionary', prop), tag), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndexedDictionary'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		assert(Category.existsCategory(IndexedDictionary.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(idict.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(idict, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(idict, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(idict, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndexedDictionary'', prop) does not work.')
	 
		assert(Category.existsCategory(IndexedDictionary.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(idict.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(idict, tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(idict, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(idict, tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndexedDictionary'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		assert(Format.existsFormat(IndexedDictionary.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(idict.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(idict, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(idict, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(idict, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndexedDictionary'', prop) does not work.')
	 
		assert(Format.existsFormat(IndexedDictionary.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(idict.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(idict, tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(idict, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(idict, tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndexedDictionary'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		assert(ischar(IndexedDictionary.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropDescription(prop) does not work.')
		assert(ischar(idict.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(idict, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(idict, prop) does not work.')
		assert(ischar(Element.getPropDescription(idict, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndexedDictionary'', prop) does not work.')
	 
		assert(ischar(IndexedDictionary.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.getPropDescription(tag) does not work.')
		assert(ischar(idict.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(idict, tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(idict, tag) does not work.')
		assert(ischar(Element.getPropDescription(idict, tag)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndexedDictionary'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		settings = IndexedDictionary.getPropSettings(prop);
		settings = idict.getPropSettings(prop);
		settings = Element.getPropSettings(idict, prop);
		settings = Element.getPropSettings('IndexedDictionary', prop);
	 
		settings = IndexedDictionary.getPropSettings(tag);
		settings = idict.getPropSettings(tag);
		settings = Element.getPropSettings(idict, tag);
		settings = Element.getPropSettings('IndexedDictionary', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		default = IndexedDictionary.getPropDefault(prop);
		default = idict.getPropDefault(prop);
		default = Element.getPropDefault(idict, prop);
		default = Element.getPropDefault('IndexedDictionary', prop);
	 
		default = IndexedDictionary.getPropDefault(tag);
		default = idict.getPropDefault(tag);
		default = Element.getPropDefault(idict, tag);
		default = Element.getPropDefault('IndexedDictionary', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		conditioned_default = IndexedDictionary.getPropDefaultConditioned(prop);
		conditioned_default = idict.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(idict, prop);
		conditioned_default = Element.getPropDefaultConditioned('IndexedDictionary', prop);
	 
		conditioned_default = IndexedDictionary.getPropDefaultConditioned(tag);
		conditioned_default = idict.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(idict, tag);
		conditioned_default = Element.getPropDefaultConditioned('IndexedDictionary', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:IndexedDictionary.getPropNumber()
		tag = idict.getPropTag(prop);
	 
		assert(~IndexedDictionary.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.checkProp(prop, value) does not work.')
		assert(~idict.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(idict, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(idict, prop, value) does not work.')
		assert(~Element.checkProp('IndexedDictionary', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndexedDictionary'', prop, value) does not work.')
	 
		assert_with_error('IndexedDictionary.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], prop, idict)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], prop, idict)
		assert_with_error('Element.checkProp(''IndexedDictionary'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~IndexedDictionary.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.checkProp(tag, value) does not work.')
		assert(~idict.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(idict, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(idict, tag, value) does not work.')
		assert(~Element.checkProp('IndexedDictionary', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndexedDictionary'', tag, value) does not work.')
	 
		assert_with_error('IndexedDictionary.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], tag, idict)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], tag, idict)
		assert_with_error('Element.checkProp(''IndexedDictionary'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(IndexedDictionary.checkProp(prop, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.checkProp(prop, <conditioned default value>) does not work.')
		assert(idict.checkProp(prop, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(idict, prop, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(idict, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndexedDictionary', prop, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndexedDictionary'', prop, <conditioned default value>) does not work.')
	 
		assert(IndexedDictionary.checkProp(tag, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.checkProp(tag, <conditioned default value>) does not work.')
		assert(idict.checkProp(tag, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'idict.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(idict, tag, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(idict, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndexedDictionary', tag, Element.getPropDefaultConditioned(IndexedDictionary, prop)), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndexedDictionary'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, IndexedDictionary.getPropDefault(IndexedDictionary.TEMPLATE), ...
		IndexedDictionary.ID, IndexedDictionary.getPropDefault(IndexedDictionary.ID), ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, IndexedDictionary.getPropDefault(IndexedDictionary.IT_CLASS), ...
		IndexedDictionary.IT_KEY, IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
		IndexedDictionary.IT_LIST, IndexedDictionary.getPropDefault(IndexedDictionary.IT_LIST), ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndexedDictionary.getPropTag(prop));
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					idict.getr(prop) == IndexedDictionary.getNoValue(), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndexedDictionary.getCategoryName(IndexedDictionary.getPropCategory(prop)) ', IndexedDictionary.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndexedDictionary.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					idict.getr(TAG) == IndexedDictionary.getNoValue(), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndexedDictionary.getCategoryName(IndexedDictionary.getPropCategory(prop)) ', IndexedDictionary.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndexedDictionary.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(idict.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(idict.getPropSettings(prop))
					assert( ...
						idict.checkFormat(idict.getPropFormat(prop), idict.get(prop)), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						idict.checkFormat(idict.getPropFormat(prop), idict.get(prop), idict.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					idict.getr(prop) == IndexedDictionary.getNoValue(), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndexedDictionary.getCategoryName(IndexedDictionary.getPropCategory(prop)) ', IndexedDictionary.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndexedDictionary.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					idict.getr(TAG) == IndexedDictionary.getNoValue(), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndexedDictionary.getCategoryName(IndexedDictionary.getPropCategory(prop)) ', IndexedDictionary.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndexedDictionary.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':IndexedDictionary']);
				assert( ...
					~isa(idict.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(idict.getPropSettings(prop))
					assert( ...
						idict.checkFormat(idict.getPropFormat(prop), idict.get(prop)), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						idict.checkFormat(idict.getPropFormat(prop), idict.get(prop), idict.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(idict.getr(prop), IndexedDictionary.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by IndexedDictionary.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndexedDictionary.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(idict.getr(TAG), IndexedDictionary.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' TAG ') must be inizialized to its default value ' ...
					'given by IndexedDictionary.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndexedDictionary.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, IndexedDictionary.getPropDefault(IndexedDictionary.TEMPLATE), ...
		IndexedDictionary.ID, IndexedDictionary.getPropDefault(IndexedDictionary.ID), ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, IndexedDictionary.getPropDefault(IndexedDictionary.IT_CLASS), ...
		IndexedDictionary.IT_KEY, IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
		IndexedDictionary.IT_LIST, IndexedDictionary.getPropDefault(IndexedDictionary.IT_LIST), ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndexedDictionary.getPropTag(prop));
		switch IndexedDictionary.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(idict.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(idict.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(idict.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(idict.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					idict.checkFormat(idict.getPropFormat(prop), idict.getr(prop),idict.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndexedDictionary']);
				assert( ...
					~isa(idict.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(idict.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndexedDictionary']);
	% 			assert( ...
	% 				~isa(idict.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
	% 				['IndexedDictionary.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(idict.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
	% 				['IndexedDictionary.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				idict.checkFormat(idict.getPropFormat(prop), idict.getr(prop),idict.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
	% 				['IndexedDictionary.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':IndexedDictionary']);
				assert( ...
					~isa(idict.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(idict.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(idict.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(idict.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					idict.checkFormat(idict.getPropFormat(prop), idict.getr(prop),idict.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if idict.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:IndexedDictionary');
					delete(ancestor(idict.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(IndexedDictionary.getProps(Category.RESULT))
		for prop = 1:1:IndexedDictionary.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch IndexedDictionary.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						idict.isLocked(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~idict.isLocked(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict = IndexedDictionary();
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		TAG = upper(IndexedDictionary.getPropTag(prop));
		assert( ...
			~idict.isLocked(prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			['IndexedDictionary.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~idict.isLocked(TAG), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			['IndexedDictionary.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	idict.lock()
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					idict.isLocked(prop), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~idict.isLocked(prop), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict = IndexedDictionary();
	 
	warning_backup = warning('off', 'BRAPH2:IndexedDictionary');
	for prop = 1:1:IndexedDictionary.getPropNumber()
		idict.lock(prop)
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					idict.isLocked(prop), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~idict.isLocked(prop), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict = IndexedDictionary();
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		TAG = upper(IndexedDictionary.getPropTag(prop));
		assert( ...
			idict.isChecked(prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			['IndexedDictionary.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			idict.isChecked(TAG), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			['IndexedDictionary.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	idict.unchecked()
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		assert( ...
			~idict.isChecked(prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			['IndexedDictionary.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	idict.checked()
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		assert( ...
			idict.isChecked(prop), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			['IndexedDictionary.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic IndexedDictionary
	idict_0 = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, IndexedDictionary.getPropDefault(IndexedDictionary.TEMPLATE), ...
		IndexedDictionary.ID, IndexedDictionary.getPropDefault(IndexedDictionary.ID), ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, IndexedDictionary.getPropDefault(IndexedDictionary.IT_CLASS), ...
		IndexedDictionary.IT_KEY, IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
		IndexedDictionary.IT_LIST, IndexedDictionary.getPropDefault(IndexedDictionary.IT_LIST), ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	% IndexedDictionary with 1st callbacks
	idict_1 = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, idict_0.getCallback(4), ..., ...
		IndexedDictionary.ID, idict_0.getCallback(5), ..., ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, idict_0.getCallback(9), ..., ...
		IndexedDictionary.IT_KEY, idict_0.getCallback(10), ..., ...
		IndexedDictionary.IT_LIST, idict_0.getCallback(11), ..., ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	prop_number = IndexedDictionary.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndexedDictionary.getPropTag(prop));
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(idict_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(idict_1.get(prop), idict_0.get(prop)) && ~isa(idict_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(idict_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndexedDictionary with 2nd callbacks
	idict_2 = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, idict_1.getCallback(4), ..., ...
		IndexedDictionary.ID, idict_1.getCallback(5), ..., ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, idict_1.getCallback(9), ..., ...
		IndexedDictionary.IT_KEY, idict_1.getCallback(10), ..., ...
		IndexedDictionary.IT_LIST, idict_1.getCallback(11), ..., ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	prop_number = IndexedDictionary.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndexedDictionary.getPropTag(prop));
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(idict_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(idict_2.get(prop), idict_0.get(prop)) && ~isa(idict_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(idict_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndexedDictionary with 3rd callbacks
	idict_3 = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, idict_2.getCallback(4), ..., ...
		IndexedDictionary.ID, idict_2.getCallback(5), ..., ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, idict_2.getCallback(9), ..., ...
		IndexedDictionary.IT_KEY, idict_2.getCallback(10), ..., ...
		IndexedDictionary.IT_LIST, idict_2.getCallback(11), ..., ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	prop_number = IndexedDictionary.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndexedDictionary.getPropTag(prop));
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(idict_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(idict_3.get(prop), idict_0.get(prop)) && ~isa(idict_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(idict_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	idict = IndexedDictionary();
	 
	idict_copy = idict.copy();
	 
	assert(idict_copy ~= idict, ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(idict_copy, idict), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		value = idict.getr(prop);
		value_copy = idict_copy.getr(prop);
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					'IndexedDictionary.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
							'IndexedDictionary.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
							'IndexedDictionary.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					idict_copy.isLocked(prop) == idict.isLocked(prop), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					'IndexedDictionary.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					idict_copy.isChecked(prop) == idict.isChecked(prop), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					'IndexedDictionary.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					idict_copy.getPropSeed(prop) == idict.getPropSeed(prop), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					'IndexedDictionary.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	idict = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, IndexedDictionary.getPropDefault(IndexedDictionary.TEMPLATE), ...
		IndexedDictionary.ID, IndexedDictionary.getPropDefault(IndexedDictionary.ID), ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, IndexedDictionary.getPropDefault(IndexedDictionary.IT_CLASS), ...
		IndexedDictionary.IT_KEY, IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
		IndexedDictionary.IT_LIST, IndexedDictionary.getPropDefault(IndexedDictionary.IT_LIST), ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		if IndexedDictionary.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':IndexedDictionary']);
			% idict.memorize(prop);
			% warning(warning_backup)
		elseif IndexedDictionary.getPropCategory(prop) == Category.EVANESCENT && idict.getPropFormat(prop) == Format.HANDLE
			idict.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:IndexedDictionary');
			delete(ancestor(idict.get(prop), 'figure'))
			warning(warning_backup)
		else
			idict.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	idict_copy = idict.copy();
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		value = idict.getr(prop);
		value_copy = idict_copy.getr(prop);
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					'IndexedDictionary.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
							'IndexedDictionary.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
							'IndexedDictionary.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						idict_copy.isLocked(prop) == idict.isLocked(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						idict_copy.isChecked(prop) == idict.isChecked(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						idict_copy.getPropSeed(prop) == idict.getPropSeed(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	idict_0 = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, IndexedDictionary.getPropDefault(IndexedDictionary.TEMPLATE), ...
		IndexedDictionary.ID, IndexedDictionary.getPropDefault(IndexedDictionary.ID), ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, IndexedDictionary.getPropDefault(IndexedDictionary.IT_CLASS), ...
		IndexedDictionary.IT_KEY, IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
		IndexedDictionary.IT_LIST, IndexedDictionary.getPropDefault(IndexedDictionary.IT_LIST), ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	idict = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, idict_0.getCallback(4), ..., ...
		IndexedDictionary.ID, idict_0.getCallback(5), ..., ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, idict_0.getCallback(9), ..., ...
		IndexedDictionary.IT_KEY, idict_0.getCallback(10), ..., ...
		IndexedDictionary.IT_LIST, idict_0.getCallback(11), ..., ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	idict_copy = idict.copy();
	idict_0_copy = idict_copy.getr('ID').get('EL');
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
		value = idict.getr(prop);
		value_copy = idict_copy.getr(prop);
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					'IndexedDictionary.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
							'IndexedDictionary.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
							'IndexedDictionary.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == idict_0.getCallback(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The callback should be obtained from IndexedDictionary.getCallback().' ...
						)
					assert( ...
						value_copy == idict_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The callback should be obtained from IndexedDictionary.getCallback().' ...
						)
				end
	 
					assert( ...
						idict_copy.isLocked(prop) == idict.isLocked(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						idict_copy.isChecked(prop) == idict.isChecked(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						idict_copy.getPropSeed(prop) == idict.getPropSeed(prop), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict_template = IndexedDictionary();
	idict = IndexedDictionary('TEMPLATE', idict_template);
	 
	for prop = 1:1:IndexedDictionary.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndexedDictionary.getPropTag(prop));
		switch IndexedDictionary.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == IndexedDictionary.TEMPLATE
					assert( ...
						isa(idict.getr(prop), 'IndexedDictionary'), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary TEMPLATE does not work. IndexedDictionary.getr(''TEMPLATE'') should be a IndexedDictionary element.' ...
						)
					assert( ...
						isa(idict_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						'IndexedDictionary TEMPLATE does not work. IndexedDictionary_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(idict.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary TEMPLATE does not work. IndexedDictionary.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						idict.getr(prop).get('EL') == idict_template && idict.getr(prop).get('PROP') == prop && strcmp(idict.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary TEMPLATE does not work. IndexedDictionary.getr(' TAG ') should be a Callback to idict_template.' TAG '.'] ...
						)
					assert( ...
						isa(idict_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
						['IndexedDictionary TEMPLATE does not work. IndexedDictionary_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(idict.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary TEMPLATE does not work. IndexedDictionary.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(idict_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
					['IndexedDictionary TEMPLATE does not work. IndexedDictionary_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, IndexedDictionary.getPropDefault(IndexedDictionary.TEMPLATE), ...
		IndexedDictionary.ID, IndexedDictionary.getPropDefault(IndexedDictionary.ID), ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, IndexedDictionary.getPropDefault(IndexedDictionary.IT_CLASS), ...
		IndexedDictionary.IT_KEY, IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
		IndexedDictionary.IT_LIST, IndexedDictionary.getPropDefault(IndexedDictionary.IT_LIST), ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'indexeddictionary_to_be_erased.b2'];
	 
	Element.save(idict, filename)
	 
	idict_loaded = Element.load(filename);
	 
	assert( ...
		isequal(idict.copy(), idict_loaded), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.save(idict) and/or IndexedDictionary.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	idict = IndexedDictionary( ...
		IndexedDictionary.ELCLASS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.NAME, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.DESCRIPTION, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.TEMPLATE, IndexedDictionary.getPropDefault(IndexedDictionary.TEMPLATE), ...
		IndexedDictionary.ID, IndexedDictionary.getPropDefault(IndexedDictionary.ID), ...
		IndexedDictionary.LABEL, IndexedDictionary.getPropDefault(IndexedDictionary.LABEL), ...
		IndexedDictionary.NOTES, IndexedDictionary.getPropDefault(IndexedDictionary.NOTES), ...
		IndexedDictionary.TOSTRING, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_CLASS, IndexedDictionary.getPropDefault(IndexedDictionary.IT_CLASS), ...
		IndexedDictionary.IT_KEY, IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
		IndexedDictionary.IT_LIST, IndexedDictionary.getPropDefault(IndexedDictionary.IT_LIST), ...
		IndexedDictionary.LENGTH, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.CONTAINS_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INDEX_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEYS, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.KEY_FROM_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_INDEX, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.IT_FROM_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.ADD, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_KEY, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REPLACE_IT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.INVERT, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.REMOVE_ALL, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_UP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_DOWN, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_TOP, IndexedDictionary.getNoValue(), ...
		IndexedDictionary.MOVE_TO_BOTTOM, IndexedDictionary.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(idict);
	[idict_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(idict_dec ~= idict, ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		'IndexedDictionary.encodeJSON() or IndexedDictionary.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) IndexedDictionary.getPropFormat(prop), num2cell(IndexedDictionary.getProps())) == Format.HANDLE) && all(cellfun(@(prop) IndexedDictionary.getPropFormat(prop), num2cell(IndexedDictionary.getProps())) == Format.NET)
		assert(isequal(idict_dec, idict), ...
			[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
			'IndexedDictionary.encodeJSON() or IndexedDictionary.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Instantiation with items
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'item_1');
	it2 = IndexedDictionary('ID', 'item_2');
	it3 = IndexedDictionary('ID', 'item_3');
	it4 = IndexedDictionary('ID', 'item_4');
	it5 = IndexedDictionary('ID', 'item_5');
	it6 = IndexedDictionary('ID', 'item_6');
	
	items = {it1, it2, it3, it4, it5, it6};
	
	assert_with_error( ...
	    ['idict = IndexedDictionary(' ...
	    '''ID'', ''Trial Indexed Dictionary'', ' ...
	    '''IT_CLASS'', ''IndexedDictionary'', ' ...
	    '''IT_KEY'', IndexedDictionary.getPropProp(''ID''), ' ...
	    '''IT_LIST'', {varargin{1}, varargin{2}, varargin{3}, varargin{4}, varargin{5}, Element.getNoValue()}' ...
	    ');'], ...
	    [BRAPH2.STR ':IndexedDictionary:' BRAPH2.WRONG_INPUT], ...
	    it1, it2, it3, it4, it5 ...
	    )
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
end

%% Test 13: Inspection
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4, it5, it6};
	keys = cellfun(@(item) item.get('ID'), items, 'UniformOutput', false);
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	assert(isequal(idict.get('LENGTH'), 6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''LENGTH'') does not work.')
	
	assert(isequal(idict.get('CONTAINS_INDEX', 2), true), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_INDEX'', index) does not work.')
	assert(isequal(idict.get('CONTAINS', 2), true), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', index) does not work.')
	assert(isequal(idict.get('CONTAINS_INDEX', -1), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_INDEX'', index) does not work.')
	assert(isequal(idict.get('CONTAINS', -1), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', index) does not work.')
	assert(isequal(idict.get('CONTAINS_INDEX', 7), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_INDEX'', index) does not work.')
	assert(isequal(idict.get('CONTAINS', 7), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', index) does not work.')
	
	assert(isequal(idict.get('CONTAINS_KEY', 'Key 3'), true), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_KEY'', key) does not work.')
	assert(isequal(idict.get('CONTAINS', 'Key 3'), true), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', key) does not work.')
	assert(isequal(idict.get('CONTAINS_KEY', 'Key -1'), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_KEY'', key) does not work.')
	assert(isequal(idict.get('CONTAINS', 'Key -1'), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', key) does not work.')
	assert(isequal(idict.get('CONTAINS_KEY', 'Key 7'), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_KEY'', key) does not work.')
	assert(isequal(idict.get('CONTAINS', 'Key 7'), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', key) does not work.')
	
	assert(isequal(idict.get('CONTAINS_IT', it4), true), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_IT'', item) does not work.')
	assert(isequal(idict.get('CONTAINS', it4), true), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', item) does not work.')
	assert(isequal(idict.get('CONTAINS_IT', IndexedDictionary()), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_IT'', item) does not work.')
	assert(isequal(idict.get('CONTAINS', IndexedDictionary()), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', item) does not work.')
	assert(isequal(idict.get('CONTAINS_IT', ConcreteElement()), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS_IT'', item) does not work.')
	assert(isequal(idict.get('CONTAINS', ConcreteElement()), false), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''CONTAINS'', item) does not work.')
	
	assert(isequal(idict.get('INDEX_FROM_KEY', 'Key 1'), 1), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''INDEX_FROM_KEY'', key) does not work.')
	assert(isequal(idict.get('INDEX', 'Key 1'), 1), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''INDEX'', key) does not work.')
	assert(isequal(idict.get('INDEX_FROM_IT', it4), 4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''INDEX_FROM_IT'', item) does not work.')
	assert(isequal(idict.get('INDEX', it4), 4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''INDEX'', item) does not work.')
	
	assert(isequal(idict.get('KEYS'), keys), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''KEYS'') does not work.')
	assert(isequal(idict.get('KEY_FROM_INDEX', 2), 'Key 2'), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''KEY_FROM_INDEX'', index) does not work.')
	assert(isequal(idict.get('KEY', 2), 'Key 2'), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''KEY'', index) does not work.')
	assert(isequal(idict.get('KEY_FROM_IT', it2), 'Key 2'), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''KEY_FROM_IT'', item) does not work.')
	assert(isequal(idict.get('KEY', it2), 'Key 2'), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''KEY'', item) does not work.')
	
	assert(isequal(idict.get('IT_LIST'), items), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''IT_LIST'') does not work.')
	assert(isequal(idict.get('IT_FROM_INDEX', 3), it3), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''IT_FROM_INDEX'', index) does not work.')
	assert(isequal(idict.get('IT', 3), it3), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''IT'', index) does not work.')
	assert(isequal(idict.get('IT_FROM_KEY', 'Key 3'), it3), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''IT_FROM_KEY'', key) does not work.')
	assert(isequal(idict.get('IT', 'Key 3'), it3), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''IT'', key) does not work.')
end

%% Test 14: Add
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	idict.get('ADD', it6)
	assert(isequal(idict.get('LENGTH'), 5), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''ADD'', item) does not work.')
	assert(isequal(idict.get('IT', 5), it6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''ADD'', item) does not work.')
	
	idict.get('ADD', it5, 5)
	assert(isequal(idict.get('LENGTH'), 6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''ADD'', item, index) does not work.')
	assert(isequal(idict.get('IT', 5), it5) && isequal(idict.get('IT', 6), it6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''ADD'', item, index) does not work.')
end

%% Test 15: Remove
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4, it5, it6};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	idict.get('REMOVE', 4)
	assert(isequal(idict.get('LENGTH'), 5), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REMOVE'', index) does not work.')
	assert(isequal(idict.get('IT', idict.get('LENGTH')), it6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REMOVE'', index) does not work.')
	
	idict.get('REMOVE', 5)
	idict.get('REMOVE', 1)
	assert(isequal(idict.get('IT_LIST'), {it2, it3, it5}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REMOVE'', index) does not work.')
end

%% Test 16: Replace
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	idict.get('REPLACE', it5, 4)
	assert(isequal(idict.get('LENGTH'), 4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REPLACE'', item, index) does not work.')
	assert(isequal(idict.get('KEY', 4), 'Key 5') && isequal(idict.get('IT', 4), it5), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REPLACE'', item, index) does not work.')
	
	idict.get('REPLACE_KEY', 'Key 5', 'Key 4')
	assert(isequal(idict.get('LENGTH'), 4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REPLACE_KEY'', key, item) does not work.')
	assert(isequal(idict.get('KEY', 4), 'Key 4') && isequal(idict.get('IT', 4), it5), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REPLACE_KEY'', key, item) does not work.')
	
	idict.get('REPLACE_IT', it5, it4)
	assert(isequal(idict.get('LENGTH'), 4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REPLACE_IT'', item1, item2) does not work.')
	assert(isequal(idict.get('KEY', 4), 'Key 4') && isequal(idict.get('IT', 4), it4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REPLACE_IT'', item1, item2) does not work.')
end

%% Test 17: Invert
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	idict.get('INVERT', 1, 4)
	idict.get('INVERT', 3, 2)
	assert(isequal(idict.get('LENGTH'), 4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''INVERT'', index1, index2) does not work.')
	assert(isequal(idict.get('KEYS'), {'Key 4', 'Key 3', 'Key 2', 'Key 1'}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''INVERT'', index1, index2) does not work.')
end

%% Test 18: Move_to
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	idict.get('MOVE_TO', 1, 4);
	idict.get('MOVE_TO', 1, 3);
	idict.get('MOVE_TO', 1, 2);
	assert(isequal(idict.get('LENGTH'), 4), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO'', index1, index2) does not work.')
	assert(isequal(idict.get('KEYS'), {'Key 4', 'Key 3', 'Key 2', 'Key 1'}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO'', index1, index2) does not work.')
end

%% Test 19: Remove all
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4, it5, it6};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	selected = idict.get('REMOVE_ALL', [1 3 6]);
	assert(isequal(idict.get('LENGTH'), 3), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REMOVE_ALL'', indices) does not work.')
	assert(isequal(idict.get('KEYS'), {'Key 2', 'Key 4', 'Key 5'}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REMOVE_ALL'', indices) does not work.')
	assert(isequal(selected, []), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''REMOVE_ALL'', indices) does not work.')
end

%% Test 20: Move up
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4, it5, it6};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	selected = idict.get('MOVE_UP', [1 2 4 6]);
	assert(isequal(idict.get('LENGTH'), 6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_UP'', indices) does not work.')
	assert(isequal(idict.get('KEYS'), {'Key 1', 'Key 2', 'Key 4', 'Key 3', 'Key 6', 'Key 5'}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_UP'', indices) does not work.')
	assert(isequal(selected, [1 2 3 5]), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_UP'', indices) does not work.')
end

%% Test 21: Move down
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4, it5, it6};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	selected = idict.get('MOVE_DOWN', [1 3 5 6]);
	assert(isequal(idict.get('LENGTH'), 6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_DOWN'', indices) does not work.')
	assert(isequal(idict.get('KEYS'), {'Key 2', 'Key 1', 'Key 4', 'Key 3', 'Key 5', 'Key 6'}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_DOWN'', indices) does not work.')
	assert(isequal(selected, [2 4 5 6]), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_DOWN'', indices) does not work.')
end

%% Test 22: Move to top
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4, it5, it6};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	selected = idict.get('MOVE_TO_TOP', [1 3 5 6]);
	assert(isequal(idict.get('LENGTH'), 6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO_TOP'', indices) does not work.')
	assert(isequal(idict.get('KEYS'), {'Key 1', 'Key 3', 'Key 5', 'Key 6', 'Key 2', 'Key 4'}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO_TOP'', indices) does not work.')
	assert(isequal(selected, [1 2 3 4]), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO_TOP'', indices) does not work.')
end

%% Test 23: Move to bottom
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	it1 = IndexedDictionary('ID', 'Key 1');
	it2 = IndexedDictionary('ID', 'Key 2');
	it3 = IndexedDictionary('ID', 'Key 3');
	it4 = IndexedDictionary('ID', 'Key 4');
	it5 = IndexedDictionary('ID', 'Key 5');
	it6 = IndexedDictionary('ID', 'Key 6');
	
	items = {it1, it2, it3, it4, it5, it6};
	
	idict = IndexedDictionary( ...
	    'ID', 'Trial Indexed Dictionary', ...
	    'IT_CLASS', 'IndexedDictionary', ...
	    'IT_KEY', IndexedDictionary.getPropProp('ID'), ...
	    'IT_LIST', items ...
	    );
	
	selected = idict.get('MOVE_TO_BOTTOM', [1 3 5 6]);
	assert(isequal(idict.get('LENGTH'), 6), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO_BOTTOM'', indices) does not work.')
	assert(isequal(idict.get('KEYS'), {'Key 2', 'Key 4', 'Key 1', 'Key 3', 'Key 5', 'Key 6'}), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO_BOTTOM'', indices) does not work.')
	assert(isequal(selected, [3 4 5 6]), ...
		[BRAPH2.STR ':' class(idict) ':' BRAPH2.FAIL_TEST], ...
	    'IndexedDictionary.get(''MOVE_TO_BOTTOM'', indices) does not work.')
end

%% Test 24: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':IndexedDictionary:' BRAPH2.FAIL_TEST], ...
		[' When testing IndexedDictionary no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 25: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

