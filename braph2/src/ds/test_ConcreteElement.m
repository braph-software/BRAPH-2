%TEST_CONCRETEELEMENT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	el = ConcreteElement();
	 
	% get('ELCLASS')
	if isa(ConcreteElement, 'ConcreteElement')
		assert(strcmp(ConcreteElement().get('ELCLASS'), 'ConcreteElement'), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement().get(''ELCLASS'') should return ''ConcreteElement''.')
	end
	 
	% getClass
	assert(strcmp(ConcreteElement.getClass(), 'ConcreteElement'), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.getClass() should return ''ConcreteElement''.')
	assert(strcmp(el.getClass(), 'ConcreteElement'), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.getClass() should return ''ConcreteElement''.')
	assert(strcmp(Element.getClass(el), 'ConcreteElement'), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(el) should return ''ConcreteElement''.')
	assert(strcmp(Element.getClass('ConcreteElement'), 'ConcreteElement'), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''ConcreteElement'') should return ''ConcreteElement''.')
	 
	% getSubclasses()
	assert(isequal(ConcreteElement.getSubclasses(), subclasses('ConcreteElement', [], [], true)), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.getSubclasses() should return the same result as subclasses(''ConcreteElement'', [], [], true).')
	assert(isequal(el.getSubclasses(), subclasses('ConcreteElement', [], [], true)), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''ConcreteElement'', [], [], true).')
	assert(isequal(Element.getSubclasses(el), subclasses('ConcreteElement', [], [], true)), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(el) should return the same result as subclasses(''ConcreteElement'', [], [], true).')
	assert(isequal(Element.getSubclasses('ConcreteElement'), subclasses('ConcreteElement', [], [], true)), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''ConcreteElement'') should return the same result as subclasses(''ConcreteElement'', [], [], true).')
	 
	% getProps()
	assert(isempty(ConcreteElement.getProps()) || isequal(ConcreteElement.getProps(), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.getProps() should return a row vector [1:1:N].')
	assert(isempty(ConcreteElement.getProps()) || isequal(el.getProps(), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.getProps() should return a row vector [1:1:N].')
	assert(isempty(ConcreteElement.getProps()) || isequal(Element.getProps(el), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(el) should return a row vector [1:1:N].')
	assert(isempty(ConcreteElement.getProps()) || isequal(Element.getProps('ConcreteElement'), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ConcreteElement'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) ConcreteElement.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ConcreteElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.getProps(category) does not work.')
	tmp = cellfun(@(category) el.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ConcreteElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(el, category), categories, 'UniformOutput', false);
	assert(isempty(ConcreteElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(el, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('ConcreteElement', category), categories, 'UniformOutput', false);
	assert(isempty(ConcreteElement.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ConcreteElement.getProps())), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ConcreteElement'', category) does not work.')
	 
	% getPropNumber()
	assert(ConcreteElement.getPropNumber() == length(ConcreteElement.getProps()), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.getPropNumber() should return the number of properties.')
	assert(el.getPropNumber() == length(ConcreteElement.getProps()), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(el) == length(ConcreteElement.getProps()), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(el) should return the number of properties.')
	assert(Element.getPropNumber('ConcreteElement') == length(ConcreteElement.getProps()), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ConcreteElement'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) ConcreteElement.getPropNumber(category), categories)) == ConcreteElement.getPropNumber(), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) el.getPropNumber(category), categories)) == ConcreteElement.getPropNumber(), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(el, category), categories)) == ConcreteElement.getPropNumber(), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(el, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('ConcreteElement', category), categories)) == ConcreteElement.getPropNumber(), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ConcreteElement'', category) does not work.')
	 
	% existsProp(prop)
	assert(~ConcreteElement.existsProp(NaN), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.existsProp(prop) does not work.')
	assert(~el.existsProp(NaN), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.existsProp(prop) does not work.')
	assert(~Element.existsProp(el, NaN), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(el, prop) does not work.')
	assert(~Element.existsProp('ConcreteElement', NaN), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''ConcreteElement'', prop) does not work.')
	 
	assert_with_error('ConcreteElement.existsProp(NaN)', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], el)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], el)
	assert_with_error('Element.existsProp(''ConcreteElement'', NaN)', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		assert(ConcreteElement.existsProp(prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.existsProp(prop) does not work.')
		assert(el.existsProp(prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.existsProp(prop) does not work.')
		assert(Element.existsProp(el, prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(el, prop) does not work.')
		assert(Element.existsProp('ConcreteElement', prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''ConcreteElement'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~ConcreteElement.existsTag(''), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.existsTag(tag) does not work.')
	assert(~el.existsTag(''), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'el.existsTag(tag) does not work.')
	assert(~Element.existsTag(el, ''), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(el, tag) does not work.')
	assert(~Element.existsTag('ConcreteElement', ''), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''ConcreteElement'', tag) does not work.')
	 
	assert_with_error('ConcreteElement.existsTag('''')', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], el)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], el)
	assert_with_error('Element.existsTag(''ConcreteElement'', '''')', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
		assert(ConcreteElement.existsTag(tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.existsTag(tag) does not work.')
		assert(el.existsTag(tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.existsTag(tag) does not work.')
		assert(Element.existsTag(el, tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(el, tga) does not work.')
		assert(Element.existsTag('ConcreteElement', tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''ConcreteElement'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		assert(ConcreteElement.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropProp(prop) does not work.')
		assert(el.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropProp(prop) does not work.')
		assert(Element.getPropProp(el, prop) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(el, prop) does not work.')
		assert(Element.getPropProp('ConcreteElement', prop) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ConcreteElement'', prop) does not work.')
	 
		tag = el.getPropTag(prop);
		assert(ConcreteElement.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropProp(tag) does not work.')
		assert(el.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropProp(tag) does not work.')
		assert(Element.getPropProp(el, tag) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(el, tag) does not work.')
		assert(Element.getPropProp('ConcreteElement', prop) == prop, ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ConcreteElement'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		assert(strcmp(ConcreteElement.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropTag(prop) does not work.')
		assert(strcmp(el.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(el, prop), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(el, prop) does not work.')
		assert(strcmp(Element.getPropTag('ConcreteElement', prop), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ConcreteElement'', prop) does not work.')
	 
		assert(strcmp(ConcreteElement.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropTag(tag) does not work.')
		assert(strcmp(el.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(el, tag), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(el, tag) does not work.')
		assert(strcmp(Element.getPropTag('ConcreteElement', prop), tag), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ConcreteElement'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		assert(Category.existsCategory(ConcreteElement.getPropCategory(prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(el.getPropCategory(prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(el, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(el, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(el, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ConcreteElement'', prop) does not work.')
	 
		assert(Category.existsCategory(ConcreteElement.getPropCategory(tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(el.getPropCategory(tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(el, tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(el, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(el, tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ConcreteElement'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		assert(Format.existsFormat(ConcreteElement.getPropFormat(prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(el.getPropFormat(prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(el, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(el, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(el, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ConcreteElement'', prop) does not work.')
	 
		assert(Format.existsFormat(ConcreteElement.getPropFormat(tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(el.getPropFormat(tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(el, tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(el, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(el, tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ConcreteElement'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		assert(ischar(ConcreteElement.getPropDescription(prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropDescription(prop) does not work.')
		assert(ischar(el.getPropDescription(prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(el, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(el, prop) does not work.')
		assert(ischar(Element.getPropDescription(el, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ConcreteElement'', prop) does not work.')
	 
		assert(ischar(ConcreteElement.getPropDescription(tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.getPropDescription(tag) does not work.')
		assert(ischar(el.getPropDescription(tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(el, tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(el, tag) does not work.')
		assert(ischar(Element.getPropDescription(el, tag)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ConcreteElement'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		settings = ConcreteElement.getPropSettings(prop);
		settings = el.getPropSettings(prop);
		settings = Element.getPropSettings(el, prop);
		settings = Element.getPropSettings('ConcreteElement', prop);
	 
		settings = ConcreteElement.getPropSettings(tag);
		settings = el.getPropSettings(tag);
		settings = Element.getPropSettings(el, tag);
		settings = Element.getPropSettings('ConcreteElement', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		default = ConcreteElement.getPropDefault(prop);
		default = el.getPropDefault(prop);
		default = Element.getPropDefault(el, prop);
		default = Element.getPropDefault('ConcreteElement', prop);
	 
		default = ConcreteElement.getPropDefault(tag);
		default = el.getPropDefault(tag);
		default = Element.getPropDefault(el, tag);
		default = Element.getPropDefault('ConcreteElement', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		conditioned_default = ConcreteElement.getPropDefaultConditioned(prop);
		conditioned_default = el.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(el, prop);
		conditioned_default = Element.getPropDefaultConditioned('ConcreteElement', prop);
	 
		conditioned_default = ConcreteElement.getPropDefaultConditioned(tag);
		conditioned_default = el.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(el, tag);
		conditioned_default = Element.getPropDefaultConditioned('ConcreteElement', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:ConcreteElement.getPropNumber()
		tag = el.getPropTag(prop);
	 
		assert(~ConcreteElement.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.checkProp(prop, value) does not work.')
		assert(~el.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(el, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(el, prop, value) does not work.')
		assert(~Element.checkProp('ConcreteElement', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ConcreteElement'', prop, value) does not work.')
	 
		assert_with_error('ConcreteElement.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], prop, el)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], prop, el)
		assert_with_error('Element.checkProp(''ConcreteElement'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~ConcreteElement.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.checkProp(tag, value) does not work.')
		assert(~el.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(el, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(el, tag, value) does not work.')
		assert(~Element.checkProp('ConcreteElement', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ConcreteElement'', tag, value) does not work.')
	 
		assert_with_error('ConcreteElement.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], tag, el)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], tag, el)
		assert_with_error('Element.checkProp(''ConcreteElement'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ConcreteElement:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(ConcreteElement.checkProp(prop, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.checkProp(prop, <conditioned default value>) does not work.')
		assert(el.checkProp(prop, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(el, prop, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(el, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('ConcreteElement', prop, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ConcreteElement'', prop, <conditioned default value>) does not work.')
	 
		assert(ConcreteElement.checkProp(tag, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.checkProp(tag, <conditioned default value>) does not work.')
		assert(el.checkProp(tag, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'el.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(el, tag, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(el, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('ConcreteElement', tag, Element.getPropDefaultConditioned(ConcreteElement, prop)), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ConcreteElement'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, ConcreteElement.getPropDefault(ConcreteElement.TEMPLATE), ...
		ConcreteElement.ID, ConcreteElement.getPropDefault(ConcreteElement.ID), ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(ConcreteElement.getPropTag(prop));
		switch ConcreteElement.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					el.getr(prop) == ConcreteElement.getNoValue(), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' ConcreteElement.getCategoryName(ConcreteElement.getPropCategory(prop)) ', ConcreteElement.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ConcreteElement.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					el.getr(TAG) == ConcreteElement.getNoValue(), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' ConcreteElement.getCategoryName(ConcreteElement.getPropCategory(prop)) ', ConcreteElement.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ConcreteElement.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(el.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(el.getPropSettings(prop))
					assert( ...
						el.checkFormat(el.getPropFormat(prop), el.get(prop)), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						el.checkFormat(el.getPropFormat(prop), el.get(prop), el.getPropSettings(prop)), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					el.getr(prop) == ConcreteElement.getNoValue(), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' ConcreteElement.getCategoryName(ConcreteElement.getPropCategory(prop)) ', ConcreteElement.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ConcreteElement.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					el.getr(TAG) == ConcreteElement.getNoValue(), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['Being a ' ConcreteElement.getCategoryName(ConcreteElement.getPropCategory(prop)) ', ConcreteElement.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ConcreteElement.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':ConcreteElement']);
				assert( ...
					~isa(el.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(el.getPropSettings(prop))
					assert( ...
						el.checkFormat(el.getPropFormat(prop), el.get(prop)), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						el.checkFormat(el.getPropFormat(prop), el.get(prop), el.getPropSettings(prop)), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(el.getr(prop), ConcreteElement.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by ConcreteElement.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ConcreteElement.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(el.getr(TAG), ConcreteElement.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' TAG ') must be inizialized to its default value ' ...
					'given by ConcreteElement.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ConcreteElement.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, ConcreteElement.getPropDefault(ConcreteElement.TEMPLATE), ...
		ConcreteElement.ID, ConcreteElement.getPropDefault(ConcreteElement.ID), ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(ConcreteElement.getPropTag(prop));
		switch ConcreteElement.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(el.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(el.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(el.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(el.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					el.checkFormat(el.getPropFormat(prop), el.getr(prop),el.getPropSettings(prop)), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':ConcreteElement']);
				assert( ...
					~isa(el.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(el.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':ConcreteElement']);
	% 			assert( ...
	% 				~isa(el.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
	% 				['ConcreteElement.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(el.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
	% 				['ConcreteElement.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				el.checkFormat(el.getPropFormat(prop), el.getr(prop),el.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
	% 				['ConcreteElement.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':ConcreteElement']);
				assert( ...
					~isa(el.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(el.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(el.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(el.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					el.checkFormat(el.getPropFormat(prop), el.getr(prop),el.getPropSettings(prop)), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if el.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:ConcreteElement');
					delete(ancestor(el.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(ConcreteElement.getProps(Category.RESULT))
		for prop = 1:1:ConcreteElement.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch ConcreteElement.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						el.isLocked(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~el.isLocked(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el = ConcreteElement();
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		TAG = upper(ConcreteElement.getPropTag(prop));
		assert( ...
			~el.isLocked(prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			['ConcreteElement.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~el.isLocked(TAG), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			['ConcreteElement.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	el.lock()
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		switch ConcreteElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					el.isLocked(prop), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~el.isLocked(prop), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el = ConcreteElement();
	 
	warning_backup = warning('off', 'BRAPH2:ConcreteElement');
	for prop = 1:1:ConcreteElement.getPropNumber()
		el.lock(prop)
		switch ConcreteElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					el.isLocked(prop), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~el.isLocked(prop), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el = ConcreteElement();
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		TAG = upper(ConcreteElement.getPropTag(prop));
		assert( ...
			el.isChecked(prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			['ConcreteElement.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			el.isChecked(TAG), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			['ConcreteElement.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	el.unchecked()
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		assert( ...
			~el.isChecked(prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			['ConcreteElement.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	el.checked()
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		assert( ...
			el.isChecked(prop), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			['ConcreteElement.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic ConcreteElement
	el_0 = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, ConcreteElement.getPropDefault(ConcreteElement.TEMPLATE), ...
		ConcreteElement.ID, ConcreteElement.getPropDefault(ConcreteElement.ID), ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	% ConcreteElement with 1st callbacks
	el_1 = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, el_0.getCallback(4), ..., ...
		ConcreteElement.ID, el_0.getCallback(5), ..., ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	prop_number = ConcreteElement.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ConcreteElement.getPropTag(prop));
		switch ConcreteElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(el_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(el_1.get(prop), el_0.get(prop)) && ~isa(el_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(el_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ConcreteElement with 2nd callbacks
	el_2 = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, el_1.getCallback(4), ..., ...
		ConcreteElement.ID, el_1.getCallback(5), ..., ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	prop_number = ConcreteElement.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ConcreteElement.getPropTag(prop));
		switch ConcreteElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(el_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(el_2.get(prop), el_0.get(prop)) && ~isa(el_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(el_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ConcreteElement with 3rd callbacks
	el_3 = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, el_2.getCallback(4), ..., ...
		ConcreteElement.ID, el_2.getCallback(5), ..., ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	prop_number = ConcreteElement.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ConcreteElement.getPropTag(prop));
		switch ConcreteElement.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(el_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(el_3.get(prop), el_0.get(prop)) && ~isa(el_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(el_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	el = ConcreteElement();
	 
	el_copy = el.copy();
	 
	assert(el_copy ~= el, ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(el_copy, el), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		value = el.getr(prop);
		value_copy = el_copy.getr(prop);
		switch ConcreteElement.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					'ConcreteElement.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
							'ConcreteElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
							'ConcreteElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					el_copy.isLocked(prop) == el.isLocked(prop), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					'ConcreteElement.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					el_copy.isChecked(prop) == el.isChecked(prop), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					'ConcreteElement.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					el_copy.getPropSeed(prop) == el.getPropSeed(prop), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					'ConcreteElement.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	el = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, ConcreteElement.getPropDefault(ConcreteElement.TEMPLATE), ...
		ConcreteElement.ID, ConcreteElement.getPropDefault(ConcreteElement.ID), ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		if ConcreteElement.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':ConcreteElement']);
			% el.memorize(prop);
			% warning(warning_backup)
		elseif ConcreteElement.getPropCategory(prop) == Category.EVANESCENT && el.getPropFormat(prop) == Format.HANDLE
			el.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:ConcreteElement');
			delete(ancestor(el.get(prop), 'figure'))
			warning(warning_backup)
		else
			el.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	el_copy = el.copy();
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		value = el.getr(prop);
		value_copy = el_copy.getr(prop);
		switch ConcreteElement.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					'ConcreteElement.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
							'ConcreteElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
							'ConcreteElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						el_copy.isLocked(prop) == el.isLocked(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						el_copy.isChecked(prop) == el.isChecked(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						el_copy.getPropSeed(prop) == el.getPropSeed(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	el_0 = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, ConcreteElement.getPropDefault(ConcreteElement.TEMPLATE), ...
		ConcreteElement.ID, ConcreteElement.getPropDefault(ConcreteElement.ID), ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	el = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, el_0.getCallback(4), ..., ...
		ConcreteElement.ID, el_0.getCallback(5), ..., ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	el_copy = el.copy();
	el_0_copy = el_copy.getr('ID').get('EL');
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
		value = el.getr(prop);
		value_copy = el_copy.getr(prop);
		switch ConcreteElement.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					'ConcreteElement.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
							'ConcreteElement.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
							'ConcreteElement.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == el_0.getCallback(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The callback should be obtained from ConcreteElement.getCallback().' ...
						)
					assert( ...
						value_copy == el_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The callback should be obtained from ConcreteElement.getCallback().' ...
						)
				end
	 
					assert( ...
						el_copy.isLocked(prop) == el.isLocked(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						el_copy.isChecked(prop) == el.isChecked(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						el_copy.getPropSeed(prop) == el.getPropSeed(prop), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el_template = ConcreteElement();
	el = ConcreteElement('TEMPLATE', el_template);
	 
	for prop = 1:1:ConcreteElement.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(ConcreteElement.getPropTag(prop));
		switch ConcreteElement.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == ConcreteElement.TEMPLATE
					assert( ...
						isa(el.getr(prop), 'ConcreteElement'), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement TEMPLATE does not work. ConcreteElement.getr(''TEMPLATE'') should be a ConcreteElement element.' ...
						)
					assert( ...
						isa(el_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						'ConcreteElement TEMPLATE does not work. ConcreteElement_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(el.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement TEMPLATE does not work. ConcreteElement.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						el.getr(prop).get('EL') == el_template && el.getr(prop).get('PROP') == prop && strcmp(el.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement TEMPLATE does not work. ConcreteElement.getr(' TAG ') should be a Callback to el_template.' TAG '.'] ...
						)
					assert( ...
						isa(el_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
						['ConcreteElement TEMPLATE does not work. ConcreteElement_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(el.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement TEMPLATE does not work. ConcreteElement.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(el_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
					['ConcreteElement TEMPLATE does not work. ConcreteElement_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, ConcreteElement.getPropDefault(ConcreteElement.TEMPLATE), ...
		ConcreteElement.ID, ConcreteElement.getPropDefault(ConcreteElement.ID), ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'concreteelement_to_be_erased.b2'];
	 
	Element.save(el, filename)
	 
	el_loaded = Element.load(filename);
	 
	assert( ...
		isequal(el.copy(), el_loaded), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.save(el) and/or ConcreteElement.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el = ConcreteElement( ...
		ConcreteElement.ELCLASS, ConcreteElement.getNoValue(), ...
		ConcreteElement.NAME, ConcreteElement.getNoValue(), ...
		ConcreteElement.DESCRIPTION, ConcreteElement.getNoValue(), ...
		ConcreteElement.TEMPLATE, ConcreteElement.getPropDefault(ConcreteElement.TEMPLATE), ...
		ConcreteElement.ID, ConcreteElement.getPropDefault(ConcreteElement.ID), ...
		ConcreteElement.LABEL, ConcreteElement.getPropDefault(ConcreteElement.LABEL), ...
		ConcreteElement.NOTES, ConcreteElement.getPropDefault(ConcreteElement.NOTES), ...
		ConcreteElement.TOSTRING, ConcreteElement.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(el);
	[el_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(el_dec ~= el, ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		'ConcreteElement.encodeJSON() or ConcreteElement.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) ConcreteElement.getPropFormat(prop), num2cell(ConcreteElement.getProps())) == Format.HANDLE) && all(cellfun(@(prop) ConcreteElement.getPropFormat(prop), num2cell(ConcreteElement.getProps())) == Format.NET)
		assert(isequal(el_dec, el), ...
			[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
			'ConcreteElement.encodeJSON() or ConcreteElement.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Copy with callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	el_0 = ConcreteElement('ID', 'original');
	el_1 = ConcreteElement('ID', el_0.getCallback('ID'));
	
	el_1_copy = el_1.copy();
	el_0_copy = el_1_copy.getr('ID').get('EL');
	
	assert(isequal(el_0, el_0_copy))
	assert(isequal(el_1, el_1_copy))
	assert(el_1.getr('ID') == el_0.getCallback('ID'))
	
	assert(el_0 ~= el_0_copy)
	assert(el_1 ~= el_1_copy)
	assert(el_1_copy.getr('ID') == el_0_copy.getCallback('ID'))
	
	el_0_copy.set('ID', 'copied')
	assert(strcmp(el_1_copy.get('ID'), 'copied'))
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':ConcreteElement:' BRAPH2.FAIL_TEST], ...
		[' When testing ConcreteElement no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

