%TEST_COMPAREENSEMBLE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	c = CompareEnsemble();
	 
	% get('ELCLASS')
	if isa(CompareEnsemble, 'ConcreteElement')
		assert(strcmp(CompareEnsemble().get('ELCLASS'), 'CompareEnsemble'), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble().get(''ELCLASS'') should return ''CompareEnsemble''.')
	end
	 
	% getBuild()
	assert(CompareEnsemble.getBuild() == 1 && CompareEnsemble.getBuild() > 0, ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.getBuild() should return the CompareEnsemble build number.')
	assert(c.getBuild() == 1 && c.getBuild() > 0 , ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.getBuild() should return the CompareEnsemble build number.')
	assert(Element.getBuild(c) == 1 && Element.getBuild(c) > 0, ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(c) should return the CompareEnsemble build number.')
	assert(Element.getBuild('CompareEnsemble') == 1 && Element.getBuild('CompareEnsemble') > 0, ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''CompareEnsemble'') should return the CompareEnsemble build number.')
	 
	% getClass()
	assert(strcmp(CompareEnsemble.getClass(), 'CompareEnsemble'), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.getClass() should return ''CompareEnsemble''.')
	assert(strcmp(c.getClass(), 'CompareEnsemble'), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.getClass() should return ''CompareEnsemble''.')
	assert(strcmp(Element.getClass(c), 'CompareEnsemble'), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(c) should return ''CompareEnsemble''.')
	assert(strcmp(Element.getClass('CompareEnsemble'), 'CompareEnsemble'), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''CompareEnsemble'') should return ''CompareEnsemble''.')
	 
	% getSubclasses()
	assert(isequal(CompareEnsemble.getSubclasses(), subclasses('CompareEnsemble', [], [], true)), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.getSubclasses() should return the same result as subclasses(''CompareEnsemble'', [], [], true).')
	assert(isequal(c.getSubclasses(), subclasses('CompareEnsemble', [], [], true)), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''CompareEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses(c), subclasses('CompareEnsemble', [], [], true)), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(c) should return the same result as subclasses(''CompareEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses('CompareEnsemble'), subclasses('CompareEnsemble', [], [], true)), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''CompareEnsemble'') should return the same result as subclasses(''CompareEnsemble'', [], [], true).')
	 
	% getProps()
	assert(isempty(CompareEnsemble.getProps()) || isequal(CompareEnsemble.getProps(), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.getProps() should return a row vector [1:1:N].')
	assert(isempty(CompareEnsemble.getProps()) || isequal(c.getProps(), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.getProps() should return a row vector [1:1:N].')
	assert(isempty(CompareEnsemble.getProps()) || isequal(Element.getProps(c), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(c) should return a row vector [1:1:N].')
	assert(isempty(CompareEnsemble.getProps()) || isequal(Element.getProps('CompareEnsemble'), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CompareEnsemble'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) CompareEnsemble.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CompareEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.getProps(category) does not work.')
	tmp = cellfun(@(category) c.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CompareEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(c, category), categories, 'UniformOutput', false);
	assert(isempty(CompareEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(c, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('CompareEnsemble', category), categories, 'UniformOutput', false);
	assert(isempty(CompareEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CompareEnsemble.getProps())), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CompareEnsemble'', category) does not work.')
	 
	% getPropNumber()
	assert(CompareEnsemble.getPropNumber() == length(CompareEnsemble.getProps()), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.getPropNumber() should return the number of properties.')
	assert(c.getPropNumber() == length(CompareEnsemble.getProps()), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(c) == length(CompareEnsemble.getProps()), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(c) should return the number of properties.')
	assert(Element.getPropNumber('CompareEnsemble') == length(CompareEnsemble.getProps()), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CompareEnsemble'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) CompareEnsemble.getPropNumber(category), categories)) == CompareEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) c.getPropNumber(category), categories)) == CompareEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(c, category), categories)) == CompareEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(c, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('CompareEnsemble', category), categories)) == CompareEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CompareEnsemble'', category) does not work.')
	 
	% existsProp(prop)
	assert(~CompareEnsemble.existsProp(NaN), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.existsProp(prop) does not work.')
	assert(~c.existsProp(NaN), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.existsProp(prop) does not work.')
	assert(~Element.existsProp(c, NaN), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(c, prop) does not work.')
	assert(~Element.existsProp('CompareEnsemble', NaN), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''CompareEnsemble'', prop) does not work.')
	 
	assert_with_error('CompareEnsemble.existsProp(NaN)', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], c)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], c)
	assert_with_error('Element.existsProp(''CompareEnsemble'', NaN)', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		assert(CompareEnsemble.existsProp(prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.existsProp(prop) does not work.')
		assert(c.existsProp(prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.existsProp(prop) does not work.')
		assert(Element.existsProp(c, prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(c, prop) does not work.')
		assert(Element.existsProp('CompareEnsemble', prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''CompareEnsemble'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~CompareEnsemble.existsTag(''), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.existsTag(tag) does not work.')
	assert(~c.existsTag(''), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'c.existsTag(tag) does not work.')
	assert(~Element.existsTag(c, ''), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(c, tag) does not work.')
	assert(~Element.existsTag('CompareEnsemble', ''), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''CompareEnsemble'', tag) does not work.')
	 
	assert_with_error('CompareEnsemble.existsTag('''')', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], c)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], c)
	assert_with_error('Element.existsTag(''CompareEnsemble'', '''')', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
		assert(CompareEnsemble.existsTag(tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.existsTag(tag) does not work.')
		assert(c.existsTag(tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.existsTag(tag) does not work.')
		assert(Element.existsTag(c, tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(c, tga) does not work.')
		assert(Element.existsTag('CompareEnsemble', tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''CompareEnsemble'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		assert(CompareEnsemble.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropProp(prop) does not work.')
		assert(c.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropProp(prop) does not work.')
		assert(Element.getPropProp(c, prop) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(c, prop) does not work.')
		assert(Element.getPropProp('CompareEnsemble', prop) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CompareEnsemble'', prop) does not work.')
	 
		tag = c.getPropTag(prop);
		assert(CompareEnsemble.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropProp(tag) does not work.')
		assert(c.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropProp(tag) does not work.')
		assert(Element.getPropProp(c, tag) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(c, tag) does not work.')
		assert(Element.getPropProp('CompareEnsemble', prop) == prop, ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CompareEnsemble'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		assert(strcmp(CompareEnsemble.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropTag(prop) does not work.')
		assert(strcmp(c.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(c, prop), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(c, prop) does not work.')
		assert(strcmp(Element.getPropTag('CompareEnsemble', prop), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CompareEnsemble'', prop) does not work.')
	 
		assert(strcmp(CompareEnsemble.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropTag(tag) does not work.')
		assert(strcmp(c.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(c, tag), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(c, tag) does not work.')
		assert(strcmp(Element.getPropTag('CompareEnsemble', prop), tag), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CompareEnsemble'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		assert(Category.existsCategory(CompareEnsemble.getPropCategory(prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(c.getPropCategory(prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(c, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(c, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(c, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CompareEnsemble'', prop) does not work.')
	 
		assert(Category.existsCategory(CompareEnsemble.getPropCategory(tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(c.getPropCategory(tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(c, tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(c, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(c, tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CompareEnsemble'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		assert(Format.existsFormat(CompareEnsemble.getPropFormat(prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(c.getPropFormat(prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(c, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(c, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(c, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CompareEnsemble'', prop) does not work.')
	 
		assert(Format.existsFormat(CompareEnsemble.getPropFormat(tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(c.getPropFormat(tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(c, tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(c, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(c, tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CompareEnsemble'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		assert(ischar(CompareEnsemble.getPropDescription(prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropDescription(prop) does not work.')
		assert(ischar(c.getPropDescription(prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(c, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(c, prop) does not work.')
		assert(ischar(Element.getPropDescription(c, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CompareEnsemble'', prop) does not work.')
	 
		assert(ischar(CompareEnsemble.getPropDescription(tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.getPropDescription(tag) does not work.')
		assert(ischar(c.getPropDescription(tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(c, tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(c, tag) does not work.')
		assert(ischar(Element.getPropDescription(c, tag)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CompareEnsemble'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		settings = CompareEnsemble.getPropSettings(prop);
		settings = c.getPropSettings(prop);
		settings = Element.getPropSettings(c, prop);
		settings = Element.getPropSettings('CompareEnsemble', prop);
	 
		settings = CompareEnsemble.getPropSettings(tag);
		settings = c.getPropSettings(tag);
		settings = Element.getPropSettings(c, tag);
		settings = Element.getPropSettings('CompareEnsemble', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		default = CompareEnsemble.getPropDefault(prop);
		default = c.getPropDefault(prop);
		default = Element.getPropDefault(c, prop);
		default = Element.getPropDefault('CompareEnsemble', prop);
	 
		default = CompareEnsemble.getPropDefault(tag);
		default = c.getPropDefault(tag);
		default = Element.getPropDefault(c, tag);
		default = Element.getPropDefault('CompareEnsemble', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		conditioned_default = CompareEnsemble.getPropDefaultConditioned(prop);
		conditioned_default = c.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(c, prop);
		conditioned_default = Element.getPropDefaultConditioned('CompareEnsemble', prop);
	 
		conditioned_default = CompareEnsemble.getPropDefaultConditioned(tag);
		conditioned_default = c.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(c, tag);
		conditioned_default = Element.getPropDefaultConditioned('CompareEnsemble', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:CompareEnsemble.getPropNumber()
		tag = c.getPropTag(prop);
	 
		assert(~CompareEnsemble.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.checkProp(prop, value) does not work.')
		assert(~c.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(c, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(c, prop, value) does not work.')
		assert(~Element.checkProp('CompareEnsemble', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CompareEnsemble'', prop, value) does not work.')
	 
		assert_with_error('CompareEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], prop, c)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], prop, c)
		assert_with_error('Element.checkProp(''CompareEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~CompareEnsemble.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.checkProp(tag, value) does not work.')
		assert(~c.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(c, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(c, tag, value) does not work.')
		assert(~Element.checkProp('CompareEnsemble', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CompareEnsemble'', tag, value) does not work.')
	 
		assert_with_error('CompareEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], tag, c)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], tag, c)
		assert_with_error('Element.checkProp(''CompareEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CompareEnsemble:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(CompareEnsemble.checkProp(prop, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.checkProp(prop, <conditioned default value>) does not work.')
		assert(c.checkProp(prop, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(c, prop, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(c, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('CompareEnsemble', prop, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CompareEnsemble'', prop, <conditioned default value>) does not work.')
	 
		assert(CompareEnsemble.checkProp(tag, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.checkProp(tag, <conditioned default value>) does not work.')
		assert(c.checkProp(tag, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'c.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(c, tag, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(c, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('CompareEnsemble', tag, Element.getPropDefaultConditioned(CompareEnsemble, prop)), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CompareEnsemble'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, CompareEnsemble.getPropDefault(CompareEnsemble.TEMPLATE), ...
		CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
		CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
		CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
		CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
		CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
		CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [CompareEnsemble.PERM])
			continue
		end
	 
		TAG = upper(CompareEnsemble.getPropTag(prop));
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					c.getr(prop) == CompareEnsemble.getNoValue(), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' CompareEnsemble.getCategoryName(CompareEnsemble.getPropCategory(prop)) ', CompareEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CompareEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					c.getr(TAG) == CompareEnsemble.getNoValue(), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' CompareEnsemble.getCategoryName(CompareEnsemble.getPropCategory(prop)) ', CompareEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CompareEnsemble.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(c.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(c.getPropSettings(prop))
					assert( ...
						c.checkFormat(c.getPropFormat(prop), c.get(prop)), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						c.checkFormat(c.getPropFormat(prop), c.get(prop), c.getPropSettings(prop)), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					c.getr(prop) == CompareEnsemble.getNoValue(), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' CompareEnsemble.getCategoryName(CompareEnsemble.getPropCategory(prop)) ', CompareEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CompareEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					c.getr(TAG) == CompareEnsemble.getNoValue(), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' CompareEnsemble.getCategoryName(CompareEnsemble.getPropCategory(prop)) ', CompareEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CompareEnsemble.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':CompareEnsemble']);
				assert( ...
					~isa(c.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(c.getPropSettings(prop))
					assert( ...
						c.checkFormat(c.getPropFormat(prop), c.get(prop)), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						c.checkFormat(c.getPropFormat(prop), c.get(prop), c.getPropSettings(prop)), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(c.getr(prop), CompareEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by CompareEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CompareEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(c.getr(TAG), CompareEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' TAG ') must be inizialized to its default value ' ...
					'given by CompareEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CompareEnsemble.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, CompareEnsemble.getPropDefault(CompareEnsemble.TEMPLATE), ...
		CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
		CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
		CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
		CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
		CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
		CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [CompareEnsemble.PERM])
			continue
		end
	 
		TAG = upper(CompareEnsemble.getPropTag(prop));
		switch CompareEnsemble.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(c.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(c.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(c.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(c.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					c.checkFormat(c.getPropFormat(prop), c.getr(prop),c.getPropSettings(prop)), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':CompareEnsemble']);
				assert( ...
					~isa(c.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(c.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':CompareEnsemble']);
	% 			assert( ...
	% 				~isa(c.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['CompareEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(c.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['CompareEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				c.checkFormat(c.getPropFormat(prop), c.getr(prop),c.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['CompareEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':CompareEnsemble']);
				assert( ...
					~isa(c.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(c.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(c.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(c.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					c.checkFormat(c.getPropFormat(prop), c.getr(prop),c.getPropSettings(prop)), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if c.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:CompareEnsemble');
					delete(ancestor(c.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(CompareEnsemble.getProps(Category.RESULT))
		for prop = 1:1:CompareEnsemble.getPropNumber()
	 
			% excluded props
			if any(prop == [CompareEnsemble.PERM])
				continue
			end
	 
			switch CompareEnsemble.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						c.isLocked(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~c.isLocked(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c = CompareEnsemble();
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		TAG = upper(CompareEnsemble.getPropTag(prop));
		assert( ...
			~c.isLocked(prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			['CompareEnsemble.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~c.isLocked(TAG), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			['CompareEnsemble.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	c.lock()
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					c.isLocked(prop), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~c.isLocked(prop), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c = CompareEnsemble();
	 
	warning_backup = warning('off', 'BRAPH2:CompareEnsemble');
	for prop = 1:1:CompareEnsemble.getPropNumber()
		c.lock(prop)
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					c.isLocked(prop), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~c.isLocked(prop), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c = CompareEnsemble();
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		TAG = upper(CompareEnsemble.getPropTag(prop));
		assert( ...
			c.isChecked(prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			['CompareEnsemble.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			c.isChecked(TAG), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			['CompareEnsemble.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	c.unchecked()
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		assert( ...
			~c.isChecked(prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			['CompareEnsemble.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	c.checked()
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		assert( ...
			c.isChecked(prop), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			['CompareEnsemble.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic CompareEnsemble
	c_0 = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, CompareEnsemble.getPropDefault(CompareEnsemble.TEMPLATE), ...
		CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
		CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
		CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
		CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
		CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
		CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	% CompareEnsemble with 1st callbacks
	c_1 = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, c_0.getCallback(4), ..., ...
		CompareEnsemble.ID, c_0.getCallback(5), ..., ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, c_0.getCallback(9), ..., ...
		CompareEnsemble.VERBOSE, c_0.getCallback(10), ..., ...
		CompareEnsemble.INTERRUPTIBLE, c_0.getCallback(11), ..., ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, c_0.getCallback(13), ..., ...
		CompareEnsemble.LONGITUDINAL, c_0.getCallback(14), ..., ...
		CompareEnsemble.A1, c_0.getCallback(15), ..., ...
		CompareEnsemble.A2, c_0.getCallback(16), ..., ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	prop_number = CompareEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CompareEnsemble.getPropTag(prop));
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(c_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(c_1.get(prop), c_0.get(prop)) && ~isa(c_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(c_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CompareEnsemble with 2nd callbacks
	c_2 = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, c_1.getCallback(4), ..., ...
		CompareEnsemble.ID, c_1.getCallback(5), ..., ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, c_1.getCallback(9), ..., ...
		CompareEnsemble.VERBOSE, c_1.getCallback(10), ..., ...
		CompareEnsemble.INTERRUPTIBLE, c_1.getCallback(11), ..., ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, c_1.getCallback(13), ..., ...
		CompareEnsemble.LONGITUDINAL, c_1.getCallback(14), ..., ...
		CompareEnsemble.A1, c_1.getCallback(15), ..., ...
		CompareEnsemble.A2, c_1.getCallback(16), ..., ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	prop_number = CompareEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CompareEnsemble.getPropTag(prop));
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(c_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(c_2.get(prop), c_0.get(prop)) && ~isa(c_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(c_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CompareEnsemble with 3rd callbacks
	c_3 = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, c_2.getCallback(4), ..., ...
		CompareEnsemble.ID, c_2.getCallback(5), ..., ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, c_2.getCallback(9), ..., ...
		CompareEnsemble.VERBOSE, c_2.getCallback(10), ..., ...
		CompareEnsemble.INTERRUPTIBLE, c_2.getCallback(11), ..., ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, c_2.getCallback(13), ..., ...
		CompareEnsemble.LONGITUDINAL, c_2.getCallback(14), ..., ...
		CompareEnsemble.A1, c_2.getCallback(15), ..., ...
		CompareEnsemble.A2, c_2.getCallback(16), ..., ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	prop_number = CompareEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CompareEnsemble.getPropTag(prop));
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(c_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(c_3.get(prop), c_0.get(prop)) && ~isa(c_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(c_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	c = CompareEnsemble();
	 
	c_copy = c.copy();
	 
	assert(c_copy ~= c, ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(c_copy, c), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		value = c.getr(prop);
		value_copy = c_copy.getr(prop);
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					'CompareEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
							'CompareEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
							'CompareEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					c_copy.isLocked(prop) == c.isLocked(prop), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					'CompareEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					c_copy.isChecked(prop) == c.isChecked(prop), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					'CompareEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					c_copy.getPropSeed(prop) == c.getPropSeed(prop), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					'CompareEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	c = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, CompareEnsemble.getPropDefault(CompareEnsemble.TEMPLATE), ...
		CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
		CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
		CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
		CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
		CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
		CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		if CompareEnsemble.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':CompareEnsemble']);
			% c.memorize(prop);
			% warning(warning_backup)
		elseif CompareEnsemble.getPropCategory(prop) == Category.EVANESCENT && c.getPropFormat(prop) == Format.HANDLE
			c.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:CompareEnsemble');
			delete(ancestor(c.get(prop), 'figure'))
			warning(warning_backup)
		else
			c.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	c_copy = c.copy();
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		value = c.getr(prop);
		value_copy = c_copy.getr(prop);
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					'CompareEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
							'CompareEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
							'CompareEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						c_copy.isLocked(prop) == c.isLocked(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						c_copy.isChecked(prop) == c.isChecked(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						c_copy.getPropSeed(prop) == c.getPropSeed(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	c_0 = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, CompareEnsemble.getPropDefault(CompareEnsemble.TEMPLATE), ...
		CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
		CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
		CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
		CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
		CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
		CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	c = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, c_0.getCallback(4), ..., ...
		CompareEnsemble.ID, c_0.getCallback(5), ..., ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, c_0.getCallback(9), ..., ...
		CompareEnsemble.VERBOSE, c_0.getCallback(10), ..., ...
		CompareEnsemble.INTERRUPTIBLE, c_0.getCallback(11), ..., ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, c_0.getCallback(13), ..., ...
		CompareEnsemble.LONGITUDINAL, c_0.getCallback(14), ..., ...
		CompareEnsemble.A1, c_0.getCallback(15), ..., ...
		CompareEnsemble.A2, c_0.getCallback(16), ..., ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	c_copy = c.copy();
	c_0_copy = c_copy.getr('ID').get('EL');
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
		value = c.getr(prop);
		value_copy = c_copy.getr(prop);
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					'CompareEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
							'CompareEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
							'CompareEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == c_0.getCallback(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The callback should be obtained from CompareEnsemble.getCallback().' ...
						)
					assert( ...
						value_copy == c_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The callback should be obtained from CompareEnsemble.getCallback().' ...
						)
				end
	 
					assert( ...
						c_copy.isLocked(prop) == c.isLocked(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						c_copy.isChecked(prop) == c.isChecked(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						c_copy.getPropSeed(prop) == c.getPropSeed(prop), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c_template = CompareEnsemble();
	c = CompareEnsemble('TEMPLATE', c_template);
	 
	for prop = 1:1:CompareEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [CompareEnsemble.PERM])
			continue
		end
	 
		TAG = upper(CompareEnsemble.getPropTag(prop));
		switch CompareEnsemble.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == CompareEnsemble.TEMPLATE
					assert( ...
						isa(c.getr(prop), 'CompareEnsemble'), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble TEMPLATE does not work. CompareEnsemble.getr(''TEMPLATE'') should be a CompareEnsemble element.' ...
						)
					assert( ...
						isa(c_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						'CompareEnsemble TEMPLATE does not work. CompareEnsemble_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(c.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble TEMPLATE does not work. CompareEnsemble.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						c.getr(prop).get('EL') == c_template && c.getr(prop).get('PROP') == prop && strcmp(c.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble TEMPLATE does not work. CompareEnsemble.getr(' TAG ') should be a Callback to c_template.' TAG '.'] ...
						)
					assert( ...
						isa(c_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
						['CompareEnsemble TEMPLATE does not work. CompareEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(c.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble TEMPLATE does not work. CompareEnsemble.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(c_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
					['CompareEnsemble TEMPLATE does not work. CompareEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, CompareEnsemble.getPropDefault(CompareEnsemble.TEMPLATE), ...
		CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
		CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
		CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
		CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
		CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
		CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'compareensemble_to_be_erased.b2'];
	 
	Element.save(c, filename)
	 
	c_loaded = Element.load(filename);
	 
	assert( ...
		isequal(c.copy(), c_loaded), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.save(c) and/or CompareEnsemble.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	c = CompareEnsemble( ...
		CompareEnsemble.ELCLASS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.NAME, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.DESCRIPTION, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.TEMPLATE, CompareEnsemble.getPropDefault(CompareEnsemble.TEMPLATE), ...
		CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
		CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
		CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
		CompareEnsemble.TOSTRING, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
		CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
		CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
		CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
		CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
		CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
		CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
		CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
		CompareEnsemble.PERM_SEEDS, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.CP_DICT, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.COMPARISON, CompareEnsemble.getNoValue(), ...
		CompareEnsemble.PERM, CompareEnsemble.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(c);
	[c_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(c_dec ~= c, ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		'CompareEnsemble.encodeJSON() or CompareEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) CompareEnsemble.getPropFormat(prop), num2cell(CompareEnsemble.getProps())) == Format.HANDLE) && all(cellfun(@(prop) CompareEnsemble.getPropFormat(prop), num2cell(CompareEnsemble.getProps())) == Format.NET)
		assert(isequal(c_dec, c), ...
			[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
			'CompareEnsemble.encodeJSON() or CompareEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.FAIL_TEST], ...
		[' When testing CompareEnsemble no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

