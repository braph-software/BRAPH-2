%TEST_ANALYZEENSEMBLE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	a = AnalyzeEnsemble();
	 
	% get('ELCLASS')
	if isa(AnalyzeEnsemble, 'ConcreteElement')
		assert(strcmp(AnalyzeEnsemble().get('ELCLASS'), 'AnalyzeEnsemble'), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble().get(''ELCLASS'') should return ''AnalyzeEnsemble''.')
	end
	 
	% getClass
	assert(strcmp(AnalyzeEnsemble.getClass(), 'AnalyzeEnsemble'), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.getClass() should return ''AnalyzeEnsemble''.')
	assert(strcmp(a.getClass(), 'AnalyzeEnsemble'), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'a.getClass() should return ''AnalyzeEnsemble''.')
	assert(strcmp(Element.getClass(a), 'AnalyzeEnsemble'), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(a) should return ''AnalyzeEnsemble''.')
	assert(strcmp(Element.getClass('AnalyzeEnsemble'), 'AnalyzeEnsemble'), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''AnalyzeEnsemble'') should return ''AnalyzeEnsemble''.')
	 
	% getSubclasses()
	assert(isequal(AnalyzeEnsemble.getSubclasses(), subclasses('AnalyzeEnsemble', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.getSubclasses() should return the same result as subclasses(''AnalyzeEnsemble'', [], [], true).')
	assert(isequal(a.getSubclasses(), subclasses('AnalyzeEnsemble', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''AnalyzeEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses(a), subclasses('AnalyzeEnsemble', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(a) should return the same result as subclasses(''AnalyzeEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses('AnalyzeEnsemble'), subclasses('AnalyzeEnsemble', [], [], true)), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''AnalyzeEnsemble'') should return the same result as subclasses(''AnalyzeEnsemble'', [], [], true).')
	 
	% getProps()
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(AnalyzeEnsemble.getProps(), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.getProps() should return a row vector [1:1:N].')
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(a.getProps(), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'a.getProps() should return a row vector [1:1:N].')
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(Element.getProps(a), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(a) should return a row vector [1:1:N].')
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(Element.getProps('AnalyzeEnsemble'), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''AnalyzeEnsemble'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) AnalyzeEnsemble.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.getProps(category) does not work.')
	tmp = cellfun(@(category) a.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'a.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(a, category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(a, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('AnalyzeEnsemble', category), categories, 'UniformOutput', false);
	assert(isempty(AnalyzeEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(AnalyzeEnsemble.getProps())), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''AnalyzeEnsemble'', category) does not work.')
	 
	% getPropNumber()
	assert(AnalyzeEnsemble.getPropNumber() == length(AnalyzeEnsemble.getProps()), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.getPropNumber() should return the number of properties.')
	assert(a.getPropNumber() == length(AnalyzeEnsemble.getProps()), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'a.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(a) == length(AnalyzeEnsemble.getProps()), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(a) should return the number of properties.')
	assert(Element.getPropNumber('AnalyzeEnsemble') == length(AnalyzeEnsemble.getProps()), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''AnalyzeEnsemble'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) AnalyzeEnsemble.getPropNumber(category), categories)) == AnalyzeEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) a.getPropNumber(category), categories)) == AnalyzeEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'a.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(a, category), categories)) == AnalyzeEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(a, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('AnalyzeEnsemble', category), categories)) == AnalyzeEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''AnalyzeEnsemble'', category) does not work.')
	 
	% existsProp(prop)
	assert(~AnalyzeEnsemble.existsProp(NaN), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.existsProp(prop) does not work.')
	assert(~a.existsProp(NaN), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'a.existsProp(prop) does not work.')
	assert(~Element.existsProp(a, NaN), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(a, prop) does not work.')
	assert(~Element.existsProp('AnalyzeEnsemble', NaN), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''AnalyzeEnsemble'', prop) does not work.')
	 
	assert_with_error('AnalyzeEnsemble.existsProp(NaN)', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsProp(''AnalyzeEnsemble'', NaN)', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		assert(AnalyzeEnsemble.existsProp(prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.existsProp(prop) does not work.')
		assert(a.existsProp(prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.existsProp(prop) does not work.')
		assert(Element.existsProp(a, prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(a, prop) does not work.')
		assert(Element.existsProp('AnalyzeEnsemble', prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''AnalyzeEnsemble'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~AnalyzeEnsemble.existsTag(''), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.existsTag(tag) does not work.')
	assert(~a.existsTag(''), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'a.existsTag(tag) does not work.')
	assert(~Element.existsTag(a, ''), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(a, tag) does not work.')
	assert(~Element.existsTag('AnalyzeEnsemble', ''), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''AnalyzeEnsemble'', tag) does not work.')
	 
	assert_with_error('AnalyzeEnsemble.existsTag('''')', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], a)
	assert_with_error('Element.existsTag(''AnalyzeEnsemble'', '''')', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
		assert(AnalyzeEnsemble.existsTag(tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.existsTag(tag) does not work.')
		assert(a.existsTag(tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.existsTag(tag) does not work.')
		assert(Element.existsTag(a, tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(a, tga) does not work.')
		assert(Element.existsTag('AnalyzeEnsemble', tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''AnalyzeEnsemble'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		assert(AnalyzeEnsemble.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropProp(prop) does not work.')
		assert(a.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropProp(prop) does not work.')
		assert(Element.getPropProp(a, prop) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(a, prop) does not work.')
		assert(Element.getPropProp('AnalyzeEnsemble', prop) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''AnalyzeEnsemble'', prop) does not work.')
	 
		tag = a.getPropTag(prop);
		assert(AnalyzeEnsemble.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropProp(tag) does not work.')
		assert(a.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropProp(tag) does not work.')
		assert(Element.getPropProp(a, tag) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(a, tag) does not work.')
		assert(Element.getPropProp('AnalyzeEnsemble', prop) == prop, ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''AnalyzeEnsemble'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(strcmp(AnalyzeEnsemble.getPropTag(prop), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropTag(prop) does not work.')
		assert(strcmp(a.getPropTag(prop), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(a, prop), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(a, prop) does not work.')
		assert(strcmp(Element.getPropTag('AnalyzeEnsemble', prop), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''AnalyzeEnsemble'', prop) does not work.')
	 
		assert(strcmp(AnalyzeEnsemble.getPropTag(tag), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropTag(tag) does not work.')
		assert(strcmp(a.getPropTag(tag), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(a, tag), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(a, tag) does not work.')
		assert(strcmp(Element.getPropTag('AnalyzeEnsemble', prop), tag), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''AnalyzeEnsemble'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(Category.existsCategory(AnalyzeEnsemble.getPropCategory(prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(a.getPropCategory(prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(a, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''AnalyzeEnsemble'', prop) does not work.')
	 
		assert(Category.existsCategory(AnalyzeEnsemble.getPropCategory(tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(a.getPropCategory(tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(a, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(a, tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''AnalyzeEnsemble'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(Format.existsFormat(AnalyzeEnsemble.getPropFormat(prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(a.getPropFormat(prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(a, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''AnalyzeEnsemble'', prop) does not work.')
	 
		assert(Format.existsFormat(AnalyzeEnsemble.getPropFormat(tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(a.getPropFormat(tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(a, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(a, tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''AnalyzeEnsemble'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(ischar(AnalyzeEnsemble.getPropDescription(prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropDescription(prop) does not work.')
		assert(ischar(a.getPropDescription(prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(a, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(a, prop) does not work.')
		assert(ischar(Element.getPropDescription(a, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''AnalyzeEnsemble'', prop) does not work.')
	 
		assert(ischar(AnalyzeEnsemble.getPropDescription(tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.getPropDescription(tag) does not work.')
		assert(ischar(a.getPropDescription(tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(a, tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(a, tag) does not work.')
		assert(ischar(Element.getPropDescription(a, tag)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''AnalyzeEnsemble'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		settings = AnalyzeEnsemble.getPropSettings(prop);
		settings = a.getPropSettings(prop);
		settings = Element.getPropSettings(a, prop);
		settings = Element.getPropSettings('AnalyzeEnsemble', prop);
	 
		settings = AnalyzeEnsemble.getPropSettings(tag);
		settings = a.getPropSettings(tag);
		settings = Element.getPropSettings(a, tag);
		settings = Element.getPropSettings('AnalyzeEnsemble', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		default = AnalyzeEnsemble.getPropDefault(prop);
		default = a.getPropDefault(prop);
		default = Element.getPropDefault(a, prop);
		default = Element.getPropDefault('AnalyzeEnsemble', prop);
	 
		default = AnalyzeEnsemble.getPropDefault(tag);
		default = a.getPropDefault(tag);
		default = Element.getPropDefault(a, tag);
		default = Element.getPropDefault('AnalyzeEnsemble', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		conditioned_default = AnalyzeEnsemble.getPropDefaultConditioned(prop);
		conditioned_default = a.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(a, prop);
		conditioned_default = Element.getPropDefaultConditioned('AnalyzeEnsemble', prop);
	 
		conditioned_default = AnalyzeEnsemble.getPropDefaultConditioned(tag);
		conditioned_default = a.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(a, tag);
		conditioned_default = Element.getPropDefaultConditioned('AnalyzeEnsemble', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		tag = a.getPropTag(prop);
	 
		assert(~AnalyzeEnsemble.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.checkProp(prop, value) does not work.')
		assert(~a.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(a, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, prop, value) does not work.')
		assert(~Element.checkProp('AnalyzeEnsemble', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeEnsemble'', prop, value) does not work.')
	 
		assert_with_error('AnalyzeEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], prop, a)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], prop, a)
		assert_with_error('Element.checkProp(''AnalyzeEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~AnalyzeEnsemble.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.checkProp(tag, value) does not work.')
		assert(~a.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(a, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, tag, value) does not work.')
		assert(~Element.checkProp('AnalyzeEnsemble', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeEnsemble'', tag, value) does not work.')
	 
		assert_with_error('AnalyzeEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], tag, a)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], tag, a)
		assert_with_error('Element.checkProp(''AnalyzeEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(AnalyzeEnsemble.checkProp(prop, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.checkProp(prop, <conditioned default value>) does not work.')
		assert(a.checkProp(prop, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(a, prop, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('AnalyzeEnsemble', prop, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeEnsemble'', prop, <conditioned default value>) does not work.')
	 
		assert(AnalyzeEnsemble.checkProp(tag, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.checkProp(tag, <conditioned default value>) does not work.')
		assert(a.checkProp(tag, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'a.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(a, tag, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(a, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('AnalyzeEnsemble', tag, Element.getPropDefaultConditioned(AnalyzeEnsemble, prop)), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''AnalyzeEnsemble'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.TEMPLATE), ...
		AnalyzeEnsemble.ID, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.ID), ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.WAITBAR), ...
		AnalyzeEnsemble.GR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GR), ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GRAPH_TEMPLATE), ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [AnalyzeEnsemble.TEMPLATE AnalyzeEnsemble.GRAPH_TEMPLATE])
			continue
		end
	 
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					a.getr(prop) == AnalyzeEnsemble.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeEnsemble.getCategoryName(AnalyzeEnsemble.getPropCategory(prop)) ', AnalyzeEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					a.getr(TAG) == AnalyzeEnsemble.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeEnsemble.getCategoryName(AnalyzeEnsemble.getPropCategory(prop)) ', AnalyzeEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeEnsemble.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(a.getPropSettings(prop))
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop)), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop), a.getPropSettings(prop)), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					a.getr(prop) == AnalyzeEnsemble.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeEnsemble.getCategoryName(AnalyzeEnsemble.getPropCategory(prop)) ', AnalyzeEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					a.getr(TAG) == AnalyzeEnsemble.getNoValue(), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' AnalyzeEnsemble.getCategoryName(AnalyzeEnsemble.getPropCategory(prop)) ', AnalyzeEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in AnalyzeEnsemble.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':AnalyzeEnsemble']);
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(a.getPropSettings(prop))
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop)), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						a.checkFormat(a.getPropFormat(prop), a.get(prop), a.getPropSettings(prop)), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(a.getr(prop), AnalyzeEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by AnalyzeEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in AnalyzeEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(a.getr(TAG), AnalyzeEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' TAG ') must be inizialized to its default value ' ...
					'given by AnalyzeEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in AnalyzeEnsemble.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.TEMPLATE), ...
		AnalyzeEnsemble.ID, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.ID), ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.WAITBAR), ...
		AnalyzeEnsemble.GR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GR), ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GRAPH_TEMPLATE), ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [AnalyzeEnsemble.TEMPLATE AnalyzeEnsemble.GRAPH_TEMPLATE])
			continue
		end
	 
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		switch AnalyzeEnsemble.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(a.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					a.checkFormat(a.getPropFormat(prop), a.getr(prop),a.getPropSettings(prop)), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':AnalyzeEnsemble']);
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':AnalyzeEnsemble']);
	% 			assert( ...
	% 				~isa(a.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['AnalyzeEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(a.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['AnalyzeEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				a.checkFormat(a.getPropFormat(prop), a.getr(prop),a.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['AnalyzeEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':AnalyzeEnsemble']);
				assert( ...
					~isa(a.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(a.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					a.checkFormat(a.getPropFormat(prop), a.getr(prop),a.getPropSettings(prop)), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if a.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:AnalyzeEnsemble');
					delete(ancestor(a.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(AnalyzeEnsemble.getProps(Category.RESULT))
		for prop = 1:1:AnalyzeEnsemble.getPropNumber()
	 
			% excluded props
			if any(prop == [AnalyzeEnsemble.TEMPLATE AnalyzeEnsemble.GRAPH_TEMPLATE])
				continue
			end
	 
			switch AnalyzeEnsemble.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeEnsemble();
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		assert( ...
			~a.isLocked(prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			['AnalyzeEnsemble.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~a.isLocked(TAG), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			['AnalyzeEnsemble.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	a.lock()
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeEnsemble();
	 
	warning_backup = warning('off', 'BRAPH2:AnalyzeEnsemble');
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		a.lock(prop)
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeEnsemble();
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		assert( ...
			a.isChecked(prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			['AnalyzeEnsemble.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			a.isChecked(TAG), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			['AnalyzeEnsemble.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	a.unchecked()
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		assert( ...
			~a.isChecked(prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			['AnalyzeEnsemble.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	a.checked()
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		assert( ...
			a.isChecked(prop), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			['AnalyzeEnsemble.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic AnalyzeEnsemble
	a_0 = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.TEMPLATE), ...
		AnalyzeEnsemble.ID, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.ID), ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.WAITBAR), ...
		AnalyzeEnsemble.GR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GR), ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GRAPH_TEMPLATE), ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	% AnalyzeEnsemble with 1st callbacks
	a_1 = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, a_0.getCallback(4), ..., ...
		AnalyzeEnsemble.ID, a_0.getCallback(5), ..., ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, a_0.getCallback(9), ..., ...
		AnalyzeEnsemble.GR, a_0.getCallback(10), ..., ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, a_0.getCallback(11), ..., ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	prop_number = AnalyzeEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(a_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(a_1.get(prop), a_0.get(prop)) && ~isa(a_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(a_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% AnalyzeEnsemble with 2nd callbacks
	a_2 = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, a_1.getCallback(4), ..., ...
		AnalyzeEnsemble.ID, a_1.getCallback(5), ..., ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, a_1.getCallback(9), ..., ...
		AnalyzeEnsemble.GR, a_1.getCallback(10), ..., ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, a_1.getCallback(11), ..., ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	prop_number = AnalyzeEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(a_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(a_2.get(prop), a_0.get(prop)) && ~isa(a_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(a_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% AnalyzeEnsemble with 3rd callbacks
	a_3 = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, a_2.getCallback(4), ..., ...
		AnalyzeEnsemble.ID, a_2.getCallback(5), ..., ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, a_2.getCallback(9), ..., ...
		AnalyzeEnsemble.GR, a_2.getCallback(10), ..., ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, a_2.getCallback(11), ..., ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	prop_number = AnalyzeEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(a_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(a_3.get(prop), a_0.get(prop)) && ~isa(a_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(a_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	a = AnalyzeEnsemble();
	 
	a_copy = a.copy();
	 
	assert(a_copy ~= a, ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(a_copy, a), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		value = a.getr(prop);
		value_copy = a_copy.getr(prop);
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					'AnalyzeEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
							'AnalyzeEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
							'AnalyzeEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					a_copy.isLocked(prop) == a.isLocked(prop), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					'AnalyzeEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					a_copy.isChecked(prop) == a.isChecked(prop), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					'AnalyzeEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					a_copy.getPropSeed(prop) == a.getPropSeed(prop), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					'AnalyzeEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	a = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.TEMPLATE), ...
		AnalyzeEnsemble.ID, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.ID), ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.WAITBAR), ...
		AnalyzeEnsemble.GR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GR), ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GRAPH_TEMPLATE), ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		if AnalyzeEnsemble.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':AnalyzeEnsemble']);
			% a.memorize(prop);
			% warning(warning_backup)
		elseif AnalyzeEnsemble.getPropCategory(prop) == Category.EVANESCENT && a.getPropFormat(prop) == Format.HANDLE
			a.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:AnalyzeEnsemble');
			delete(ancestor(a.get(prop), 'figure'))
			warning(warning_backup)
		else
			a.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	a_copy = a.copy();
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		value = a.getr(prop);
		value_copy = a_copy.getr(prop);
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					'AnalyzeEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
							'AnalyzeEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
							'AnalyzeEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						a_copy.isLocked(prop) == a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.isChecked(prop) == a.isChecked(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.getPropSeed(prop) == a.getPropSeed(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	a_0 = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.TEMPLATE), ...
		AnalyzeEnsemble.ID, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.ID), ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.WAITBAR), ...
		AnalyzeEnsemble.GR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GR), ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GRAPH_TEMPLATE), ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	a = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, a_0.getCallback(4), ..., ...
		AnalyzeEnsemble.ID, a_0.getCallback(5), ..., ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, a_0.getCallback(9), ..., ...
		AnalyzeEnsemble.GR, a_0.getCallback(10), ..., ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, a_0.getCallback(11), ..., ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	a_copy = a.copy();
	a_0_copy = a_copy.getr('ID').get('EL');
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
		value = a.getr(prop);
		value_copy = a_copy.getr(prop);
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					'AnalyzeEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
							'AnalyzeEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
							'AnalyzeEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == a_0.getCallback(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The callback should be obtained from AnalyzeEnsemble.getCallback().' ...
						)
					assert( ...
						value_copy == a_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The callback should be obtained from AnalyzeEnsemble.getCallback().' ...
						)
				end
	 
					assert( ...
						a_copy.isLocked(prop) == a.isLocked(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.isChecked(prop) == a.isChecked(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						a_copy.getPropSeed(prop) == a.getPropSeed(prop), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a_template = AnalyzeEnsemble();
	a = AnalyzeEnsemble('TEMPLATE', a_template);
	 
	for prop = 1:1:AnalyzeEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [AnalyzeEnsemble.TEMPLATE AnalyzeEnsemble.GRAPH_TEMPLATE])
			continue
		end
	 
		TAG = upper(AnalyzeEnsemble.getPropTag(prop));
		switch AnalyzeEnsemble.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == AnalyzeEnsemble.TEMPLATE
					assert( ...
						isa(a.getr(prop), 'AnalyzeEnsemble'), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble TEMPLATE does not work. AnalyzeEnsemble.getr(''TEMPLATE'') should be a AnalyzeEnsemble element.' ...
						)
					assert( ...
						isa(a_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						'AnalyzeEnsemble TEMPLATE does not work. AnalyzeEnsemble_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(a.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble TEMPLATE does not work. AnalyzeEnsemble.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						a.getr(prop).get('EL') == a_template && a.getr(prop).get('PROP') == prop && strcmp(a.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble TEMPLATE does not work. AnalyzeEnsemble.getr(' TAG ') should be a Callback to a_template.' TAG '.'] ...
						)
					assert( ...
						isa(a_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
						['AnalyzeEnsemble TEMPLATE does not work. AnalyzeEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(a.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble TEMPLATE does not work. AnalyzeEnsemble.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(a_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
					['AnalyzeEnsemble TEMPLATE does not work. AnalyzeEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.TEMPLATE), ...
		AnalyzeEnsemble.ID, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.ID), ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.WAITBAR), ...
		AnalyzeEnsemble.GR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GR), ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GRAPH_TEMPLATE), ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'analyzeensemble_to_be_erased.b2'];
	 
	Element.save(a, filename)
	 
	a_loaded = Element.load(filename);
	 
	assert( ...
		isequal(a.copy(), a_loaded), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.save(a) and/or AnalyzeEnsemble.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	a = AnalyzeEnsemble( ...
		AnalyzeEnsemble.ELCLASS, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.NAME, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.DESCRIPTION, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.TEMPLATE), ...
		AnalyzeEnsemble.ID, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.ID), ...
		AnalyzeEnsemble.LABEL, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.LABEL), ...
		AnalyzeEnsemble.NOTES, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.NOTES), ...
		AnalyzeEnsemble.TOSTRING, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.WAITBAR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.WAITBAR), ...
		AnalyzeEnsemble.GR, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GR), ...
		AnalyzeEnsemble.GRAPH_TEMPLATE, AnalyzeEnsemble.getPropDefault(AnalyzeEnsemble.GRAPH_TEMPLATE), ...
		AnalyzeEnsemble.G_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.ME_DICT, AnalyzeEnsemble.getNoValue(), ...
		AnalyzeEnsemble.MEASUREENSEMBLE, AnalyzeEnsemble.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(a);
	[a_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(a_dec ~= a, ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		'AnalyzeEnsemble.encodeJSON() or AnalyzeEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) AnalyzeEnsemble.getPropFormat(prop), num2cell(AnalyzeEnsemble.getProps())) == Format.HANDLE) && all(cellfun(@(prop) AnalyzeEnsemble.getPropFormat(prop), num2cell(AnalyzeEnsemble.getProps())) == Format.NET)
		assert(isequal(a_dec, a), ...
			[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
			'AnalyzeEnsemble.encodeJSON() or AnalyzeEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':AnalyzeEnsemble:' BRAPH2.FAIL_TEST], ...
		[' When testing AnalyzeEnsemble no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

