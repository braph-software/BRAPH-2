%TEST_MEASUREENSEMBLE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	me = MeasureEnsemble();
	 
	% get('ELCLASS')
	if isa(MeasureEnsemble, 'ConcreteElement')
		assert(strcmp(MeasureEnsemble().get('ELCLASS'), 'MeasureEnsemble'), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble().get(''ELCLASS'') should return ''MeasureEnsemble''.')
	end
	 
	% getClass
	assert(strcmp(MeasureEnsemble.getClass(), 'MeasureEnsemble'), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.getClass() should return ''MeasureEnsemble''.')
	assert(strcmp(me.getClass(), 'MeasureEnsemble'), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'me.getClass() should return ''MeasureEnsemble''.')
	assert(strcmp(Element.getClass(me), 'MeasureEnsemble'), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(me) should return ''MeasureEnsemble''.')
	assert(strcmp(Element.getClass('MeasureEnsemble'), 'MeasureEnsemble'), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''MeasureEnsemble'') should return ''MeasureEnsemble''.')
	 
	% getSubclasses()
	assert(isequal(MeasureEnsemble.getSubclasses(), subclasses('MeasureEnsemble', [], [], true)), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.getSubclasses() should return the same result as subclasses(''MeasureEnsemble'', [], [], true).')
	assert(isequal(me.getSubclasses(), subclasses('MeasureEnsemble', [], [], true)), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''MeasureEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses(me), subclasses('MeasureEnsemble', [], [], true)), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(me) should return the same result as subclasses(''MeasureEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses('MeasureEnsemble'), subclasses('MeasureEnsemble', [], [], true)), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''MeasureEnsemble'') should return the same result as subclasses(''MeasureEnsemble'', [], [], true).')
	 
	% getProps()
	assert(isempty(MeasureEnsemble.getProps()) || isequal(MeasureEnsemble.getProps(), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.getProps() should return a row vector [1:1:N].')
	assert(isempty(MeasureEnsemble.getProps()) || isequal(me.getProps(), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'me.getProps() should return a row vector [1:1:N].')
	assert(isempty(MeasureEnsemble.getProps()) || isequal(Element.getProps(me), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(me) should return a row vector [1:1:N].')
	assert(isempty(MeasureEnsemble.getProps()) || isequal(Element.getProps('MeasureEnsemble'), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''MeasureEnsemble'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) MeasureEnsemble.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(MeasureEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.getProps(category) does not work.')
	tmp = cellfun(@(category) me.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(MeasureEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'me.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(me, category), categories, 'UniformOutput', false);
	assert(isempty(MeasureEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(me, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('MeasureEnsemble', category), categories, 'UniformOutput', false);
	assert(isempty(MeasureEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(MeasureEnsemble.getProps())), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''MeasureEnsemble'', category) does not work.')
	 
	% getPropNumber()
	assert(MeasureEnsemble.getPropNumber() == length(MeasureEnsemble.getProps()), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.getPropNumber() should return the number of properties.')
	assert(me.getPropNumber() == length(MeasureEnsemble.getProps()), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'me.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(me) == length(MeasureEnsemble.getProps()), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(me) should return the number of properties.')
	assert(Element.getPropNumber('MeasureEnsemble') == length(MeasureEnsemble.getProps()), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''MeasureEnsemble'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) MeasureEnsemble.getPropNumber(category), categories)) == MeasureEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) me.getPropNumber(category), categories)) == MeasureEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'me.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(me, category), categories)) == MeasureEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(me, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('MeasureEnsemble', category), categories)) == MeasureEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''MeasureEnsemble'', category) does not work.')
	 
	% existsProp(prop)
	assert(~MeasureEnsemble.existsProp(NaN), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.existsProp(prop) does not work.')
	assert(~me.existsProp(NaN), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'me.existsProp(prop) does not work.')
	assert(~Element.existsProp(me, NaN), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(me, prop) does not work.')
	assert(~Element.existsProp('MeasureEnsemble', NaN), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''MeasureEnsemble'', prop) does not work.')
	 
	assert_with_error('MeasureEnsemble.existsProp(NaN)', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], me)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], me)
	assert_with_error('Element.existsProp(''MeasureEnsemble'', NaN)', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		assert(MeasureEnsemble.existsProp(prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.existsProp(prop) does not work.')
		assert(me.existsProp(prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.existsProp(prop) does not work.')
		assert(Element.existsProp(me, prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(me, prop) does not work.')
		assert(Element.existsProp('MeasureEnsemble', prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''MeasureEnsemble'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~MeasureEnsemble.existsTag(''), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.existsTag(tag) does not work.')
	assert(~me.existsTag(''), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'me.existsTag(tag) does not work.')
	assert(~Element.existsTag(me, ''), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(me, tag) does not work.')
	assert(~Element.existsTag('MeasureEnsemble', ''), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''MeasureEnsemble'', tag) does not work.')
	 
	assert_with_error('MeasureEnsemble.existsTag('''')', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], me)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], me)
	assert_with_error('Element.existsTag(''MeasureEnsemble'', '''')', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
		assert(MeasureEnsemble.existsTag(tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.existsTag(tag) does not work.')
		assert(me.existsTag(tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.existsTag(tag) does not work.')
		assert(Element.existsTag(me, tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(me, tga) does not work.')
		assert(Element.existsTag('MeasureEnsemble', tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''MeasureEnsemble'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		assert(MeasureEnsemble.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropProp(prop) does not work.')
		assert(me.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropProp(prop) does not work.')
		assert(Element.getPropProp(me, prop) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(me, prop) does not work.')
		assert(Element.getPropProp('MeasureEnsemble', prop) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''MeasureEnsemble'', prop) does not work.')
	 
		tag = me.getPropTag(prop);
		assert(MeasureEnsemble.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropProp(tag) does not work.')
		assert(me.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropProp(tag) does not work.')
		assert(Element.getPropProp(me, tag) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(me, tag) does not work.')
		assert(Element.getPropProp('MeasureEnsemble', prop) == prop, ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''MeasureEnsemble'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		assert(strcmp(MeasureEnsemble.getPropTag(prop), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropTag(prop) does not work.')
		assert(strcmp(me.getPropTag(prop), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(me, prop), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(me, prop) does not work.')
		assert(strcmp(Element.getPropTag('MeasureEnsemble', prop), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''MeasureEnsemble'', prop) does not work.')
	 
		assert(strcmp(MeasureEnsemble.getPropTag(tag), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropTag(tag) does not work.')
		assert(strcmp(me.getPropTag(tag), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(me, tag), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(me, tag) does not work.')
		assert(strcmp(Element.getPropTag('MeasureEnsemble', prop), tag), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''MeasureEnsemble'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		assert(Category.existsCategory(MeasureEnsemble.getPropCategory(prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(me.getPropCategory(prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(me, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(me, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(me, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''MeasureEnsemble'', prop) does not work.')
	 
		assert(Category.existsCategory(MeasureEnsemble.getPropCategory(tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(me.getPropCategory(tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(me, tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(me, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(me, tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''MeasureEnsemble'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		assert(Format.existsFormat(MeasureEnsemble.getPropFormat(prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(me.getPropFormat(prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(me, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(me, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(me, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''MeasureEnsemble'', prop) does not work.')
	 
		assert(Format.existsFormat(MeasureEnsemble.getPropFormat(tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(me.getPropFormat(tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(me, tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(me, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(me, tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''MeasureEnsemble'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		assert(ischar(MeasureEnsemble.getPropDescription(prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropDescription(prop) does not work.')
		assert(ischar(me.getPropDescription(prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(me, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(me, prop) does not work.')
		assert(ischar(Element.getPropDescription(me, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''MeasureEnsemble'', prop) does not work.')
	 
		assert(ischar(MeasureEnsemble.getPropDescription(tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.getPropDescription(tag) does not work.')
		assert(ischar(me.getPropDescription(tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(me, tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(me, tag) does not work.')
		assert(ischar(Element.getPropDescription(me, tag)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''MeasureEnsemble'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		settings = MeasureEnsemble.getPropSettings(prop);
		settings = me.getPropSettings(prop);
		settings = Element.getPropSettings(me, prop);
		settings = Element.getPropSettings('MeasureEnsemble', prop);
	 
		settings = MeasureEnsemble.getPropSettings(tag);
		settings = me.getPropSettings(tag);
		settings = Element.getPropSettings(me, tag);
		settings = Element.getPropSettings('MeasureEnsemble', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		default = MeasureEnsemble.getPropDefault(prop);
		default = me.getPropDefault(prop);
		default = Element.getPropDefault(me, prop);
		default = Element.getPropDefault('MeasureEnsemble', prop);
	 
		default = MeasureEnsemble.getPropDefault(tag);
		default = me.getPropDefault(tag);
		default = Element.getPropDefault(me, tag);
		default = Element.getPropDefault('MeasureEnsemble', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		conditioned_default = MeasureEnsemble.getPropDefaultConditioned(prop);
		conditioned_default = me.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(me, prop);
		conditioned_default = Element.getPropDefaultConditioned('MeasureEnsemble', prop);
	 
		conditioned_default = MeasureEnsemble.getPropDefaultConditioned(tag);
		conditioned_default = me.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(me, tag);
		conditioned_default = Element.getPropDefaultConditioned('MeasureEnsemble', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		tag = me.getPropTag(prop);
	 
		assert(~MeasureEnsemble.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.checkProp(prop, value) does not work.')
		assert(~me.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(me, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(me, prop, value) does not work.')
		assert(~Element.checkProp('MeasureEnsemble', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MeasureEnsemble'', prop, value) does not work.')
	 
		assert_with_error('MeasureEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], prop, me)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], prop, me)
		assert_with_error('Element.checkProp(''MeasureEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~MeasureEnsemble.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.checkProp(tag, value) does not work.')
		assert(~me.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(me, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(me, tag, value) does not work.')
		assert(~Element.checkProp('MeasureEnsemble', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MeasureEnsemble'', tag, value) does not work.')
	 
		assert_with_error('MeasureEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], tag, me)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], tag, me)
		assert_with_error('Element.checkProp(''MeasureEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':MeasureEnsemble:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(MeasureEnsemble.checkProp(prop, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.checkProp(prop, <conditioned default value>) does not work.')
		assert(me.checkProp(prop, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(me, prop, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(me, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('MeasureEnsemble', prop, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MeasureEnsemble'', prop, <conditioned default value>) does not work.')
	 
		assert(MeasureEnsemble.checkProp(tag, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.checkProp(tag, <conditioned default value>) does not work.')
		assert(me.checkProp(tag, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'me.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(me, tag, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(me, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('MeasureEnsemble', tag, Element.getPropDefaultConditioned(MeasureEnsemble, prop)), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''MeasureEnsemble'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, MeasureEnsemble.getPropDefault(MeasureEnsemble.TEMPLATE), ...
		MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
		MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFME), ...
		MeasureEnsemble.PFBG, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFBG) ...
		);
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [MeasureEnsemble.PFME MeasureEnsemble.PFBG])
			continue
		end
	 
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					me.getr(prop) == MeasureEnsemble.getNoValue(), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' MeasureEnsemble.getCategoryName(MeasureEnsemble.getPropCategory(prop)) ', MeasureEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MeasureEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					me.getr(TAG) == MeasureEnsemble.getNoValue(), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' MeasureEnsemble.getCategoryName(MeasureEnsemble.getPropCategory(prop)) ', MeasureEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MeasureEnsemble.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(me.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(me.getPropSettings(prop))
					assert( ...
						me.checkFormat(me.getPropFormat(prop), me.get(prop)), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						me.checkFormat(me.getPropFormat(prop), me.get(prop), me.getPropSettings(prop)), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					me.getr(prop) == MeasureEnsemble.getNoValue(), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' MeasureEnsemble.getCategoryName(MeasureEnsemble.getPropCategory(prop)) ', MeasureEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MeasureEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					me.getr(TAG) == MeasureEnsemble.getNoValue(), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' MeasureEnsemble.getCategoryName(MeasureEnsemble.getPropCategory(prop)) ', MeasureEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in MeasureEnsemble.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':MeasureEnsemble']);
				assert( ...
					~isa(me.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(me.getPropSettings(prop))
					assert( ...
						me.checkFormat(me.getPropFormat(prop), me.get(prop)), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						me.checkFormat(me.getPropFormat(prop), me.get(prop), me.getPropSettings(prop)), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(me.getr(prop), MeasureEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by MeasureEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in MeasureEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(me.getr(TAG), MeasureEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' TAG ') must be inizialized to its default value ' ...
					'given by MeasureEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in MeasureEnsemble.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, MeasureEnsemble.getPropDefault(MeasureEnsemble.TEMPLATE), ...
		MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
		MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFME), ...
		MeasureEnsemble.PFBG, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFBG) ...
		);
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [MeasureEnsemble.PFME MeasureEnsemble.PFBG])
			continue
		end
	 
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		switch MeasureEnsemble.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(me.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(me.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(me.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(me.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					me.checkFormat(me.getPropFormat(prop), me.getr(prop),me.getPropSettings(prop)), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':MeasureEnsemble']);
				assert( ...
					~isa(me.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(me.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':MeasureEnsemble']);
	% 			assert( ...
	% 				~isa(me.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['MeasureEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(me.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				me.checkFormat(me.getPropFormat(prop), me.getr(prop),me.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['MeasureEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':MeasureEnsemble']);
				assert( ...
					~isa(me.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(me.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(me.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(me.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					me.checkFormat(me.getPropFormat(prop), me.getr(prop),me.getPropSettings(prop)), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if me.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:MeasureEnsemble');
					delete(ancestor(me.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(MeasureEnsemble.getProps(Category.RESULT))
		for prop = 1:1:MeasureEnsemble.getPropNumber()
	 
			% excluded props
			if any(prop == [MeasureEnsemble.PFME MeasureEnsemble.PFBG])
				continue
			end
	 
			switch MeasureEnsemble.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						me.isLocked(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~me.isLocked(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me = MeasureEnsemble();
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		assert( ...
			~me.isLocked(prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			['MeasureEnsemble.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~me.isLocked(TAG), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			['MeasureEnsemble.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	me.lock()
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					me.isLocked(prop), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~me.isLocked(prop), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me = MeasureEnsemble();
	 
	warning_backup = warning('off', 'BRAPH2:MeasureEnsemble');
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		me.lock(prop)
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					me.isLocked(prop), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~me.isLocked(prop), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me = MeasureEnsemble();
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		assert( ...
			me.isChecked(prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			['MeasureEnsemble.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			me.isChecked(TAG), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			['MeasureEnsemble.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	me.unchecked()
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		assert( ...
			~me.isChecked(prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			['MeasureEnsemble.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	me.checked()
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		assert( ...
			me.isChecked(prop), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			['MeasureEnsemble.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic MeasureEnsemble
	me_0 = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, MeasureEnsemble.getPropDefault(MeasureEnsemble.TEMPLATE), ...
		MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
		MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFME), ...
		MeasureEnsemble.PFBG, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFBG) ...
		);
	 
	% MeasureEnsemble with 1st callbacks
	me_1 = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, me_0.getCallback(4), ..., ...
		MeasureEnsemble.ID, me_0.getCallback(5), ..., ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, me_0.getCallback(9), ..., ...
		MeasureEnsemble.A, me_0.getCallback(10), ..., ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, me_0.getCallback(12), ..., ...
		MeasureEnsemble.PFBG, me_0.getCallback(13) ... ...
		);
	 
	prop_number = MeasureEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(me_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(me_1.get(prop), me_0.get(prop)) && ~isa(me_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(me_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% MeasureEnsemble with 2nd callbacks
	me_2 = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, me_1.getCallback(4), ..., ...
		MeasureEnsemble.ID, me_1.getCallback(5), ..., ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, me_1.getCallback(9), ..., ...
		MeasureEnsemble.A, me_1.getCallback(10), ..., ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, me_1.getCallback(12), ..., ...
		MeasureEnsemble.PFBG, me_1.getCallback(13) ... ...
		);
	 
	prop_number = MeasureEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(me_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(me_2.get(prop), me_0.get(prop)) && ~isa(me_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(me_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% MeasureEnsemble with 3rd callbacks
	me_3 = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, me_2.getCallback(4), ..., ...
		MeasureEnsemble.ID, me_2.getCallback(5), ..., ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, me_2.getCallback(9), ..., ...
		MeasureEnsemble.A, me_2.getCallback(10), ..., ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, me_2.getCallback(12), ..., ...
		MeasureEnsemble.PFBG, me_2.getCallback(13) ... ...
		);
	 
	prop_number = MeasureEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(me_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(me_3.get(prop), me_0.get(prop)) && ~isa(me_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(me_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	me = MeasureEnsemble();
	 
	me_copy = me.copy();
	 
	assert(me_copy ~= me, ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(me_copy, me), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		value = me.getr(prop);
		value_copy = me_copy.getr(prop);
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					'MeasureEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
							'MeasureEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
							'MeasureEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					me_copy.isLocked(prop) == me.isLocked(prop), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					'MeasureEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					me_copy.isChecked(prop) == me.isChecked(prop), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					'MeasureEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					me_copy.getPropSeed(prop) == me.getPropSeed(prop), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					'MeasureEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	me = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, MeasureEnsemble.getPropDefault(MeasureEnsemble.TEMPLATE), ...
		MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
		MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFME), ...
		MeasureEnsemble.PFBG, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFBG) ...
		);
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		if MeasureEnsemble.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':MeasureEnsemble']);
			% me.memorize(prop);
			% warning(warning_backup)
		elseif MeasureEnsemble.getPropCategory(prop) == Category.EVANESCENT && me.getPropFormat(prop) == Format.HANDLE
			me.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:MeasureEnsemble');
			delete(ancestor(me.get(prop), 'figure'))
			warning(warning_backup)
		else
			me.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	me_copy = me.copy();
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		value = me.getr(prop);
		value_copy = me_copy.getr(prop);
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					'MeasureEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
							'MeasureEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
							'MeasureEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						me_copy.isLocked(prop) == me.isLocked(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						me_copy.isChecked(prop) == me.isChecked(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						me_copy.getPropSeed(prop) == me.getPropSeed(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	me_0 = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, MeasureEnsemble.getPropDefault(MeasureEnsemble.TEMPLATE), ...
		MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
		MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFME), ...
		MeasureEnsemble.PFBG, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFBG) ...
		);
	 
	me = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, me_0.getCallback(4), ..., ...
		MeasureEnsemble.ID, me_0.getCallback(5), ..., ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, me_0.getCallback(9), ..., ...
		MeasureEnsemble.A, me_0.getCallback(10), ..., ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, me_0.getCallback(12), ..., ...
		MeasureEnsemble.PFBG, me_0.getCallback(13) ... ...
		);
	 
	me_copy = me.copy();
	me_0_copy = me_copy.getr('ID').get('EL');
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
		value = me.getr(prop);
		value_copy = me_copy.getr(prop);
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					'MeasureEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
							'MeasureEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
							'MeasureEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == me_0.getCallback(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The callback should be obtained from MeasureEnsemble.getCallback().' ...
						)
					assert( ...
						value_copy == me_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The callback should be obtained from MeasureEnsemble.getCallback().' ...
						)
				end
	 
					assert( ...
						me_copy.isLocked(prop) == me.isLocked(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						me_copy.isChecked(prop) == me.isChecked(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						me_copy.getPropSeed(prop) == me.getPropSeed(prop), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me_template = MeasureEnsemble();
	me = MeasureEnsemble('TEMPLATE', me_template);
	 
	for prop = 1:1:MeasureEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [MeasureEnsemble.PFME MeasureEnsemble.PFBG])
			continue
		end
	 
		TAG = upper(MeasureEnsemble.getPropTag(prop));
		switch MeasureEnsemble.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == MeasureEnsemble.TEMPLATE
					assert( ...
						isa(me.getr(prop), 'MeasureEnsemble'), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble TEMPLATE does not work. MeasureEnsemble.getr(''TEMPLATE'') should be a MeasureEnsemble element.' ...
						)
					assert( ...
						isa(me_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						'MeasureEnsemble TEMPLATE does not work. MeasureEnsemble_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(me.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble TEMPLATE does not work. MeasureEnsemble.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						me.getr(prop).get('EL') == me_template && me.getr(prop).get('PROP') == prop && strcmp(me.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble TEMPLATE does not work. MeasureEnsemble.getr(' TAG ') should be a Callback to me_template.' TAG '.'] ...
						)
					assert( ...
						isa(me_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
						['MeasureEnsemble TEMPLATE does not work. MeasureEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(me.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble TEMPLATE does not work. MeasureEnsemble.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(me_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
					['MeasureEnsemble TEMPLATE does not work. MeasureEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, MeasureEnsemble.getPropDefault(MeasureEnsemble.TEMPLATE), ...
		MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
		MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFME), ...
		MeasureEnsemble.PFBG, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFBG) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'measureensemble_to_be_erased.b2'];
	 
	Element.save(me, filename)
	 
	me_loaded = Element.load(filename);
	 
	assert( ...
		isequal(me.copy(), me_loaded), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.save(me) and/or MeasureEnsemble.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	me = MeasureEnsemble( ...
		MeasureEnsemble.ELCLASS, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.NAME, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.DESCRIPTION, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.TEMPLATE, MeasureEnsemble.getPropDefault(MeasureEnsemble.TEMPLATE), ...
		MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
		MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
		MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
		MeasureEnsemble.TOSTRING, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
		MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
		MeasureEnsemble.M, MeasureEnsemble.getNoValue(), ...
		MeasureEnsemble.PFME, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFME), ...
		MeasureEnsemble.PFBG, MeasureEnsemble.getPropDefault(MeasureEnsemble.PFBG) ...
		);
	 
	[json, struct, el_list] = encodeJSON(me);
	[me_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(me_dec ~= me, ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		'MeasureEnsemble.encodeJSON() or MeasureEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) MeasureEnsemble.getPropFormat(prop), num2cell(MeasureEnsemble.getProps())) == Format.HANDLE) && all(cellfun(@(prop) MeasureEnsemble.getPropFormat(prop), num2cell(MeasureEnsemble.getProps())) == Format.NET)
		assert(isequal(me_dec, me), ...
			[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
			'MeasureEnsemble.encodeJSON() or MeasureEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.FAIL_TEST], ...
		[' When testing MeasureEnsemble no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

