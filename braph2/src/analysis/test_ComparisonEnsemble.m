%TEST_COMPARISONENSEMBLE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	cp = ComparisonEnsemble();
	 
	% get('ELCLASS')
	if isa(ComparisonEnsemble, 'ConcreteElement')
		assert(strcmp(ComparisonEnsemble().get('ELCLASS'), 'ComparisonEnsemble'), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble().get(''ELCLASS'') should return ''ComparisonEnsemble''.')
	end
	 
	% getClass
	assert(strcmp(ComparisonEnsemble.getClass(), 'ComparisonEnsemble'), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.getClass() should return ''ComparisonEnsemble''.')
	assert(strcmp(cp.getClass(), 'ComparisonEnsemble'), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'cp.getClass() should return ''ComparisonEnsemble''.')
	assert(strcmp(Element.getClass(cp), 'ComparisonEnsemble'), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(cp) should return ''ComparisonEnsemble''.')
	assert(strcmp(Element.getClass('ComparisonEnsemble'), 'ComparisonEnsemble'), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''ComparisonEnsemble'') should return ''ComparisonEnsemble''.')
	 
	% getSubclasses()
	assert(isequal(ComparisonEnsemble.getSubclasses(), subclasses('ComparisonEnsemble', [], [], true)), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.getSubclasses() should return the same result as subclasses(''ComparisonEnsemble'', [], [], true).')
	assert(isequal(cp.getSubclasses(), subclasses('ComparisonEnsemble', [], [], true)), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''ComparisonEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses(cp), subclasses('ComparisonEnsemble', [], [], true)), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(cp) should return the same result as subclasses(''ComparisonEnsemble'', [], [], true).')
	assert(isequal(Element.getSubclasses('ComparisonEnsemble'), subclasses('ComparisonEnsemble', [], [], true)), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''ComparisonEnsemble'') should return the same result as subclasses(''ComparisonEnsemble'', [], [], true).')
	 
	% getProps()
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(ComparisonEnsemble.getProps(), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.getProps() should return a row vector [1:1:N].')
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(cp.getProps(), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'cp.getProps() should return a row vector [1:1:N].')
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(Element.getProps(cp), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(cp) should return a row vector [1:1:N].')
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(Element.getProps('ComparisonEnsemble'), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ComparisonEnsemble'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) ComparisonEnsemble.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.getProps(category) does not work.')
	tmp = cellfun(@(category) cp.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'cp.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(cp, category), categories, 'UniformOutput', false);
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(cp, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('ComparisonEnsemble', category), categories, 'UniformOutput', false);
	assert(isempty(ComparisonEnsemble.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ComparisonEnsemble.getProps())), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ComparisonEnsemble'', category) does not work.')
	 
	% getPropNumber()
	assert(ComparisonEnsemble.getPropNumber() == length(ComparisonEnsemble.getProps()), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.getPropNumber() should return the number of properties.')
	assert(cp.getPropNumber() == length(ComparisonEnsemble.getProps()), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'cp.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(cp) == length(ComparisonEnsemble.getProps()), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(cp) should return the number of properties.')
	assert(Element.getPropNumber('ComparisonEnsemble') == length(ComparisonEnsemble.getProps()), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ComparisonEnsemble'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) ComparisonEnsemble.getPropNumber(category), categories)) == ComparisonEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) cp.getPropNumber(category), categories)) == ComparisonEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'cp.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(cp, category), categories)) == ComparisonEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(cp, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('ComparisonEnsemble', category), categories)) == ComparisonEnsemble.getPropNumber(), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ComparisonEnsemble'', category) does not work.')
	 
	% existsProp(prop)
	assert(~ComparisonEnsemble.existsProp(NaN), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.existsProp(prop) does not work.')
	assert(~cp.existsProp(NaN), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'cp.existsProp(prop) does not work.')
	assert(~Element.existsProp(cp, NaN), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(cp, prop) does not work.')
	assert(~Element.existsProp('ComparisonEnsemble', NaN), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''ComparisonEnsemble'', prop) does not work.')
	 
	assert_with_error('ComparisonEnsemble.existsProp(NaN)', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], cp)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], cp)
	assert_with_error('Element.existsProp(''ComparisonEnsemble'', NaN)', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		assert(ComparisonEnsemble.existsProp(prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.existsProp(prop) does not work.')
		assert(cp.existsProp(prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.existsProp(prop) does not work.')
		assert(Element.existsProp(cp, prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(cp, prop) does not work.')
		assert(Element.existsProp('ComparisonEnsemble', prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''ComparisonEnsemble'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~ComparisonEnsemble.existsTag(''), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.existsTag(tag) does not work.')
	assert(~cp.existsTag(''), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'cp.existsTag(tag) does not work.')
	assert(~Element.existsTag(cp, ''), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(cp, tag) does not work.')
	assert(~Element.existsTag('ComparisonEnsemble', ''), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''ComparisonEnsemble'', tag) does not work.')
	 
	assert_with_error('ComparisonEnsemble.existsTag('''')', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], cp)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], cp)
	assert_with_error('Element.existsTag(''ComparisonEnsemble'', '''')', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
		assert(ComparisonEnsemble.existsTag(tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.existsTag(tag) does not work.')
		assert(cp.existsTag(tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.existsTag(tag) does not work.')
		assert(Element.existsTag(cp, tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(cp, tga) does not work.')
		assert(Element.existsTag('ComparisonEnsemble', tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''ComparisonEnsemble'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		assert(ComparisonEnsemble.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropProp(prop) does not work.')
		assert(cp.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropProp(prop) does not work.')
		assert(Element.getPropProp(cp, prop) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(cp, prop) does not work.')
		assert(Element.getPropProp('ComparisonEnsemble', prop) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ComparisonEnsemble'', prop) does not work.')
	 
		tag = cp.getPropTag(prop);
		assert(ComparisonEnsemble.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropProp(tag) does not work.')
		assert(cp.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropProp(tag) does not work.')
		assert(Element.getPropProp(cp, tag) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(cp, tag) does not work.')
		assert(Element.getPropProp('ComparisonEnsemble', prop) == prop, ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ComparisonEnsemble'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		assert(strcmp(ComparisonEnsemble.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropTag(prop) does not work.')
		assert(strcmp(cp.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(cp, prop), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(cp, prop) does not work.')
		assert(strcmp(Element.getPropTag('ComparisonEnsemble', prop), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ComparisonEnsemble'', prop) does not work.')
	 
		assert(strcmp(ComparisonEnsemble.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropTag(tag) does not work.')
		assert(strcmp(cp.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(cp, tag), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(cp, tag) does not work.')
		assert(strcmp(Element.getPropTag('ComparisonEnsemble', prop), tag), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ComparisonEnsemble'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		assert(Category.existsCategory(ComparisonEnsemble.getPropCategory(prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(cp.getPropCategory(prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(cp, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(cp, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(cp, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ComparisonEnsemble'', prop) does not work.')
	 
		assert(Category.existsCategory(ComparisonEnsemble.getPropCategory(tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(cp.getPropCategory(tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(cp, tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(cp, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(cp, tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ComparisonEnsemble'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		assert(Format.existsFormat(ComparisonEnsemble.getPropFormat(prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(cp.getPropFormat(prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(cp, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(cp, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(cp, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ComparisonEnsemble'', prop) does not work.')
	 
		assert(Format.existsFormat(ComparisonEnsemble.getPropFormat(tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(cp.getPropFormat(tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(cp, tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(cp, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(cp, tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ComparisonEnsemble'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		assert(ischar(ComparisonEnsemble.getPropDescription(prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropDescription(prop) does not work.')
		assert(ischar(cp.getPropDescription(prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(cp, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(cp, prop) does not work.')
		assert(ischar(Element.getPropDescription(cp, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ComparisonEnsemble'', prop) does not work.')
	 
		assert(ischar(ComparisonEnsemble.getPropDescription(tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.getPropDescription(tag) does not work.')
		assert(ischar(cp.getPropDescription(tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(cp, tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(cp, tag) does not work.')
		assert(ischar(Element.getPropDescription(cp, tag)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ComparisonEnsemble'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		settings = ComparisonEnsemble.getPropSettings(prop);
		settings = cp.getPropSettings(prop);
		settings = Element.getPropSettings(cp, prop);
		settings = Element.getPropSettings('ComparisonEnsemble', prop);
	 
		settings = ComparisonEnsemble.getPropSettings(tag);
		settings = cp.getPropSettings(tag);
		settings = Element.getPropSettings(cp, tag);
		settings = Element.getPropSettings('ComparisonEnsemble', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		default = ComparisonEnsemble.getPropDefault(prop);
		default = cp.getPropDefault(prop);
		default = Element.getPropDefault(cp, prop);
		default = Element.getPropDefault('ComparisonEnsemble', prop);
	 
		default = ComparisonEnsemble.getPropDefault(tag);
		default = cp.getPropDefault(tag);
		default = Element.getPropDefault(cp, tag);
		default = Element.getPropDefault('ComparisonEnsemble', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		conditioned_default = ComparisonEnsemble.getPropDefaultConditioned(prop);
		conditioned_default = cp.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(cp, prop);
		conditioned_default = Element.getPropDefaultConditioned('ComparisonEnsemble', prop);
	 
		conditioned_default = ComparisonEnsemble.getPropDefaultConditioned(tag);
		conditioned_default = cp.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(cp, tag);
		conditioned_default = Element.getPropDefaultConditioned('ComparisonEnsemble', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		tag = cp.getPropTag(prop);
	 
		assert(~ComparisonEnsemble.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.checkProp(prop, value) does not work.')
		assert(~cp.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(cp, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(cp, prop, value) does not work.')
		assert(~Element.checkProp('ComparisonEnsemble', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ComparisonEnsemble'', prop, value) does not work.')
	 
		assert_with_error('ComparisonEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], prop, cp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], prop, cp)
		assert_with_error('Element.checkProp(''ComparisonEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~ComparisonEnsemble.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.checkProp(tag, value) does not work.')
		assert(~cp.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(cp, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(cp, tag, value) does not work.')
		assert(~Element.checkProp('ComparisonEnsemble', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ComparisonEnsemble'', tag, value) does not work.')
	 
		assert_with_error('ComparisonEnsemble.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], tag, cp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], tag, cp)
		assert_with_error('Element.checkProp(''ComparisonEnsemble'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(ComparisonEnsemble.checkProp(prop, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.checkProp(prop, <conditioned default value>) does not work.')
		assert(cp.checkProp(prop, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(cp, prop, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(cp, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('ComparisonEnsemble', prop, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ComparisonEnsemble'', prop, <conditioned default value>) does not work.')
	 
		assert(ComparisonEnsemble.checkProp(tag, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.checkProp(tag, <conditioned default value>) does not work.')
		assert(cp.checkProp(tag, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'cp.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(cp, tag, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(cp, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('ComparisonEnsemble', tag, Element.getPropDefaultConditioned(ComparisonEnsemble, prop)), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ComparisonEnsemble'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.TEMPLATE), ...
		ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
		ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFC), ...
		ComparisonEnsemble.PFB, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFB), ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [ComparisonEnsemble.PFC ComparisonEnsemble.PFB ComparisonEnsemble.CALCULATE_RESULTS])
			continue
		end
	 
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					cp.getr(prop) == ComparisonEnsemble.getNoValue(), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' ComparisonEnsemble.getCategoryName(ComparisonEnsemble.getPropCategory(prop)) ', ComparisonEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ComparisonEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					cp.getr(TAG) == ComparisonEnsemble.getNoValue(), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' ComparisonEnsemble.getCategoryName(ComparisonEnsemble.getPropCategory(prop)) ', ComparisonEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ComparisonEnsemble.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(cp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(cp.getPropSettings(prop))
					assert( ...
						cp.checkFormat(cp.getPropFormat(prop), cp.get(prop)), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						cp.checkFormat(cp.getPropFormat(prop), cp.get(prop), cp.getPropSettings(prop)), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					cp.getr(prop) == ComparisonEnsemble.getNoValue(), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' ComparisonEnsemble.getCategoryName(ComparisonEnsemble.getPropCategory(prop)) ', ComparisonEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ComparisonEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					cp.getr(TAG) == ComparisonEnsemble.getNoValue(), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['Being a ' ComparisonEnsemble.getCategoryName(ComparisonEnsemble.getPropCategory(prop)) ', ComparisonEnsemble.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ComparisonEnsemble.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':ComparisonEnsemble']);
				assert( ...
					~isa(cp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(cp.getPropSettings(prop))
					assert( ...
						cp.checkFormat(cp.getPropFormat(prop), cp.get(prop)), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						cp.checkFormat(cp.getPropFormat(prop), cp.get(prop), cp.getPropSettings(prop)), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(cp.getr(prop), ComparisonEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by ComparisonEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ComparisonEnsemble.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(cp.getr(TAG), ComparisonEnsemble.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' TAG ') must be inizialized to its default value ' ...
					'given by ComparisonEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ComparisonEnsemble.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.TEMPLATE), ...
		ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
		ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFC), ...
		ComparisonEnsemble.PFB, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFB), ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [ComparisonEnsemble.PFC ComparisonEnsemble.PFB ComparisonEnsemble.CALCULATE_RESULTS])
			continue
		end
	 
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		switch ComparisonEnsemble.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(cp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(cp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(cp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(cp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					cp.checkFormat(cp.getPropFormat(prop), cp.getr(prop),cp.getPropSettings(prop)), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':ComparisonEnsemble']);
				assert( ...
					~isa(cp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(cp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':ComparisonEnsemble']);
	% 			assert( ...
	% 				~isa(cp.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['ComparisonEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(cp.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				cp.checkFormat(cp.getPropFormat(prop), cp.getr(prop),cp.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
	% 				['ComparisonEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':ComparisonEnsemble']);
				assert( ...
					~isa(cp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(cp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(cp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(cp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					cp.checkFormat(cp.getPropFormat(prop), cp.getr(prop),cp.getPropSettings(prop)), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if cp.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:ComparisonEnsemble');
					delete(ancestor(cp.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(ComparisonEnsemble.getProps(Category.RESULT))
		for prop = 1:1:ComparisonEnsemble.getPropNumber()
	 
			% excluded props
			if any(prop == [ComparisonEnsemble.PFC ComparisonEnsemble.PFB ComparisonEnsemble.CALCULATE_RESULTS])
				continue
			end
	 
			switch ComparisonEnsemble.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						cp.isLocked(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~cp.isLocked(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp = ComparisonEnsemble();
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		assert( ...
			~cp.isLocked(prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			['ComparisonEnsemble.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~cp.isLocked(TAG), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			['ComparisonEnsemble.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	cp.lock()
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					cp.isLocked(prop), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~cp.isLocked(prop), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp = ComparisonEnsemble();
	 
	warning_backup = warning('off', 'BRAPH2:ComparisonEnsemble');
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		cp.lock(prop)
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					cp.isLocked(prop), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~cp.isLocked(prop), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp = ComparisonEnsemble();
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		assert( ...
			cp.isChecked(prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			['ComparisonEnsemble.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			cp.isChecked(TAG), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			['ComparisonEnsemble.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	cp.unchecked()
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		assert( ...
			~cp.isChecked(prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			['ComparisonEnsemble.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	cp.checked()
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		assert( ...
			cp.isChecked(prop), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			['ComparisonEnsemble.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic ComparisonEnsemble
	cp_0 = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.TEMPLATE), ...
		ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
		ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFC), ...
		ComparisonEnsemble.PFB, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFB), ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	% ComparisonEnsemble with 1st callbacks
	cp_1 = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, cp_0.getCallback(4), ..., ...
		ComparisonEnsemble.ID, cp_0.getCallback(5), ..., ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, cp_0.getCallback(9), ..., ...
		ComparisonEnsemble.C, cp_0.getCallback(10), ..., ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, cp_0.getCallback(17), ..., ...
		ComparisonEnsemble.PFB, cp_0.getCallback(18), ..., ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	prop_number = ComparisonEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(cp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(cp_1.get(prop), cp_0.get(prop)) && ~isa(cp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(cp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ComparisonEnsemble with 2nd callbacks
	cp_2 = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, cp_1.getCallback(4), ..., ...
		ComparisonEnsemble.ID, cp_1.getCallback(5), ..., ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, cp_1.getCallback(9), ..., ...
		ComparisonEnsemble.C, cp_1.getCallback(10), ..., ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, cp_1.getCallback(17), ..., ...
		ComparisonEnsemble.PFB, cp_1.getCallback(18), ..., ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	prop_number = ComparisonEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(cp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(cp_2.get(prop), cp_0.get(prop)) && ~isa(cp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(cp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ComparisonEnsemble with 3rd callbacks
	cp_3 = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, cp_2.getCallback(4), ..., ...
		ComparisonEnsemble.ID, cp_2.getCallback(5), ..., ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, cp_2.getCallback(9), ..., ...
		ComparisonEnsemble.C, cp_2.getCallback(10), ..., ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, cp_2.getCallback(17), ..., ...
		ComparisonEnsemble.PFB, cp_2.getCallback(18), ..., ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	prop_number = ComparisonEnsemble.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(cp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(cp_3.get(prop), cp_0.get(prop)) && ~isa(cp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(cp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	cp = ComparisonEnsemble();
	 
	cp_copy = cp.copy();
	 
	assert(cp_copy ~= cp, ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(cp_copy, cp), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		value = cp.getr(prop);
		value_copy = cp_copy.getr(prop);
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					'ComparisonEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
							'ComparisonEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
							'ComparisonEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					cp_copy.isLocked(prop) == cp.isLocked(prop), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					'ComparisonEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					cp_copy.isChecked(prop) == cp.isChecked(prop), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					'ComparisonEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					cp_copy.getPropSeed(prop) == cp.getPropSeed(prop), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					'ComparisonEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	cp = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.TEMPLATE), ...
		ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
		ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFC), ...
		ComparisonEnsemble.PFB, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFB), ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		if ComparisonEnsemble.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':ComparisonEnsemble']);
			% cp.memorize(prop);
			% warning(warning_backup)
		elseif ComparisonEnsemble.getPropCategory(prop) == Category.EVANESCENT && cp.getPropFormat(prop) == Format.HANDLE
			cp.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:ComparisonEnsemble');
			delete(ancestor(cp.get(prop), 'figure'))
			warning(warning_backup)
		else
			cp.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	cp_copy = cp.copy();
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		value = cp.getr(prop);
		value_copy = cp_copy.getr(prop);
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					'ComparisonEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
							'ComparisonEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
							'ComparisonEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						cp_copy.isLocked(prop) == cp.isLocked(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						cp_copy.isChecked(prop) == cp.isChecked(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						cp_copy.getPropSeed(prop) == cp.getPropSeed(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	cp_0 = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.TEMPLATE), ...
		ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
		ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFC), ...
		ComparisonEnsemble.PFB, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFB), ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	cp = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, cp_0.getCallback(4), ..., ...
		ComparisonEnsemble.ID, cp_0.getCallback(5), ..., ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, cp_0.getCallback(9), ..., ...
		ComparisonEnsemble.C, cp_0.getCallback(10), ..., ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, cp_0.getCallback(17), ..., ...
		ComparisonEnsemble.PFB, cp_0.getCallback(18), ..., ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	cp_copy = cp.copy();
	cp_0_copy = cp_copy.getr('ID').get('EL');
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
		value = cp.getr(prop);
		value_copy = cp_copy.getr(prop);
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					'ComparisonEnsemble.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
							'ComparisonEnsemble.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
							'ComparisonEnsemble.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == cp_0.getCallback(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The callback should be obtained from ComparisonEnsemble.getCallback().' ...
						)
					assert( ...
						value_copy == cp_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The callback should be obtained from ComparisonEnsemble.getCallback().' ...
						)
				end
	 
					assert( ...
						cp_copy.isLocked(prop) == cp.isLocked(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						cp_copy.isChecked(prop) == cp.isChecked(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						cp_copy.getPropSeed(prop) == cp.getPropSeed(prop), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp_template = ComparisonEnsemble();
	cp = ComparisonEnsemble('TEMPLATE', cp_template);
	 
	for prop = 1:1:ComparisonEnsemble.getPropNumber()
	 
		% excluded props
		if any(prop == [ComparisonEnsemble.PFC ComparisonEnsemble.PFB ComparisonEnsemble.CALCULATE_RESULTS])
			continue
		end
	 
		TAG = upper(ComparisonEnsemble.getPropTag(prop));
		switch ComparisonEnsemble.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == ComparisonEnsemble.TEMPLATE
					assert( ...
						isa(cp.getr(prop), 'ComparisonEnsemble'), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble TEMPLATE does not work. ComparisonEnsemble.getr(''TEMPLATE'') should be a ComparisonEnsemble element.' ...
						)
					assert( ...
						isa(cp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						'ComparisonEnsemble TEMPLATE does not work. ComparisonEnsemble_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(cp.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble TEMPLATE does not work. ComparisonEnsemble.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						cp.getr(prop).get('EL') == cp_template && cp.getr(prop).get('PROP') == prop && strcmp(cp.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble TEMPLATE does not work. ComparisonEnsemble.getr(' TAG ') should be a Callback to cp_template.' TAG '.'] ...
						)
					assert( ...
						isa(cp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
						['ComparisonEnsemble TEMPLATE does not work. ComparisonEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(cp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble TEMPLATE does not work. ComparisonEnsemble.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(cp_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
					['ComparisonEnsemble TEMPLATE does not work. ComparisonEnsemble_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.TEMPLATE), ...
		ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
		ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFC), ...
		ComparisonEnsemble.PFB, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFB), ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'comparisonensemble_to_be_erased.b2'];
	 
	Element.save(cp, filename)
	 
	cp_loaded = Element.load(filename);
	 
	assert( ...
		isequal(cp.copy(), cp_loaded), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.save(cp) and/or ComparisonEnsemble.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	cp = ComparisonEnsemble( ...
		ComparisonEnsemble.ELCLASS, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.NAME, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.DESCRIPTION, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.TEMPLATE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.TEMPLATE), ...
		ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
		ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
		ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
		ComparisonEnsemble.TOSTRING, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
		ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
		ComparisonEnsemble.DIFF, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P1, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.P2, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIL, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.CIU, ComparisonEnsemble.getNoValue(), ...
		ComparisonEnsemble.QVALUE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.QVALUE), ...
		ComparisonEnsemble.PFC, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFC), ...
		ComparisonEnsemble.PFB, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.PFB), ...
		ComparisonEnsemble.CALCULATE_RESULTS, ComparisonEnsemble.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(cp);
	[cp_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(cp_dec ~= cp, ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		'ComparisonEnsemble.encodeJSON() or ComparisonEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) ComparisonEnsemble.getPropFormat(prop), num2cell(ComparisonEnsemble.getProps())) == Format.HANDLE) && all(cellfun(@(prop) ComparisonEnsemble.getPropFormat(prop), num2cell(ComparisonEnsemble.getProps())) == Format.NET)
		assert(isequal(cp_dec, cp), ...
			[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
			'ComparisonEnsemble.encodeJSON() or ComparisonEnsemble.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.FAIL_TEST], ...
		[' When testing ComparisonEnsemble no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

