%TEST_NNBASE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	nn = NNBase();
	 
	% get('ELCLASS')
	if isa(NNBase, 'ConcreteElement')
		assert(strcmp(NNBase().get('ELCLASS'), 'NNBase'), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase().get(''ELCLASS'') should return ''NNBase''.')
	end
	 
	% getClass
	assert(strcmp(NNBase.getClass(), 'NNBase'), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.getClass() should return ''NNBase''.')
	assert(strcmp(nn.getClass(), 'NNBase'), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'nn.getClass() should return ''NNBase''.')
	assert(strcmp(Element.getClass(nn), 'NNBase'), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nn) should return ''NNBase''.')
	assert(strcmp(Element.getClass('NNBase'), 'NNBase'), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNBase'') should return ''NNBase''.')
	 
	% getSubclasses()
	assert(isequal(NNBase.getSubclasses(), subclasses('NNBase', [], [], true)), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.getSubclasses() should return the same result as subclasses(''NNBase'', [], [], true).')
	assert(isequal(nn.getSubclasses(), subclasses('NNBase', [], [], true)), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNBase'', [], [], true).')
	assert(isequal(Element.getSubclasses(nn), subclasses('NNBase', [], [], true)), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nn) should return the same result as subclasses(''NNBase'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNBase'), subclasses('NNBase', [], [], true)), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNBase'') should return the same result as subclasses(''NNBase'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNBase.getProps()) || isequal(NNBase.getProps(), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNBase.getProps()) || isequal(nn.getProps(), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'nn.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNBase.getProps()) || isequal(Element.getProps(nn), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nn) should return a row vector [1:1:N].')
	assert(isempty(NNBase.getProps()) || isequal(Element.getProps('NNBase'), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNBase'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNBase.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.getProps(category) does not work.')
	tmp = cellfun(@(category) nn.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'nn.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nn, category), categories, 'UniformOutput', false);
	assert(isempty(NNBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nn, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNBase', category), categories, 'UniformOutput', false);
	assert(isempty(NNBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNBase.getProps())), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNBase'', category) does not work.')
	 
	% getPropNumber()
	assert(NNBase.getPropNumber() == length(NNBase.getProps()), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.getPropNumber() should return the number of properties.')
	assert(nn.getPropNumber() == length(NNBase.getProps()), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'nn.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nn) == length(NNBase.getProps()), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nn) should return the number of properties.')
	assert(Element.getPropNumber('NNBase') == length(NNBase.getProps()), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNBase'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNBase.getPropNumber(category), categories)) == NNBase.getPropNumber(), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nn.getPropNumber(category), categories)) == NNBase.getPropNumber(), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'nn.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nn, category), categories)) == NNBase.getPropNumber(), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nn, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNBase', category), categories)) == NNBase.getPropNumber(), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNBase'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNBase.existsProp(NaN), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.existsProp(prop) does not work.')
	assert(~nn.existsProp(NaN), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'nn.existsProp(prop) does not work.')
	assert(~Element.existsProp(nn, NaN), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nn, prop) does not work.')
	assert(~Element.existsProp('NNBase', NaN), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNBase'', prop) does not work.')
	 
	assert_with_error('NNBase.existsProp(NaN)', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsProp(''NNBase'', NaN)', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNBase.getPropNumber()
		assert(NNBase.existsProp(prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.existsProp(prop) does not work.')
		assert(nn.existsProp(prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.existsProp(prop) does not work.')
		assert(Element.existsProp(nn, prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nn, prop) does not work.')
		assert(Element.existsProp('NNBase', prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNBase'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNBase.existsTag(''), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.existsTag(tag) does not work.')
	assert(~nn.existsTag(''), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'nn.existsTag(tag) does not work.')
	assert(~Element.existsTag(nn, ''), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nn, tag) does not work.')
	assert(~Element.existsTag('NNBase', ''), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNBase'', tag) does not work.')
	 
	assert_with_error('NNBase.existsTag('''')', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], nn)
	assert_with_error('Element.existsTag(''NNBase'', '''')', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
		assert(NNBase.existsTag(tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.existsTag(tag) does not work.')
		assert(nn.existsTag(tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.existsTag(tag) does not work.')
		assert(Element.existsTag(nn, tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nn, tga) does not work.')
		assert(Element.existsTag('NNBase', tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNBase'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		assert(NNBase.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropProp(prop) does not work.')
		assert(nn.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nn, prop) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nn, prop) does not work.')
		assert(Element.getPropProp('NNBase', prop) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNBase'', prop) does not work.')
	 
		tag = nn.getPropTag(prop);
		assert(NNBase.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropProp(tag) does not work.')
		assert(nn.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nn, tag) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nn, tag) does not work.')
		assert(Element.getPropProp('NNBase', prop) == prop, ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNBase'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(strcmp(NNBase.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropTag(prop) does not work.')
		assert(strcmp(nn.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nn, prop), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nn, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNBase', prop), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNBase'', prop) does not work.')
	 
		assert(strcmp(NNBase.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropTag(tag) does not work.')
		assert(strcmp(nn.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nn, tag), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nn, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNBase', prop), tag), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNBase'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(Category.existsCategory(NNBase.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nn.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nn, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNBase'', prop) does not work.')
	 
		assert(Category.existsCategory(NNBase.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nn.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nn, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nn, tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNBase'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(Format.existsFormat(NNBase.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nn.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nn, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNBase'', prop) does not work.')
	 
		assert(Format.existsFormat(NNBase.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nn.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nn, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nn, tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNBase'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(ischar(NNBase.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropDescription(prop) does not work.')
		assert(ischar(nn.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nn, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nn, prop) does not work.')
		assert(ischar(Element.getPropDescription(nn, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNBase'', prop) does not work.')
	 
		assert(ischar(NNBase.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.getPropDescription(tag) does not work.')
		assert(ischar(nn.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nn, tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nn, tag) does not work.')
		assert(ischar(Element.getPropDescription(nn, tag)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNBase'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		settings = NNBase.getPropSettings(prop);
		settings = nn.getPropSettings(prop);
		settings = Element.getPropSettings(nn, prop);
		settings = Element.getPropSettings('NNBase', prop);
	 
		settings = NNBase.getPropSettings(tag);
		settings = nn.getPropSettings(tag);
		settings = Element.getPropSettings(nn, tag);
		settings = Element.getPropSettings('NNBase', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		default = NNBase.getPropDefault(prop);
		default = nn.getPropDefault(prop);
		default = Element.getPropDefault(nn, prop);
		default = Element.getPropDefault('NNBase', prop);
	 
		default = NNBase.getPropDefault(tag);
		default = nn.getPropDefault(tag);
		default = Element.getPropDefault(nn, tag);
		default = Element.getPropDefault('NNBase', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		conditioned_default = NNBase.getPropDefaultConditioned(prop);
		conditioned_default = nn.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nn, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNBase', prop);
	 
		conditioned_default = NNBase.getPropDefaultConditioned(tag);
		conditioned_default = nn.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nn, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNBase', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNBase.getPropNumber()
		tag = nn.getPropTag(prop);
	 
		assert(~NNBase.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.checkProp(prop, value) does not work.')
		assert(~nn.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nn, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, prop, value) does not work.')
		assert(~Element.checkProp('NNBase', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNBase'', prop, value) does not work.')
	 
		assert_with_error('NNBase.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], prop, nn)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], prop, nn)
		assert_with_error('Element.checkProp(''NNBase'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNBase.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.checkProp(tag, value) does not work.')
		assert(~nn.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nn, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, tag, value) does not work.')
		assert(~Element.checkProp('NNBase', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNBase'', tag, value) does not work.')
	 
		assert_with_error('NNBase.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], tag, nn)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], tag, nn)
		assert_with_error('Element.checkProp(''NNBase'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNBase:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNBase.checkProp(prop, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.checkProp(prop, <conditioned default value>) does not work.')
		assert(nn.checkProp(prop, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nn, prop, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNBase', prop, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNBase'', prop, <conditioned default value>) does not work.')
	 
		assert(NNBase.checkProp(tag, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.checkProp(tag, <conditioned default value>) does not work.')
		assert(nn.checkProp(tag, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'nn.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nn, tag, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nn, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNBase', tag, Element.getPropDefaultConditioned(NNBase, prop)), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNBase'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, NNBase.getPropDefault(NNBase.TEMPLATE), ...
		NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, NNBase.getPropDefault(NNBase.D), ...
		NNBase.DP_CLASSES, NNBase.getPropDefault(NNBase.DP_CLASSES), ...
		NNBase.EPOCHS, NNBase.getPropDefault(NNBase.EPOCHS), ...
		NNBase.BATCH, NNBase.getPropDefault(NNBase.BATCH), ...
		NNBase.SHUFFLE, NNBase.getPropDefault(NNBase.SHUFFLE), ...
		NNBase.SOLVER, NNBase.getPropDefault(NNBase.SOLVER), ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	for prop = 1:1:NNBase.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNBase.getPropTag(prop));
		switch NNBase.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					nn.getr(prop) == NNBase.getNoValue(), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNBase.getCategoryName(NNBase.getPropCategory(prop)) ', NNBase.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNBase.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nn.getr(TAG) == NNBase.getNoValue(), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNBase.getCategoryName(NNBase.getPropCategory(prop)) ', NNBase.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNBase.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nn.getPropSettings(prop))
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop)), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop), nn.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					nn.getr(prop) == NNBase.getNoValue(), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNBase.getCategoryName(NNBase.getPropCategory(prop)) ', NNBase.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNBase.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nn.getr(TAG) == NNBase.getNoValue(), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNBase.getCategoryName(NNBase.getPropCategory(prop)) ', NNBase.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNBase.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNBase']);
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nn.getPropSettings(prop))
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop)), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nn.checkFormat(nn.getPropFormat(prop), nn.get(prop), nn.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(nn.getr(prop), NNBase.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNBase.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNBase.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(nn.getr(TAG), NNBase.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNBase.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNBase.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, NNBase.getPropDefault(NNBase.TEMPLATE), ...
		NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, NNBase.getPropDefault(NNBase.D), ...
		NNBase.DP_CLASSES, NNBase.getPropDefault(NNBase.DP_CLASSES), ...
		NNBase.EPOCHS, NNBase.getPropDefault(NNBase.EPOCHS), ...
		NNBase.BATCH, NNBase.getPropDefault(NNBase.BATCH), ...
		NNBase.SHUFFLE, NNBase.getPropDefault(NNBase.SHUFFLE), ...
		NNBase.SOLVER, NNBase.getPropDefault(NNBase.SOLVER), ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	for prop = 1:1:NNBase.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNBase.getPropTag(prop));
		switch NNBase.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nn.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNBase']);
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNBase']);
	% 			assert( ...
	% 				~isa(nn.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
	% 				['NNBase.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(nn.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
	% 				['NNBase.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
	% 				['NNBase.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNBase']);
				assert( ...
					~isa(nn.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nn.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if nn.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNBase');
					delete(ancestor(nn.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNBase.getProps(Category.RESULT))
		for prop = 1:1:NNBase.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNBase.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						nn.isLocked(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~nn.isLocked(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNBase();
	 
	for prop = 1:1:NNBase.getPropNumber()
		TAG = upper(NNBase.getPropTag(prop));
		assert( ...
			~nn.isLocked(prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			['NNBase.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nn.isLocked(TAG), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			['NNBase.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nn.lock()
	 
	for prop = 1:1:NNBase.getPropNumber()
		switch NNBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nn.isLocked(prop), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nn.isLocked(prop), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNBase();
	 
	warning_backup = warning('off', 'BRAPH2:NNBase');
	for prop = 1:1:NNBase.getPropNumber()
		nn.lock(prop)
		switch NNBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nn.isLocked(prop), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nn.isLocked(prop), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNBase();
	 
	for prop = 1:1:NNBase.getPropNumber()
		TAG = upper(NNBase.getPropTag(prop));
		assert( ...
			nn.isChecked(prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			['NNBase.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nn.isChecked(TAG), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			['NNBase.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nn.unchecked()
	 
	for prop = 1:1:NNBase.getPropNumber()
		assert( ...
			~nn.isChecked(prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			['NNBase.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nn.checked()
	 
	for prop = 1:1:NNBase.getPropNumber()
		assert( ...
			nn.isChecked(prop), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			['NNBase.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNBase
	nn_0 = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, NNBase.getPropDefault(NNBase.TEMPLATE), ...
		NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, NNBase.getPropDefault(NNBase.D), ...
		NNBase.DP_CLASSES, NNBase.getPropDefault(NNBase.DP_CLASSES), ...
		NNBase.EPOCHS, NNBase.getPropDefault(NNBase.EPOCHS), ...
		NNBase.BATCH, NNBase.getPropDefault(NNBase.BATCH), ...
		NNBase.SHUFFLE, NNBase.getPropDefault(NNBase.SHUFFLE), ...
		NNBase.SOLVER, NNBase.getPropDefault(NNBase.SOLVER), ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	% NNBase with 1st callbacks
	nn_1 = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, nn_0.getCallback(4), ..., ...
		NNBase.ID, nn_0.getCallback(5), ..., ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, nn_0.getCallback(9), ..., ...
		NNBase.DP_CLASSES, nn_0.getCallback(10), ..., ...
		NNBase.EPOCHS, nn_0.getCallback(11), ..., ...
		NNBase.BATCH, nn_0.getCallback(12), ..., ...
		NNBase.SHUFFLE, nn_0.getCallback(13), ..., ...
		NNBase.SOLVER, nn_0.getCallback(14), ..., ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	prop_number = NNBase.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNBase.getPropTag(prop));
		switch NNBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nn_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nn_1.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nn_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNBase with 2nd callbacks
	nn_2 = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, nn_1.getCallback(4), ..., ...
		NNBase.ID, nn_1.getCallback(5), ..., ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, nn_1.getCallback(9), ..., ...
		NNBase.DP_CLASSES, nn_1.getCallback(10), ..., ...
		NNBase.EPOCHS, nn_1.getCallback(11), ..., ...
		NNBase.BATCH, nn_1.getCallback(12), ..., ...
		NNBase.SHUFFLE, nn_1.getCallback(13), ..., ...
		NNBase.SOLVER, nn_1.getCallback(14), ..., ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	prop_number = NNBase.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNBase.getPropTag(prop));
		switch NNBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nn_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nn_2.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nn_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNBase with 3rd callbacks
	nn_3 = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, nn_2.getCallback(4), ..., ...
		NNBase.ID, nn_2.getCallback(5), ..., ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, nn_2.getCallback(9), ..., ...
		NNBase.DP_CLASSES, nn_2.getCallback(10), ..., ...
		NNBase.EPOCHS, nn_2.getCallback(11), ..., ...
		NNBase.BATCH, nn_2.getCallback(12), ..., ...
		NNBase.SHUFFLE, nn_2.getCallback(13), ..., ...
		NNBase.SOLVER, nn_2.getCallback(14), ..., ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	prop_number = NNBase.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNBase.getPropTag(prop));
		switch NNBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nn_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nn_3.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nn_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	nn = NNBase();
	 
	nn_copy = nn.copy();
	 
	assert(nn_copy ~= nn, ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(nn_copy, nn), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNBase.getPropNumber()
		value = nn.getr(prop);
		value_copy = nn_copy.getr(prop);
		switch NNBase.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					'NNBase.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
							'NNBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
							'NNBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					nn_copy.isLocked(prop) == nn.isLocked(prop), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					'NNBase.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nn_copy.isChecked(prop) == nn.isChecked(prop), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					'NNBase.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nn_copy.getPropSeed(prop) == nn.getPropSeed(prop), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					'NNBase.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	nn = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, NNBase.getPropDefault(NNBase.TEMPLATE), ...
		NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, NNBase.getPropDefault(NNBase.D), ...
		NNBase.DP_CLASSES, NNBase.getPropDefault(NNBase.DP_CLASSES), ...
		NNBase.EPOCHS, NNBase.getPropDefault(NNBase.EPOCHS), ...
		NNBase.BATCH, NNBase.getPropDefault(NNBase.BATCH), ...
		NNBase.SHUFFLE, NNBase.getPropDefault(NNBase.SHUFFLE), ...
		NNBase.SOLVER, NNBase.getPropDefault(NNBase.SOLVER), ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	for prop = 1:1:NNBase.getPropNumber()
		if NNBase.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNBase']);
			% nn.memorize(prop);
			% warning(warning_backup)
		elseif NNBase.getPropCategory(prop) == Category.EVANESCENT && nn.getPropFormat(prop) == Format.HANDLE
			nn.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNBase');
			delete(ancestor(nn.get(prop), 'figure'))
			warning(warning_backup)
		else
			nn.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	nn_copy = nn.copy();
	 
	for prop = 1:1:NNBase.getPropNumber()
		value = nn.getr(prop);
		value_copy = nn_copy.getr(prop);
		switch NNBase.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					'NNBase.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
							'NNBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
							'NNBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						nn_copy.isLocked(prop) == nn.isLocked(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.isChecked(prop) == nn.isChecked(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.getPropSeed(prop) == nn.getPropSeed(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	nn_0 = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, NNBase.getPropDefault(NNBase.TEMPLATE), ...
		NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, NNBase.getPropDefault(NNBase.D), ...
		NNBase.DP_CLASSES, NNBase.getPropDefault(NNBase.DP_CLASSES), ...
		NNBase.EPOCHS, NNBase.getPropDefault(NNBase.EPOCHS), ...
		NNBase.BATCH, NNBase.getPropDefault(NNBase.BATCH), ...
		NNBase.SHUFFLE, NNBase.getPropDefault(NNBase.SHUFFLE), ...
		NNBase.SOLVER, NNBase.getPropDefault(NNBase.SOLVER), ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	nn = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, nn_0.getCallback(4), ..., ...
		NNBase.ID, nn_0.getCallback(5), ..., ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, nn_0.getCallback(9), ..., ...
		NNBase.DP_CLASSES, nn_0.getCallback(10), ..., ...
		NNBase.EPOCHS, nn_0.getCallback(11), ..., ...
		NNBase.BATCH, nn_0.getCallback(12), ..., ...
		NNBase.SHUFFLE, nn_0.getCallback(13), ..., ...
		NNBase.SOLVER, nn_0.getCallback(14), ..., ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	nn_copy = nn.copy();
	nn_0_copy = nn_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNBase.getPropNumber()
		value = nn.getr(prop);
		value_copy = nn_copy.getr(prop);
		switch NNBase.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					'NNBase.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
							'NNBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
							'NNBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == nn_0.getCallback(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The callback should be obtained from NNBase.getCallback().' ...
						)
					assert( ...
						value_copy == nn_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The callback should be obtained from NNBase.getCallback().' ...
						)
				end
	 
					assert( ...
						nn_copy.isLocked(prop) == nn.isLocked(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.isChecked(prop) == nn.isChecked(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nn_copy.getPropSeed(prop) == nn.getPropSeed(prop), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn_template = NNBase();
	nn = NNBase('TEMPLATE', nn_template);
	 
	for prop = 1:1:NNBase.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNBase.getPropTag(prop));
		switch NNBase.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNBase.TEMPLATE
					assert( ...
						isa(nn.getr(prop), 'NNBase'), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase TEMPLATE does not work. NNBase.getr(''TEMPLATE'') should be a NNBase element.' ...
						)
					assert( ...
						isa(nn_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						'NNBase TEMPLATE does not work. NNBase_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(nn.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase TEMPLATE does not work. NNBase.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						nn.getr(prop).get('EL') == nn_template && nn.getr(prop).get('PROP') == prop && strcmp(nn.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase TEMPLATE does not work. NNBase.getr(' TAG ') should be a Callback to nn_template.' TAG '.'] ...
						)
					assert( ...
						isa(nn_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
						['NNBase TEMPLATE does not work. NNBase_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(nn.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase TEMPLATE does not work. NNBase.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(nn_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
					['NNBase TEMPLATE does not work. NNBase_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, NNBase.getPropDefault(NNBase.TEMPLATE), ...
		NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, NNBase.getPropDefault(NNBase.D), ...
		NNBase.DP_CLASSES, NNBase.getPropDefault(NNBase.DP_CLASSES), ...
		NNBase.EPOCHS, NNBase.getPropDefault(NNBase.EPOCHS), ...
		NNBase.BATCH, NNBase.getPropDefault(NNBase.BATCH), ...
		NNBase.SHUFFLE, NNBase.getPropDefault(NNBase.SHUFFLE), ...
		NNBase.SOLVER, NNBase.getPropDefault(NNBase.SOLVER), ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnbase_to_be_erased.b2'];
	 
	Element.save(nn, filename)
	 
	nn_loaded = Element.load(filename);
	 
	assert( ...
		isequal(nn.copy(), nn_loaded), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.save(nn) and/or NNBase.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nn = NNBase( ...
		NNBase.ELCLASS, NNBase.getNoValue(), ...
		NNBase.NAME, NNBase.getNoValue(), ...
		NNBase.DESCRIPTION, NNBase.getNoValue(), ...
		NNBase.TEMPLATE, NNBase.getPropDefault(NNBase.TEMPLATE), ...
		NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
		NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
		NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
		NNBase.TOSTRING, NNBase.getNoValue(), ...
		NNBase.D, NNBase.getPropDefault(NNBase.D), ...
		NNBase.DP_CLASSES, NNBase.getPropDefault(NNBase.DP_CLASSES), ...
		NNBase.EPOCHS, NNBase.getPropDefault(NNBase.EPOCHS), ...
		NNBase.BATCH, NNBase.getPropDefault(NNBase.BATCH), ...
		NNBase.SHUFFLE, NNBase.getPropDefault(NNBase.SHUFFLE), ...
		NNBase.SOLVER, NNBase.getPropDefault(NNBase.SOLVER), ...
		NNBase.MODEL, NNBase.getNoValue(), ...
		NNBase.INPUTS, NNBase.getNoValue(), ...
		NNBase.TARGETS, NNBase.getNoValue(), ...
		NNBase.TRAIN, NNBase.getNoValue(), ...
		NNBase.VERBOSE, NNBase.getPropDefault(NNBase.VERBOSE), ...
		NNBase.PLOT_TRAINING, NNBase.getPropDefault(NNBase.PLOT_TRAINING), ...
		NNBase.PREDICT, NNBase.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(nn);
	[nn_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(nn_dec ~= nn, ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		'NNBase.encodeJSON() or NNBase.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNBase.getPropFormat(prop), num2cell(NNBase.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNBase.getPropFormat(prop), num2cell(NNBase.getProps())) == Format.NET)
		assert(isequal(nn_dec, nn), ...
			[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
			'NNBase.encodeJSON() or NNBase.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.FAIL_TEST], ...
		[' When testing NNBase no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

