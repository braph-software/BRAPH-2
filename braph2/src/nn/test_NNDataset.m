%TEST_NNDATASET

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	d = NNDataset();
	 
	% get('ELCLASS')
	if isa(NNDataset, 'ConcreteElement')
		assert(strcmp(NNDataset().get('ELCLASS'), 'NNDataset'), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset().get(''ELCLASS'') should return ''NNDataset''.')
	end
	 
	% getBuild()
	assert(NNDataset.getBuild() == 1 && NNDataset.getBuild() > 0, ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.getBuild() should return the NNDataset build number.')
	assert(d.getBuild() == 1 && d.getBuild() > 0 , ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.getBuild() should return the NNDataset build number.')
	assert(Element.getBuild(d) == 1 && Element.getBuild(d) > 0, ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(d) should return the NNDataset build number.')
	assert(Element.getBuild('NNDataset') == 1 && Element.getBuild('NNDataset') > 0, ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNDataset'') should return the NNDataset build number.')
	 
	% getClass()
	assert(strcmp(NNDataset.getClass(), 'NNDataset'), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.getClass() should return ''NNDataset''.')
	assert(strcmp(d.getClass(), 'NNDataset'), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.getClass() should return ''NNDataset''.')
	assert(strcmp(Element.getClass(d), 'NNDataset'), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(d) should return ''NNDataset''.')
	assert(strcmp(Element.getClass('NNDataset'), 'NNDataset'), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNDataset'') should return ''NNDataset''.')
	 
	% getSubclasses()
	assert(isequal(NNDataset.getSubclasses(), subclasses('NNDataset', [], [], true)), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.getSubclasses() should return the same result as subclasses(''NNDataset'', [], [], true).')
	assert(isequal(d.getSubclasses(), subclasses('NNDataset', [], [], true)), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNDataset'', [], [], true).')
	assert(isequal(Element.getSubclasses(d), subclasses('NNDataset', [], [], true)), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(d) should return the same result as subclasses(''NNDataset'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNDataset'), subclasses('NNDataset', [], [], true)), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNDataset'') should return the same result as subclasses(''NNDataset'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNDataset.getProps()) || isequal(NNDataset.getProps(), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDataset.getProps()) || isequal(d.getProps(), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDataset.getProps()) || isequal(Element.getProps(d), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(d) should return a row vector [1:1:N].')
	assert(isempty(NNDataset.getProps()) || isequal(Element.getProps('NNDataset'), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDataset'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNDataset.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDataset.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.getProps(category) does not work.')
	tmp = cellfun(@(category) d.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDataset.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(d, category), categories, 'UniformOutput', false);
	assert(isempty(NNDataset.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(d, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNDataset', category), categories, 'UniformOutput', false);
	assert(isempty(NNDataset.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDataset.getProps())), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDataset'', category) does not work.')
	 
	% getPropNumber()
	assert(NNDataset.getPropNumber() == length(NNDataset.getProps()), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.getPropNumber() should return the number of properties.')
	assert(d.getPropNumber() == length(NNDataset.getProps()), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(d) == length(NNDataset.getProps()), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(d) should return the number of properties.')
	assert(Element.getPropNumber('NNDataset') == length(NNDataset.getProps()), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDataset'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNDataset.getPropNumber(category), categories)) == NNDataset.getPropNumber(), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) d.getPropNumber(category), categories)) == NNDataset.getPropNumber(), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(d, category), categories)) == NNDataset.getPropNumber(), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(d, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNDataset', category), categories)) == NNDataset.getPropNumber(), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDataset'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNDataset.existsProp(NaN), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.existsProp(prop) does not work.')
	assert(~d.existsProp(NaN), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.existsProp(prop) does not work.')
	assert(~Element.existsProp(d, NaN), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(d, prop) does not work.')
	assert(~Element.existsProp('NNDataset', NaN), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNDataset'', prop) does not work.')
	 
	assert_with_error('NNDataset.existsProp(NaN)', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], d)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], d)
	assert_with_error('Element.existsProp(''NNDataset'', NaN)', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDataset.getPropNumber()
		assert(NNDataset.existsProp(prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.existsProp(prop) does not work.')
		assert(d.existsProp(prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.existsProp(prop) does not work.')
		assert(Element.existsProp(d, prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(d, prop) does not work.')
		assert(Element.existsProp('NNDataset', prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNDataset'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNDataset.existsTag(''), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.existsTag(tag) does not work.')
	assert(~d.existsTag(''), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'd.existsTag(tag) does not work.')
	assert(~Element.existsTag(d, ''), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(d, tag) does not work.')
	assert(~Element.existsTag('NNDataset', ''), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNDataset'', tag) does not work.')
	 
	assert_with_error('NNDataset.existsTag('''')', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], d)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], d)
	assert_with_error('Element.existsTag(''NNDataset'', '''')', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
		assert(NNDataset.existsTag(tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.existsTag(tag) does not work.')
		assert(d.existsTag(tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.existsTag(tag) does not work.')
		assert(Element.existsTag(d, tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(d, tga) does not work.')
		assert(Element.existsTag('NNDataset', tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNDataset'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		assert(NNDataset.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropProp(prop) does not work.')
		assert(d.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropProp(prop) does not work.')
		assert(Element.getPropProp(d, prop) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(d, prop) does not work.')
		assert(Element.getPropProp('NNDataset', prop) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDataset'', prop) does not work.')
	 
		tag = d.getPropTag(prop);
		assert(NNDataset.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropProp(tag) does not work.')
		assert(d.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropProp(tag) does not work.')
		assert(Element.getPropProp(d, tag) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(d, tag) does not work.')
		assert(Element.getPropProp('NNDataset', prop) == prop, ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDataset'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		assert(strcmp(NNDataset.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropTag(prop) does not work.')
		assert(strcmp(d.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(d, prop), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(d, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNDataset', prop), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDataset'', prop) does not work.')
	 
		assert(strcmp(NNDataset.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropTag(tag) does not work.')
		assert(strcmp(d.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(d, tag), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(d, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNDataset', prop), tag), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDataset'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		assert(Category.existsCategory(NNDataset.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(d.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(d, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(d, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(d, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDataset'', prop) does not work.')
	 
		assert(Category.existsCategory(NNDataset.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(d.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(d, tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(d, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(d, tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDataset'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		assert(Format.existsFormat(NNDataset.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(d.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(d, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(d, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(d, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDataset'', prop) does not work.')
	 
		assert(Format.existsFormat(NNDataset.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(d.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(d, tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(d, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(d, tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDataset'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		assert(ischar(NNDataset.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropDescription(prop) does not work.')
		assert(ischar(d.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(d, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(d, prop) does not work.')
		assert(ischar(Element.getPropDescription(d, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDataset'', prop) does not work.')
	 
		assert(ischar(NNDataset.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.getPropDescription(tag) does not work.')
		assert(ischar(d.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(d, tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(d, tag) does not work.')
		assert(ischar(Element.getPropDescription(d, tag)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDataset'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		settings = NNDataset.getPropSettings(prop);
		settings = d.getPropSettings(prop);
		settings = Element.getPropSettings(d, prop);
		settings = Element.getPropSettings('NNDataset', prop);
	 
		settings = NNDataset.getPropSettings(tag);
		settings = d.getPropSettings(tag);
		settings = Element.getPropSettings(d, tag);
		settings = Element.getPropSettings('NNDataset', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		default = NNDataset.getPropDefault(prop);
		default = d.getPropDefault(prop);
		default = Element.getPropDefault(d, prop);
		default = Element.getPropDefault('NNDataset', prop);
	 
		default = NNDataset.getPropDefault(tag);
		default = d.getPropDefault(tag);
		default = Element.getPropDefault(d, tag);
		default = Element.getPropDefault('NNDataset', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		conditioned_default = NNDataset.getPropDefaultConditioned(prop);
		conditioned_default = d.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(d, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNDataset', prop);
	 
		conditioned_default = NNDataset.getPropDefaultConditioned(tag);
		conditioned_default = d.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(d, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNDataset', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNDataset.getPropNumber()
		tag = d.getPropTag(prop);
	 
		assert(~NNDataset.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.checkProp(prop, value) does not work.')
		assert(~d.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(d, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(d, prop, value) does not work.')
		assert(~Element.checkProp('NNDataset', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataset'', prop, value) does not work.')
	 
		assert_with_error('NNDataset.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], prop, d)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], prop, d)
		assert_with_error('Element.checkProp(''NNDataset'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNDataset.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.checkProp(tag, value) does not work.')
		assert(~d.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(d, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(d, tag, value) does not work.')
		assert(~Element.checkProp('NNDataset', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataset'', tag, value) does not work.')
	 
		assert_with_error('NNDataset.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], tag, d)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], tag, d)
		assert_with_error('Element.checkProp(''NNDataset'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDataset:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNDataset.checkProp(prop, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.checkProp(prop, <conditioned default value>) does not work.')
		assert(d.checkProp(prop, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(d, prop, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(d, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDataset', prop, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataset'', prop, <conditioned default value>) does not work.')
	 
		assert(NNDataset.checkProp(tag, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.checkProp(tag, <conditioned default value>) does not work.')
		assert(d.checkProp(tag, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'd.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(d, tag, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(d, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDataset', tag, Element.getPropDefaultConditioned(NNDataset, prop)), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDataset'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, NNDataset.getPropDefault(NNDataset.TEMPLATE), ...
		NNDataset.ID, NNDataset.getPropDefault(NNDataset.ID), ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, NNDataset.getPropDefault(NNDataset.DP_CLASS), ...
		NNDataset.DP_DICT, NNDataset.getPropDefault(NNDataset.DP_DICT), ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	for prop = 1:1:NNDataset.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDataset.getPropTag(prop));
		switch NNDataset.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					d.getr(prop) == NNDataset.getNoValue(), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataset.getCategoryName(NNDataset.getPropCategory(prop)) ', NNDataset.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataset.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					d.getr(TAG) == NNDataset.getNoValue(), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataset.getCategoryName(NNDataset.getPropCategory(prop)) ', NNDataset.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataset.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(d.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(d.getPropSettings(prop))
					assert( ...
						d.checkFormat(d.getPropFormat(prop), d.get(prop)), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						d.checkFormat(d.getPropFormat(prop), d.get(prop), d.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					d.getr(prop) == NNDataset.getNoValue(), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataset.getCategoryName(NNDataset.getPropCategory(prop)) ', NNDataset.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataset.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					d.getr(TAG) == NNDataset.getNoValue(), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDataset.getCategoryName(NNDataset.getPropCategory(prop)) ', NNDataset.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDataset.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNDataset']);
				assert( ...
					~isa(d.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(d.getPropSettings(prop))
					assert( ...
						d.checkFormat(d.getPropFormat(prop), d.get(prop)), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						d.checkFormat(d.getPropFormat(prop), d.get(prop), d.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(d.getr(prop), NNDataset.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNDataset.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDataset.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(d.getr(TAG), NNDataset.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNDataset.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDataset.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, NNDataset.getPropDefault(NNDataset.TEMPLATE), ...
		NNDataset.ID, NNDataset.getPropDefault(NNDataset.ID), ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, NNDataset.getPropDefault(NNDataset.DP_CLASS), ...
		NNDataset.DP_DICT, NNDataset.getPropDefault(NNDataset.DP_DICT), ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	for prop = 1:1:NNDataset.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDataset.getPropTag(prop));
		switch NNDataset.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(d.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(d.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(d.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(d.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					d.checkFormat(d.getPropFormat(prop), d.getr(prop),d.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDataset']);
				assert( ...
					~isa(d.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(d.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDataset']);
	% 			assert( ...
	% 				~isa(d.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataset.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(d.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataset.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				d.checkFormat(d.getPropFormat(prop), d.getr(prop),d.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
	% 				['NNDataset.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNDataset']);
				assert( ...
					~isa(d.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(d.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(d.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(d.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					d.checkFormat(d.getPropFormat(prop), d.getr(prop),d.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if d.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNDataset');
					delete(ancestor(d.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNDataset.getProps(Category.RESULT))
		for prop = 1:1:NNDataset.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNDataset.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						d.isLocked(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~d.isLocked(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d = NNDataset();
	 
	for prop = 1:1:NNDataset.getPropNumber()
		TAG = upper(NNDataset.getPropTag(prop));
		assert( ...
			~d.isLocked(prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			['NNDataset.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~d.isLocked(TAG), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			['NNDataset.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	d.lock()
	 
	for prop = 1:1:NNDataset.getPropNumber()
		switch NNDataset.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					d.isLocked(prop), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~d.isLocked(prop), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d = NNDataset();
	 
	warning_backup = warning('off', 'BRAPH2:NNDataset');
	for prop = 1:1:NNDataset.getPropNumber()
		d.lock(prop)
		switch NNDataset.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					d.isLocked(prop), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~d.isLocked(prop), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d = NNDataset();
	 
	for prop = 1:1:NNDataset.getPropNumber()
		TAG = upper(NNDataset.getPropTag(prop));
		assert( ...
			d.isChecked(prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			['NNDataset.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			d.isChecked(TAG), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			['NNDataset.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	d.unchecked()
	 
	for prop = 1:1:NNDataset.getPropNumber()
		assert( ...
			~d.isChecked(prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			['NNDataset.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	d.checked()
	 
	for prop = 1:1:NNDataset.getPropNumber()
		assert( ...
			d.isChecked(prop), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			['NNDataset.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNDataset
	d_0 = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, NNDataset.getPropDefault(NNDataset.TEMPLATE), ...
		NNDataset.ID, NNDataset.getPropDefault(NNDataset.ID), ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, NNDataset.getPropDefault(NNDataset.DP_CLASS), ...
		NNDataset.DP_DICT, NNDataset.getPropDefault(NNDataset.DP_DICT), ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	% NNDataset with 1st callbacks
	d_1 = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, d_0.getCallback(4), ..., ...
		NNDataset.ID, d_0.getCallback(5), ..., ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, d_0.getCallback(9), ..., ...
		NNDataset.DP_DICT, d_0.getCallback(10), ..., ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	prop_number = NNDataset.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataset.getPropTag(prop));
		switch NNDataset.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(d_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(d_1.get(prop), d_0.get(prop)) && ~isa(d_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(d_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDataset with 2nd callbacks
	d_2 = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, d_1.getCallback(4), ..., ...
		NNDataset.ID, d_1.getCallback(5), ..., ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, d_1.getCallback(9), ..., ...
		NNDataset.DP_DICT, d_1.getCallback(10), ..., ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	prop_number = NNDataset.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataset.getPropTag(prop));
		switch NNDataset.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(d_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(d_2.get(prop), d_0.get(prop)) && ~isa(d_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(d_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDataset with 3rd callbacks
	d_3 = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, d_2.getCallback(4), ..., ...
		NNDataset.ID, d_2.getCallback(5), ..., ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, d_2.getCallback(9), ..., ...
		NNDataset.DP_DICT, d_2.getCallback(10), ..., ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	prop_number = NNDataset.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDataset.getPropTag(prop));
		switch NNDataset.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(d_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(d_3.get(prop), d_0.get(prop)) && ~isa(d_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(d_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	d = NNDataset();
	 
	d_copy = d.copy();
	 
	assert(d_copy ~= d, ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(d_copy, d), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNDataset.getPropNumber()
		value = d.getr(prop);
		value_copy = d_copy.getr(prop);
		switch NNDataset.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					'NNDataset.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
							'NNDataset.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
							'NNDataset.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					d_copy.isLocked(prop) == d.isLocked(prop), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					'NNDataset.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					d_copy.isChecked(prop) == d.isChecked(prop), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					'NNDataset.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					d_copy.getPropSeed(prop) == d.getPropSeed(prop), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					'NNDataset.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	d = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, NNDataset.getPropDefault(NNDataset.TEMPLATE), ...
		NNDataset.ID, NNDataset.getPropDefault(NNDataset.ID), ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, NNDataset.getPropDefault(NNDataset.DP_CLASS), ...
		NNDataset.DP_DICT, NNDataset.getPropDefault(NNDataset.DP_DICT), ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	for prop = 1:1:NNDataset.getPropNumber()
		if NNDataset.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNDataset']);
			% d.memorize(prop);
			% warning(warning_backup)
		elseif NNDataset.getPropCategory(prop) == Category.EVANESCENT && d.getPropFormat(prop) == Format.HANDLE
			d.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNDataset');
			delete(ancestor(d.get(prop), 'figure'))
			warning(warning_backup)
		else
			d.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	d_copy = d.copy();
	 
	for prop = 1:1:NNDataset.getPropNumber()
		value = d.getr(prop);
		value_copy = d_copy.getr(prop);
		switch NNDataset.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					'NNDataset.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
							'NNDataset.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
							'NNDataset.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						d_copy.isLocked(prop) == d.isLocked(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						d_copy.isChecked(prop) == d.isChecked(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						d_copy.getPropSeed(prop) == d.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	d_0 = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, NNDataset.getPropDefault(NNDataset.TEMPLATE), ...
		NNDataset.ID, NNDataset.getPropDefault(NNDataset.ID), ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, NNDataset.getPropDefault(NNDataset.DP_CLASS), ...
		NNDataset.DP_DICT, NNDataset.getPropDefault(NNDataset.DP_DICT), ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	d = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, d_0.getCallback(4), ..., ...
		NNDataset.ID, d_0.getCallback(5), ..., ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, d_0.getCallback(9), ..., ...
		NNDataset.DP_DICT, d_0.getCallback(10), ..., ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	d_copy = d.copy();
	d_0_copy = d_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNDataset.getPropNumber()
		value = d.getr(prop);
		value_copy = d_copy.getr(prop);
		switch NNDataset.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					'NNDataset.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
							'NNDataset.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
							'NNDataset.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == d_0.getCallback(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The callback should be obtained from NNDataset.getCallback().' ...
						)
					assert( ...
						value_copy == d_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The callback should be obtained from NNDataset.getCallback().' ...
						)
				end
	 
					assert( ...
						d_copy.isLocked(prop) == d.isLocked(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						d_copy.isChecked(prop) == d.isChecked(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						d_copy.getPropSeed(prop) == d.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d_template = NNDataset();
	d = NNDataset('TEMPLATE', d_template);
	 
	for prop = 1:1:NNDataset.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDataset.getPropTag(prop));
		switch NNDataset.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNDataset.TEMPLATE
					assert( ...
						isa(d.getr(prop), 'NNDataset'), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset TEMPLATE does not work. NNDataset.getr(''TEMPLATE'') should be a NNDataset element.' ...
						)
					assert( ...
						isa(d_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						'NNDataset TEMPLATE does not work. NNDataset_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(d.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset TEMPLATE does not work. NNDataset.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						d.getr(prop).get('EL') == d_template && d.getr(prop).get('PROP') == prop && strcmp(d.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset TEMPLATE does not work. NNDataset.getr(' TAG ') should be a Callback to d_template.' TAG '.'] ...
						)
					assert( ...
						isa(d_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
						['NNDataset TEMPLATE does not work. NNDataset_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(d.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset TEMPLATE does not work. NNDataset.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(d_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
					['NNDataset TEMPLATE does not work. NNDataset_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, NNDataset.getPropDefault(NNDataset.TEMPLATE), ...
		NNDataset.ID, NNDataset.getPropDefault(NNDataset.ID), ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, NNDataset.getPropDefault(NNDataset.DP_CLASS), ...
		NNDataset.DP_DICT, NNDataset.getPropDefault(NNDataset.DP_DICT), ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nndataset_to_be_erased.b2'];
	 
	Element.save(d, filename)
	 
	d_loaded = Element.load(filename);
	 
	assert( ...
		isequal(d.copy(), d_loaded), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.save(d) and/or NNDataset.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	d = NNDataset( ...
		NNDataset.ELCLASS, NNDataset.getNoValue(), ...
		NNDataset.NAME, NNDataset.getNoValue(), ...
		NNDataset.DESCRIPTION, NNDataset.getNoValue(), ...
		NNDataset.TEMPLATE, NNDataset.getPropDefault(NNDataset.TEMPLATE), ...
		NNDataset.ID, NNDataset.getPropDefault(NNDataset.ID), ...
		NNDataset.LABEL, NNDataset.getPropDefault(NNDataset.LABEL), ...
		NNDataset.NOTES, NNDataset.getPropDefault(NNDataset.NOTES), ...
		NNDataset.TOSTRING, NNDataset.getNoValue(), ...
		NNDataset.DP_CLASS, NNDataset.getPropDefault(NNDataset.DP_CLASS), ...
		NNDataset.DP_DICT, NNDataset.getPropDefault(NNDataset.DP_DICT), ...
		NNDataset.INPUTS, NNDataset.getNoValue(), ...
		NNDataset.TARGETS, NNDataset.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(d);
	[d_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(d_dec ~= d, ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		'NNDataset.encodeJSON() or NNDataset.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNDataset.getPropFormat(prop), num2cell(NNDataset.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNDataset.getPropFormat(prop), num2cell(NNDataset.getProps())) == Format.NET)
		assert(isequal(d_dec, d), ...
			[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
			'NNDataset.encodeJSON() or NNDataset.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNDataset:' BRAPH2.FAIL_TEST], ...
		[' When testing NNDataset no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

