%TEST_NNDATASETCOMBINE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	dco = NNDatasetCombine();
	 
	% get('ELCLASS')
	if isa(NNDatasetCombine, 'ConcreteElement')
		assert(strcmp(NNDatasetCombine().get('ELCLASS'), 'NNDatasetCombine'), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine().get(''ELCLASS'') should return ''NNDatasetCombine''.')
	end
	 
	% getClass
	assert(strcmp(NNDatasetCombine.getClass(), 'NNDatasetCombine'), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.getClass() should return ''NNDatasetCombine''.')
	assert(strcmp(dco.getClass(), 'NNDatasetCombine'), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'dco.getClass() should return ''NNDatasetCombine''.')
	assert(strcmp(Element.getClass(dco), 'NNDatasetCombine'), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(dco) should return ''NNDatasetCombine''.')
	assert(strcmp(Element.getClass('NNDatasetCombine'), 'NNDatasetCombine'), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNDatasetCombine'') should return ''NNDatasetCombine''.')
	 
	% getSubclasses()
	assert(isequal(NNDatasetCombine.getSubclasses(), subclasses('NNDatasetCombine', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.getSubclasses() should return the same result as subclasses(''NNDatasetCombine'', [], [], true).')
	assert(isequal(dco.getSubclasses(), subclasses('NNDatasetCombine', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNDatasetCombine'', [], [], true).')
	assert(isequal(Element.getSubclasses(dco), subclasses('NNDatasetCombine', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(dco) should return the same result as subclasses(''NNDatasetCombine'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNDatasetCombine'), subclasses('NNDatasetCombine', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNDatasetCombine'') should return the same result as subclasses(''NNDatasetCombine'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNDatasetCombine.getProps()) || isequal(NNDatasetCombine.getProps(), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDatasetCombine.getProps()) || isequal(dco.getProps(), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'dco.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDatasetCombine.getProps()) || isequal(Element.getProps(dco), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dco) should return a row vector [1:1:N].')
	assert(isempty(NNDatasetCombine.getProps()) || isequal(Element.getProps('NNDatasetCombine'), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDatasetCombine'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNDatasetCombine.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.getProps(category) does not work.')
	tmp = cellfun(@(category) dco.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'dco.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(dco, category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dco, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNDatasetCombine', category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetCombine.getProps())), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDatasetCombine'', category) does not work.')
	 
	% getPropNumber()
	assert(NNDatasetCombine.getPropNumber() == length(NNDatasetCombine.getProps()), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.getPropNumber() should return the number of properties.')
	assert(dco.getPropNumber() == length(NNDatasetCombine.getProps()), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'dco.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(dco) == length(NNDatasetCombine.getProps()), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dco) should return the number of properties.')
	assert(Element.getPropNumber('NNDatasetCombine') == length(NNDatasetCombine.getProps()), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDatasetCombine'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNDatasetCombine.getPropNumber(category), categories)) == NNDatasetCombine.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) dco.getPropNumber(category), categories)) == NNDatasetCombine.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'dco.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(dco, category), categories)) == NNDatasetCombine.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dco, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNDatasetCombine', category), categories)) == NNDatasetCombine.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDatasetCombine'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNDatasetCombine.existsProp(NaN), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.existsProp(prop) does not work.')
	assert(~dco.existsProp(NaN), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'dco.existsProp(prop) does not work.')
	assert(~Element.existsProp(dco, NaN), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(dco, prop) does not work.')
	assert(~Element.existsProp('NNDatasetCombine', NaN), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNDatasetCombine'', prop) does not work.')
	 
	assert_with_error('NNDatasetCombine.existsProp(NaN)', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], dco)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], dco)
	assert_with_error('Element.existsProp(''NNDatasetCombine'', NaN)', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		assert(NNDatasetCombine.existsProp(prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.existsProp(prop) does not work.')
		assert(dco.existsProp(prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.existsProp(prop) does not work.')
		assert(Element.existsProp(dco, prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(dco, prop) does not work.')
		assert(Element.existsProp('NNDatasetCombine', prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNDatasetCombine'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNDatasetCombine.existsTag(''), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.existsTag(tag) does not work.')
	assert(~dco.existsTag(''), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'dco.existsTag(tag) does not work.')
	assert(~Element.existsTag(dco, ''), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(dco, tag) does not work.')
	assert(~Element.existsTag('NNDatasetCombine', ''), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNDatasetCombine'', tag) does not work.')
	 
	assert_with_error('NNDatasetCombine.existsTag('''')', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], dco)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], dco)
	assert_with_error('Element.existsTag(''NNDatasetCombine'', '''')', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
		assert(NNDatasetCombine.existsTag(tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.existsTag(tag) does not work.')
		assert(dco.existsTag(tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.existsTag(tag) does not work.')
		assert(Element.existsTag(dco, tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(dco, tga) does not work.')
		assert(Element.existsTag('NNDatasetCombine', tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNDatasetCombine'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		assert(NNDatasetCombine.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropProp(prop) does not work.')
		assert(dco.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropProp(prop) does not work.')
		assert(Element.getPropProp(dco, prop) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dco, prop) does not work.')
		assert(Element.getPropProp('NNDatasetCombine', prop) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDatasetCombine'', prop) does not work.')
	 
		tag = dco.getPropTag(prop);
		assert(NNDatasetCombine.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropProp(tag) does not work.')
		assert(dco.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropProp(tag) does not work.')
		assert(Element.getPropProp(dco, tag) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dco, tag) does not work.')
		assert(Element.getPropProp('NNDatasetCombine', prop) == prop, ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDatasetCombine'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		assert(strcmp(NNDatasetCombine.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropTag(prop) does not work.')
		assert(strcmp(dco.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(dco, prop), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dco, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNDatasetCombine', prop), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDatasetCombine'', prop) does not work.')
	 
		assert(strcmp(NNDatasetCombine.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropTag(tag) does not work.')
		assert(strcmp(dco.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(dco, tag), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dco, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNDatasetCombine', prop), tag), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDatasetCombine'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		assert(Category.existsCategory(NNDatasetCombine.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(dco.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dco, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dco, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dco, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDatasetCombine'', prop) does not work.')
	 
		assert(Category.existsCategory(NNDatasetCombine.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(dco.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dco, tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dco, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dco, tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDatasetCombine'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		assert(Format.existsFormat(NNDatasetCombine.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(dco.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dco, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dco, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dco, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDatasetCombine'', prop) does not work.')
	 
		assert(Format.existsFormat(NNDatasetCombine.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(dco.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dco, tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dco, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dco, tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDatasetCombine'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		assert(ischar(NNDatasetCombine.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropDescription(prop) does not work.')
		assert(ischar(dco.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(dco, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dco, prop) does not work.')
		assert(ischar(Element.getPropDescription(dco, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDatasetCombine'', prop) does not work.')
	 
		assert(ischar(NNDatasetCombine.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.getPropDescription(tag) does not work.')
		assert(ischar(dco.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(dco, tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dco, tag) does not work.')
		assert(ischar(Element.getPropDescription(dco, tag)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDatasetCombine'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		settings = NNDatasetCombine.getPropSettings(prop);
		settings = dco.getPropSettings(prop);
		settings = Element.getPropSettings(dco, prop);
		settings = Element.getPropSettings('NNDatasetCombine', prop);
	 
		settings = NNDatasetCombine.getPropSettings(tag);
		settings = dco.getPropSettings(tag);
		settings = Element.getPropSettings(dco, tag);
		settings = Element.getPropSettings('NNDatasetCombine', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		default = NNDatasetCombine.getPropDefault(prop);
		default = dco.getPropDefault(prop);
		default = Element.getPropDefault(dco, prop);
		default = Element.getPropDefault('NNDatasetCombine', prop);
	 
		default = NNDatasetCombine.getPropDefault(tag);
		default = dco.getPropDefault(tag);
		default = Element.getPropDefault(dco, tag);
		default = Element.getPropDefault('NNDatasetCombine', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		conditioned_default = NNDatasetCombine.getPropDefaultConditioned(prop);
		conditioned_default = dco.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(dco, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNDatasetCombine', prop);
	 
		conditioned_default = NNDatasetCombine.getPropDefaultConditioned(tag);
		conditioned_default = dco.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(dco, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNDatasetCombine', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		tag = dco.getPropTag(prop);
	 
		assert(~NNDatasetCombine.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.checkProp(prop, value) does not work.')
		assert(~dco.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(dco, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dco, prop, value) does not work.')
		assert(~Element.checkProp('NNDatasetCombine', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetCombine'', prop, value) does not work.')
	 
		assert_with_error('NNDatasetCombine.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], prop, dco)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], prop, dco)
		assert_with_error('Element.checkProp(''NNDatasetCombine'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNDatasetCombine.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.checkProp(tag, value) does not work.')
		assert(~dco.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(dco, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dco, tag, value) does not work.')
		assert(~Element.checkProp('NNDatasetCombine', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetCombine'', tag, value) does not work.')
	 
		assert_with_error('NNDatasetCombine.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], tag, dco)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], tag, dco)
		assert_with_error('Element.checkProp(''NNDatasetCombine'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNDatasetCombine.checkProp(prop, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.checkProp(prop, <conditioned default value>) does not work.')
		assert(dco.checkProp(prop, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(dco, prop, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dco, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDatasetCombine', prop, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetCombine'', prop, <conditioned default value>) does not work.')
	 
		assert(NNDatasetCombine.checkProp(tag, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.checkProp(tag, <conditioned default value>) does not work.')
		assert(dco.checkProp(tag, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'dco.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(dco, tag, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dco, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDatasetCombine', tag, Element.getPropDefaultConditioned(NNDatasetCombine, prop)), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetCombine'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, NNDatasetCombine.getPropDefault(NNDatasetCombine.TEMPLATE), ...
		NNDatasetCombine.ID, NNDatasetCombine.getPropDefault(NNDatasetCombine.ID), ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, NNDatasetCombine.getPropDefault(NNDatasetCombine.D_LIST), ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					dco.getr(prop) == NNDatasetCombine.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetCombine.getCategoryName(NNDatasetCombine.getPropCategory(prop)) ', NNDatasetCombine.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetCombine.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dco.getr(TAG) == NNDatasetCombine.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetCombine.getCategoryName(NNDatasetCombine.getPropCategory(prop)) ', NNDatasetCombine.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetCombine.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(dco.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dco.getPropSettings(prop))
					assert( ...
						dco.checkFormat(dco.getPropFormat(prop), dco.get(prop)), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dco.checkFormat(dco.getPropFormat(prop), dco.get(prop), dco.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					dco.getr(prop) == NNDatasetCombine.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetCombine.getCategoryName(NNDatasetCombine.getPropCategory(prop)) ', NNDatasetCombine.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetCombine.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dco.getr(TAG) == NNDatasetCombine.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetCombine.getCategoryName(NNDatasetCombine.getPropCategory(prop)) ', NNDatasetCombine.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetCombine.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNDatasetCombine']);
				assert( ...
					~isa(dco.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dco.getPropSettings(prop))
					assert( ...
						dco.checkFormat(dco.getPropFormat(prop), dco.get(prop)), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dco.checkFormat(dco.getPropFormat(prop), dco.get(prop), dco.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(dco.getr(prop), NNDatasetCombine.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNDatasetCombine.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDatasetCombine.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(dco.getr(TAG), NNDatasetCombine.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNDatasetCombine.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDatasetCombine.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, NNDatasetCombine.getPropDefault(NNDatasetCombine.TEMPLATE), ...
		NNDatasetCombine.ID, NNDatasetCombine.getPropDefault(NNDatasetCombine.ID), ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, NNDatasetCombine.getPropDefault(NNDatasetCombine.D_LIST), ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		switch NNDatasetCombine.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(dco.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dco.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dco.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dco.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dco.checkFormat(dco.getPropFormat(prop), dco.getr(prop),dco.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDatasetCombine']);
				assert( ...
					~isa(dco.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dco.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDatasetCombine']);
	% 			assert( ...
	% 				~isa(dco.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
	% 				['NNDatasetCombine.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(dco.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
	% 				['NNDatasetCombine.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				dco.checkFormat(dco.getPropFormat(prop), dco.getr(prop),dco.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
	% 				['NNDatasetCombine.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNDatasetCombine']);
				assert( ...
					~isa(dco.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(dco.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dco.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dco.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dco.checkFormat(dco.getPropFormat(prop), dco.getr(prop),dco.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if dco.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNDatasetCombine');
					delete(ancestor(dco.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNDatasetCombine.getProps(Category.RESULT))
		for prop = 1:1:NNDatasetCombine.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNDatasetCombine.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						dco.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~dco.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco = NNDatasetCombine();
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		assert( ...
			~dco.isLocked(prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			['NNDatasetCombine.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~dco.isLocked(TAG), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			['NNDatasetCombine.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	dco.lock()
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					dco.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~dco.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco = NNDatasetCombine();
	 
	warning_backup = warning('off', 'BRAPH2:NNDatasetCombine');
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		dco.lock(prop)
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					dco.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~dco.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco = NNDatasetCombine();
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		assert( ...
			dco.isChecked(prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			['NNDatasetCombine.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			dco.isChecked(TAG), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			['NNDatasetCombine.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	dco.unchecked()
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		assert( ...
			~dco.isChecked(prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			['NNDatasetCombine.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	dco.checked()
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		assert( ...
			dco.isChecked(prop), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			['NNDatasetCombine.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNDatasetCombine
	dco_0 = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, NNDatasetCombine.getPropDefault(NNDatasetCombine.TEMPLATE), ...
		NNDatasetCombine.ID, NNDatasetCombine.getPropDefault(NNDatasetCombine.ID), ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, NNDatasetCombine.getPropDefault(NNDatasetCombine.D_LIST), ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	% NNDatasetCombine with 1st callbacks
	dco_1 = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, dco_0.getCallback(4), ..., ...
		NNDatasetCombine.ID, dco_0.getCallback(5), ..., ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, dco_0.getCallback(9), ..., ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	prop_number = NNDatasetCombine.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dco_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dco_1.get(prop), dco_0.get(prop)) && ~isa(dco_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dco_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDatasetCombine with 2nd callbacks
	dco_2 = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, dco_1.getCallback(4), ..., ...
		NNDatasetCombine.ID, dco_1.getCallback(5), ..., ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, dco_1.getCallback(9), ..., ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	prop_number = NNDatasetCombine.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dco_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dco_2.get(prop), dco_0.get(prop)) && ~isa(dco_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dco_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDatasetCombine with 3rd callbacks
	dco_3 = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, dco_2.getCallback(4), ..., ...
		NNDatasetCombine.ID, dco_2.getCallback(5), ..., ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, dco_2.getCallback(9), ..., ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	prop_number = NNDatasetCombine.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dco_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dco_3.get(prop), dco_0.get(prop)) && ~isa(dco_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dco_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	dco = NNDatasetCombine();
	 
	dco_copy = dco.copy();
	 
	assert(dco_copy ~= dco, ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(dco_copy, dco), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		value = dco.getr(prop);
		value_copy = dco_copy.getr(prop);
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					'NNDatasetCombine.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
							'NNDatasetCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
							'NNDatasetCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					dco_copy.isLocked(prop) == dco.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					'NNDatasetCombine.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dco_copy.isChecked(prop) == dco.isChecked(prop), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					'NNDatasetCombine.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dco_copy.getPropSeed(prop) == dco.getPropSeed(prop), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					'NNDatasetCombine.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	dco = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, NNDatasetCombine.getPropDefault(NNDatasetCombine.TEMPLATE), ...
		NNDatasetCombine.ID, NNDatasetCombine.getPropDefault(NNDatasetCombine.ID), ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, NNDatasetCombine.getPropDefault(NNDatasetCombine.D_LIST), ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		if NNDatasetCombine.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNDatasetCombine']);
			% dco.memorize(prop);
			% warning(warning_backup)
		elseif NNDatasetCombine.getPropCategory(prop) == Category.EVANESCENT && dco.getPropFormat(prop) == Format.HANDLE
			dco.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNDatasetCombine');
			delete(ancestor(dco.get(prop), 'figure'))
			warning(warning_backup)
		else
			dco.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	dco_copy = dco.copy();
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		value = dco.getr(prop);
		value_copy = dco_copy.getr(prop);
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					'NNDatasetCombine.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
							'NNDatasetCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
							'NNDatasetCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						dco_copy.isLocked(prop) == dco.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dco_copy.isChecked(prop) == dco.isChecked(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dco_copy.getPropSeed(prop) == dco.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	dco_0 = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, NNDatasetCombine.getPropDefault(NNDatasetCombine.TEMPLATE), ...
		NNDatasetCombine.ID, NNDatasetCombine.getPropDefault(NNDatasetCombine.ID), ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, NNDatasetCombine.getPropDefault(NNDatasetCombine.D_LIST), ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	dco = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, dco_0.getCallback(4), ..., ...
		NNDatasetCombine.ID, dco_0.getCallback(5), ..., ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, dco_0.getCallback(9), ..., ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	dco_copy = dco.copy();
	dco_0_copy = dco_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
		value = dco.getr(prop);
		value_copy = dco_copy.getr(prop);
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					'NNDatasetCombine.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
							'NNDatasetCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
							'NNDatasetCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == dco_0.getCallback(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The callback should be obtained from NNDatasetCombine.getCallback().' ...
						)
					assert( ...
						value_copy == dco_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The callback should be obtained from NNDatasetCombine.getCallback().' ...
						)
				end
	 
					assert( ...
						dco_copy.isLocked(prop) == dco.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dco_copy.isChecked(prop) == dco.isChecked(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dco_copy.getPropSeed(prop) == dco.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco_template = NNDatasetCombine();
	dco = NNDatasetCombine('TEMPLATE', dco_template);
	 
	for prop = 1:1:NNDatasetCombine.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDatasetCombine.getPropTag(prop));
		switch NNDatasetCombine.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNDatasetCombine.TEMPLATE
					assert( ...
						isa(dco.getr(prop), 'NNDatasetCombine'), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine TEMPLATE does not work. NNDatasetCombine.getr(''TEMPLATE'') should be a NNDatasetCombine element.' ...
						)
					assert( ...
						isa(dco_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						'NNDatasetCombine TEMPLATE does not work. NNDatasetCombine_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(dco.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine TEMPLATE does not work. NNDatasetCombine.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						dco.getr(prop).get('EL') == dco_template && dco.getr(prop).get('PROP') == prop && strcmp(dco.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine TEMPLATE does not work. NNDatasetCombine.getr(' TAG ') should be a Callback to dco_template.' TAG '.'] ...
						)
					assert( ...
						isa(dco_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
						['NNDatasetCombine TEMPLATE does not work. NNDatasetCombine_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(dco.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine TEMPLATE does not work. NNDatasetCombine.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(dco_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
					['NNDatasetCombine TEMPLATE does not work. NNDatasetCombine_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, NNDatasetCombine.getPropDefault(NNDatasetCombine.TEMPLATE), ...
		NNDatasetCombine.ID, NNDatasetCombine.getPropDefault(NNDatasetCombine.ID), ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, NNDatasetCombine.getPropDefault(NNDatasetCombine.D_LIST), ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nndatasetcombine_to_be_erased.b2'];
	 
	Element.save(dco, filename)
	 
	dco_loaded = Element.load(filename);
	 
	assert( ...
		isequal(dco.copy(), dco_loaded), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.save(dco) and/or NNDatasetCombine.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dco = NNDatasetCombine( ...
		NNDatasetCombine.ELCLASS, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.NAME, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.DESCRIPTION, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.TEMPLATE, NNDatasetCombine.getPropDefault(NNDatasetCombine.TEMPLATE), ...
		NNDatasetCombine.ID, NNDatasetCombine.getPropDefault(NNDatasetCombine.ID), ...
		NNDatasetCombine.LABEL, NNDatasetCombine.getPropDefault(NNDatasetCombine.LABEL), ...
		NNDatasetCombine.NOTES, NNDatasetCombine.getPropDefault(NNDatasetCombine.NOTES), ...
		NNDatasetCombine.TOSTRING, NNDatasetCombine.getNoValue(), ...
		NNDatasetCombine.D_LIST, NNDatasetCombine.getPropDefault(NNDatasetCombine.D_LIST), ...
		NNDatasetCombine.D, NNDatasetCombine.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(dco);
	[dco_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(dco_dec ~= dco, ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		'NNDatasetCombine.encodeJSON() or NNDatasetCombine.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNDatasetCombine.getPropFormat(prop), num2cell(NNDatasetCombine.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNDatasetCombine.getPropFormat(prop), num2cell(NNDatasetCombine.getProps())) == Format.NET)
		assert(isequal(dco_dec, dco), ...
			[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
			'NNDatasetCombine.encodeJSON() or NNDatasetCombine.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Combining test
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% create two NNDataPoint itemlists with one datapoint overlapped
	num_dp1 = 10; num_dp2 = 11; num_dp_all = num_dp1 + num_dp2;
	dp_ids = cell(1, num_dp_all);
	for i = 1:num_dp_all
	    dp_ids{i} = ['dp_', num2str(i)];
	end
	
	dp_list1 = cellfun(@(x) NNDataPoint('ID', x), dp_ids(1:num_dp1), 'UniformOutput', false);
	dp_list2 = cellfun(@(x) NNDataPoint('ID', x), dp_ids(num_dp1:num_dp_all), 'UniformOutput', false);
	
	dp_dict1 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint', ...
	        'IT_LIST',  dp_list1 ...
	        );
	dp_dict2 = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint', ...
	        'IT_LIST',  dp_list2 ...
	        );
	
	dp_dict = {dp_dict1, dp_dict2};
	
	% create NNDataset itemlist containing two NNDataset
	d_list = cellfun(@(x) NNDataset('DP_DICT', x), dp_dict, 'UniformOutput', false);
	
	% create NNDatasetCombine to combine the two NNDataset
	d_combined = NNDatasetCombine('D_LIST', d_list).get('D');
	
	% Check whether the number of dp matches
	assert(d_combined.get('DP_DICT').get('LENGTH') == num_dp_all, ...
	    [BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
	    'NNDatasetCombine does not combine the datasets correctly. The number of the datapoint in combined dataset should be the same as the sum of all unique datapoints in both imported datasets.' ...
	    )
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNDatasetCombine:' BRAPH2.FAIL_TEST], ...
		[' When testing NNDatasetCombine no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

