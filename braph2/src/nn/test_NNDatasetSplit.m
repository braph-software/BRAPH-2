%TEST_NNDATASETSPLIT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	dsp = NNDatasetSplit();
	 
	% get('ELCLASS')
	if isa(NNDatasetSplit, 'ConcreteElement')
		assert(strcmp(NNDatasetSplit().get('ELCLASS'), 'NNDatasetSplit'), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit().get(''ELCLASS'') should return ''NNDatasetSplit''.')
	end
	 
	% getClass
	assert(strcmp(NNDatasetSplit.getClass(), 'NNDatasetSplit'), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.getClass() should return ''NNDatasetSplit''.')
	assert(strcmp(dsp.getClass(), 'NNDatasetSplit'), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'dsp.getClass() should return ''NNDatasetSplit''.')
	assert(strcmp(Element.getClass(dsp), 'NNDatasetSplit'), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(dsp) should return ''NNDatasetSplit''.')
	assert(strcmp(Element.getClass('NNDatasetSplit'), 'NNDatasetSplit'), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNDatasetSplit'') should return ''NNDatasetSplit''.')
	 
	% getSubclasses()
	assert(isequal(NNDatasetSplit.getSubclasses(), subclasses('NNDatasetSplit', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.getSubclasses() should return the same result as subclasses(''NNDatasetSplit'', [], [], true).')
	assert(isequal(dsp.getSubclasses(), subclasses('NNDatasetSplit', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNDatasetSplit'', [], [], true).')
	assert(isequal(Element.getSubclasses(dsp), subclasses('NNDatasetSplit', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(dsp) should return the same result as subclasses(''NNDatasetSplit'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNDatasetSplit'), subclasses('NNDatasetSplit', [], [], true)), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNDatasetSplit'') should return the same result as subclasses(''NNDatasetSplit'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNDatasetSplit.getProps()) || isequal(NNDatasetSplit.getProps(), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDatasetSplit.getProps()) || isequal(dsp.getProps(), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'dsp.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNDatasetSplit.getProps()) || isequal(Element.getProps(dsp), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dsp) should return a row vector [1:1:N].')
	assert(isempty(NNDatasetSplit.getProps()) || isequal(Element.getProps('NNDatasetSplit'), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDatasetSplit'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNDatasetSplit.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetSplit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.getProps(category) does not work.')
	tmp = cellfun(@(category) dsp.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetSplit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'dsp.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(dsp, category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetSplit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dsp, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNDatasetSplit', category), categories, 'UniformOutput', false);
	assert(isempty(NNDatasetSplit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNDatasetSplit.getProps())), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNDatasetSplit'', category) does not work.')
	 
	% getPropNumber()
	assert(NNDatasetSplit.getPropNumber() == length(NNDatasetSplit.getProps()), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.getPropNumber() should return the number of properties.')
	assert(dsp.getPropNumber() == length(NNDatasetSplit.getProps()), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'dsp.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(dsp) == length(NNDatasetSplit.getProps()), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dsp) should return the number of properties.')
	assert(Element.getPropNumber('NNDatasetSplit') == length(NNDatasetSplit.getProps()), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDatasetSplit'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNDatasetSplit.getPropNumber(category), categories)) == NNDatasetSplit.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) dsp.getPropNumber(category), categories)) == NNDatasetSplit.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'dsp.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(dsp, category), categories)) == NNDatasetSplit.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dsp, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNDatasetSplit', category), categories)) == NNDatasetSplit.getPropNumber(), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNDatasetSplit'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNDatasetSplit.existsProp(NaN), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.existsProp(prop) does not work.')
	assert(~dsp.existsProp(NaN), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'dsp.existsProp(prop) does not work.')
	assert(~Element.existsProp(dsp, NaN), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(dsp, prop) does not work.')
	assert(~Element.existsProp('NNDatasetSplit', NaN), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNDatasetSplit'', prop) does not work.')
	 
	assert_with_error('NNDatasetSplit.existsProp(NaN)', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], dsp)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], dsp)
	assert_with_error('Element.existsProp(''NNDatasetSplit'', NaN)', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		assert(NNDatasetSplit.existsProp(prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.existsProp(prop) does not work.')
		assert(dsp.existsProp(prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.existsProp(prop) does not work.')
		assert(Element.existsProp(dsp, prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(dsp, prop) does not work.')
		assert(Element.existsProp('NNDatasetSplit', prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNDatasetSplit'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNDatasetSplit.existsTag(''), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.existsTag(tag) does not work.')
	assert(~dsp.existsTag(''), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'dsp.existsTag(tag) does not work.')
	assert(~Element.existsTag(dsp, ''), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(dsp, tag) does not work.')
	assert(~Element.existsTag('NNDatasetSplit', ''), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNDatasetSplit'', tag) does not work.')
	 
	assert_with_error('NNDatasetSplit.existsTag('''')', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], dsp)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], dsp)
	assert_with_error('Element.existsTag(''NNDatasetSplit'', '''')', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
		assert(NNDatasetSplit.existsTag(tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.existsTag(tag) does not work.')
		assert(dsp.existsTag(tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.existsTag(tag) does not work.')
		assert(Element.existsTag(dsp, tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(dsp, tga) does not work.')
		assert(Element.existsTag('NNDatasetSplit', tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNDatasetSplit'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		assert(NNDatasetSplit.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropProp(prop) does not work.')
		assert(dsp.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropProp(prop) does not work.')
		assert(Element.getPropProp(dsp, prop) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dsp, prop) does not work.')
		assert(Element.getPropProp('NNDatasetSplit', prop) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDatasetSplit'', prop) does not work.')
	 
		tag = dsp.getPropTag(prop);
		assert(NNDatasetSplit.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropProp(tag) does not work.')
		assert(dsp.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropProp(tag) does not work.')
		assert(Element.getPropProp(dsp, tag) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dsp, tag) does not work.')
		assert(Element.getPropProp('NNDatasetSplit', prop) == prop, ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNDatasetSplit'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		assert(strcmp(NNDatasetSplit.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropTag(prop) does not work.')
		assert(strcmp(dsp.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(dsp, prop), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dsp, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNDatasetSplit', prop), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDatasetSplit'', prop) does not work.')
	 
		assert(strcmp(NNDatasetSplit.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropTag(tag) does not work.')
		assert(strcmp(dsp.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(dsp, tag), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dsp, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNDatasetSplit', prop), tag), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNDatasetSplit'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		assert(Category.existsCategory(NNDatasetSplit.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(dsp.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsp, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dsp, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsp, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDatasetSplit'', prop) does not work.')
	 
		assert(Category.existsCategory(NNDatasetSplit.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(dsp.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsp, tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dsp, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsp, tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNDatasetSplit'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		assert(Format.existsFormat(NNDatasetSplit.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(dsp.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsp, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dsp, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsp, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDatasetSplit'', prop) does not work.')
	 
		assert(Format.existsFormat(NNDatasetSplit.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(dsp.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsp, tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dsp, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsp, tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNDatasetSplit'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		assert(ischar(NNDatasetSplit.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropDescription(prop) does not work.')
		assert(ischar(dsp.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(dsp, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dsp, prop) does not work.')
		assert(ischar(Element.getPropDescription(dsp, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDatasetSplit'', prop) does not work.')
	 
		assert(ischar(NNDatasetSplit.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.getPropDescription(tag) does not work.')
		assert(ischar(dsp.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(dsp, tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dsp, tag) does not work.')
		assert(ischar(Element.getPropDescription(dsp, tag)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNDatasetSplit'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		settings = NNDatasetSplit.getPropSettings(prop);
		settings = dsp.getPropSettings(prop);
		settings = Element.getPropSettings(dsp, prop);
		settings = Element.getPropSettings('NNDatasetSplit', prop);
	 
		settings = NNDatasetSplit.getPropSettings(tag);
		settings = dsp.getPropSettings(tag);
		settings = Element.getPropSettings(dsp, tag);
		settings = Element.getPropSettings('NNDatasetSplit', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		default = NNDatasetSplit.getPropDefault(prop);
		default = dsp.getPropDefault(prop);
		default = Element.getPropDefault(dsp, prop);
		default = Element.getPropDefault('NNDatasetSplit', prop);
	 
		default = NNDatasetSplit.getPropDefault(tag);
		default = dsp.getPropDefault(tag);
		default = Element.getPropDefault(dsp, tag);
		default = Element.getPropDefault('NNDatasetSplit', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		conditioned_default = NNDatasetSplit.getPropDefaultConditioned(prop);
		conditioned_default = dsp.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(dsp, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNDatasetSplit', prop);
	 
		conditioned_default = NNDatasetSplit.getPropDefaultConditioned(tag);
		conditioned_default = dsp.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(dsp, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNDatasetSplit', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		tag = dsp.getPropTag(prop);
	 
		assert(~NNDatasetSplit.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.checkProp(prop, value) does not work.')
		assert(~dsp.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(dsp, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsp, prop, value) does not work.')
		assert(~Element.checkProp('NNDatasetSplit', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetSplit'', prop, value) does not work.')
	 
		assert_with_error('NNDatasetSplit.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], prop, dsp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], prop, dsp)
		assert_with_error('Element.checkProp(''NNDatasetSplit'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNDatasetSplit.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.checkProp(tag, value) does not work.')
		assert(~dsp.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(dsp, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsp, tag, value) does not work.')
		assert(~Element.checkProp('NNDatasetSplit', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetSplit'', tag, value) does not work.')
	 
		assert_with_error('NNDatasetSplit.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], tag, dsp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], tag, dsp)
		assert_with_error('Element.checkProp(''NNDatasetSplit'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNDatasetSplit.checkProp(prop, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.checkProp(prop, <conditioned default value>) does not work.')
		assert(dsp.checkProp(prop, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(dsp, prop, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsp, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDatasetSplit', prop, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetSplit'', prop, <conditioned default value>) does not work.')
	 
		assert(NNDatasetSplit.checkProp(tag, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.checkProp(tag, <conditioned default value>) does not work.')
		assert(dsp.checkProp(tag, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'dsp.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(dsp, tag, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsp, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNDatasetSplit', tag, Element.getPropDefaultConditioned(NNDatasetSplit, prop)), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNDatasetSplit'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, NNDatasetSplit.getPropDefault(NNDatasetSplit.TEMPLATE), ...
		NNDatasetSplit.ID, NNDatasetSplit.getPropDefault(NNDatasetSplit.ID), ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, NNDatasetSplit.getPropDefault(NNDatasetSplit.D), ...
		NNDatasetSplit.SPLIT, NNDatasetSplit.getPropDefault(NNDatasetSplit.SPLIT), ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					dsp.getr(prop) == NNDatasetSplit.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetSplit.getCategoryName(NNDatasetSplit.getPropCategory(prop)) ', NNDatasetSplit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetSplit.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dsp.getr(TAG) == NNDatasetSplit.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetSplit.getCategoryName(NNDatasetSplit.getPropCategory(prop)) ', NNDatasetSplit.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetSplit.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(dsp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dsp.getPropSettings(prop))
					assert( ...
						dsp.checkFormat(dsp.getPropFormat(prop), dsp.get(prop)), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dsp.checkFormat(dsp.getPropFormat(prop), dsp.get(prop), dsp.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					dsp.getr(prop) == NNDatasetSplit.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetSplit.getCategoryName(NNDatasetSplit.getPropCategory(prop)) ', NNDatasetSplit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetSplit.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dsp.getr(TAG) == NNDatasetSplit.getNoValue(), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNDatasetSplit.getCategoryName(NNDatasetSplit.getPropCategory(prop)) ', NNDatasetSplit.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNDatasetSplit.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNDatasetSplit']);
				assert( ...
					~isa(dsp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dsp.getPropSettings(prop))
					assert( ...
						dsp.checkFormat(dsp.getPropFormat(prop), dsp.get(prop)), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dsp.checkFormat(dsp.getPropFormat(prop), dsp.get(prop), dsp.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(dsp.getr(prop), NNDatasetSplit.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNDatasetSplit.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDatasetSplit.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(dsp.getr(TAG), NNDatasetSplit.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNDatasetSplit.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNDatasetSplit.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, NNDatasetSplit.getPropDefault(NNDatasetSplit.TEMPLATE), ...
		NNDatasetSplit.ID, NNDatasetSplit.getPropDefault(NNDatasetSplit.ID), ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, NNDatasetSplit.getPropDefault(NNDatasetSplit.D), ...
		NNDatasetSplit.SPLIT, NNDatasetSplit.getPropDefault(NNDatasetSplit.SPLIT), ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		switch NNDatasetSplit.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(dsp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dsp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dsp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dsp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dsp.checkFormat(dsp.getPropFormat(prop), dsp.getr(prop),dsp.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDatasetSplit']);
				assert( ...
					~isa(dsp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dsp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNDatasetSplit']);
	% 			assert( ...
	% 				~isa(dsp.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
	% 				['NNDatasetSplit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(dsp.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
	% 				['NNDatasetSplit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				dsp.checkFormat(dsp.getPropFormat(prop), dsp.getr(prop),dsp.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
	% 				['NNDatasetSplit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNDatasetSplit']);
				assert( ...
					~isa(dsp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(dsp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dsp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dsp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dsp.checkFormat(dsp.getPropFormat(prop), dsp.getr(prop),dsp.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if dsp.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNDatasetSplit');
					delete(ancestor(dsp.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNDatasetSplit.getProps(Category.RESULT))
		for prop = 1:1:NNDatasetSplit.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNDatasetSplit.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						dsp.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~dsp.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp = NNDatasetSplit();
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		assert( ...
			~dsp.isLocked(prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			['NNDatasetSplit.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~dsp.isLocked(TAG), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			['NNDatasetSplit.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	dsp.lock()
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					dsp.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~dsp.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp = NNDatasetSplit();
	 
	warning_backup = warning('off', 'BRAPH2:NNDatasetSplit');
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		dsp.lock(prop)
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					dsp.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~dsp.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp = NNDatasetSplit();
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		assert( ...
			dsp.isChecked(prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			['NNDatasetSplit.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			dsp.isChecked(TAG), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			['NNDatasetSplit.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	dsp.unchecked()
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		assert( ...
			~dsp.isChecked(prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			['NNDatasetSplit.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	dsp.checked()
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		assert( ...
			dsp.isChecked(prop), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			['NNDatasetSplit.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNDatasetSplit
	dsp_0 = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, NNDatasetSplit.getPropDefault(NNDatasetSplit.TEMPLATE), ...
		NNDatasetSplit.ID, NNDatasetSplit.getPropDefault(NNDatasetSplit.ID), ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, NNDatasetSplit.getPropDefault(NNDatasetSplit.D), ...
		NNDatasetSplit.SPLIT, NNDatasetSplit.getPropDefault(NNDatasetSplit.SPLIT), ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	% NNDatasetSplit with 1st callbacks
	dsp_1 = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, dsp_0.getCallback(4), ..., ...
		NNDatasetSplit.ID, dsp_0.getCallback(5), ..., ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, dsp_0.getCallback(9), ..., ...
		NNDatasetSplit.SPLIT, dsp_0.getCallback(10), ..., ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	prop_number = NNDatasetSplit.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dsp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dsp_1.get(prop), dsp_0.get(prop)) && ~isa(dsp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dsp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDatasetSplit with 2nd callbacks
	dsp_2 = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, dsp_1.getCallback(4), ..., ...
		NNDatasetSplit.ID, dsp_1.getCallback(5), ..., ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, dsp_1.getCallback(9), ..., ...
		NNDatasetSplit.SPLIT, dsp_1.getCallback(10), ..., ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	prop_number = NNDatasetSplit.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dsp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dsp_2.get(prop), dsp_0.get(prop)) && ~isa(dsp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dsp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNDatasetSplit with 3rd callbacks
	dsp_3 = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, dsp_2.getCallback(4), ..., ...
		NNDatasetSplit.ID, dsp_2.getCallback(5), ..., ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, dsp_2.getCallback(9), ..., ...
		NNDatasetSplit.SPLIT, dsp_2.getCallback(10), ..., ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	prop_number = NNDatasetSplit.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dsp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dsp_3.get(prop), dsp_0.get(prop)) && ~isa(dsp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dsp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	dsp = NNDatasetSplit();
	 
	dsp_copy = dsp.copy();
	 
	assert(dsp_copy ~= dsp, ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(dsp_copy, dsp), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		value = dsp.getr(prop);
		value_copy = dsp_copy.getr(prop);
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					'NNDatasetSplit.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
							'NNDatasetSplit.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
							'NNDatasetSplit.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					dsp_copy.isLocked(prop) == dsp.isLocked(prop), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					'NNDatasetSplit.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dsp_copy.isChecked(prop) == dsp.isChecked(prop), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					'NNDatasetSplit.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dsp_copy.getPropSeed(prop) == dsp.getPropSeed(prop), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					'NNDatasetSplit.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	dsp = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, NNDatasetSplit.getPropDefault(NNDatasetSplit.TEMPLATE), ...
		NNDatasetSplit.ID, NNDatasetSplit.getPropDefault(NNDatasetSplit.ID), ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, NNDatasetSplit.getPropDefault(NNDatasetSplit.D), ...
		NNDatasetSplit.SPLIT, NNDatasetSplit.getPropDefault(NNDatasetSplit.SPLIT), ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		if NNDatasetSplit.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNDatasetSplit']);
			% dsp.memorize(prop);
			% warning(warning_backup)
		elseif NNDatasetSplit.getPropCategory(prop) == Category.EVANESCENT && dsp.getPropFormat(prop) == Format.HANDLE
			dsp.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNDatasetSplit');
			delete(ancestor(dsp.get(prop), 'figure'))
			warning(warning_backup)
		else
			dsp.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	dsp_copy = dsp.copy();
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		value = dsp.getr(prop);
		value_copy = dsp_copy.getr(prop);
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					'NNDatasetSplit.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
							'NNDatasetSplit.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
							'NNDatasetSplit.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						dsp_copy.isLocked(prop) == dsp.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsp_copy.isChecked(prop) == dsp.isChecked(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsp_copy.getPropSeed(prop) == dsp.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	dsp_0 = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, NNDatasetSplit.getPropDefault(NNDatasetSplit.TEMPLATE), ...
		NNDatasetSplit.ID, NNDatasetSplit.getPropDefault(NNDatasetSplit.ID), ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, NNDatasetSplit.getPropDefault(NNDatasetSplit.D), ...
		NNDatasetSplit.SPLIT, NNDatasetSplit.getPropDefault(NNDatasetSplit.SPLIT), ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	dsp = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, dsp_0.getCallback(4), ..., ...
		NNDatasetSplit.ID, dsp_0.getCallback(5), ..., ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, dsp_0.getCallback(9), ..., ...
		NNDatasetSplit.SPLIT, dsp_0.getCallback(10), ..., ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	dsp_copy = dsp.copy();
	dsp_0_copy = dsp_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
		value = dsp.getr(prop);
		value_copy = dsp_copy.getr(prop);
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					'NNDatasetSplit.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
							'NNDatasetSplit.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
							'NNDatasetSplit.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == dsp_0.getCallback(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The callback should be obtained from NNDatasetSplit.getCallback().' ...
						)
					assert( ...
						value_copy == dsp_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The callback should be obtained from NNDatasetSplit.getCallback().' ...
						)
				end
	 
					assert( ...
						dsp_copy.isLocked(prop) == dsp.isLocked(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsp_copy.isChecked(prop) == dsp.isChecked(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsp_copy.getPropSeed(prop) == dsp.getPropSeed(prop), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp_template = NNDatasetSplit();
	dsp = NNDatasetSplit('TEMPLATE', dsp_template);
	 
	for prop = 1:1:NNDatasetSplit.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNDatasetSplit.getPropTag(prop));
		switch NNDatasetSplit.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNDatasetSplit.TEMPLATE
					assert( ...
						isa(dsp.getr(prop), 'NNDatasetSplit'), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit TEMPLATE does not work. NNDatasetSplit.getr(''TEMPLATE'') should be a NNDatasetSplit element.' ...
						)
					assert( ...
						isa(dsp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						'NNDatasetSplit TEMPLATE does not work. NNDatasetSplit_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(dsp.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit TEMPLATE does not work. NNDatasetSplit.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						dsp.getr(prop).get('EL') == dsp_template && dsp.getr(prop).get('PROP') == prop && strcmp(dsp.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit TEMPLATE does not work. NNDatasetSplit.getr(' TAG ') should be a Callback to dsp_template.' TAG '.'] ...
						)
					assert( ...
						isa(dsp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
						['NNDatasetSplit TEMPLATE does not work. NNDatasetSplit_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(dsp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit TEMPLATE does not work. NNDatasetSplit.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(dsp_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
					['NNDatasetSplit TEMPLATE does not work. NNDatasetSplit_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, NNDatasetSplit.getPropDefault(NNDatasetSplit.TEMPLATE), ...
		NNDatasetSplit.ID, NNDatasetSplit.getPropDefault(NNDatasetSplit.ID), ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, NNDatasetSplit.getPropDefault(NNDatasetSplit.D), ...
		NNDatasetSplit.SPLIT, NNDatasetSplit.getPropDefault(NNDatasetSplit.SPLIT), ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nndatasetsplit_to_be_erased.b2'];
	 
	Element.save(dsp, filename)
	 
	dsp_loaded = Element.load(filename);
	 
	assert( ...
		isequal(dsp.copy(), dsp_loaded), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.save(dsp) and/or NNDatasetSplit.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsp = NNDatasetSplit( ...
		NNDatasetSplit.ELCLASS, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.NAME, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.DESCRIPTION, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.TEMPLATE, NNDatasetSplit.getPropDefault(NNDatasetSplit.TEMPLATE), ...
		NNDatasetSplit.ID, NNDatasetSplit.getPropDefault(NNDatasetSplit.ID), ...
		NNDatasetSplit.LABEL, NNDatasetSplit.getPropDefault(NNDatasetSplit.LABEL), ...
		NNDatasetSplit.NOTES, NNDatasetSplit.getPropDefault(NNDatasetSplit.NOTES), ...
		NNDatasetSplit.TOSTRING, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D, NNDatasetSplit.getPropDefault(NNDatasetSplit.D), ...
		NNDatasetSplit.SPLIT, NNDatasetSplit.getPropDefault(NNDatasetSplit.SPLIT), ...
		NNDatasetSplit.D_LIST, NNDatasetSplit.getNoValue(), ...
		NNDatasetSplit.D_LIST_IT, NNDatasetSplit.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(dsp);
	[dsp_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(dsp_dec ~= dsp, ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		'NNDatasetSplit.encodeJSON() or NNDatasetSplit.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNDatasetSplit.getPropFormat(prop), num2cell(NNDatasetSplit.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNDatasetSplit.getPropFormat(prop), num2cell(NNDatasetSplit.getProps())) == Format.NET)
		assert(isequal(dsp_dec, dsp), ...
			[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
			'NNDatasetSplit.encodeJSON() or NNDatasetSplit.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Splitting dataset with assigned indexes
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% create a NNDataPoint itemlist
	num_dp = 10; 
	dp_ids = cell(1, num_dp);
	for i = 1:num_dp
	    dp_ids{i} = ['dp_', num2str(i)];
	end
	
	dp_list = cellfun(@(x) NNDataPoint('ID', x), dp_ids(1:num_dp), 'UniformOutput', false);
	
	dp_dict = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint', ...
	        'IT_LIST',  dp_list ...
	        );
	
	% create NNDataset containing the NNDataPoints
	d = NNDataset('DP_DICT', dp_dict);
	
	% create NNDatasetCombine to combine the two NNDataset
	split = {[1 3 5 7 9], [2 4 6 8 10]};
	d_list = NNDatasetSplit('SPLIT', split, 'D', d).get('D_LIST');
	
	% Check whether the number of dp matches
	for i = 1:length(split)
	    check(i) = d_list{i}.get('DP_DICT').get('LENGTH') == length(split{i});
	end
	assert(all(check), ...
	    [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
	    'NNDatasetSplit does not split the datasets correctly. The number of the datapoint should be the same as the vector length in the specified property SPLIT.' ...
	    )
end

%% Test 13: Splitting dataset with random indexes
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% create a NNDataPoint itemlist
	num_dp = 10; 
	dp_ids = cell(1, num_dp);
	for i = 1:num_dp
	    dp_ids{i} = ['dp_', num2str(i)];
	end
	
	dp_list = cellfun(@(x) NNDataPoint('ID', x), dp_ids(1:num_dp), 'UniformOutput', false);
	
	dp_dict = IndexedDictionary(...
	        'IT_CLASS', 'NNDataPoint', ...
	        'IT_LIST',  dp_list ...
	        );
	
	% create NNDataset containing the NNDataPoints
	d = NNDataset('DP_DICT', dp_dict);
	
	% create NNDatasetCombine to combine the two NNDataset
	split = {0.3, 0.7};
	dsp = NNDatasetSplit('D', d, 'SPLIT', split);
	d_list = dsp.get('D_LIST');
	
	% Check whether the number of dp matches
	split = dsp.get('SPLIT');
	for i = 1:length(split)
	    check(i) = d_list{i}.get('DP_DICT').get('LENGTH') == length(split{i});
	end
	assert(all(check), ...
	    [BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
	    'NNDatasetSplit does not split the datasets correctly. The number of the datapoint should be the same as the vector length in the specified property SPLIT.' ...
	    )
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNDatasetSplit:' BRAPH2.FAIL_TEST], ...
		[' When testing NNDatasetSplit no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

