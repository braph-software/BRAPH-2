%TEST_BRAINATLAS

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	ba = BrainAtlas();
	 
	% get('ELCLASS')
	if isa(BrainAtlas, 'ConcreteElement')
		assert(strcmp(BrainAtlas().get('ELCLASS'), 'BrainAtlas'), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas().get(''ELCLASS'') should return ''BrainAtlas''.')
	end
	 
	% getClass
	assert(strcmp(BrainAtlas.getClass(), 'BrainAtlas'), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.getClass() should return ''BrainAtlas''.')
	assert(strcmp(ba.getClass(), 'BrainAtlas'), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'ba.getClass() should return ''BrainAtlas''.')
	assert(strcmp(Element.getClass(ba), 'BrainAtlas'), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(ba) should return ''BrainAtlas''.')
	assert(strcmp(Element.getClass('BrainAtlas'), 'BrainAtlas'), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''BrainAtlas'') should return ''BrainAtlas''.')
	 
	% getSubclasses()
	assert(isequal(BrainAtlas.getSubclasses(), subclasses('BrainAtlas', [], [], true)), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.getSubclasses() should return the same result as subclasses(''BrainAtlas'', [], [], true).')
	assert(isequal(ba.getSubclasses(), subclasses('BrainAtlas', [], [], true)), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''BrainAtlas'', [], [], true).')
	assert(isequal(Element.getSubclasses(ba), subclasses('BrainAtlas', [], [], true)), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(ba) should return the same result as subclasses(''BrainAtlas'', [], [], true).')
	assert(isequal(Element.getSubclasses('BrainAtlas'), subclasses('BrainAtlas', [], [], true)), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''BrainAtlas'') should return the same result as subclasses(''BrainAtlas'', [], [], true).')
	 
	% getProps()
	assert(isempty(BrainAtlas.getProps()) || isequal(BrainAtlas.getProps(), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.getProps() should return a row vector [1:1:N].')
	assert(isempty(BrainAtlas.getProps()) || isequal(ba.getProps(), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'ba.getProps() should return a row vector [1:1:N].')
	assert(isempty(BrainAtlas.getProps()) || isequal(Element.getProps(ba), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ba) should return a row vector [1:1:N].')
	assert(isempty(BrainAtlas.getProps()) || isequal(Element.getProps('BrainAtlas'), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BrainAtlas'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) BrainAtlas.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BrainAtlas.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.getProps(category) does not work.')
	tmp = cellfun(@(category) ba.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BrainAtlas.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'ba.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(ba, category), categories, 'UniformOutput', false);
	assert(isempty(BrainAtlas.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ba, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('BrainAtlas', category), categories, 'UniformOutput', false);
	assert(isempty(BrainAtlas.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainAtlas.getProps())), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BrainAtlas'', category) does not work.')
	 
	% getPropNumber()
	assert(BrainAtlas.getPropNumber() == length(BrainAtlas.getProps()), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.getPropNumber() should return the number of properties.')
	assert(ba.getPropNumber() == length(BrainAtlas.getProps()), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'ba.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(ba) == length(BrainAtlas.getProps()), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ba) should return the number of properties.')
	assert(Element.getPropNumber('BrainAtlas') == length(BrainAtlas.getProps()), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BrainAtlas'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) BrainAtlas.getPropNumber(category), categories)) == BrainAtlas.getPropNumber(), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) ba.getPropNumber(category), categories)) == BrainAtlas.getPropNumber(), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'ba.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(ba, category), categories)) == BrainAtlas.getPropNumber(), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ba, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('BrainAtlas', category), categories)) == BrainAtlas.getPropNumber(), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BrainAtlas'', category) does not work.')
	 
	% existsProp(prop)
	assert(~BrainAtlas.existsProp(NaN), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.existsProp(prop) does not work.')
	assert(~ba.existsProp(NaN), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'ba.existsProp(prop) does not work.')
	assert(~Element.existsProp(ba, NaN), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(ba, prop) does not work.')
	assert(~Element.existsProp('BrainAtlas', NaN), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''BrainAtlas'', prop) does not work.')
	 
	assert_with_error('BrainAtlas.existsProp(NaN)', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], ba)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], ba)
	assert_with_error('Element.existsProp(''BrainAtlas'', NaN)', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		assert(BrainAtlas.existsProp(prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.existsProp(prop) does not work.')
		assert(ba.existsProp(prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.existsProp(prop) does not work.')
		assert(Element.existsProp(ba, prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(ba, prop) does not work.')
		assert(Element.existsProp('BrainAtlas', prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''BrainAtlas'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~BrainAtlas.existsTag(''), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.existsTag(tag) does not work.')
	assert(~ba.existsTag(''), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'ba.existsTag(tag) does not work.')
	assert(~Element.existsTag(ba, ''), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(ba, tag) does not work.')
	assert(~Element.existsTag('BrainAtlas', ''), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''BrainAtlas'', tag) does not work.')
	 
	assert_with_error('BrainAtlas.existsTag('''')', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], ba)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], ba)
	assert_with_error('Element.existsTag(''BrainAtlas'', '''')', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
		assert(BrainAtlas.existsTag(tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.existsTag(tag) does not work.')
		assert(ba.existsTag(tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.existsTag(tag) does not work.')
		assert(Element.existsTag(ba, tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(ba, tga) does not work.')
		assert(Element.existsTag('BrainAtlas', tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''BrainAtlas'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		assert(BrainAtlas.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropProp(prop) does not work.')
		assert(ba.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropProp(prop) does not work.')
		assert(Element.getPropProp(ba, prop) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ba, prop) does not work.')
		assert(Element.getPropProp('BrainAtlas', prop) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BrainAtlas'', prop) does not work.')
	 
		tag = ba.getPropTag(prop);
		assert(BrainAtlas.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropProp(tag) does not work.')
		assert(ba.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropProp(tag) does not work.')
		assert(Element.getPropProp(ba, tag) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ba, tag) does not work.')
		assert(Element.getPropProp('BrainAtlas', prop) == prop, ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BrainAtlas'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		assert(strcmp(BrainAtlas.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropTag(prop) does not work.')
		assert(strcmp(ba.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(ba, prop), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ba, prop) does not work.')
		assert(strcmp(Element.getPropTag('BrainAtlas', prop), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BrainAtlas'', prop) does not work.')
	 
		assert(strcmp(BrainAtlas.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropTag(tag) does not work.')
		assert(strcmp(ba.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(ba, tag), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ba, tag) does not work.')
		assert(strcmp(Element.getPropTag('BrainAtlas', prop), tag), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BrainAtlas'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		assert(Category.existsCategory(BrainAtlas.getPropCategory(prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(ba.getPropCategory(prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ba, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ba, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ba, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BrainAtlas'', prop) does not work.')
	 
		assert(Category.existsCategory(BrainAtlas.getPropCategory(tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(ba.getPropCategory(tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ba, tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ba, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ba, tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BrainAtlas'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		assert(Format.existsFormat(BrainAtlas.getPropFormat(prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(ba.getPropFormat(prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ba, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ba, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ba, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BrainAtlas'', prop) does not work.')
	 
		assert(Format.existsFormat(BrainAtlas.getPropFormat(tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(ba.getPropFormat(tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ba, tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ba, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ba, tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BrainAtlas'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		assert(ischar(BrainAtlas.getPropDescription(prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropDescription(prop) does not work.')
		assert(ischar(ba.getPropDescription(prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(ba, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ba, prop) does not work.')
		assert(ischar(Element.getPropDescription(ba, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BrainAtlas'', prop) does not work.')
	 
		assert(ischar(BrainAtlas.getPropDescription(tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.getPropDescription(tag) does not work.')
		assert(ischar(ba.getPropDescription(tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(ba, tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ba, tag) does not work.')
		assert(ischar(Element.getPropDescription(ba, tag)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BrainAtlas'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		settings = BrainAtlas.getPropSettings(prop);
		settings = ba.getPropSettings(prop);
		settings = Element.getPropSettings(ba, prop);
		settings = Element.getPropSettings('BrainAtlas', prop);
	 
		settings = BrainAtlas.getPropSettings(tag);
		settings = ba.getPropSettings(tag);
		settings = Element.getPropSettings(ba, tag);
		settings = Element.getPropSettings('BrainAtlas', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		default = BrainAtlas.getPropDefault(prop);
		default = ba.getPropDefault(prop);
		default = Element.getPropDefault(ba, prop);
		default = Element.getPropDefault('BrainAtlas', prop);
	 
		default = BrainAtlas.getPropDefault(tag);
		default = ba.getPropDefault(tag);
		default = Element.getPropDefault(ba, tag);
		default = Element.getPropDefault('BrainAtlas', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		conditioned_default = BrainAtlas.getPropDefaultConditioned(prop);
		conditioned_default = ba.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(ba, prop);
		conditioned_default = Element.getPropDefaultConditioned('BrainAtlas', prop);
	 
		conditioned_default = BrainAtlas.getPropDefaultConditioned(tag);
		conditioned_default = ba.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(ba, tag);
		conditioned_default = Element.getPropDefaultConditioned('BrainAtlas', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:BrainAtlas.getPropNumber()
		tag = ba.getPropTag(prop);
	 
		assert(~BrainAtlas.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.checkProp(prop, value) does not work.')
		assert(~ba.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(ba, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ba, prop, value) does not work.')
		assert(~Element.checkProp('BrainAtlas', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainAtlas'', prop, value) does not work.')
	 
		assert_with_error('BrainAtlas.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], prop, ba)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], prop, ba)
		assert_with_error('Element.checkProp(''BrainAtlas'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~BrainAtlas.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.checkProp(tag, value) does not work.')
		assert(~ba.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(ba, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ba, tag, value) does not work.')
		assert(~Element.checkProp('BrainAtlas', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainAtlas'', tag, value) does not work.')
	 
		assert_with_error('BrainAtlas.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], tag, ba)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], tag, ba)
		assert_with_error('Element.checkProp(''BrainAtlas'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainAtlas:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(BrainAtlas.checkProp(prop, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.checkProp(prop, <conditioned default value>) does not work.')
		assert(ba.checkProp(prop, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(ba, prop, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ba, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('BrainAtlas', prop, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainAtlas'', prop, <conditioned default value>) does not work.')
	 
		assert(BrainAtlas.checkProp(tag, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.checkProp(tag, <conditioned default value>) does not work.')
		assert(ba.checkProp(tag, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'ba.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(ba, tag, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ba, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('BrainAtlas', tag, Element.getPropDefaultConditioned(BrainAtlas, prop)), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainAtlas'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, BrainAtlas.getPropDefault(BrainAtlas.TEMPLATE), ...
		BrainAtlas.ID, BrainAtlas.getPropDefault(BrainAtlas.ID), ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, BrainAtlas.getPropDefault(BrainAtlas.BR_DICT), ...
		BrainAtlas.PFBA, BrainAtlas.getPropDefault(BrainAtlas.PFBA) ...
		);
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
	 
		% excluded props
		if any(prop == [BrainAtlas.TEMPLATE BrainAtlas.PFBA])
			continue
		end
	 
		TAG = upper(BrainAtlas.getPropTag(prop));
		switch BrainAtlas.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					ba.getr(prop) == BrainAtlas.getNoValue(), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainAtlas.getCategoryName(BrainAtlas.getPropCategory(prop)) ', BrainAtlas.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainAtlas.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ba.getr(TAG) == BrainAtlas.getNoValue(), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainAtlas.getCategoryName(BrainAtlas.getPropCategory(prop)) ', BrainAtlas.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainAtlas.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(ba.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ba.getPropSettings(prop))
					assert( ...
						ba.checkFormat(ba.getPropFormat(prop), ba.get(prop)), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ba.checkFormat(ba.getPropFormat(prop), ba.get(prop), ba.getPropSettings(prop)), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					ba.getr(prop) == BrainAtlas.getNoValue(), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainAtlas.getCategoryName(BrainAtlas.getPropCategory(prop)) ', BrainAtlas.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainAtlas.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ba.getr(TAG) == BrainAtlas.getNoValue(), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainAtlas.getCategoryName(BrainAtlas.getPropCategory(prop)) ', BrainAtlas.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainAtlas.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':BrainAtlas']);
				assert( ...
					~isa(ba.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ba.getPropSettings(prop))
					assert( ...
						ba.checkFormat(ba.getPropFormat(prop), ba.get(prop)), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ba.checkFormat(ba.getPropFormat(prop), ba.get(prop), ba.getPropSettings(prop)), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(ba.getr(prop), BrainAtlas.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by BrainAtlas.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BrainAtlas.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(ba.getr(TAG), BrainAtlas.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' TAG ') must be inizialized to its default value ' ...
					'given by BrainAtlas.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BrainAtlas.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, BrainAtlas.getPropDefault(BrainAtlas.TEMPLATE), ...
		BrainAtlas.ID, BrainAtlas.getPropDefault(BrainAtlas.ID), ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, BrainAtlas.getPropDefault(BrainAtlas.BR_DICT), ...
		BrainAtlas.PFBA, BrainAtlas.getPropDefault(BrainAtlas.PFBA) ...
		);
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
	 
		% excluded props
		if any(prop == [BrainAtlas.TEMPLATE BrainAtlas.PFBA])
			continue
		end
	 
		TAG = upper(BrainAtlas.getPropTag(prop));
		switch BrainAtlas.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(ba.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ba.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ba.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ba.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ba.checkFormat(ba.getPropFormat(prop), ba.getr(prop),ba.getPropSettings(prop)), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':BrainAtlas']);
				assert( ...
					~isa(ba.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ba.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':BrainAtlas']);
	% 			assert( ...
	% 				~isa(ba.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
	% 				['BrainAtlas.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(ba.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
	% 				['BrainAtlas.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				ba.checkFormat(ba.getPropFormat(prop), ba.getr(prop),ba.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
	% 				['BrainAtlas.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':BrainAtlas']);
				assert( ...
					~isa(ba.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(ba.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ba.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ba.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ba.checkFormat(ba.getPropFormat(prop), ba.getr(prop),ba.getPropSettings(prop)), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if ba.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:BrainAtlas');
					delete(ancestor(ba.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(BrainAtlas.getProps(Category.RESULT))
		for prop = 1:1:BrainAtlas.getPropNumber()
	 
			% excluded props
			if any(prop == [BrainAtlas.TEMPLATE BrainAtlas.PFBA])
				continue
			end
	 
			switch BrainAtlas.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						ba.isLocked(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~ba.isLocked(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba = BrainAtlas();
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		TAG = upper(BrainAtlas.getPropTag(prop));
		assert( ...
			~ba.isLocked(prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			['BrainAtlas.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~ba.isLocked(TAG), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			['BrainAtlas.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	ba.lock()
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		switch BrainAtlas.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					ba.isLocked(prop), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~ba.isLocked(prop), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba = BrainAtlas();
	 
	warning_backup = warning('off', 'BRAPH2:BrainAtlas');
	for prop = 1:1:BrainAtlas.getPropNumber()
		ba.lock(prop)
		switch BrainAtlas.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					ba.isLocked(prop), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~ba.isLocked(prop), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba = BrainAtlas();
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		TAG = upper(BrainAtlas.getPropTag(prop));
		assert( ...
			ba.isChecked(prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			['BrainAtlas.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			ba.isChecked(TAG), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			['BrainAtlas.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	ba.unchecked()
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		assert( ...
			~ba.isChecked(prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			['BrainAtlas.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	ba.checked()
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		assert( ...
			ba.isChecked(prop), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			['BrainAtlas.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic BrainAtlas
	ba_0 = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, BrainAtlas.getPropDefault(BrainAtlas.TEMPLATE), ...
		BrainAtlas.ID, BrainAtlas.getPropDefault(BrainAtlas.ID), ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, BrainAtlas.getPropDefault(BrainAtlas.BR_DICT), ...
		BrainAtlas.PFBA, BrainAtlas.getPropDefault(BrainAtlas.PFBA) ...
		);
	 
	% BrainAtlas with 1st callbacks
	ba_1 = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, ba_0.getCallback(4), ..., ...
		BrainAtlas.ID, ba_0.getCallback(5), ..., ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, ba_0.getCallback(9), ..., ...
		BrainAtlas.PFBA, ba_0.getCallback(10) ... ...
		);
	 
	prop_number = BrainAtlas.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainAtlas.getPropTag(prop));
		switch BrainAtlas.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ba_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ba_1.get(prop), ba_0.get(prop)) && ~isa(ba_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ba_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BrainAtlas with 2nd callbacks
	ba_2 = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, ba_1.getCallback(4), ..., ...
		BrainAtlas.ID, ba_1.getCallback(5), ..., ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, ba_1.getCallback(9), ..., ...
		BrainAtlas.PFBA, ba_1.getCallback(10) ... ...
		);
	 
	prop_number = BrainAtlas.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainAtlas.getPropTag(prop));
		switch BrainAtlas.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ba_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ba_2.get(prop), ba_0.get(prop)) && ~isa(ba_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ba_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BrainAtlas with 3rd callbacks
	ba_3 = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, ba_2.getCallback(4), ..., ...
		BrainAtlas.ID, ba_2.getCallback(5), ..., ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, ba_2.getCallback(9), ..., ...
		BrainAtlas.PFBA, ba_2.getCallback(10) ... ...
		);
	 
	prop_number = BrainAtlas.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainAtlas.getPropTag(prop));
		switch BrainAtlas.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ba_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ba_3.get(prop), ba_0.get(prop)) && ~isa(ba_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ba_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	ba = BrainAtlas();
	 
	ba_copy = ba.copy();
	 
	assert(ba_copy ~= ba, ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(ba_copy, ba), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		value = ba.getr(prop);
		value_copy = ba_copy.getr(prop);
		switch BrainAtlas.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					'BrainAtlas.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
							'BrainAtlas.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
							'BrainAtlas.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					ba_copy.isLocked(prop) == ba.isLocked(prop), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					'BrainAtlas.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ba_copy.isChecked(prop) == ba.isChecked(prop), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					'BrainAtlas.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ba_copy.getPropSeed(prop) == ba.getPropSeed(prop), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					'BrainAtlas.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	ba = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, BrainAtlas.getPropDefault(BrainAtlas.TEMPLATE), ...
		BrainAtlas.ID, BrainAtlas.getPropDefault(BrainAtlas.ID), ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, BrainAtlas.getPropDefault(BrainAtlas.BR_DICT), ...
		BrainAtlas.PFBA, BrainAtlas.getPropDefault(BrainAtlas.PFBA) ...
		);
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		if BrainAtlas.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':BrainAtlas']);
			% ba.memorize(prop);
			% warning(warning_backup)
		elseif BrainAtlas.getPropCategory(prop) == Category.EVANESCENT && ba.getPropFormat(prop) == Format.HANDLE
			ba.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:BrainAtlas');
			delete(ancestor(ba.get(prop), 'figure'))
			warning(warning_backup)
		else
			ba.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	ba_copy = ba.copy();
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		value = ba.getr(prop);
		value_copy = ba_copy.getr(prop);
		switch BrainAtlas.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					'BrainAtlas.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
							'BrainAtlas.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
							'BrainAtlas.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						ba_copy.isLocked(prop) == ba.isLocked(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ba_copy.isChecked(prop) == ba.isChecked(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ba_copy.getPropSeed(prop) == ba.getPropSeed(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	ba_0 = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, BrainAtlas.getPropDefault(BrainAtlas.TEMPLATE), ...
		BrainAtlas.ID, BrainAtlas.getPropDefault(BrainAtlas.ID), ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, BrainAtlas.getPropDefault(BrainAtlas.BR_DICT), ...
		BrainAtlas.PFBA, BrainAtlas.getPropDefault(BrainAtlas.PFBA) ...
		);
	 
	ba = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, ba_0.getCallback(4), ..., ...
		BrainAtlas.ID, ba_0.getCallback(5), ..., ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, ba_0.getCallback(9), ..., ...
		BrainAtlas.PFBA, ba_0.getCallback(10) ... ...
		);
	 
	ba_copy = ba.copy();
	ba_0_copy = ba_copy.getr('ID').get('EL');
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
		value = ba.getr(prop);
		value_copy = ba_copy.getr(prop);
		switch BrainAtlas.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					'BrainAtlas.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
							'BrainAtlas.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
							'BrainAtlas.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == ba_0.getCallback(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The callback should be obtained from BrainAtlas.getCallback().' ...
						)
					assert( ...
						value_copy == ba_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The callback should be obtained from BrainAtlas.getCallback().' ...
						)
				end
	 
					assert( ...
						ba_copy.isLocked(prop) == ba.isLocked(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ba_copy.isChecked(prop) == ba.isChecked(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ba_copy.getPropSeed(prop) == ba.getPropSeed(prop), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba_template = BrainAtlas();
	ba = BrainAtlas('TEMPLATE', ba_template);
	 
	for prop = 1:1:BrainAtlas.getPropNumber()
	 
		% excluded props
		if any(prop == [BrainAtlas.TEMPLATE BrainAtlas.PFBA])
			continue
		end
	 
		TAG = upper(BrainAtlas.getPropTag(prop));
		switch BrainAtlas.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == BrainAtlas.TEMPLATE
					assert( ...
						isa(ba.getr(prop), 'BrainAtlas'), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas TEMPLATE does not work. BrainAtlas.getr(''TEMPLATE'') should be a BrainAtlas element.' ...
						)
					assert( ...
						isa(ba_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						'BrainAtlas TEMPLATE does not work. BrainAtlas_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(ba.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas TEMPLATE does not work. BrainAtlas.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						ba.getr(prop).get('EL') == ba_template && ba.getr(prop).get('PROP') == prop && strcmp(ba.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas TEMPLATE does not work. BrainAtlas.getr(' TAG ') should be a Callback to ba_template.' TAG '.'] ...
						)
					assert( ...
						isa(ba_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
						['BrainAtlas TEMPLATE does not work. BrainAtlas_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(ba.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas TEMPLATE does not work. BrainAtlas.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(ba_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
					['BrainAtlas TEMPLATE does not work. BrainAtlas_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, BrainAtlas.getPropDefault(BrainAtlas.TEMPLATE), ...
		BrainAtlas.ID, BrainAtlas.getPropDefault(BrainAtlas.ID), ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, BrainAtlas.getPropDefault(BrainAtlas.BR_DICT), ...
		BrainAtlas.PFBA, BrainAtlas.getPropDefault(BrainAtlas.PFBA) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'brainatlas_to_be_erased.b2'];
	 
	Element.save(ba, filename)
	 
	ba_loaded = Element.load(filename);
	 
	assert( ...
		isequal(ba.copy(), ba_loaded), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.save(ba) and/or BrainAtlas.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ba = BrainAtlas( ...
		BrainAtlas.ELCLASS, BrainAtlas.getNoValue(), ...
		BrainAtlas.NAME, BrainAtlas.getNoValue(), ...
		BrainAtlas.DESCRIPTION, BrainAtlas.getNoValue(), ...
		BrainAtlas.TEMPLATE, BrainAtlas.getPropDefault(BrainAtlas.TEMPLATE), ...
		BrainAtlas.ID, BrainAtlas.getPropDefault(BrainAtlas.ID), ...
		BrainAtlas.LABEL, BrainAtlas.getPropDefault(BrainAtlas.LABEL), ...
		BrainAtlas.NOTES, BrainAtlas.getPropDefault(BrainAtlas.NOTES), ...
		BrainAtlas.TOSTRING, BrainAtlas.getNoValue(), ...
		BrainAtlas.BR_DICT, BrainAtlas.getPropDefault(BrainAtlas.BR_DICT), ...
		BrainAtlas.PFBA, BrainAtlas.getPropDefault(BrainAtlas.PFBA) ...
		);
	 
	[json, struct, el_list] = encodeJSON(ba);
	[ba_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(ba_dec ~= ba, ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		'BrainAtlas.encodeJSON() or BrainAtlas.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) BrainAtlas.getPropFormat(prop), num2cell(BrainAtlas.getProps())) == Format.HANDLE) && all(cellfun(@(prop) BrainAtlas.getPropFormat(prop), num2cell(BrainAtlas.getProps())) == Format.NET)
		assert(isequal(ba_dec, ba), ...
			[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
			'BrainAtlas.encodeJSON() or BrainAtlas.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Basic functions
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br1 = BrainRegion('ID', 'id1', 'LABEL', 'label1', 'NOTES', 'notes1', 'X', 1, 'Y', 1, 'Z', 1);
	br2 = BrainRegion('ID', 'id2', 'LABEL', 'label2', 'NOTES', 'notes2', 'X', 2, 'Y', 2, 'Z', 2);
	br3 = BrainRegion('ID', 'id3', 'LABEL', 'label3', 'NOTES', 'notes3', 'X', 3, 'Y', 3, 'Z', 3);
	br4 = BrainRegion('ID', 'id4', 'LABEL', 'label4', 'NOTES', 'notes4', 'X', 4, 'Y', 4, 'Z', 4);
	br5 = BrainRegion('ID', 'id5', 'LABEL', 'label5', 'NOTES', 'notes5', 'X', 5, 'Y', 5, 'Z', 5);
	br6 = BrainRegion('ID', 'id6', 'LABEL', 'label6', 'NOTES', 'notes6', 'X', 6, 'Y', 6, 'Z', 6);
	
	items = {br1, br2, br3, br4, br5, br6};
	
	idict_1 = IndexedDictionary( ...
	    'ID', 'idict', ...
	    'IT_CLASS', 'BrainRegion', ...
	    'IT_KEY', IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
	    'IT_LIST', items ...
	    );
	ba = BrainAtlas('ID', 'BA1', 'LABEL', 'brain atlas', 'NOTES', 'Notes on brain atlas.', 'BR_DICT', idict_1);
	assert(ischar(ba.tostring()), ...
	    [BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.tostring() must return a string.')
end

%% Test 13: Get methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br1 = BrainRegion('ID', 'id1', 'LABEL', 'label1', 'NOTES', 'notes1', 'X', 1, 'Y', 1, 'Z', 1);
	br2 = BrainRegion('ID', 'id2', 'LABEL', 'label2', 'NOTES', 'notes2', 'X', 2, 'Y', 2, 'Z', 2);
	br3 = BrainRegion('ID', 'id3', 'LABEL', 'label3', 'NOTES', 'notes3', 'X', 3, 'Y', 3, 'Z', 3);
	br4 = BrainRegion('ID', 'id4', 'LABEL', 'label4', 'NOTES', 'notes4', 'X', 4, 'Y', 4, 'Z', 4);
	br5 = BrainRegion('ID', 'id5', 'LABEL', 'label5', 'NOTES', 'notes5', 'X', 5, 'Y', 5, 'Z', 5);
	br6 = BrainRegion('ID', 'id6', 'LABEL', 'label6', 'NOTES', 'notes6', 'X', 6, 'Y', 6, 'Z', 6);
	
	items = {br1, br2, br3, br4, br5, br6};
	
	idict_1 = IndexedDictionary( ...
	    'ID', 'idict', ...
	    'IT_CLASS', 'BrainRegion', ...
	    'IT_KEY', IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
	    'IT_LIST', items ...
	    );
	ba = BrainAtlas('ID', 'BA1', 'LABEL', 'brain atlas', 'NOTES', 'Notes on brain atlas.', 'BR_DICT', idict_1);
	
	assert(isequal(ba.get('ID'), 'BA1'), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.get() does not work.')
	assert(isequal(ba.get('LABEL'), 'brain atlas'), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.get() does not work.')
	assert(isequal(ba.get('NOTES'), 'Notes on brain atlas.'), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.get() does not work.')
	assert(isequal(ba.get('BR_DICT'), idict_1), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.get() does not work.')
end

%% Test 14: Set methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br1 = BrainRegion('ID', 'id1', 'LABEL', 'label1', 'NOTES', 'notes1', 'X', 1, 'Y', 1, 'Z', 1);
	br2 = BrainRegion('ID', 'id2', 'LABEL', 'label2', 'NOTES', 'notes2', 'X', 2, 'Y', 2, 'Z', 2);
	br3 = BrainRegion('ID', 'id3', 'LABEL', 'label3', 'NOTES', 'notes3', 'X', 3, 'Y', 3, 'Z', 3);
	br4 = BrainRegion('ID', 'id4', 'LABEL', 'label4', 'NOTES', 'notes4', 'X', 4, 'Y', 4, 'Z', 4);
	br5 = BrainRegion('ID', 'id5', 'LABEL', 'label5', 'NOTES', 'notes5', 'X', 5, 'Y', 5, 'Z', 5);
	br6 = BrainRegion('ID', 'id6', 'LABEL', 'label6', 'NOTES', 'notes6', 'X', 6, 'Y', 6, 'Z', 6);
	
	items = {br1, br2, br3, br4, br5, br6};
	
	idict_1 = IndexedDictionary( ...
	    'ID', 'idict', ...
	    'IT_CLASS', 'BrainRegion', ...
	    'IT_KEY', IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
	    'IT_LIST', items ...
	    );
	ba = BrainAtlas();
	ba.set('ID', 'BA1');
	ba.set('LABEL', 'brain atlas');
	ba.set('NOTES', 'Notes on brain atlas.');
	ba.set('BR_DICT', idict_1);
	
	assert(isequal(ba.get('ID'), 'BA1'), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.set() does not work.')
	assert(isequal(ba.get('LABEL'), 'brain atlas'), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.set() does not work.')
	assert(isequal(ba.get('NOTES'), 'Notes on brain atlas.'), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.set() does not work.')
	assert(isequal(ba.get('BR_DICT'), idict_1), ...
	    [BRAPH2.STR ':' class(ba) ':' BRAPH2.FAIL_TEST], ...
	    'BrainAtlas.set() does not work.')
end

%% Test 15: Plot Brain Atlas GUI
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br1 = BrainRegion('ID', 'id1', 'LABEL', 'label1', 'NOTES', 'notes1', 'X', 1, 'Y', 1, 'Z', 1);
	br2 = BrainRegion('ID', 'id2', 'LABEL', 'label2', 'NOTES', 'notes2', 'X', 2, 'Y', 2, 'Z', 2);
	br3 = BrainRegion('ID', 'id3', 'LABEL', 'label3', 'NOTES', 'notes3', 'X', 3, 'Y', 3, 'Z', 3);
	br4 = BrainRegion('ID', 'id4', 'LABEL', 'label4', 'NOTES', 'notes4', 'X', 4, 'Y', 4, 'Z', 4);
	br5 = BrainRegion('ID', 'id5', 'LABEL', 'label5', 'NOTES', 'notes5', 'X', 5, 'Y', 5, 'Z', 5);
	br6 = BrainRegion('ID', 'id6', 'LABEL', 'label6', 'NOTES', 'notes6', 'X', 6, 'Y', 6, 'Z', 6);
	
	items = {br1, br2, br3, br4, br5, br6};
	
	idict_1 = IndexedDictionary( ...
	    'ID', 'idict', ...
	    'IT_CLASS', 'BrainRegion', ...
	    'IT_KEY', IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
	    'IT_LIST', items ...
	    );
	ba = BrainAtlas('ID', 'BA1', 'LABEL', 'brain atlas', 'NOTES', 'Notes on brain atlas.', 'BR_DICT', idict_1);
	gui = GUIElement('PE', ba, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	gui.get('CLOSE')
end

%% Test 16: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':BrainAtlas:' BRAPH2.FAIL_TEST], ...
		[' When testing BrainAtlas no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 17: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

