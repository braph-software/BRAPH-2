%TEST_BRAINSURFACE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	bs = BrainSurface();
	 
	% get('ELCLASS')
	if isa(BrainSurface, 'ConcreteElement')
		assert(strcmp(BrainSurface().get('ELCLASS'), 'BrainSurface'), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface().get(''ELCLASS'') should return ''BrainSurface''.')
	end
	 
	% getBuild()
	assert(BrainSurface.getBuild() == 1 && BrainSurface.getBuild() > 0, ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.getBuild() should return the BrainSurface build number.')
	assert(bs.getBuild() == 1 && bs.getBuild() > 0 , ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.getBuild() should return the BrainSurface build number.')
	assert(Element.getBuild(bs) == 1 && Element.getBuild(bs) > 0, ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(bs) should return the BrainSurface build number.')
	assert(Element.getBuild('BrainSurface') == 1 && Element.getBuild('BrainSurface') > 0, ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''BrainSurface'') should return the BrainSurface build number.')
	 
	% getClass()
	assert(strcmp(BrainSurface.getClass(), 'BrainSurface'), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.getClass() should return ''BrainSurface''.')
	assert(strcmp(bs.getClass(), 'BrainSurface'), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.getClass() should return ''BrainSurface''.')
	assert(strcmp(Element.getClass(bs), 'BrainSurface'), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(bs) should return ''BrainSurface''.')
	assert(strcmp(Element.getClass('BrainSurface'), 'BrainSurface'), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''BrainSurface'') should return ''BrainSurface''.')
	 
	% getSubclasses()
	assert(isequal(BrainSurface.getSubclasses(), subclasses('BrainSurface', [], [], true)), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.getSubclasses() should return the same result as subclasses(''BrainSurface'', [], [], true).')
	assert(isequal(bs.getSubclasses(), subclasses('BrainSurface', [], [], true)), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''BrainSurface'', [], [], true).')
	assert(isequal(Element.getSubclasses(bs), subclasses('BrainSurface', [], [], true)), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(bs) should return the same result as subclasses(''BrainSurface'', [], [], true).')
	assert(isequal(Element.getSubclasses('BrainSurface'), subclasses('BrainSurface', [], [], true)), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''BrainSurface'') should return the same result as subclasses(''BrainSurface'', [], [], true).')
	 
	% getProps()
	assert(isempty(BrainSurface.getProps()) || isequal(BrainSurface.getProps(), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.getProps() should return a row vector [1:1:N].')
	assert(isempty(BrainSurface.getProps()) || isequal(bs.getProps(), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.getProps() should return a row vector [1:1:N].')
	assert(isempty(BrainSurface.getProps()) || isequal(Element.getProps(bs), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(bs) should return a row vector [1:1:N].')
	assert(isempty(BrainSurface.getProps()) || isequal(Element.getProps('BrainSurface'), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BrainSurface'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) BrainSurface.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.getProps(category) does not work.')
	tmp = cellfun(@(category) bs.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(bs, category), categories, 'UniformOutput', false);
	assert(isempty(BrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(bs, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('BrainSurface', category), categories, 'UniformOutput', false);
	assert(isempty(BrainSurface.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainSurface.getProps())), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BrainSurface'', category) does not work.')
	 
	% getPropNumber()
	assert(BrainSurface.getPropNumber() == length(BrainSurface.getProps()), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.getPropNumber() should return the number of properties.')
	assert(bs.getPropNumber() == length(BrainSurface.getProps()), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(bs) == length(BrainSurface.getProps()), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(bs) should return the number of properties.')
	assert(Element.getPropNumber('BrainSurface') == length(BrainSurface.getProps()), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BrainSurface'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) BrainSurface.getPropNumber(category), categories)) == BrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) bs.getPropNumber(category), categories)) == BrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(bs, category), categories)) == BrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(bs, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('BrainSurface', category), categories)) == BrainSurface.getPropNumber(), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BrainSurface'', category) does not work.')
	 
	% existsProp(prop)
	assert(~BrainSurface.existsProp(NaN), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.existsProp(prop) does not work.')
	assert(~bs.existsProp(NaN), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.existsProp(prop) does not work.')
	assert(~Element.existsProp(bs, NaN), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(bs, prop) does not work.')
	assert(~Element.existsProp('BrainSurface', NaN), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''BrainSurface'', prop) does not work.')
	 
	assert_with_error('BrainSurface.existsProp(NaN)', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], bs)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], bs)
	assert_with_error('Element.existsProp(''BrainSurface'', NaN)', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		assert(BrainSurface.existsProp(prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.existsProp(prop) does not work.')
		assert(bs.existsProp(prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.existsProp(prop) does not work.')
		assert(Element.existsProp(bs, prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(bs, prop) does not work.')
		assert(Element.existsProp('BrainSurface', prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''BrainSurface'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~BrainSurface.existsTag(''), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.existsTag(tag) does not work.')
	assert(~bs.existsTag(''), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'bs.existsTag(tag) does not work.')
	assert(~Element.existsTag(bs, ''), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(bs, tag) does not work.')
	assert(~Element.existsTag('BrainSurface', ''), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''BrainSurface'', tag) does not work.')
	 
	assert_with_error('BrainSurface.existsTag('''')', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], bs)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], bs)
	assert_with_error('Element.existsTag(''BrainSurface'', '''')', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
		assert(BrainSurface.existsTag(tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.existsTag(tag) does not work.')
		assert(bs.existsTag(tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.existsTag(tag) does not work.')
		assert(Element.existsTag(bs, tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(bs, tga) does not work.')
		assert(Element.existsTag('BrainSurface', tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''BrainSurface'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		assert(BrainSurface.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropProp(prop) does not work.')
		assert(bs.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropProp(prop) does not work.')
		assert(Element.getPropProp(bs, prop) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(bs, prop) does not work.')
		assert(Element.getPropProp('BrainSurface', prop) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BrainSurface'', prop) does not work.')
	 
		tag = bs.getPropTag(prop);
		assert(BrainSurface.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropProp(tag) does not work.')
		assert(bs.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropProp(tag) does not work.')
		assert(Element.getPropProp(bs, tag) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(bs, tag) does not work.')
		assert(Element.getPropProp('BrainSurface', prop) == prop, ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BrainSurface'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		assert(strcmp(BrainSurface.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropTag(prop) does not work.')
		assert(strcmp(bs.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(bs, prop), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(bs, prop) does not work.')
		assert(strcmp(Element.getPropTag('BrainSurface', prop), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BrainSurface'', prop) does not work.')
	 
		assert(strcmp(BrainSurface.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropTag(tag) does not work.')
		assert(strcmp(bs.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(bs, tag), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(bs, tag) does not work.')
		assert(strcmp(Element.getPropTag('BrainSurface', prop), tag), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BrainSurface'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		assert(Category.existsCategory(BrainSurface.getPropCategory(prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(bs.getPropCategory(prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(bs, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(bs, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(bs, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BrainSurface'', prop) does not work.')
	 
		assert(Category.existsCategory(BrainSurface.getPropCategory(tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(bs.getPropCategory(tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(bs, tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(bs, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(bs, tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BrainSurface'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		assert(Format.existsFormat(BrainSurface.getPropFormat(prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(bs.getPropFormat(prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(bs, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(bs, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(bs, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BrainSurface'', prop) does not work.')
	 
		assert(Format.existsFormat(BrainSurface.getPropFormat(tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(bs.getPropFormat(tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(bs, tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(bs, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(bs, tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BrainSurface'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		assert(ischar(BrainSurface.getPropDescription(prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropDescription(prop) does not work.')
		assert(ischar(bs.getPropDescription(prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(bs, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(bs, prop) does not work.')
		assert(ischar(Element.getPropDescription(bs, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BrainSurface'', prop) does not work.')
	 
		assert(ischar(BrainSurface.getPropDescription(tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.getPropDescription(tag) does not work.')
		assert(ischar(bs.getPropDescription(tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(bs, tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(bs, tag) does not work.')
		assert(ischar(Element.getPropDescription(bs, tag)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BrainSurface'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		settings = BrainSurface.getPropSettings(prop);
		settings = bs.getPropSettings(prop);
		settings = Element.getPropSettings(bs, prop);
		settings = Element.getPropSettings('BrainSurface', prop);
	 
		settings = BrainSurface.getPropSettings(tag);
		settings = bs.getPropSettings(tag);
		settings = Element.getPropSettings(bs, tag);
		settings = Element.getPropSettings('BrainSurface', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		default = BrainSurface.getPropDefault(prop);
		default = bs.getPropDefault(prop);
		default = Element.getPropDefault(bs, prop);
		default = Element.getPropDefault('BrainSurface', prop);
	 
		default = BrainSurface.getPropDefault(tag);
		default = bs.getPropDefault(tag);
		default = Element.getPropDefault(bs, tag);
		default = Element.getPropDefault('BrainSurface', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		conditioned_default = BrainSurface.getPropDefaultConditioned(prop);
		conditioned_default = bs.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(bs, prop);
		conditioned_default = Element.getPropDefaultConditioned('BrainSurface', prop);
	 
		conditioned_default = BrainSurface.getPropDefaultConditioned(tag);
		conditioned_default = bs.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(bs, tag);
		conditioned_default = Element.getPropDefaultConditioned('BrainSurface', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:BrainSurface.getPropNumber()
		tag = bs.getPropTag(prop);
	 
		assert(~BrainSurface.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.checkProp(prop, value) does not work.')
		assert(~bs.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(bs, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(bs, prop, value) does not work.')
		assert(~Element.checkProp('BrainSurface', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainSurface'', prop, value) does not work.')
	 
		assert_with_error('BrainSurface.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], prop, bs)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], prop, bs)
		assert_with_error('Element.checkProp(''BrainSurface'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~BrainSurface.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.checkProp(tag, value) does not work.')
		assert(~bs.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(bs, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(bs, tag, value) does not work.')
		assert(~Element.checkProp('BrainSurface', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainSurface'', tag, value) does not work.')
	 
		assert_with_error('BrainSurface.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], tag, bs)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], tag, bs)
		assert_with_error('Element.checkProp(''BrainSurface'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainSurface:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(BrainSurface.checkProp(prop, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.checkProp(prop, <conditioned default value>) does not work.')
		assert(bs.checkProp(prop, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(bs, prop, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(bs, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('BrainSurface', prop, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainSurface'', prop, <conditioned default value>) does not work.')
	 
		assert(BrainSurface.checkProp(tag, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.checkProp(tag, <conditioned default value>) does not work.')
		assert(bs.checkProp(tag, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'bs.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(bs, tag, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(bs, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('BrainSurface', tag, Element.getPropDefaultConditioned(BrainSurface, prop)), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainSurface'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, BrainSurface.getPropDefault(BrainSurface.TEMPLATE), ...
		BrainSurface.ID, BrainSurface.getPropDefault(BrainSurface.ID), ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, BrainSurface.getPropDefault(BrainSurface.VERTEX_NUMBER), ...
		BrainSurface.COORDINATES, BrainSurface.getPropDefault(BrainSurface.COORDINATES), ...
		BrainSurface.TRIANGLES_NUMBER, BrainSurface.getPropDefault(BrainSurface.TRIANGLES_NUMBER), ...
		BrainSurface.TRIANGLES, BrainSurface.getPropDefault(BrainSurface.TRIANGLES) ...
		);
	 
	for prop = 1:1:BrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BrainSurface.getPropTag(prop));
		switch BrainSurface.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					bs.getr(prop) == BrainSurface.getNoValue(), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainSurface.getCategoryName(BrainSurface.getPropCategory(prop)) ', BrainSurface.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					bs.getr(TAG) == BrainSurface.getNoValue(), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainSurface.getCategoryName(BrainSurface.getPropCategory(prop)) ', BrainSurface.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainSurface.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(bs.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(bs.getPropSettings(prop))
					assert( ...
						bs.checkFormat(bs.getPropFormat(prop), bs.get(prop)), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						bs.checkFormat(bs.getPropFormat(prop), bs.get(prop), bs.getPropSettings(prop)), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					bs.getr(prop) == BrainSurface.getNoValue(), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainSurface.getCategoryName(BrainSurface.getPropCategory(prop)) ', BrainSurface.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					bs.getr(TAG) == BrainSurface.getNoValue(), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainSurface.getCategoryName(BrainSurface.getPropCategory(prop)) ', BrainSurface.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainSurface.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':BrainSurface']);
				assert( ...
					~isa(bs.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(bs.getPropSettings(prop))
					assert( ...
						bs.checkFormat(bs.getPropFormat(prop), bs.get(prop)), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						bs.checkFormat(bs.getPropFormat(prop), bs.get(prop), bs.getPropSettings(prop)), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(bs.getr(prop), BrainSurface.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by BrainSurface.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BrainSurface.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(bs.getr(TAG), BrainSurface.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' TAG ') must be inizialized to its default value ' ...
					'given by BrainSurface.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BrainSurface.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, BrainSurface.getPropDefault(BrainSurface.TEMPLATE), ...
		BrainSurface.ID, BrainSurface.getPropDefault(BrainSurface.ID), ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, BrainSurface.getPropDefault(BrainSurface.VERTEX_NUMBER), ...
		BrainSurface.COORDINATES, BrainSurface.getPropDefault(BrainSurface.COORDINATES), ...
		BrainSurface.TRIANGLES_NUMBER, BrainSurface.getPropDefault(BrainSurface.TRIANGLES_NUMBER), ...
		BrainSurface.TRIANGLES, BrainSurface.getPropDefault(BrainSurface.TRIANGLES) ...
		);
	 
	for prop = 1:1:BrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BrainSurface.getPropTag(prop));
		switch BrainSurface.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(bs.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(bs.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(bs.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(bs.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					bs.checkFormat(bs.getPropFormat(prop), bs.getr(prop),bs.getPropSettings(prop)), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':BrainSurface']);
				assert( ...
					~isa(bs.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(bs.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':BrainSurface']);
	% 			assert( ...
	% 				~isa(bs.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['BrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(bs.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['BrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				bs.checkFormat(bs.getPropFormat(prop), bs.getr(prop),bs.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
	% 				['BrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':BrainSurface']);
				assert( ...
					~isa(bs.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(bs.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(bs.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(bs.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					bs.checkFormat(bs.getPropFormat(prop), bs.getr(prop),bs.getPropSettings(prop)), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if bs.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:BrainSurface');
					delete(ancestor(bs.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(BrainSurface.getProps(Category.RESULT))
		for prop = 1:1:BrainSurface.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch BrainSurface.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						bs.isLocked(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~bs.isLocked(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs = BrainSurface();
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		TAG = upper(BrainSurface.getPropTag(prop));
		assert( ...
			~bs.isLocked(prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			['BrainSurface.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~bs.isLocked(TAG), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			['BrainSurface.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	bs.lock()
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		switch BrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					bs.isLocked(prop), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~bs.isLocked(prop), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs = BrainSurface();
	 
	warning_backup = warning('off', 'BRAPH2:BrainSurface');
	for prop = 1:1:BrainSurface.getPropNumber()
		bs.lock(prop)
		switch BrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					bs.isLocked(prop), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~bs.isLocked(prop), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs = BrainSurface();
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		TAG = upper(BrainSurface.getPropTag(prop));
		assert( ...
			bs.isChecked(prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			['BrainSurface.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			bs.isChecked(TAG), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			['BrainSurface.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	bs.unchecked()
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		assert( ...
			~bs.isChecked(prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			['BrainSurface.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	bs.checked()
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		assert( ...
			bs.isChecked(prop), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			['BrainSurface.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic BrainSurface
	bs_0 = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, BrainSurface.getPropDefault(BrainSurface.TEMPLATE), ...
		BrainSurface.ID, BrainSurface.getPropDefault(BrainSurface.ID), ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, BrainSurface.getPropDefault(BrainSurface.VERTEX_NUMBER), ...
		BrainSurface.COORDINATES, BrainSurface.getPropDefault(BrainSurface.COORDINATES), ...
		BrainSurface.TRIANGLES_NUMBER, BrainSurface.getPropDefault(BrainSurface.TRIANGLES_NUMBER), ...
		BrainSurface.TRIANGLES, BrainSurface.getPropDefault(BrainSurface.TRIANGLES) ...
		);
	 
	% BrainSurface with 1st callbacks
	bs_1 = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, bs_0.getCallback(4), ..., ...
		BrainSurface.ID, bs_0.getCallback(5), ..., ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, bs_0.getCallback(9), ..., ...
		BrainSurface.COORDINATES, bs_0.getCallback(10), ..., ...
		BrainSurface.TRIANGLES_NUMBER, bs_0.getCallback(11), ..., ...
		BrainSurface.TRIANGLES, bs_0.getCallback(12) ... ...
		);
	 
	prop_number = BrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainSurface.getPropTag(prop));
		switch BrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(bs_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(bs_1.get(prop), bs_0.get(prop)) && ~isa(bs_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(bs_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BrainSurface with 2nd callbacks
	bs_2 = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, bs_1.getCallback(4), ..., ...
		BrainSurface.ID, bs_1.getCallback(5), ..., ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, bs_1.getCallback(9), ..., ...
		BrainSurface.COORDINATES, bs_1.getCallback(10), ..., ...
		BrainSurface.TRIANGLES_NUMBER, bs_1.getCallback(11), ..., ...
		BrainSurface.TRIANGLES, bs_1.getCallback(12) ... ...
		);
	 
	prop_number = BrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainSurface.getPropTag(prop));
		switch BrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(bs_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(bs_2.get(prop), bs_0.get(prop)) && ~isa(bs_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(bs_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BrainSurface with 3rd callbacks
	bs_3 = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, bs_2.getCallback(4), ..., ...
		BrainSurface.ID, bs_2.getCallback(5), ..., ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, bs_2.getCallback(9), ..., ...
		BrainSurface.COORDINATES, bs_2.getCallback(10), ..., ...
		BrainSurface.TRIANGLES_NUMBER, bs_2.getCallback(11), ..., ...
		BrainSurface.TRIANGLES, bs_2.getCallback(12) ... ...
		);
	 
	prop_number = BrainSurface.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainSurface.getPropTag(prop));
		switch BrainSurface.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(bs_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(bs_3.get(prop), bs_0.get(prop)) && ~isa(bs_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(bs_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	bs = BrainSurface();
	 
	bs_copy = bs.copy();
	 
	assert(bs_copy ~= bs, ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(bs_copy, bs), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		value = bs.getr(prop);
		value_copy = bs_copy.getr(prop);
		switch BrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					'BrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
							'BrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
							'BrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					bs_copy.isLocked(prop) == bs.isLocked(prop), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					'BrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					bs_copy.isChecked(prop) == bs.isChecked(prop), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					'BrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					bs_copy.getPropSeed(prop) == bs.getPropSeed(prop), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					'BrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	bs = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, BrainSurface.getPropDefault(BrainSurface.TEMPLATE), ...
		BrainSurface.ID, BrainSurface.getPropDefault(BrainSurface.ID), ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, BrainSurface.getPropDefault(BrainSurface.VERTEX_NUMBER), ...
		BrainSurface.COORDINATES, BrainSurface.getPropDefault(BrainSurface.COORDINATES), ...
		BrainSurface.TRIANGLES_NUMBER, BrainSurface.getPropDefault(BrainSurface.TRIANGLES_NUMBER), ...
		BrainSurface.TRIANGLES, BrainSurface.getPropDefault(BrainSurface.TRIANGLES) ...
		);
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		if BrainSurface.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':BrainSurface']);
			% bs.memorize(prop);
			% warning(warning_backup)
		elseif BrainSurface.getPropCategory(prop) == Category.EVANESCENT && bs.getPropFormat(prop) == Format.HANDLE
			bs.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:BrainSurface');
			delete(ancestor(bs.get(prop), 'figure'))
			warning(warning_backup)
		else
			bs.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	bs_copy = bs.copy();
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		value = bs.getr(prop);
		value_copy = bs_copy.getr(prop);
		switch BrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					'BrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
							'BrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
							'BrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						bs_copy.isLocked(prop) == bs.isLocked(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						bs_copy.isChecked(prop) == bs.isChecked(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						bs_copy.getPropSeed(prop) == bs.getPropSeed(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	bs_0 = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, BrainSurface.getPropDefault(BrainSurface.TEMPLATE), ...
		BrainSurface.ID, BrainSurface.getPropDefault(BrainSurface.ID), ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, BrainSurface.getPropDefault(BrainSurface.VERTEX_NUMBER), ...
		BrainSurface.COORDINATES, BrainSurface.getPropDefault(BrainSurface.COORDINATES), ...
		BrainSurface.TRIANGLES_NUMBER, BrainSurface.getPropDefault(BrainSurface.TRIANGLES_NUMBER), ...
		BrainSurface.TRIANGLES, BrainSurface.getPropDefault(BrainSurface.TRIANGLES) ...
		);
	 
	bs = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, bs_0.getCallback(4), ..., ...
		BrainSurface.ID, bs_0.getCallback(5), ..., ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, bs_0.getCallback(9), ..., ...
		BrainSurface.COORDINATES, bs_0.getCallback(10), ..., ...
		BrainSurface.TRIANGLES_NUMBER, bs_0.getCallback(11), ..., ...
		BrainSurface.TRIANGLES, bs_0.getCallback(12) ... ...
		);
	 
	bs_copy = bs.copy();
	bs_0_copy = bs_copy.getr('ID').get('EL');
	 
	for prop = 1:1:BrainSurface.getPropNumber()
		value = bs.getr(prop);
		value_copy = bs_copy.getr(prop);
		switch BrainSurface.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					'BrainSurface.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
							'BrainSurface.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
							'BrainSurface.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == bs_0.getCallback(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The callback should be obtained from BrainSurface.getCallback().' ...
						)
					assert( ...
						value_copy == bs_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The callback should be obtained from BrainSurface.getCallback().' ...
						)
				end
	 
					assert( ...
						bs_copy.isLocked(prop) == bs.isLocked(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						bs_copy.isChecked(prop) == bs.isChecked(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						bs_copy.getPropSeed(prop) == bs.getPropSeed(prop), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs_template = BrainSurface();
	bs = BrainSurface('TEMPLATE', bs_template);
	 
	for prop = 1:1:BrainSurface.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BrainSurface.getPropTag(prop));
		switch BrainSurface.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == BrainSurface.TEMPLATE
					assert( ...
						isa(bs.getr(prop), 'BrainSurface'), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface TEMPLATE does not work. BrainSurface.getr(''TEMPLATE'') should be a BrainSurface element.' ...
						)
					assert( ...
						isa(bs_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						'BrainSurface TEMPLATE does not work. BrainSurface_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(bs.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface TEMPLATE does not work. BrainSurface.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						bs.getr(prop).get('EL') == bs_template && bs.getr(prop).get('PROP') == prop && strcmp(bs.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface TEMPLATE does not work. BrainSurface.getr(' TAG ') should be a Callback to bs_template.' TAG '.'] ...
						)
					assert( ...
						isa(bs_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
						['BrainSurface TEMPLATE does not work. BrainSurface_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(bs.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface TEMPLATE does not work. BrainSurface.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(bs_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
					['BrainSurface TEMPLATE does not work. BrainSurface_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, BrainSurface.getPropDefault(BrainSurface.TEMPLATE), ...
		BrainSurface.ID, BrainSurface.getPropDefault(BrainSurface.ID), ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, BrainSurface.getPropDefault(BrainSurface.VERTEX_NUMBER), ...
		BrainSurface.COORDINATES, BrainSurface.getPropDefault(BrainSurface.COORDINATES), ...
		BrainSurface.TRIANGLES_NUMBER, BrainSurface.getPropDefault(BrainSurface.TRIANGLES_NUMBER), ...
		BrainSurface.TRIANGLES, BrainSurface.getPropDefault(BrainSurface.TRIANGLES) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'brainsurface_to_be_erased.b2'];
	 
	Element.save(bs, filename)
	 
	bs_loaded = Element.load(filename);
	 
	assert( ...
		isequal(bs.copy(), bs_loaded), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.save(bs) and/or BrainSurface.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	bs = BrainSurface( ...
		BrainSurface.ELCLASS, BrainSurface.getNoValue(), ...
		BrainSurface.NAME, BrainSurface.getNoValue(), ...
		BrainSurface.DESCRIPTION, BrainSurface.getNoValue(), ...
		BrainSurface.TEMPLATE, BrainSurface.getPropDefault(BrainSurface.TEMPLATE), ...
		BrainSurface.ID, BrainSurface.getPropDefault(BrainSurface.ID), ...
		BrainSurface.LABEL, BrainSurface.getPropDefault(BrainSurface.LABEL), ...
		BrainSurface.NOTES, BrainSurface.getPropDefault(BrainSurface.NOTES), ...
		BrainSurface.TOSTRING, BrainSurface.getNoValue(), ...
		BrainSurface.VERTEX_NUMBER, BrainSurface.getPropDefault(BrainSurface.VERTEX_NUMBER), ...
		BrainSurface.COORDINATES, BrainSurface.getPropDefault(BrainSurface.COORDINATES), ...
		BrainSurface.TRIANGLES_NUMBER, BrainSurface.getPropDefault(BrainSurface.TRIANGLES_NUMBER), ...
		BrainSurface.TRIANGLES, BrainSurface.getPropDefault(BrainSurface.TRIANGLES) ...
		);
	 
	[json, struct, el_list] = encodeJSON(bs);
	[bs_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(bs_dec ~= bs, ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		'BrainSurface.encodeJSON() or BrainSurface.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) BrainSurface.getPropFormat(prop), num2cell(BrainSurface.getProps())) == Format.HANDLE) && all(cellfun(@(prop) BrainSurface.getPropFormat(prop), num2cell(BrainSurface.getProps())) == Format.NET)
		assert(isequal(bs_dec, bs), ...
			[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
			'BrainSurface.encodeJSON() or BrainSurface.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':BrainSurface:' BRAPH2.FAIL_TEST], ...
		[' When testing BrainSurface no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

