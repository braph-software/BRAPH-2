%TEST_BRAINREGION

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	br = BrainRegion();
	 
	% get('ELCLASS')
	if isa(BrainRegion, 'ConcreteElement')
		assert(strcmp(BrainRegion().get('ELCLASS'), 'BrainRegion'), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion().get(''ELCLASS'') should return ''BrainRegion''.')
	end
	 
	% getBuild()
	assert(BrainRegion.getBuild() == 1 && BrainRegion.getBuild() > 0, ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.getBuild() should return the BrainRegion build number.')
	assert(br.getBuild() == 1 && br.getBuild() > 0 , ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.getBuild() should return the BrainRegion build number.')
	assert(Element.getBuild(br) == 1 && Element.getBuild(br) > 0, ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(br) should return the BrainRegion build number.')
	assert(Element.getBuild('BrainRegion') == 1 && Element.getBuild('BrainRegion') > 0, ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''BrainRegion'') should return the BrainRegion build number.')
	 
	% getClass()
	assert(strcmp(BrainRegion.getClass(), 'BrainRegion'), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.getClass() should return ''BrainRegion''.')
	assert(strcmp(br.getClass(), 'BrainRegion'), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.getClass() should return ''BrainRegion''.')
	assert(strcmp(Element.getClass(br), 'BrainRegion'), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(br) should return ''BrainRegion''.')
	assert(strcmp(Element.getClass('BrainRegion'), 'BrainRegion'), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''BrainRegion'') should return ''BrainRegion''.')
	 
	% getSubclasses()
	assert(isequal(BrainRegion.getSubclasses(), subclasses('BrainRegion', [], [], true)), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.getSubclasses() should return the same result as subclasses(''BrainRegion'', [], [], true).')
	assert(isequal(br.getSubclasses(), subclasses('BrainRegion', [], [], true)), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''BrainRegion'', [], [], true).')
	assert(isequal(Element.getSubclasses(br), subclasses('BrainRegion', [], [], true)), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(br) should return the same result as subclasses(''BrainRegion'', [], [], true).')
	assert(isequal(Element.getSubclasses('BrainRegion'), subclasses('BrainRegion', [], [], true)), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''BrainRegion'') should return the same result as subclasses(''BrainRegion'', [], [], true).')
	 
	% getProps()
	assert(isempty(BrainRegion.getProps()) || isequal(BrainRegion.getProps(), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.getProps() should return a row vector [1:1:N].')
	assert(isempty(BrainRegion.getProps()) || isequal(br.getProps(), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.getProps() should return a row vector [1:1:N].')
	assert(isempty(BrainRegion.getProps()) || isequal(Element.getProps(br), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(br) should return a row vector [1:1:N].')
	assert(isempty(BrainRegion.getProps()) || isequal(Element.getProps('BrainRegion'), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BrainRegion'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) BrainRegion.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BrainRegion.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.getProps(category) does not work.')
	tmp = cellfun(@(category) br.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BrainRegion.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(br, category), categories, 'UniformOutput', false);
	assert(isempty(BrainRegion.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(br, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('BrainRegion', category), categories, 'UniformOutput', false);
	assert(isempty(BrainRegion.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BrainRegion.getProps())), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BrainRegion'', category) does not work.')
	 
	% getPropNumber()
	assert(BrainRegion.getPropNumber() == length(BrainRegion.getProps()), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.getPropNumber() should return the number of properties.')
	assert(br.getPropNumber() == length(BrainRegion.getProps()), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(br) == length(BrainRegion.getProps()), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(br) should return the number of properties.')
	assert(Element.getPropNumber('BrainRegion') == length(BrainRegion.getProps()), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BrainRegion'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) BrainRegion.getPropNumber(category), categories)) == BrainRegion.getPropNumber(), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) br.getPropNumber(category), categories)) == BrainRegion.getPropNumber(), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(br, category), categories)) == BrainRegion.getPropNumber(), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(br, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('BrainRegion', category), categories)) == BrainRegion.getPropNumber(), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BrainRegion'', category) does not work.')
	 
	% existsProp(prop)
	assert(~BrainRegion.existsProp(NaN), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.existsProp(prop) does not work.')
	assert(~br.existsProp(NaN), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.existsProp(prop) does not work.')
	assert(~Element.existsProp(br, NaN), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(br, prop) does not work.')
	assert(~Element.existsProp('BrainRegion', NaN), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''BrainRegion'', prop) does not work.')
	 
	assert_with_error('BrainRegion.existsProp(NaN)', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsProp(''BrainRegion'', NaN)', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		assert(BrainRegion.existsProp(prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.existsProp(prop) does not work.')
		assert(br.existsProp(prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.existsProp(prop) does not work.')
		assert(Element.existsProp(br, prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(br, prop) does not work.')
		assert(Element.existsProp('BrainRegion', prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''BrainRegion'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~BrainRegion.existsTag(''), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.existsTag(tag) does not work.')
	assert(~br.existsTag(''), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'br.existsTag(tag) does not work.')
	assert(~Element.existsTag(br, ''), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(br, tag) does not work.')
	assert(~Element.existsTag('BrainRegion', ''), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''BrainRegion'', tag) does not work.')
	 
	assert_with_error('BrainRegion.existsTag('''')', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsTag(''BrainRegion'', '''')', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
		assert(BrainRegion.existsTag(tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.existsTag(tag) does not work.')
		assert(br.existsTag(tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.existsTag(tag) does not work.')
		assert(Element.existsTag(br, tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(br, tga) does not work.')
		assert(Element.existsTag('BrainRegion', tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''BrainRegion'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		assert(BrainRegion.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropProp(prop) does not work.')
		assert(br.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropProp(prop) does not work.')
		assert(Element.getPropProp(br, prop) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(br, prop) does not work.')
		assert(Element.getPropProp('BrainRegion', prop) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BrainRegion'', prop) does not work.')
	 
		tag = br.getPropTag(prop);
		assert(BrainRegion.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropProp(tag) does not work.')
		assert(br.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropProp(tag) does not work.')
		assert(Element.getPropProp(br, tag) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(br, tag) does not work.')
		assert(Element.getPropProp('BrainRegion', prop) == prop, ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BrainRegion'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(strcmp(BrainRegion.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropTag(prop) does not work.')
		assert(strcmp(br.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(br, prop), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(br, prop) does not work.')
		assert(strcmp(Element.getPropTag('BrainRegion', prop), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BrainRegion'', prop) does not work.')
	 
		assert(strcmp(BrainRegion.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropTag(tag) does not work.')
		assert(strcmp(br.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(br, tag), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(br, tag) does not work.')
		assert(strcmp(Element.getPropTag('BrainRegion', prop), tag), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BrainRegion'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(Category.existsCategory(BrainRegion.getPropCategory(prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(br.getPropCategory(prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(br, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BrainRegion'', prop) does not work.')
	 
		assert(Category.existsCategory(BrainRegion.getPropCategory(tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(br.getPropCategory(tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(br, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BrainRegion'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(Format.existsFormat(BrainRegion.getPropFormat(prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(br.getPropFormat(prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(br, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BrainRegion'', prop) does not work.')
	 
		assert(Format.existsFormat(BrainRegion.getPropFormat(tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(br.getPropFormat(tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(br, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BrainRegion'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(ischar(BrainRegion.getPropDescription(prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropDescription(prop) does not work.')
		assert(ischar(br.getPropDescription(prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(br, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(br, prop) does not work.')
		assert(ischar(Element.getPropDescription(br, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BrainRegion'', prop) does not work.')
	 
		assert(ischar(BrainRegion.getPropDescription(tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.getPropDescription(tag) does not work.')
		assert(ischar(br.getPropDescription(tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(br, tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(br, tag) does not work.')
		assert(ischar(Element.getPropDescription(br, tag)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BrainRegion'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		settings = BrainRegion.getPropSettings(prop);
		settings = br.getPropSettings(prop);
		settings = Element.getPropSettings(br, prop);
		settings = Element.getPropSettings('BrainRegion', prop);
	 
		settings = BrainRegion.getPropSettings(tag);
		settings = br.getPropSettings(tag);
		settings = Element.getPropSettings(br, tag);
		settings = Element.getPropSettings('BrainRegion', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		default = BrainRegion.getPropDefault(prop);
		default = br.getPropDefault(prop);
		default = Element.getPropDefault(br, prop);
		default = Element.getPropDefault('BrainRegion', prop);
	 
		default = BrainRegion.getPropDefault(tag);
		default = br.getPropDefault(tag);
		default = Element.getPropDefault(br, tag);
		default = Element.getPropDefault('BrainRegion', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		conditioned_default = BrainRegion.getPropDefaultConditioned(prop);
		conditioned_default = br.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(br, prop);
		conditioned_default = Element.getPropDefaultConditioned('BrainRegion', prop);
	 
		conditioned_default = BrainRegion.getPropDefaultConditioned(tag);
		conditioned_default = br.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(br, tag);
		conditioned_default = Element.getPropDefaultConditioned('BrainRegion', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:BrainRegion.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(~BrainRegion.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.checkProp(prop, value) does not work.')
		assert(~br.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(br, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, prop, value) does not work.')
		assert(~Element.checkProp('BrainRegion', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainRegion'', prop, value) does not work.')
	 
		assert_with_error('BrainRegion.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], prop, br)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], prop, br)
		assert_with_error('Element.checkProp(''BrainRegion'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~BrainRegion.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.checkProp(tag, value) does not work.')
		assert(~br.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(br, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, tag, value) does not work.')
		assert(~Element.checkProp('BrainRegion', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainRegion'', tag, value) does not work.')
	 
		assert_with_error('BrainRegion.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], tag, br)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], tag, br)
		assert_with_error('Element.checkProp(''BrainRegion'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(BrainRegion.checkProp(prop, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.checkProp(prop, <conditioned default value>) does not work.')
		assert(br.checkProp(prop, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(br, prop, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('BrainRegion', prop, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainRegion'', prop, <conditioned default value>) does not work.')
	 
		assert(BrainRegion.checkProp(tag, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.checkProp(tag, <conditioned default value>) does not work.')
		assert(br.checkProp(tag, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(br, tag, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('BrainRegion', tag, Element.getPropDefaultConditioned(BrainRegion, prop)), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BrainRegion'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, BrainRegion.getPropDefault(BrainRegion.TEMPLATE), ...
		BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
		BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
		BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
		);
	 
	for prop = 1:1:BrainRegion.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BrainRegion.getPropTag(prop));
		switch BrainRegion.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					br.getr(prop) == BrainRegion.getNoValue(), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainRegion.getCategoryName(BrainRegion.getPropCategory(prop)) ', BrainRegion.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainRegion.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					br.getr(TAG) == BrainRegion.getNoValue(), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainRegion.getCategoryName(BrainRegion.getPropCategory(prop)) ', BrainRegion.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainRegion.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(br.getPropSettings(prop))
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop)), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop), br.getPropSettings(prop)), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					br.getr(prop) == BrainRegion.getNoValue(), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainRegion.getCategoryName(BrainRegion.getPropCategory(prop)) ', BrainRegion.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainRegion.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					br.getr(TAG) == BrainRegion.getNoValue(), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['Being a ' BrainRegion.getCategoryName(BrainRegion.getPropCategory(prop)) ', BrainRegion.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BrainRegion.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':BrainRegion']);
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(br.getPropSettings(prop))
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop)), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop), br.getPropSettings(prop)), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(br.getr(prop), BrainRegion.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by BrainRegion.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BrainRegion.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(br.getr(TAG), BrainRegion.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' TAG ') must be inizialized to its default value ' ...
					'given by BrainRegion.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BrainRegion.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, BrainRegion.getPropDefault(BrainRegion.TEMPLATE), ...
		BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
		BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
		BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
		);
	 
	for prop = 1:1:BrainRegion.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BrainRegion.getPropTag(prop));
		switch BrainRegion.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(br.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					br.checkFormat(br.getPropFormat(prop), br.getr(prop),br.getPropSettings(prop)), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':BrainRegion']);
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':BrainRegion']);
	% 			assert( ...
	% 				~isa(br.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
	% 				['BrainRegion.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(br.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
	% 				['BrainRegion.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				br.checkFormat(br.getPropFormat(prop), br.getr(prop),br.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
	% 				['BrainRegion.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':BrainRegion']);
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(br.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					br.checkFormat(br.getPropFormat(prop), br.getr(prop),br.getPropSettings(prop)), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if br.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:BrainRegion');
					delete(ancestor(br.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(BrainRegion.getProps(Category.RESULT))
		for prop = 1:1:BrainRegion.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch BrainRegion.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						br.isLocked(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~br.isLocked(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion();
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		TAG = upper(BrainRegion.getPropTag(prop));
		assert( ...
			~br.isLocked(prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			['BrainRegion.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~br.isLocked(TAG), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			['BrainRegion.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	br.lock()
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		switch BrainRegion.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					br.isLocked(prop), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~br.isLocked(prop), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion();
	 
	warning_backup = warning('off', 'BRAPH2:BrainRegion');
	for prop = 1:1:BrainRegion.getPropNumber()
		br.lock(prop)
		switch BrainRegion.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					br.isLocked(prop), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~br.isLocked(prop), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion();
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		TAG = upper(BrainRegion.getPropTag(prop));
		assert( ...
			br.isChecked(prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			['BrainRegion.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			br.isChecked(TAG), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			['BrainRegion.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	br.unchecked()
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		assert( ...
			~br.isChecked(prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			['BrainRegion.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	br.checked()
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		assert( ...
			br.isChecked(prop), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			['BrainRegion.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic BrainRegion
	br_0 = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, BrainRegion.getPropDefault(BrainRegion.TEMPLATE), ...
		BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
		BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
		BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
		);
	 
	% BrainRegion with 1st callbacks
	br_1 = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, br_0.getCallback(4), ..., ...
		BrainRegion.ID, br_0.getCallback(5), ..., ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, br_0.getCallback(9), ..., ...
		BrainRegion.Y, br_0.getCallback(10), ..., ...
		BrainRegion.Z, br_0.getCallback(11) ... ...
		);
	 
	prop_number = BrainRegion.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainRegion.getPropTag(prop));
		switch BrainRegion.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(br_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(br_1.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(br_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BrainRegion with 2nd callbacks
	br_2 = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, br_1.getCallback(4), ..., ...
		BrainRegion.ID, br_1.getCallback(5), ..., ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, br_1.getCallback(9), ..., ...
		BrainRegion.Y, br_1.getCallback(10), ..., ...
		BrainRegion.Z, br_1.getCallback(11) ... ...
		);
	 
	prop_number = BrainRegion.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainRegion.getPropTag(prop));
		switch BrainRegion.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(br_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(br_2.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(br_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BrainRegion with 3rd callbacks
	br_3 = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, br_2.getCallback(4), ..., ...
		BrainRegion.ID, br_2.getCallback(5), ..., ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, br_2.getCallback(9), ..., ...
		BrainRegion.Y, br_2.getCallback(10), ..., ...
		BrainRegion.Z, br_2.getCallback(11) ... ...
		);
	 
	prop_number = BrainRegion.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BrainRegion.getPropTag(prop));
		switch BrainRegion.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(br_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(br_3.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(br_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	br = BrainRegion();
	 
	br_copy = br.copy();
	 
	assert(br_copy ~= br, ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(br_copy, br), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		value = br.getr(prop);
		value_copy = br_copy.getr(prop);
		switch BrainRegion.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					'BrainRegion.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
							'BrainRegion.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
							'BrainRegion.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					br_copy.isLocked(prop) == br.isLocked(prop), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					'BrainRegion.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					br_copy.isChecked(prop) == br.isChecked(prop), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					'BrainRegion.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					br_copy.getPropSeed(prop) == br.getPropSeed(prop), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					'BrainRegion.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	br = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, BrainRegion.getPropDefault(BrainRegion.TEMPLATE), ...
		BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
		BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
		BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
		);
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		if BrainRegion.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':BrainRegion']);
			% br.memorize(prop);
			% warning(warning_backup)
		elseif BrainRegion.getPropCategory(prop) == Category.EVANESCENT && br.getPropFormat(prop) == Format.HANDLE
			br.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:BrainRegion');
			delete(ancestor(br.get(prop), 'figure'))
			warning(warning_backup)
		else
			br.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	br_copy = br.copy();
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		value = br.getr(prop);
		value_copy = br_copy.getr(prop);
		switch BrainRegion.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					'BrainRegion.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
							'BrainRegion.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
							'BrainRegion.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						br_copy.isLocked(prop) == br.isLocked(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.isChecked(prop) == br.isChecked(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.getPropSeed(prop) == br.getPropSeed(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	br_0 = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, BrainRegion.getPropDefault(BrainRegion.TEMPLATE), ...
		BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
		BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
		BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
		);
	 
	br = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, br_0.getCallback(4), ..., ...
		BrainRegion.ID, br_0.getCallback(5), ..., ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, br_0.getCallback(9), ..., ...
		BrainRegion.Y, br_0.getCallback(10), ..., ...
		BrainRegion.Z, br_0.getCallback(11) ... ...
		);
	 
	br_copy = br.copy();
	br_0_copy = br_copy.getr('ID').get('EL');
	 
	for prop = 1:1:BrainRegion.getPropNumber()
		value = br.getr(prop);
		value_copy = br_copy.getr(prop);
		switch BrainRegion.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					'BrainRegion.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
							'BrainRegion.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
							'BrainRegion.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == br_0.getCallback(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The callback should be obtained from BrainRegion.getCallback().' ...
						)
					assert( ...
						value_copy == br_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The callback should be obtained from BrainRegion.getCallback().' ...
						)
				end
	 
					assert( ...
						br_copy.isLocked(prop) == br.isLocked(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.isChecked(prop) == br.isChecked(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.getPropSeed(prop) == br.getPropSeed(prop), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br_template = BrainRegion();
	br = BrainRegion('TEMPLATE', br_template);
	 
	for prop = 1:1:BrainRegion.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BrainRegion.getPropTag(prop));
		switch BrainRegion.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == BrainRegion.TEMPLATE
					assert( ...
						isa(br.getr(prop), 'BrainRegion'), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion TEMPLATE does not work. BrainRegion.getr(''TEMPLATE'') should be a BrainRegion element.' ...
						)
					assert( ...
						isa(br_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						'BrainRegion TEMPLATE does not work. BrainRegion_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(br.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion TEMPLATE does not work. BrainRegion.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						br.getr(prop).get('EL') == br_template && br.getr(prop).get('PROP') == prop && strcmp(br.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion TEMPLATE does not work. BrainRegion.getr(' TAG ') should be a Callback to br_template.' TAG '.'] ...
						)
					assert( ...
						isa(br_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
						['BrainRegion TEMPLATE does not work. BrainRegion_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion TEMPLATE does not work. BrainRegion.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(br_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
					['BrainRegion TEMPLATE does not work. BrainRegion_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, BrainRegion.getPropDefault(BrainRegion.TEMPLATE), ...
		BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
		BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
		BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'brainregion_to_be_erased.b2'];
	 
	Element.save(br, filename)
	 
	br_loaded = Element.load(filename);
	 
	assert( ...
		isequal(br.copy(), br_loaded), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.save(br) and/or BrainRegion.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion( ...
		BrainRegion.ELCLASS, BrainRegion.getNoValue(), ...
		BrainRegion.NAME, BrainRegion.getNoValue(), ...
		BrainRegion.DESCRIPTION, BrainRegion.getNoValue(), ...
		BrainRegion.TEMPLATE, BrainRegion.getPropDefault(BrainRegion.TEMPLATE), ...
		BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
		BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
		BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
		BrainRegion.TOSTRING, BrainRegion.getNoValue(), ...
		BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
		BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
		BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
		);
	 
	[json, struct, el_list] = encodeJSON(br);
	[br_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(br_dec ~= br, ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		'BrainRegion.encodeJSON() or BrainRegion.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) BrainRegion.getPropFormat(prop), num2cell(BrainRegion.getProps())) == Format.HANDLE) && all(cellfun(@(prop) BrainRegion.getPropFormat(prop), num2cell(BrainRegion.getProps())) == Format.NET)
		assert(isequal(br_dec, br), ...
			[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
			'BrainRegion.encodeJSON() or BrainRegion.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Basic functions
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion('ID', 'BR1', 'LABEL', 'brain region', 'NOTES', 'Notes on brain region.', 'X', -1, 'Y', -2, 'Z', -3);
	
	assert(ischar(br.tostring()), ...
	    [BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.tostring() must return a string.')
end

%% Test 13: Get methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	id = 'BR1';
	label = 'brain region 1';
	notes = 'Notes on brain region 1.';
	x = 1;
	y = 2;
	z = 3;
	br = BrainRegion('ID', id, 'LABEL', label, 'NOTES', notes, 'X', x, 'Y', y, 'Z', z);
	
	assert(isequal(br.get('ID'), id), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.get() does not work.')
	assert(isequal(br.get('LABEL'), label), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.get() does not work.')
	assert(isequal(br.get('NOTES'), notes), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.get() does not work.')
	assert(isequal(br.get('X'), x), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.get() does not work.')
	assert(isequal(br.get('Y'), y), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.get() does not work.')
	assert(isequal(br.get('Z'), z), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.get() does not work.')
end

%% Test 14: Set methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BrainRegion();
	br.set('ID', 'br2');
	br.set('LABEL', 'lab2');
	br.set('NOTES', 'notes2');
	br.set('X', 1);
	br.set('Y', 2);
	br.set('Z', 3);
	
	assert(isequal(br.get('ID'), 'br2'), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.set() does not work.')
	assert(isequal(br.get('LABEL'), 'lab2'), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.set() does not work.')
	assert(isequal(br.get('NOTES'), 'notes2'), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.set() does not work.')
	assert(isequal(br.get('X'), 1), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.set() does not work.')
	assert(isequal(br.get('Y'), 2), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.set() does not work.')
	assert(isequal(br.get('Z'), 3), ...
	    [BRAPH2.STR ':' class(br) ':' BRAPH2.FAIL_TEST], ...
	    'BrainRegion.set() does not work.')
end

%% Test 15: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.FAIL_TEST], ...
		[' When testing BrainRegion no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 16: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

