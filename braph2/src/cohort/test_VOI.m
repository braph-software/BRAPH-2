%TEST_VOI

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	voi = VOI();
	 
	% get('ELCLASS')
	if isa(VOI, 'ConcreteElement')
		assert(strcmp(VOI().get('ELCLASS'), 'VOI'), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI().get(''ELCLASS'') should return ''VOI''.')
	end
	 
	% getBuild()
	assert(VOI.getBuild() == 1 && VOI.getBuild() > 0, ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.getBuild() should return the VOI build number.')
	assert(voi.getBuild() == 1 && voi.getBuild() > 0 , ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.getBuild() should return the VOI build number.')
	assert(Element.getBuild(voi) == 1 && Element.getBuild(voi) > 0, ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(voi) should return the VOI build number.')
	assert(Element.getBuild('VOI') == 1 && Element.getBuild('VOI') > 0, ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''VOI'') should return the VOI build number.')
	 
	% getClass()
	assert(strcmp(VOI.getClass(), 'VOI'), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.getClass() should return ''VOI''.')
	assert(strcmp(voi.getClass(), 'VOI'), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.getClass() should return ''VOI''.')
	assert(strcmp(Element.getClass(voi), 'VOI'), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(voi) should return ''VOI''.')
	assert(strcmp(Element.getClass('VOI'), 'VOI'), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''VOI'') should return ''VOI''.')
	 
	% getSubclasses()
	assert(isequal(VOI.getSubclasses(), subclasses('VOI', [], [], true)), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.getSubclasses() should return the same result as subclasses(''VOI'', [], [], true).')
	assert(isequal(voi.getSubclasses(), subclasses('VOI', [], [], true)), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''VOI'', [], [], true).')
	assert(isequal(Element.getSubclasses(voi), subclasses('VOI', [], [], true)), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(voi) should return the same result as subclasses(''VOI'', [], [], true).')
	assert(isequal(Element.getSubclasses('VOI'), subclasses('VOI', [], [], true)), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''VOI'') should return the same result as subclasses(''VOI'', [], [], true).')
	 
	% getProps()
	assert(isempty(VOI.getProps()) || isequal(VOI.getProps(), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.getProps() should return a row vector [1:1:N].')
	assert(isempty(VOI.getProps()) || isequal(voi.getProps(), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.getProps() should return a row vector [1:1:N].')
	assert(isempty(VOI.getProps()) || isequal(Element.getProps(voi), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(voi) should return a row vector [1:1:N].')
	assert(isempty(VOI.getProps()) || isequal(Element.getProps('VOI'), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''VOI'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) VOI.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(VOI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.getProps(category) does not work.')
	tmp = cellfun(@(category) voi.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(VOI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(voi, category), categories, 'UniformOutput', false);
	assert(isempty(VOI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(voi, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('VOI', category), categories, 'UniformOutput', false);
	assert(isempty(VOI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(VOI.getProps())), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''VOI'', category) does not work.')
	 
	% getPropNumber()
	assert(VOI.getPropNumber() == length(VOI.getProps()), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.getPropNumber() should return the number of properties.')
	assert(voi.getPropNumber() == length(VOI.getProps()), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(voi) == length(VOI.getProps()), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(voi) should return the number of properties.')
	assert(Element.getPropNumber('VOI') == length(VOI.getProps()), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''VOI'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) VOI.getPropNumber(category), categories)) == VOI.getPropNumber(), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) voi.getPropNumber(category), categories)) == VOI.getPropNumber(), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(voi, category), categories)) == VOI.getPropNumber(), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(voi, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('VOI', category), categories)) == VOI.getPropNumber(), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''VOI'', category) does not work.')
	 
	% existsProp(prop)
	assert(~VOI.existsProp(NaN), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.existsProp(prop) does not work.')
	assert(~voi.existsProp(NaN), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.existsProp(prop) does not work.')
	assert(~Element.existsProp(voi, NaN), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(voi, prop) does not work.')
	assert(~Element.existsProp('VOI', NaN), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''VOI'', prop) does not work.')
	 
	assert_with_error('VOI.existsProp(NaN)', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], voi)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], voi)
	assert_with_error('Element.existsProp(''VOI'', NaN)', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:VOI.getPropNumber()
		assert(VOI.existsProp(prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.existsProp(prop) does not work.')
		assert(voi.existsProp(prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.existsProp(prop) does not work.')
		assert(Element.existsProp(voi, prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(voi, prop) does not work.')
		assert(Element.existsProp('VOI', prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''VOI'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~VOI.existsTag(''), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.existsTag(tag) does not work.')
	assert(~voi.existsTag(''), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'voi.existsTag(tag) does not work.')
	assert(~Element.existsTag(voi, ''), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(voi, tag) does not work.')
	assert(~Element.existsTag('VOI', ''), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''VOI'', tag) does not work.')
	 
	assert_with_error('VOI.existsTag('''')', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], voi)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], voi)
	assert_with_error('Element.existsTag(''VOI'', '''')', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
		assert(VOI.existsTag(tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.existsTag(tag) does not work.')
		assert(voi.existsTag(tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.existsTag(tag) does not work.')
		assert(Element.existsTag(voi, tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(voi, tga) does not work.')
		assert(Element.existsTag('VOI', tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''VOI'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:VOI.getPropNumber()
		assert(VOI.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropProp(prop) does not work.')
		assert(voi.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropProp(prop) does not work.')
		assert(Element.getPropProp(voi, prop) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(voi, prop) does not work.')
		assert(Element.getPropProp('VOI', prop) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''VOI'', prop) does not work.')
	 
		tag = voi.getPropTag(prop);
		assert(VOI.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropProp(tag) does not work.')
		assert(voi.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropProp(tag) does not work.')
		assert(Element.getPropProp(voi, tag) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(voi, tag) does not work.')
		assert(Element.getPropProp('VOI', prop) == prop, ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''VOI'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		assert(strcmp(VOI.getPropTag(prop), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropTag(prop) does not work.')
		assert(strcmp(voi.getPropTag(prop), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(voi, prop), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(voi, prop) does not work.')
		assert(strcmp(Element.getPropTag('VOI', prop), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''VOI'', prop) does not work.')
	 
		assert(strcmp(VOI.getPropTag(tag), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropTag(tag) does not work.')
		assert(strcmp(voi.getPropTag(tag), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(voi, tag), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(voi, tag) does not work.')
		assert(strcmp(Element.getPropTag('VOI', prop), tag), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''VOI'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		assert(Category.existsCategory(VOI.getPropCategory(prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(voi.getPropCategory(prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(voi, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(voi, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(voi, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''VOI'', prop) does not work.')
	 
		assert(Category.existsCategory(VOI.getPropCategory(tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(voi.getPropCategory(tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(voi, tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(voi, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(voi, tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''VOI'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		assert(Format.existsFormat(VOI.getPropFormat(prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(voi.getPropFormat(prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(voi, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(voi, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(voi, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''VOI'', prop) does not work.')
	 
		assert(Format.existsFormat(VOI.getPropFormat(tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(voi.getPropFormat(tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(voi, tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(voi, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(voi, tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''VOI'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		assert(ischar(VOI.getPropDescription(prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropDescription(prop) does not work.')
		assert(ischar(voi.getPropDescription(prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(voi, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(voi, prop) does not work.')
		assert(ischar(Element.getPropDescription(voi, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''VOI'', prop) does not work.')
	 
		assert(ischar(VOI.getPropDescription(tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.getPropDescription(tag) does not work.')
		assert(ischar(voi.getPropDescription(tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(voi, tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(voi, tag) does not work.')
		assert(ischar(Element.getPropDescription(voi, tag)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''VOI'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		settings = VOI.getPropSettings(prop);
		settings = voi.getPropSettings(prop);
		settings = Element.getPropSettings(voi, prop);
		settings = Element.getPropSettings('VOI', prop);
	 
		settings = VOI.getPropSettings(tag);
		settings = voi.getPropSettings(tag);
		settings = Element.getPropSettings(voi, tag);
		settings = Element.getPropSettings('VOI', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		default = VOI.getPropDefault(prop);
		default = voi.getPropDefault(prop);
		default = Element.getPropDefault(voi, prop);
		default = Element.getPropDefault('VOI', prop);
	 
		default = VOI.getPropDefault(tag);
		default = voi.getPropDefault(tag);
		default = Element.getPropDefault(voi, tag);
		default = Element.getPropDefault('VOI', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		conditioned_default = VOI.getPropDefaultConditioned(prop);
		conditioned_default = voi.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(voi, prop);
		conditioned_default = Element.getPropDefaultConditioned('VOI', prop);
	 
		conditioned_default = VOI.getPropDefaultConditioned(tag);
		conditioned_default = voi.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(voi, tag);
		conditioned_default = Element.getPropDefaultConditioned('VOI', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:VOI.getPropNumber()
		tag = voi.getPropTag(prop);
	 
		assert(~VOI.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.checkProp(prop, value) does not work.')
		assert(~voi.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(voi, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(voi, prop, value) does not work.')
		assert(~Element.checkProp('VOI', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''VOI'', prop, value) does not work.')
	 
		assert_with_error('VOI.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], prop, voi)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], prop, voi)
		assert_with_error('Element.checkProp(''VOI'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~VOI.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.checkProp(tag, value) does not work.')
		assert(~voi.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(voi, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(voi, tag, value) does not work.')
		assert(~Element.checkProp('VOI', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''VOI'', tag, value) does not work.')
	 
		assert_with_error('VOI.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], tag, voi)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], tag, voi)
		assert_with_error('Element.checkProp(''VOI'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':VOI:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(VOI.checkProp(prop, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.checkProp(prop, <conditioned default value>) does not work.')
		assert(voi.checkProp(prop, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(voi, prop, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(voi, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('VOI', prop, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''VOI'', prop, <conditioned default value>) does not work.')
	 
		assert(VOI.checkProp(tag, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.checkProp(tag, <conditioned default value>) does not work.')
		assert(voi.checkProp(tag, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'voi.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(voi, tag, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(voi, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('VOI', tag, Element.getPropDefaultConditioned(VOI, prop)), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''VOI'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, VOI.getPropDefault(VOI.TEMPLATE), ...
		VOI.ID, VOI.getPropDefault(VOI.ID), ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, VOI.getPropDefault(VOI.V) ...
		);
	 
	for prop = 1:1:VOI.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(VOI.getPropTag(prop));
		switch VOI.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					voi.getr(prop) == VOI.getNoValue(), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['Being a ' VOI.getCategoryName(VOI.getPropCategory(prop)) ', VOI.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in VOI.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					voi.getr(TAG) == VOI.getNoValue(), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['Being a ' VOI.getCategoryName(VOI.getPropCategory(prop)) ', VOI.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in VOI.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(voi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(voi.getPropSettings(prop))
					assert( ...
						voi.checkFormat(voi.getPropFormat(prop), voi.get(prop)), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						voi.checkFormat(voi.getPropFormat(prop), voi.get(prop), voi.getPropSettings(prop)), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					voi.getr(prop) == VOI.getNoValue(), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['Being a ' VOI.getCategoryName(VOI.getPropCategory(prop)) ', VOI.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in VOI.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					voi.getr(TAG) == VOI.getNoValue(), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['Being a ' VOI.getCategoryName(VOI.getPropCategory(prop)) ', VOI.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in VOI.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':VOI']);
				assert( ...
					~isa(voi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(voi.getPropSettings(prop))
					assert( ...
						voi.checkFormat(voi.getPropFormat(prop), voi.get(prop)), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						voi.checkFormat(voi.getPropFormat(prop), voi.get(prop), voi.getPropSettings(prop)), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(voi.getr(prop), VOI.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by VOI.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in VOI.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(voi.getr(TAG), VOI.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' TAG ') must be inizialized to its default value ' ...
					'given by VOI.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in VOI.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, VOI.getPropDefault(VOI.TEMPLATE), ...
		VOI.ID, VOI.getPropDefault(VOI.ID), ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, VOI.getPropDefault(VOI.V) ...
		);
	 
	for prop = 1:1:VOI.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(VOI.getPropTag(prop));
		switch VOI.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(voi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(voi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(voi.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(voi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					voi.checkFormat(voi.getPropFormat(prop), voi.getr(prop),voi.getPropSettings(prop)), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':VOI']);
				assert( ...
					~isa(voi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(voi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':VOI']);
	% 			assert( ...
	% 				~isa(voi.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
	% 				['VOI.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(voi.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
	% 				['VOI.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				voi.checkFormat(voi.getPropFormat(prop), voi.getr(prop),voi.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
	% 				['VOI.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':VOI']);
				assert( ...
					~isa(voi.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(voi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(voi.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(voi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					voi.checkFormat(voi.getPropFormat(prop), voi.getr(prop),voi.getPropSettings(prop)), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if voi.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:VOI');
					delete(ancestor(voi.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(VOI.getProps(Category.RESULT))
		for prop = 1:1:VOI.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch VOI.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						voi.isLocked(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~voi.isLocked(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi = VOI();
	 
	for prop = 1:1:VOI.getPropNumber()
		TAG = upper(VOI.getPropTag(prop));
		assert( ...
			~voi.isLocked(prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			['VOI.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~voi.isLocked(TAG), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			['VOI.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	voi.lock()
	 
	for prop = 1:1:VOI.getPropNumber()
		switch VOI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					voi.isLocked(prop), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~voi.isLocked(prop), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi = VOI();
	 
	warning_backup = warning('off', 'BRAPH2:VOI');
	for prop = 1:1:VOI.getPropNumber()
		voi.lock(prop)
		switch VOI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					voi.isLocked(prop), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~voi.isLocked(prop), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi = VOI();
	 
	for prop = 1:1:VOI.getPropNumber()
		TAG = upper(VOI.getPropTag(prop));
		assert( ...
			voi.isChecked(prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			['VOI.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			voi.isChecked(TAG), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			['VOI.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	voi.unchecked()
	 
	for prop = 1:1:VOI.getPropNumber()
		assert( ...
			~voi.isChecked(prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			['VOI.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	voi.checked()
	 
	for prop = 1:1:VOI.getPropNumber()
		assert( ...
			voi.isChecked(prop), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			['VOI.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic VOI
	voi_0 = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, VOI.getPropDefault(VOI.TEMPLATE), ...
		VOI.ID, VOI.getPropDefault(VOI.ID), ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, VOI.getPropDefault(VOI.V) ...
		);
	 
	% VOI with 1st callbacks
	voi_1 = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, voi_0.getCallback(4), ..., ...
		VOI.ID, voi_0.getCallback(5), ..., ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, voi_0.getCallback(9) ... ...
		);
	 
	prop_number = VOI.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(VOI.getPropTag(prop));
		switch VOI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(voi_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(voi_1.get(prop), voi_0.get(prop)) && ~isa(voi_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(voi_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% VOI with 2nd callbacks
	voi_2 = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, voi_1.getCallback(4), ..., ...
		VOI.ID, voi_1.getCallback(5), ..., ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, voi_1.getCallback(9) ... ...
		);
	 
	prop_number = VOI.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(VOI.getPropTag(prop));
		switch VOI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(voi_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(voi_2.get(prop), voi_0.get(prop)) && ~isa(voi_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(voi_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% VOI with 3rd callbacks
	voi_3 = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, voi_2.getCallback(4), ..., ...
		VOI.ID, voi_2.getCallback(5), ..., ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, voi_2.getCallback(9) ... ...
		);
	 
	prop_number = VOI.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(VOI.getPropTag(prop));
		switch VOI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(voi_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(voi_3.get(prop), voi_0.get(prop)) && ~isa(voi_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(voi_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	voi = VOI();
	 
	voi_copy = voi.copy();
	 
	assert(voi_copy ~= voi, ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(voi_copy, voi), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:VOI.getPropNumber()
		value = voi.getr(prop);
		value_copy = voi_copy.getr(prop);
		switch VOI.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					'VOI.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
							'VOI.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
							'VOI.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					voi_copy.isLocked(prop) == voi.isLocked(prop), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					'VOI.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					voi_copy.isChecked(prop) == voi.isChecked(prop), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					'VOI.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					voi_copy.getPropSeed(prop) == voi.getPropSeed(prop), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					'VOI.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	voi = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, VOI.getPropDefault(VOI.TEMPLATE), ...
		VOI.ID, VOI.getPropDefault(VOI.ID), ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, VOI.getPropDefault(VOI.V) ...
		);
	 
	for prop = 1:1:VOI.getPropNumber()
		if VOI.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':VOI']);
			% voi.memorize(prop);
			% warning(warning_backup)
		elseif VOI.getPropCategory(prop) == Category.EVANESCENT && voi.getPropFormat(prop) == Format.HANDLE
			voi.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:VOI');
			delete(ancestor(voi.get(prop), 'figure'))
			warning(warning_backup)
		else
			voi.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	voi_copy = voi.copy();
	 
	for prop = 1:1:VOI.getPropNumber()
		value = voi.getr(prop);
		value_copy = voi_copy.getr(prop);
		switch VOI.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					'VOI.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
							'VOI.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
							'VOI.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						voi_copy.isLocked(prop) == voi.isLocked(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						voi_copy.isChecked(prop) == voi.isChecked(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						voi_copy.getPropSeed(prop) == voi.getPropSeed(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	voi_0 = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, VOI.getPropDefault(VOI.TEMPLATE), ...
		VOI.ID, VOI.getPropDefault(VOI.ID), ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, VOI.getPropDefault(VOI.V) ...
		);
	 
	voi = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, voi_0.getCallback(4), ..., ...
		VOI.ID, voi_0.getCallback(5), ..., ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, voi_0.getCallback(9) ... ...
		);
	 
	voi_copy = voi.copy();
	voi_0_copy = voi_copy.getr('ID').get('EL');
	 
	for prop = 1:1:VOI.getPropNumber()
		value = voi.getr(prop);
		value_copy = voi_copy.getr(prop);
		switch VOI.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					'VOI.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
							'VOI.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
							'VOI.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == voi_0.getCallback(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The callback should be obtained from VOI.getCallback().' ...
						)
					assert( ...
						value_copy == voi_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The callback should be obtained from VOI.getCallback().' ...
						)
				end
	 
					assert( ...
						voi_copy.isLocked(prop) == voi.isLocked(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						voi_copy.isChecked(prop) == voi.isChecked(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						voi_copy.getPropSeed(prop) == voi.getPropSeed(prop), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi_template = VOI();
	voi = VOI('TEMPLATE', voi_template);
	 
	for prop = 1:1:VOI.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(VOI.getPropTag(prop));
		switch VOI.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == VOI.TEMPLATE
					assert( ...
						isa(voi.getr(prop), 'VOI'), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI TEMPLATE does not work. VOI.getr(''TEMPLATE'') should be a VOI element.' ...
						)
					assert( ...
						isa(voi_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						'VOI TEMPLATE does not work. VOI_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(voi.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI TEMPLATE does not work. VOI.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						voi.getr(prop).get('EL') == voi_template && voi.getr(prop).get('PROP') == prop && strcmp(voi.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI TEMPLATE does not work. VOI.getr(' TAG ') should be a Callback to voi_template.' TAG '.'] ...
						)
					assert( ...
						isa(voi_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
						['VOI TEMPLATE does not work. VOI_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(voi.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI TEMPLATE does not work. VOI.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(voi_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
					['VOI TEMPLATE does not work. VOI_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, VOI.getPropDefault(VOI.TEMPLATE), ...
		VOI.ID, VOI.getPropDefault(VOI.ID), ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, VOI.getPropDefault(VOI.V) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'voi_to_be_erased.b2'];
	 
	Element.save(voi, filename)
	 
	voi_loaded = Element.load(filename);
	 
	assert( ...
		isequal(voi.copy(), voi_loaded), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.save(voi) and/or VOI.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	voi = VOI( ...
		VOI.ELCLASS, VOI.getNoValue(), ...
		VOI.NAME, VOI.getNoValue(), ...
		VOI.DESCRIPTION, VOI.getNoValue(), ...
		VOI.TEMPLATE, VOI.getPropDefault(VOI.TEMPLATE), ...
		VOI.ID, VOI.getPropDefault(VOI.ID), ...
		VOI.LABEL, VOI.getPropDefault(VOI.LABEL), ...
		VOI.NOTES, VOI.getPropDefault(VOI.NOTES), ...
		VOI.TOSTRING, VOI.getNoValue(), ...
		VOI.V, VOI.getPropDefault(VOI.V) ...
		);
	 
	[json, struct, el_list] = encodeJSON(voi);
	[voi_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(voi_dec ~= voi, ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		'VOI.encodeJSON() or VOI.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) VOI.getPropFormat(prop), num2cell(VOI.getProps())) == Format.HANDLE) && all(cellfun(@(prop) VOI.getPropFormat(prop), num2cell(VOI.getProps())) == Format.NET)
		assert(isequal(voi_dec, voi), ...
			[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
			'VOI.encodeJSON() or VOI.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':VOI:' BRAPH2.FAIL_TEST], ...
		[' When testing VOI no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

