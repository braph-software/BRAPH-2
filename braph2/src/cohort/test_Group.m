%TEST_GROUP

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	gr = Group();
	 
	% get('ELCLASS')
	if isa(Group, 'ConcreteElement')
		assert(strcmp(Group().get('ELCLASS'), 'Group'), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group().get(''ELCLASS'') should return ''Group''.')
	end
	 
	% getClass
	assert(strcmp(Group.getClass(), 'Group'), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.getClass() should return ''Group''.')
	assert(strcmp(gr.getClass(), 'Group'), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'gr.getClass() should return ''Group''.')
	assert(strcmp(Element.getClass(gr), 'Group'), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(gr) should return ''Group''.')
	assert(strcmp(Element.getClass('Group'), 'Group'), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''Group'') should return ''Group''.')
	 
	% getSubclasses()
	assert(isequal(Group.getSubclasses(), subclasses('Group', [], [], true)), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.getSubclasses() should return the same result as subclasses(''Group'', [], [], true).')
	assert(isequal(gr.getSubclasses(), subclasses('Group', [], [], true)), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''Group'', [], [], true).')
	assert(isequal(Element.getSubclasses(gr), subclasses('Group', [], [], true)), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(gr) should return the same result as subclasses(''Group'', [], [], true).')
	assert(isequal(Element.getSubclasses('Group'), subclasses('Group', [], [], true)), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''Group'') should return the same result as subclasses(''Group'', [], [], true).')
	 
	% getProps()
	assert(isempty(Group.getProps()) || isequal(Group.getProps(), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.getProps() should return a row vector [1:1:N].')
	assert(isempty(Group.getProps()) || isequal(gr.getProps(), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'gr.getProps() should return a row vector [1:1:N].')
	assert(isempty(Group.getProps()) || isequal(Element.getProps(gr), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(gr) should return a row vector [1:1:N].')
	assert(isempty(Group.getProps()) || isequal(Element.getProps('Group'), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Group'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) Group.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Group.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.getProps(category) does not work.')
	tmp = cellfun(@(category) gr.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Group.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'gr.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(gr, category), categories, 'UniformOutput', false);
	assert(isempty(Group.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(gr, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('Group', category), categories, 'UniformOutput', false);
	assert(isempty(Group.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Group.getProps())), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Group'', category) does not work.')
	 
	% getPropNumber()
	assert(Group.getPropNumber() == length(Group.getProps()), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.getPropNumber() should return the number of properties.')
	assert(gr.getPropNumber() == length(Group.getProps()), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'gr.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(gr) == length(Group.getProps()), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(gr) should return the number of properties.')
	assert(Element.getPropNumber('Group') == length(Group.getProps()), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Group'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) Group.getPropNumber(category), categories)) == Group.getPropNumber(), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) gr.getPropNumber(category), categories)) == Group.getPropNumber(), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'gr.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(gr, category), categories)) == Group.getPropNumber(), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(gr, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('Group', category), categories)) == Group.getPropNumber(), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Group'', category) does not work.')
	 
	% existsProp(prop)
	assert(~Group.existsProp(NaN), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.existsProp(prop) does not work.')
	assert(~gr.existsProp(NaN), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'gr.existsProp(prop) does not work.')
	assert(~Element.existsProp(gr, NaN), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(gr, prop) does not work.')
	assert(~Element.existsProp('Group', NaN), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''Group'', prop) does not work.')
	 
	assert_with_error('Group.existsProp(NaN)', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], gr)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], gr)
	assert_with_error('Element.existsProp(''Group'', NaN)', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Group.getPropNumber()
		assert(Group.existsProp(prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.existsProp(prop) does not work.')
		assert(gr.existsProp(prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.existsProp(prop) does not work.')
		assert(Element.existsProp(gr, prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(gr, prop) does not work.')
		assert(Element.existsProp('Group', prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''Group'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~Group.existsTag(''), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.existsTag(tag) does not work.')
	assert(~gr.existsTag(''), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'gr.existsTag(tag) does not work.')
	assert(~Element.existsTag(gr, ''), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(gr, tag) does not work.')
	assert(~Element.existsTag('Group', ''), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''Group'', tag) does not work.')
	 
	assert_with_error('Group.existsTag('''')', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], gr)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], gr)
	assert_with_error('Element.existsTag(''Group'', '''')', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
		assert(Group.existsTag(tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.existsTag(tag) does not work.')
		assert(gr.existsTag(tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.existsTag(tag) does not work.')
		assert(Element.existsTag(gr, tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(gr, tga) does not work.')
		assert(Element.existsTag('Group', tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''Group'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:Group.getPropNumber()
		assert(Group.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropProp(prop) does not work.')
		assert(gr.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropProp(prop) does not work.')
		assert(Element.getPropProp(gr, prop) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(gr, prop) does not work.')
		assert(Element.getPropProp('Group', prop) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Group'', prop) does not work.')
	 
		tag = gr.getPropTag(prop);
		assert(Group.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropProp(tag) does not work.')
		assert(gr.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropProp(tag) does not work.')
		assert(Element.getPropProp(gr, tag) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(gr, tag) does not work.')
		assert(Element.getPropProp('Group', prop) == prop, ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Group'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		assert(strcmp(Group.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropTag(prop) does not work.')
		assert(strcmp(gr.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(gr, prop), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(gr, prop) does not work.')
		assert(strcmp(Element.getPropTag('Group', prop), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Group'', prop) does not work.')
	 
		assert(strcmp(Group.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropTag(tag) does not work.')
		assert(strcmp(gr.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(gr, tag), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(gr, tag) does not work.')
		assert(strcmp(Element.getPropTag('Group', prop), tag), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Group'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		assert(Category.existsCategory(Group.getPropCategory(prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(gr.getPropCategory(prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gr, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(gr, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gr, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Group'', prop) does not work.')
	 
		assert(Category.existsCategory(Group.getPropCategory(tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(gr.getPropCategory(tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gr, tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(gr, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gr, tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Group'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		assert(Format.existsFormat(Group.getPropFormat(prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(gr.getPropFormat(prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gr, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(gr, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gr, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Group'', prop) does not work.')
	 
		assert(Format.existsFormat(Group.getPropFormat(tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(gr.getPropFormat(tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gr, tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(gr, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gr, tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Group'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		assert(ischar(Group.getPropDescription(prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropDescription(prop) does not work.')
		assert(ischar(gr.getPropDescription(prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(gr, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(gr, prop) does not work.')
		assert(ischar(Element.getPropDescription(gr, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Group'', prop) does not work.')
	 
		assert(ischar(Group.getPropDescription(tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.getPropDescription(tag) does not work.')
		assert(ischar(gr.getPropDescription(tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(gr, tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(gr, tag) does not work.')
		assert(ischar(Element.getPropDescription(gr, tag)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Group'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		settings = Group.getPropSettings(prop);
		settings = gr.getPropSettings(prop);
		settings = Element.getPropSettings(gr, prop);
		settings = Element.getPropSettings('Group', prop);
	 
		settings = Group.getPropSettings(tag);
		settings = gr.getPropSettings(tag);
		settings = Element.getPropSettings(gr, tag);
		settings = Element.getPropSettings('Group', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		default = Group.getPropDefault(prop);
		default = gr.getPropDefault(prop);
		default = Element.getPropDefault(gr, prop);
		default = Element.getPropDefault('Group', prop);
	 
		default = Group.getPropDefault(tag);
		default = gr.getPropDefault(tag);
		default = Element.getPropDefault(gr, tag);
		default = Element.getPropDefault('Group', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		conditioned_default = Group.getPropDefaultConditioned(prop);
		conditioned_default = gr.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(gr, prop);
		conditioned_default = Element.getPropDefaultConditioned('Group', prop);
	 
		conditioned_default = Group.getPropDefaultConditioned(tag);
		conditioned_default = gr.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(gr, tag);
		conditioned_default = Element.getPropDefaultConditioned('Group', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:Group.getPropNumber()
		tag = gr.getPropTag(prop);
	 
		assert(~Group.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.checkProp(prop, value) does not work.')
		assert(~gr.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(gr, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gr, prop, value) does not work.')
		assert(~Element.checkProp('Group', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Group'', prop, value) does not work.')
	 
		assert_with_error('Group.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], prop, gr)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], prop, gr)
		assert_with_error('Element.checkProp(''Group'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~Group.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.checkProp(tag, value) does not work.')
		assert(~gr.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(gr, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gr, tag, value) does not work.')
		assert(~Element.checkProp('Group', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Group'', tag, value) does not work.')
	 
		assert_with_error('Group.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], tag, gr)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], tag, gr)
		assert_with_error('Element.checkProp(''Group'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Group:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(Group.checkProp(prop, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.checkProp(prop, <conditioned default value>) does not work.')
		assert(gr.checkProp(prop, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(gr, prop, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gr, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('Group', prop, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Group'', prop, <conditioned default value>) does not work.')
	 
		assert(Group.checkProp(tag, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.checkProp(tag, <conditioned default value>) does not work.')
		assert(gr.checkProp(tag, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'gr.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(gr, tag, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gr, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('Group', tag, Element.getPropDefaultConditioned(Group, prop)), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Group'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, Group.getPropDefault(Group.TEMPLATE), ...
		Group.ID, Group.getPropDefault(Group.ID), ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
		Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT), ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	for prop = 1:1:Group.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Group.getPropTag(prop));
		switch Group.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					gr.getr(prop) == Group.getNoValue(), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Being a ' Group.getCategoryName(Group.getPropCategory(prop)) ', Group.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Group.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					gr.getr(TAG) == Group.getNoValue(), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Being a ' Group.getCategoryName(Group.getPropCategory(prop)) ', Group.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Group.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(gr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(gr.getPropSettings(prop))
					assert( ...
						gr.checkFormat(gr.getPropFormat(prop), gr.get(prop)), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						gr.checkFormat(gr.getPropFormat(prop), gr.get(prop), gr.getPropSettings(prop)), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					gr.getr(prop) == Group.getNoValue(), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Being a ' Group.getCategoryName(Group.getPropCategory(prop)) ', Group.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Group.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					gr.getr(TAG) == Group.getNoValue(), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Being a ' Group.getCategoryName(Group.getPropCategory(prop)) ', Group.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Group.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':Group']);
				assert( ...
					~isa(gr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(gr.getPropSettings(prop))
					assert( ...
						gr.checkFormat(gr.getPropFormat(prop), gr.get(prop)), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						gr.checkFormat(gr.getPropFormat(prop), gr.get(prop), gr.getPropSettings(prop)), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(gr.getr(prop), Group.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by Group.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Group.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(gr.getr(TAG), Group.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' TAG ') must be inizialized to its default value ' ...
					'given by Group.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Group.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, Group.getPropDefault(Group.TEMPLATE), ...
		Group.ID, Group.getPropDefault(Group.ID), ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
		Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT), ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	for prop = 1:1:Group.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Group.getPropTag(prop));
		switch Group.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(gr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(gr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(gr.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(gr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					gr.checkFormat(gr.getPropFormat(prop), gr.getr(prop),gr.getPropSettings(prop)), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':Group']);
				assert( ...
					~isa(gr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(gr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':Group']);
	% 			assert( ...
	% 				~isa(gr.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
	% 				['Group.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(gr.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
	% 				['Group.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				gr.checkFormat(gr.getPropFormat(prop), gr.getr(prop),gr.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
	% 				['Group.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':Group']);
				assert( ...
					~isa(gr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(gr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(gr.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(gr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					gr.checkFormat(gr.getPropFormat(prop), gr.getr(prop),gr.getPropSettings(prop)), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if gr.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:Group');
					delete(ancestor(gr.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(Group.getProps(Category.RESULT))
		for prop = 1:1:Group.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch Group.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						gr.isLocked(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~gr.isLocked(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr = Group();
	 
	for prop = 1:1:Group.getPropNumber()
		TAG = upper(Group.getPropTag(prop));
		assert( ...
			~gr.isLocked(prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			['Group.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~gr.isLocked(TAG), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			['Group.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	gr.lock()
	 
	for prop = 1:1:Group.getPropNumber()
		switch Group.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					gr.isLocked(prop), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~gr.isLocked(prop), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr = Group();
	 
	warning_backup = warning('off', 'BRAPH2:Group');
	for prop = 1:1:Group.getPropNumber()
		gr.lock(prop)
		switch Group.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					gr.isLocked(prop), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~gr.isLocked(prop), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr = Group();
	 
	for prop = 1:1:Group.getPropNumber()
		TAG = upper(Group.getPropTag(prop));
		assert( ...
			gr.isChecked(prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			['Group.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			gr.isChecked(TAG), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			['Group.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	gr.unchecked()
	 
	for prop = 1:1:Group.getPropNumber()
		assert( ...
			~gr.isChecked(prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			['Group.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	gr.checked()
	 
	for prop = 1:1:Group.getPropNumber()
		assert( ...
			gr.isChecked(prop), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			['Group.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic Group
	gr_0 = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, Group.getPropDefault(Group.TEMPLATE), ...
		Group.ID, Group.getPropDefault(Group.ID), ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
		Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT), ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	% Group with 1st callbacks
	gr_1 = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, gr_0.getCallback(4), ..., ...
		Group.ID, gr_0.getCallback(5), ..., ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, gr_0.getCallback(9), ..., ...
		Group.SUB_DICT, gr_0.getCallback(10), ..., ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	prop_number = Group.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Group.getPropTag(prop));
		switch Group.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gr_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gr_1.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gr_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Group with 2nd callbacks
	gr_2 = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, gr_1.getCallback(4), ..., ...
		Group.ID, gr_1.getCallback(5), ..., ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, gr_1.getCallback(9), ..., ...
		Group.SUB_DICT, gr_1.getCallback(10), ..., ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	prop_number = Group.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Group.getPropTag(prop));
		switch Group.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gr_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gr_2.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gr_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Group with 3rd callbacks
	gr_3 = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, gr_2.getCallback(4), ..., ...
		Group.ID, gr_2.getCallback(5), ..., ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, gr_2.getCallback(9), ..., ...
		Group.SUB_DICT, gr_2.getCallback(10), ..., ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	prop_number = Group.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Group.getPropTag(prop));
		switch Group.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gr_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gr_3.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gr_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	gr = Group();
	 
	gr_copy = gr.copy();
	 
	assert(gr_copy ~= gr, ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(gr_copy, gr), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:Group.getPropNumber()
		value = gr.getr(prop);
		value_copy = gr_copy.getr(prop);
		switch Group.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					'Group.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
							'Group.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
							'Group.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					gr_copy.isLocked(prop) == gr.isLocked(prop), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					'Group.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					gr_copy.isChecked(prop) == gr.isChecked(prop), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					'Group.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					gr_copy.getPropSeed(prop) == gr.getPropSeed(prop), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					'Group.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	gr = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, Group.getPropDefault(Group.TEMPLATE), ...
		Group.ID, Group.getPropDefault(Group.ID), ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
		Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT), ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	for prop = 1:1:Group.getPropNumber()
		if Group.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':Group']);
			% gr.memorize(prop);
			% warning(warning_backup)
		elseif Group.getPropCategory(prop) == Category.EVANESCENT && gr.getPropFormat(prop) == Format.HANDLE
			gr.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:Group');
			delete(ancestor(gr.get(prop), 'figure'))
			warning(warning_backup)
		else
			gr.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	gr_copy = gr.copy();
	 
	for prop = 1:1:Group.getPropNumber()
		value = gr.getr(prop);
		value_copy = gr_copy.getr(prop);
		switch Group.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					'Group.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
							'Group.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
							'Group.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						gr_copy.isLocked(prop) == gr.isLocked(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gr_copy.isChecked(prop) == gr.isChecked(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gr_copy.getPropSeed(prop) == gr.getPropSeed(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	gr_0 = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, Group.getPropDefault(Group.TEMPLATE), ...
		Group.ID, Group.getPropDefault(Group.ID), ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
		Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT), ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	gr = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, gr_0.getCallback(4), ..., ...
		Group.ID, gr_0.getCallback(5), ..., ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, gr_0.getCallback(9), ..., ...
		Group.SUB_DICT, gr_0.getCallback(10), ..., ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	gr_copy = gr.copy();
	gr_0_copy = gr_copy.getr('ID').get('EL');
	 
	for prop = 1:1:Group.getPropNumber()
		value = gr.getr(prop);
		value_copy = gr_copy.getr(prop);
		switch Group.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					'Group.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
							'Group.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
							'Group.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == gr_0.getCallback(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The callback should be obtained from Group.getCallback().' ...
						)
					assert( ...
						value_copy == gr_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The callback should be obtained from Group.getCallback().' ...
						)
				end
	 
					assert( ...
						gr_copy.isLocked(prop) == gr.isLocked(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gr_copy.isChecked(prop) == gr.isChecked(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gr_copy.getPropSeed(prop) == gr.getPropSeed(prop), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr_template = Group();
	gr = Group('TEMPLATE', gr_template);
	 
	for prop = 1:1:Group.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Group.getPropTag(prop));
		switch Group.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == Group.TEMPLATE
					assert( ...
						isa(gr.getr(prop), 'Group'), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group TEMPLATE does not work. Group.getr(''TEMPLATE'') should be a Group element.' ...
						)
					assert( ...
						isa(gr_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						'Group TEMPLATE does not work. Group_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(gr.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group TEMPLATE does not work. Group.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						gr.getr(prop).get('EL') == gr_template && gr.getr(prop).get('PROP') == prop && strcmp(gr.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group TEMPLATE does not work. Group.getr(' TAG ') should be a Callback to gr_template.' TAG '.'] ...
						)
					assert( ...
						isa(gr_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
						['Group TEMPLATE does not work. Group_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(gr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group TEMPLATE does not work. Group.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(gr_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
					['Group TEMPLATE does not work. Group_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, Group.getPropDefault(Group.TEMPLATE), ...
		Group.ID, Group.getPropDefault(Group.ID), ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
		Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT), ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'group_to_be_erased.b2'];
	 
	Element.save(gr, filename)
	 
	gr_loaded = Element.load(filename);
	 
	assert( ...
		isequal(gr.copy(), gr_loaded), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.save(gr) and/or Group.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gr = Group( ...
		Group.ELCLASS, Group.getNoValue(), ...
		Group.NAME, Group.getNoValue(), ...
		Group.DESCRIPTION, Group.getNoValue(), ...
		Group.TEMPLATE, Group.getPropDefault(Group.TEMPLATE), ...
		Group.ID, Group.getPropDefault(Group.ID), ...
		Group.LABEL, Group.getPropDefault(Group.LABEL), ...
		Group.NOTES, Group.getPropDefault(Group.NOTES), ...
		Group.TOSTRING, Group.getNoValue(), ...
		Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
		Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT), ...
		Group.VOIS, Group.getNoValue(), ...
		Group.COVARIATES, Group.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(gr);
	[gr_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(gr_dec ~= gr, ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		'Group.encodeJSON() or Group.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) Group.getPropFormat(prop), num2cell(Group.getProps())) == Format.HANDLE) && all(cellfun(@(prop) Group.getPropFormat(prop), num2cell(Group.getProps())) == Format.NET)
		assert(isequal(gr_dec, gr), ...
			[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
			'Group.encodeJSON() or Group.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Instantiation
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	sub1 = Subject('ID','id1', 'LABEL', 'label1', 'NOTES', 'notes1');
	sub2 = Subject('ID','id2', 'LABEL', 'label2', 'NOTES', 'notes2');
	sub3 = Subject('ID','id3', 'LABEL', 'label3', 'NOTES', 'notes3');
	
	subject_dict = IndexedDictionary( ...
	    'ID', 'subject_idict', ...
	    'IT_CLASS', 'Subject', ...
	    'IT_KEY', IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
	    'IT_LIST', {sub1, sub2, sub3} ...
	    );
	
	group = Group('ID', 'id', 'LABEL', 'label', 'NOTES', 'notes', 'SUB_DICT', subject_dict);
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':Group:' BRAPH2.FAIL_TEST], ...
		[' When testing Group no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

