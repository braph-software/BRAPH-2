%TEST_SUBJECT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	sub = Subject();
	 
	% get('ELCLASS')
	if isa(Subject, 'ConcreteElement')
		assert(strcmp(Subject().get('ELCLASS'), 'Subject'), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject().get(''ELCLASS'') should return ''Subject''.')
	end
	 
	% getBuild()
	assert(Subject.getBuild() == 1 && Subject.getBuild() > 0, ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.getBuild() should return the Subject build number.')
	assert(sub.getBuild() == 1 && sub.getBuild() > 0 , ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.getBuild() should return the Subject build number.')
	assert(Element.getBuild(sub) == 1 && Element.getBuild(sub) > 0, ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(sub) should return the Subject build number.')
	assert(Element.getBuild('Subject') == 1 && Element.getBuild('Subject') > 0, ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''Subject'') should return the Subject build number.')
	 
	% getClass()
	assert(strcmp(Subject.getClass(), 'Subject'), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.getClass() should return ''Subject''.')
	assert(strcmp(sub.getClass(), 'Subject'), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.getClass() should return ''Subject''.')
	assert(strcmp(Element.getClass(sub), 'Subject'), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(sub) should return ''Subject''.')
	assert(strcmp(Element.getClass('Subject'), 'Subject'), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''Subject'') should return ''Subject''.')
	 
	% getSubclasses()
	assert(isequal(Subject.getSubclasses(), subclasses('Subject', [], [], true)), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.getSubclasses() should return the same result as subclasses(''Subject'', [], [], true).')
	assert(isequal(sub.getSubclasses(), subclasses('Subject', [], [], true)), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''Subject'', [], [], true).')
	assert(isequal(Element.getSubclasses(sub), subclasses('Subject', [], [], true)), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(sub) should return the same result as subclasses(''Subject'', [], [], true).')
	assert(isequal(Element.getSubclasses('Subject'), subclasses('Subject', [], [], true)), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''Subject'') should return the same result as subclasses(''Subject'', [], [], true).')
	 
	% getProps()
	assert(isempty(Subject.getProps()) || isequal(Subject.getProps(), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.getProps() should return a row vector [1:1:N].')
	assert(isempty(Subject.getProps()) || isequal(sub.getProps(), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.getProps() should return a row vector [1:1:N].')
	assert(isempty(Subject.getProps()) || isequal(Element.getProps(sub), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sub) should return a row vector [1:1:N].')
	assert(isempty(Subject.getProps()) || isequal(Element.getProps('Subject'), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Subject'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) Subject.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Subject.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.getProps(category) does not work.')
	tmp = cellfun(@(category) sub.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Subject.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(sub, category), categories, 'UniformOutput', false);
	assert(isempty(Subject.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sub, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('Subject', category), categories, 'UniformOutput', false);
	assert(isempty(Subject.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Subject.getProps())), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Subject'', category) does not work.')
	 
	% getPropNumber()
	assert(Subject.getPropNumber() == length(Subject.getProps()), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.getPropNumber() should return the number of properties.')
	assert(sub.getPropNumber() == length(Subject.getProps()), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(sub) == length(Subject.getProps()), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sub) should return the number of properties.')
	assert(Element.getPropNumber('Subject') == length(Subject.getProps()), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Subject'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) Subject.getPropNumber(category), categories)) == Subject.getPropNumber(), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) sub.getPropNumber(category), categories)) == Subject.getPropNumber(), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(sub, category), categories)) == Subject.getPropNumber(), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sub, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('Subject', category), categories)) == Subject.getPropNumber(), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Subject'', category) does not work.')
	 
	% existsProp(prop)
	assert(~Subject.existsProp(NaN), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.existsProp(prop) does not work.')
	assert(~sub.existsProp(NaN), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.existsProp(prop) does not work.')
	assert(~Element.existsProp(sub, NaN), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(sub, prop) does not work.')
	assert(~Element.existsProp('Subject', NaN), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''Subject'', prop) does not work.')
	 
	assert_with_error('Subject.existsProp(NaN)', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], sub)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], sub)
	assert_with_error('Element.existsProp(''Subject'', NaN)', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Subject.getPropNumber()
		assert(Subject.existsProp(prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.existsProp(prop) does not work.')
		assert(sub.existsProp(prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.existsProp(prop) does not work.')
		assert(Element.existsProp(sub, prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(sub, prop) does not work.')
		assert(Element.existsProp('Subject', prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''Subject'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~Subject.existsTag(''), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.existsTag(tag) does not work.')
	assert(~sub.existsTag(''), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'sub.existsTag(tag) does not work.')
	assert(~Element.existsTag(sub, ''), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(sub, tag) does not work.')
	assert(~Element.existsTag('Subject', ''), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''Subject'', tag) does not work.')
	 
	assert_with_error('Subject.existsTag('''')', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], sub)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], sub)
	assert_with_error('Element.existsTag(''Subject'', '''')', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
		assert(Subject.existsTag(tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.existsTag(tag) does not work.')
		assert(sub.existsTag(tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.existsTag(tag) does not work.')
		assert(Element.existsTag(sub, tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(sub, tga) does not work.')
		assert(Element.existsTag('Subject', tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''Subject'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:Subject.getPropNumber()
		assert(Subject.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropProp(prop) does not work.')
		assert(sub.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropProp(prop) does not work.')
		assert(Element.getPropProp(sub, prop) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sub, prop) does not work.')
		assert(Element.getPropProp('Subject', prop) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Subject'', prop) does not work.')
	 
		tag = sub.getPropTag(prop);
		assert(Subject.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropProp(tag) does not work.')
		assert(sub.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropProp(tag) does not work.')
		assert(Element.getPropProp(sub, tag) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sub, tag) does not work.')
		assert(Element.getPropProp('Subject', prop) == prop, ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Subject'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		assert(strcmp(Subject.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropTag(prop) does not work.')
		assert(strcmp(sub.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(sub, prop), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sub, prop) does not work.')
		assert(strcmp(Element.getPropTag('Subject', prop), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Subject'', prop) does not work.')
	 
		assert(strcmp(Subject.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropTag(tag) does not work.')
		assert(strcmp(sub.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(sub, tag), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sub, tag) does not work.')
		assert(strcmp(Element.getPropTag('Subject', prop), tag), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Subject'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		assert(Category.existsCategory(Subject.getPropCategory(prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(sub.getPropCategory(prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sub, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sub, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sub, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Subject'', prop) does not work.')
	 
		assert(Category.existsCategory(Subject.getPropCategory(tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(sub.getPropCategory(tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sub, tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sub, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sub, tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Subject'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		assert(Format.existsFormat(Subject.getPropFormat(prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(sub.getPropFormat(prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sub, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sub, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sub, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Subject'', prop) does not work.')
	 
		assert(Format.existsFormat(Subject.getPropFormat(tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(sub.getPropFormat(tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sub, tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sub, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sub, tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Subject'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		assert(ischar(Subject.getPropDescription(prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropDescription(prop) does not work.')
		assert(ischar(sub.getPropDescription(prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(sub, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sub, prop) does not work.')
		assert(ischar(Element.getPropDescription(sub, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Subject'', prop) does not work.')
	 
		assert(ischar(Subject.getPropDescription(tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.getPropDescription(tag) does not work.')
		assert(ischar(sub.getPropDescription(tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(sub, tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sub, tag) does not work.')
		assert(ischar(Element.getPropDescription(sub, tag)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Subject'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		settings = Subject.getPropSettings(prop);
		settings = sub.getPropSettings(prop);
		settings = Element.getPropSettings(sub, prop);
		settings = Element.getPropSettings('Subject', prop);
	 
		settings = Subject.getPropSettings(tag);
		settings = sub.getPropSettings(tag);
		settings = Element.getPropSettings(sub, tag);
		settings = Element.getPropSettings('Subject', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		default = Subject.getPropDefault(prop);
		default = sub.getPropDefault(prop);
		default = Element.getPropDefault(sub, prop);
		default = Element.getPropDefault('Subject', prop);
	 
		default = Subject.getPropDefault(tag);
		default = sub.getPropDefault(tag);
		default = Element.getPropDefault(sub, tag);
		default = Element.getPropDefault('Subject', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		conditioned_default = Subject.getPropDefaultConditioned(prop);
		conditioned_default = sub.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(sub, prop);
		conditioned_default = Element.getPropDefaultConditioned('Subject', prop);
	 
		conditioned_default = Subject.getPropDefaultConditioned(tag);
		conditioned_default = sub.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(sub, tag);
		conditioned_default = Element.getPropDefaultConditioned('Subject', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:Subject.getPropNumber()
		tag = sub.getPropTag(prop);
	 
		assert(~Subject.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.checkProp(prop, value) does not work.')
		assert(~sub.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(sub, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sub, prop, value) does not work.')
		assert(~Element.checkProp('Subject', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Subject'', prop, value) does not work.')
	 
		assert_with_error('Subject.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], prop, sub)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], prop, sub)
		assert_with_error('Element.checkProp(''Subject'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~Subject.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.checkProp(tag, value) does not work.')
		assert(~sub.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(sub, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sub, tag, value) does not work.')
		assert(~Element.checkProp('Subject', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Subject'', tag, value) does not work.')
	 
		assert_with_error('Subject.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], tag, sub)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], tag, sub)
		assert_with_error('Element.checkProp(''Subject'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Subject:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(Subject.checkProp(prop, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.checkProp(prop, <conditioned default value>) does not work.')
		assert(sub.checkProp(prop, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(sub, prop, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sub, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('Subject', prop, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Subject'', prop, <conditioned default value>) does not work.')
	 
		assert(Subject.checkProp(tag, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.checkProp(tag, <conditioned default value>) does not work.')
		assert(sub.checkProp(tag, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'sub.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(sub, tag, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sub, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('Subject', tag, Element.getPropDefaultConditioned(Subject, prop)), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Subject'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, Subject.getPropDefault(Subject.TEMPLATE), ...
		Subject.ID, Subject.getPropDefault(Subject.ID), ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, Subject.getPropDefault(Subject.VOI_DICT) ...
		);
	 
	for prop = 1:1:Subject.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Subject.getPropTag(prop));
		switch Subject.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					sub.getr(prop) == Subject.getNoValue(), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Being a ' Subject.getCategoryName(Subject.getPropCategory(prop)) ', Subject.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Subject.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sub.getr(TAG) == Subject.getNoValue(), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Being a ' Subject.getCategoryName(Subject.getPropCategory(prop)) ', Subject.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Subject.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(sub.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sub.getPropSettings(prop))
					assert( ...
						sub.checkFormat(sub.getPropFormat(prop), sub.get(prop)), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sub.checkFormat(sub.getPropFormat(prop), sub.get(prop), sub.getPropSettings(prop)), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					sub.getr(prop) == Subject.getNoValue(), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Being a ' Subject.getCategoryName(Subject.getPropCategory(prop)) ', Subject.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Subject.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sub.getr(TAG) == Subject.getNoValue(), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Being a ' Subject.getCategoryName(Subject.getPropCategory(prop)) ', Subject.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Subject.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':Subject']);
				assert( ...
					~isa(sub.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sub.getPropSettings(prop))
					assert( ...
						sub.checkFormat(sub.getPropFormat(prop), sub.get(prop)), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sub.checkFormat(sub.getPropFormat(prop), sub.get(prop), sub.getPropSettings(prop)), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(sub.getr(prop), Subject.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by Subject.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Subject.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(sub.getr(TAG), Subject.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' TAG ') must be inizialized to its default value ' ...
					'given by Subject.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Subject.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, Subject.getPropDefault(Subject.TEMPLATE), ...
		Subject.ID, Subject.getPropDefault(Subject.ID), ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, Subject.getPropDefault(Subject.VOI_DICT) ...
		);
	 
	for prop = 1:1:Subject.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Subject.getPropTag(prop));
		switch Subject.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(sub.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sub.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sub.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sub.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sub.checkFormat(sub.getPropFormat(prop), sub.getr(prop),sub.getPropSettings(prop)), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':Subject']);
				assert( ...
					~isa(sub.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sub.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':Subject']);
	% 			assert( ...
	% 				~isa(sub.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
	% 				['Subject.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(sub.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
	% 				['Subject.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				sub.checkFormat(sub.getPropFormat(prop), sub.getr(prop),sub.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
	% 				['Subject.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':Subject']);
				assert( ...
					~isa(sub.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(sub.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sub.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sub.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sub.checkFormat(sub.getPropFormat(prop), sub.getr(prop),sub.getPropSettings(prop)), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if sub.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:Subject');
					delete(ancestor(sub.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(Subject.getProps(Category.RESULT))
		for prop = 1:1:Subject.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch Subject.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						sub.isLocked(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~sub.isLocked(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub = Subject();
	 
	for prop = 1:1:Subject.getPropNumber()
		TAG = upper(Subject.getPropTag(prop));
		assert( ...
			~sub.isLocked(prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			['Subject.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~sub.isLocked(TAG), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			['Subject.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	sub.lock()
	 
	for prop = 1:1:Subject.getPropNumber()
		switch Subject.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					sub.isLocked(prop), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~sub.isLocked(prop), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub = Subject();
	 
	warning_backup = warning('off', 'BRAPH2:Subject');
	for prop = 1:1:Subject.getPropNumber()
		sub.lock(prop)
		switch Subject.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					sub.isLocked(prop), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~sub.isLocked(prop), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub = Subject();
	 
	for prop = 1:1:Subject.getPropNumber()
		TAG = upper(Subject.getPropTag(prop));
		assert( ...
			sub.isChecked(prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			['Subject.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			sub.isChecked(TAG), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			['Subject.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	sub.unchecked()
	 
	for prop = 1:1:Subject.getPropNumber()
		assert( ...
			~sub.isChecked(prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			['Subject.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	sub.checked()
	 
	for prop = 1:1:Subject.getPropNumber()
		assert( ...
			sub.isChecked(prop), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			['Subject.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic Subject
	sub_0 = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, Subject.getPropDefault(Subject.TEMPLATE), ...
		Subject.ID, Subject.getPropDefault(Subject.ID), ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, Subject.getPropDefault(Subject.VOI_DICT) ...
		);
	 
	% Subject with 1st callbacks
	sub_1 = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, sub_0.getCallback(4), ..., ...
		Subject.ID, sub_0.getCallback(5), ..., ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, sub_0.getCallback(9) ... ...
		);
	 
	prop_number = Subject.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Subject.getPropTag(prop));
		switch Subject.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sub_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sub_1.get(prop), sub_0.get(prop)) && ~isa(sub_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sub_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Subject with 2nd callbacks
	sub_2 = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, sub_1.getCallback(4), ..., ...
		Subject.ID, sub_1.getCallback(5), ..., ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, sub_1.getCallback(9) ... ...
		);
	 
	prop_number = Subject.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Subject.getPropTag(prop));
		switch Subject.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sub_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sub_2.get(prop), sub_0.get(prop)) && ~isa(sub_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sub_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Subject with 3rd callbacks
	sub_3 = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, sub_2.getCallback(4), ..., ...
		Subject.ID, sub_2.getCallback(5), ..., ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, sub_2.getCallback(9) ... ...
		);
	 
	prop_number = Subject.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Subject.getPropTag(prop));
		switch Subject.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sub_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sub_3.get(prop), sub_0.get(prop)) && ~isa(sub_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sub_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	sub = Subject();
	 
	sub_copy = sub.copy();
	 
	assert(sub_copy ~= sub, ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(sub_copy, sub), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:Subject.getPropNumber()
		value = sub.getr(prop);
		value_copy = sub_copy.getr(prop);
		switch Subject.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					'Subject.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
							'Subject.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
							'Subject.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					sub_copy.isLocked(prop) == sub.isLocked(prop), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					'Subject.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sub_copy.isChecked(prop) == sub.isChecked(prop), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					'Subject.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sub_copy.getPropSeed(prop) == sub.getPropSeed(prop), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					'Subject.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	sub = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, Subject.getPropDefault(Subject.TEMPLATE), ...
		Subject.ID, Subject.getPropDefault(Subject.ID), ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, Subject.getPropDefault(Subject.VOI_DICT) ...
		);
	 
	for prop = 1:1:Subject.getPropNumber()
		if Subject.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':Subject']);
			% sub.memorize(prop);
			% warning(warning_backup)
		elseif Subject.getPropCategory(prop) == Category.EVANESCENT && sub.getPropFormat(prop) == Format.HANDLE
			sub.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:Subject');
			delete(ancestor(sub.get(prop), 'figure'))
			warning(warning_backup)
		else
			sub.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	sub_copy = sub.copy();
	 
	for prop = 1:1:Subject.getPropNumber()
		value = sub.getr(prop);
		value_copy = sub_copy.getr(prop);
		switch Subject.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					'Subject.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
							'Subject.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
							'Subject.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						sub_copy.isLocked(prop) == sub.isLocked(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sub_copy.isChecked(prop) == sub.isChecked(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sub_copy.getPropSeed(prop) == sub.getPropSeed(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	sub_0 = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, Subject.getPropDefault(Subject.TEMPLATE), ...
		Subject.ID, Subject.getPropDefault(Subject.ID), ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, Subject.getPropDefault(Subject.VOI_DICT) ...
		);
	 
	sub = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, sub_0.getCallback(4), ..., ...
		Subject.ID, sub_0.getCallback(5), ..., ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, sub_0.getCallback(9) ... ...
		);
	 
	sub_copy = sub.copy();
	sub_0_copy = sub_copy.getr('ID').get('EL');
	 
	for prop = 1:1:Subject.getPropNumber()
		value = sub.getr(prop);
		value_copy = sub_copy.getr(prop);
		switch Subject.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					'Subject.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
							'Subject.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
							'Subject.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == sub_0.getCallback(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The callback should be obtained from Subject.getCallback().' ...
						)
					assert( ...
						value_copy == sub_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The callback should be obtained from Subject.getCallback().' ...
						)
				end
	 
					assert( ...
						sub_copy.isLocked(prop) == sub.isLocked(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sub_copy.isChecked(prop) == sub.isChecked(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sub_copy.getPropSeed(prop) == sub.getPropSeed(prop), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub_template = Subject();
	sub = Subject('TEMPLATE', sub_template);
	 
	for prop = 1:1:Subject.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Subject.getPropTag(prop));
		switch Subject.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == Subject.TEMPLATE
					assert( ...
						isa(sub.getr(prop), 'Subject'), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject TEMPLATE does not work. Subject.getr(''TEMPLATE'') should be a Subject element.' ...
						)
					assert( ...
						isa(sub_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						'Subject TEMPLATE does not work. Subject_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(sub.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject TEMPLATE does not work. Subject.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						sub.getr(prop).get('EL') == sub_template && sub.getr(prop).get('PROP') == prop && strcmp(sub.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject TEMPLATE does not work. Subject.getr(' TAG ') should be a Callback to sub_template.' TAG '.'] ...
						)
					assert( ...
						isa(sub_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
						['Subject TEMPLATE does not work. Subject_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(sub.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject TEMPLATE does not work. Subject.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(sub_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
					['Subject TEMPLATE does not work. Subject_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, Subject.getPropDefault(Subject.TEMPLATE), ...
		Subject.ID, Subject.getPropDefault(Subject.ID), ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, Subject.getPropDefault(Subject.VOI_DICT) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'subject_to_be_erased.b2'];
	 
	Element.save(sub, filename)
	 
	sub_loaded = Element.load(filename);
	 
	assert( ...
		isequal(sub.copy(), sub_loaded), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.save(sub) and/or Subject.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sub = Subject( ...
		Subject.ELCLASS, Subject.getNoValue(), ...
		Subject.NAME, Subject.getNoValue(), ...
		Subject.DESCRIPTION, Subject.getNoValue(), ...
		Subject.TEMPLATE, Subject.getPropDefault(Subject.TEMPLATE), ...
		Subject.ID, Subject.getPropDefault(Subject.ID), ...
		Subject.LABEL, Subject.getPropDefault(Subject.LABEL), ...
		Subject.NOTES, Subject.getPropDefault(Subject.NOTES), ...
		Subject.TOSTRING, Subject.getNoValue(), ...
		Subject.VOI_DICT, Subject.getPropDefault(Subject.VOI_DICT) ...
		);
	 
	[json, struct, el_list] = encodeJSON(sub);
	[sub_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(sub_dec ~= sub, ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		'Subject.encodeJSON() or Subject.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) Subject.getPropFormat(prop), num2cell(Subject.getProps())) == Format.HANDLE) && all(cellfun(@(prop) Subject.getPropFormat(prop), num2cell(Subject.getProps())) == Format.NET)
		assert(isequal(sub_dec, sub), ...
			[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
			'Subject.encodeJSON() or Subject.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':Subject:' BRAPH2.FAIL_TEST], ...
		[' When testing Subject no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

