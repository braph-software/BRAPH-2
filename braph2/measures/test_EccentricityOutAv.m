%TEST_ECCENTRICITYOUTAV

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	m = EccentricityOutAv();
	 
	% get('ELCLASS')
	if isa(EccentricityOutAv, 'ConcreteElement')
		assert(strcmp(EccentricityOutAv().get('ELCLASS'), 'EccentricityOutAv'), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv().get(''ELCLASS'') should return ''EccentricityOutAv''.')
	end
	 
	% getBuild()
	assert(EccentricityOutAv.getBuild() == 1 && EccentricityOutAv.getBuild() > 0, ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.getBuild() should return the EccentricityOutAv build number.')
	assert(m.getBuild() == 1 && m.getBuild() > 0 , ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.getBuild() should return the EccentricityOutAv build number.')
	assert(Element.getBuild(m) == 1 && Element.getBuild(m) > 0, ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(m) should return the EccentricityOutAv build number.')
	assert(Element.getBuild('EccentricityOutAv') == 1 && Element.getBuild('EccentricityOutAv') > 0, ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''EccentricityOutAv'') should return the EccentricityOutAv build number.')
	 
	% getClass()
	assert(strcmp(EccentricityOutAv.getClass(), 'EccentricityOutAv'), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.getClass() should return ''EccentricityOutAv''.')
	assert(strcmp(m.getClass(), 'EccentricityOutAv'), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.getClass() should return ''EccentricityOutAv''.')
	assert(strcmp(Element.getClass(m), 'EccentricityOutAv'), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(m) should return ''EccentricityOutAv''.')
	assert(strcmp(Element.getClass('EccentricityOutAv'), 'EccentricityOutAv'), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''EccentricityOutAv'') should return ''EccentricityOutAv''.')
	 
	% getSubclasses()
	assert(isequal(EccentricityOutAv.getSubclasses(), subclasses('EccentricityOutAv', [], [], true)), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.getSubclasses() should return the same result as subclasses(''EccentricityOutAv'', [], [], true).')
	assert(isequal(m.getSubclasses(), subclasses('EccentricityOutAv', [], [], true)), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''EccentricityOutAv'', [], [], true).')
	assert(isequal(Element.getSubclasses(m), subclasses('EccentricityOutAv', [], [], true)), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(m) should return the same result as subclasses(''EccentricityOutAv'', [], [], true).')
	assert(isequal(Element.getSubclasses('EccentricityOutAv'), subclasses('EccentricityOutAv', [], [], true)), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''EccentricityOutAv'') should return the same result as subclasses(''EccentricityOutAv'', [], [], true).')
	 
	% getProps()
	assert(isempty(EccentricityOutAv.getProps()) || isequal(EccentricityOutAv.getProps(), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.getProps() should return a row vector [1:1:N].')
	assert(isempty(EccentricityOutAv.getProps()) || isequal(m.getProps(), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.getProps() should return a row vector [1:1:N].')
	assert(isempty(EccentricityOutAv.getProps()) || isequal(Element.getProps(m), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(m) should return a row vector [1:1:N].')
	assert(isempty(EccentricityOutAv.getProps()) || isequal(Element.getProps('EccentricityOutAv'), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''EccentricityOutAv'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) EccentricityOutAv.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(EccentricityOutAv.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.getProps(category) does not work.')
	tmp = cellfun(@(category) m.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(EccentricityOutAv.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(m, category), categories, 'UniformOutput', false);
	assert(isempty(EccentricityOutAv.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(m, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('EccentricityOutAv', category), categories, 'UniformOutput', false);
	assert(isempty(EccentricityOutAv.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(EccentricityOutAv.getProps())), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''EccentricityOutAv'', category) does not work.')
	 
	% getPropNumber()
	assert(EccentricityOutAv.getPropNumber() == length(EccentricityOutAv.getProps()), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.getPropNumber() should return the number of properties.')
	assert(m.getPropNumber() == length(EccentricityOutAv.getProps()), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(m) == length(EccentricityOutAv.getProps()), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(m) should return the number of properties.')
	assert(Element.getPropNumber('EccentricityOutAv') == length(EccentricityOutAv.getProps()), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''EccentricityOutAv'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) EccentricityOutAv.getPropNumber(category), categories)) == EccentricityOutAv.getPropNumber(), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) m.getPropNumber(category), categories)) == EccentricityOutAv.getPropNumber(), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(m, category), categories)) == EccentricityOutAv.getPropNumber(), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(m, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('EccentricityOutAv', category), categories)) == EccentricityOutAv.getPropNumber(), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''EccentricityOutAv'', category) does not work.')
	 
	% existsProp(prop)
	assert(~EccentricityOutAv.existsProp(NaN), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.existsProp(prop) does not work.')
	assert(~m.existsProp(NaN), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.existsProp(prop) does not work.')
	assert(~Element.existsProp(m, NaN), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(m, prop) does not work.')
	assert(~Element.existsProp('EccentricityOutAv', NaN), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''EccentricityOutAv'', prop) does not work.')
	 
	assert_with_error('EccentricityOutAv.existsProp(NaN)', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsProp(''EccentricityOutAv'', NaN)', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		assert(EccentricityOutAv.existsProp(prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.existsProp(prop) does not work.')
		assert(m.existsProp(prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.existsProp(prop) does not work.')
		assert(Element.existsProp(m, prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(m, prop) does not work.')
		assert(Element.existsProp('EccentricityOutAv', prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''EccentricityOutAv'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~EccentricityOutAv.existsTag(''), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.existsTag(tag) does not work.')
	assert(~m.existsTag(''), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'm.existsTag(tag) does not work.')
	assert(~Element.existsTag(m, ''), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(m, tag) does not work.')
	assert(~Element.existsTag('EccentricityOutAv', ''), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''EccentricityOutAv'', tag) does not work.')
	 
	assert_with_error('EccentricityOutAv.existsTag('''')', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsTag(''EccentricityOutAv'', '''')', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
		assert(EccentricityOutAv.existsTag(tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.existsTag(tag) does not work.')
		assert(m.existsTag(tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.existsTag(tag) does not work.')
		assert(Element.existsTag(m, tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(m, tga) does not work.')
		assert(Element.existsTag('EccentricityOutAv', tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''EccentricityOutAv'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		assert(EccentricityOutAv.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropProp(prop) does not work.')
		assert(m.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropProp(prop) does not work.')
		assert(Element.getPropProp(m, prop) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(m, prop) does not work.')
		assert(Element.getPropProp('EccentricityOutAv', prop) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''EccentricityOutAv'', prop) does not work.')
	 
		tag = m.getPropTag(prop);
		assert(EccentricityOutAv.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropProp(tag) does not work.')
		assert(m.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropProp(tag) does not work.')
		assert(Element.getPropProp(m, tag) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(m, tag) does not work.')
		assert(Element.getPropProp('EccentricityOutAv', prop) == prop, ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''EccentricityOutAv'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(strcmp(EccentricityOutAv.getPropTag(prop), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropTag(prop) does not work.')
		assert(strcmp(m.getPropTag(prop), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(m, prop), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(m, prop) does not work.')
		assert(strcmp(Element.getPropTag('EccentricityOutAv', prop), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''EccentricityOutAv'', prop) does not work.')
	 
		assert(strcmp(EccentricityOutAv.getPropTag(tag), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropTag(tag) does not work.')
		assert(strcmp(m.getPropTag(tag), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(m, tag), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(m, tag) does not work.')
		assert(strcmp(Element.getPropTag('EccentricityOutAv', prop), tag), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''EccentricityOutAv'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(Category.existsCategory(EccentricityOutAv.getPropCategory(prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(m.getPropCategory(prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(m, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''EccentricityOutAv'', prop) does not work.')
	 
		assert(Category.existsCategory(EccentricityOutAv.getPropCategory(tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(m.getPropCategory(tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(m, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''EccentricityOutAv'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(Format.existsFormat(EccentricityOutAv.getPropFormat(prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(m.getPropFormat(prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(m, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''EccentricityOutAv'', prop) does not work.')
	 
		assert(Format.existsFormat(EccentricityOutAv.getPropFormat(tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(m.getPropFormat(tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(m, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''EccentricityOutAv'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(ischar(EccentricityOutAv.getPropDescription(prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropDescription(prop) does not work.')
		assert(ischar(m.getPropDescription(prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(m, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(m, prop) does not work.')
		assert(ischar(Element.getPropDescription(m, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''EccentricityOutAv'', prop) does not work.')
	 
		assert(ischar(EccentricityOutAv.getPropDescription(tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.getPropDescription(tag) does not work.')
		assert(ischar(m.getPropDescription(tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(m, tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(m, tag) does not work.')
		assert(ischar(Element.getPropDescription(m, tag)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''EccentricityOutAv'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		settings = EccentricityOutAv.getPropSettings(prop);
		settings = m.getPropSettings(prop);
		settings = Element.getPropSettings(m, prop);
		settings = Element.getPropSettings('EccentricityOutAv', prop);
	 
		settings = EccentricityOutAv.getPropSettings(tag);
		settings = m.getPropSettings(tag);
		settings = Element.getPropSettings(m, tag);
		settings = Element.getPropSettings('EccentricityOutAv', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		default = EccentricityOutAv.getPropDefault(prop);
		default = m.getPropDefault(prop);
		default = Element.getPropDefault(m, prop);
		default = Element.getPropDefault('EccentricityOutAv', prop);
	 
		default = EccentricityOutAv.getPropDefault(tag);
		default = m.getPropDefault(tag);
		default = Element.getPropDefault(m, tag);
		default = Element.getPropDefault('EccentricityOutAv', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		conditioned_default = EccentricityOutAv.getPropDefaultConditioned(prop);
		conditioned_default = m.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(m, prop);
		conditioned_default = Element.getPropDefaultConditioned('EccentricityOutAv', prop);
	 
		conditioned_default = EccentricityOutAv.getPropDefaultConditioned(tag);
		conditioned_default = m.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(m, tag);
		conditioned_default = Element.getPropDefaultConditioned('EccentricityOutAv', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(~EccentricityOutAv.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.checkProp(prop, value) does not work.')
		assert(~m.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(m, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, prop, value) does not work.')
		assert(~Element.checkProp('EccentricityOutAv', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''EccentricityOutAv'', prop, value) does not work.')
	 
		assert_with_error('EccentricityOutAv.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], prop, m)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], prop, m)
		assert_with_error('Element.checkProp(''EccentricityOutAv'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~EccentricityOutAv.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.checkProp(tag, value) does not work.')
		assert(~m.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(m, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, tag, value) does not work.')
		assert(~Element.checkProp('EccentricityOutAv', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''EccentricityOutAv'', tag, value) does not work.')
	 
		assert_with_error('EccentricityOutAv.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], tag, m)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], tag, m)
		assert_with_error('Element.checkProp(''EccentricityOutAv'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(EccentricityOutAv.checkProp(prop, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.checkProp(prop, <conditioned default value>) does not work.')
		assert(m.checkProp(prop, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(m, prop, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('EccentricityOutAv', prop, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''EccentricityOutAv'', prop, <conditioned default value>) does not work.')
	 
		assert(EccentricityOutAv.checkProp(tag, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.checkProp(tag, <conditioned default value>) does not work.')
		assert(m.checkProp(tag, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(m, tag, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('EccentricityOutAv', tag, Element.getPropDefaultConditioned(EccentricityOutAv, prop)), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''EccentricityOutAv'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, EccentricityOutAv.getPropDefault(EccentricityOutAv.TEMPLATE), ...
		EccentricityOutAv.ID, EccentricityOutAv.getPropDefault(EccentricityOutAv.ID), ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, EccentricityOutAv.getPropDefault(EccentricityOutAv.G), ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, EccentricityOutAv.getPropDefault(EccentricityOutAv.PFM), ...
		EccentricityOutAv.RULE, EccentricityOutAv.getPropDefault(EccentricityOutAv.RULE) ...
		);
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
	 
		% excluded props
		if any(prop == [EccentricityOutAv.PFM])
			continue
		end
	 
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					m.getr(prop) == EccentricityOutAv.getNoValue(), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['Being a ' EccentricityOutAv.getCategoryName(EccentricityOutAv.getPropCategory(prop)) ', EccentricityOutAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in EccentricityOutAv.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					m.getr(TAG) == EccentricityOutAv.getNoValue(), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['Being a ' EccentricityOutAv.getCategoryName(EccentricityOutAv.getPropCategory(prop)) ', EccentricityOutAv.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in EccentricityOutAv.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(m.getPropSettings(prop))
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					m.getr(prop) == EccentricityOutAv.getNoValue(), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['Being a ' EccentricityOutAv.getCategoryName(EccentricityOutAv.getPropCategory(prop)) ', EccentricityOutAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in EccentricityOutAv.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					m.getr(TAG) == EccentricityOutAv.getNoValue(), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['Being a ' EccentricityOutAv.getCategoryName(EccentricityOutAv.getPropCategory(prop)) ', EccentricityOutAv.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in EccentricityOutAv.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':EccentricityOutAv']);
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(m.getPropSettings(prop))
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(m.getr(prop), EccentricityOutAv.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by EccentricityOutAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in EccentricityOutAv.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(m.getr(TAG), EccentricityOutAv.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' TAG ') must be inizialized to its default value ' ...
					'given by EccentricityOutAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in EccentricityOutAv.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, EccentricityOutAv.getPropDefault(EccentricityOutAv.TEMPLATE), ...
		EccentricityOutAv.ID, EccentricityOutAv.getPropDefault(EccentricityOutAv.ID), ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, EccentricityOutAv.getPropDefault(EccentricityOutAv.G), ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, EccentricityOutAv.getPropDefault(EccentricityOutAv.PFM), ...
		EccentricityOutAv.RULE, EccentricityOutAv.getPropDefault(EccentricityOutAv.RULE) ...
		);
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
	 
		% excluded props
		if any(prop == [EccentricityOutAv.PFM])
			continue
		end
	 
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		switch EccentricityOutAv.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(m.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':EccentricityOutAv']);
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':EccentricityOutAv']);
	% 			assert( ...
	% 				~isa(m.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	% 				['EccentricityOutAv.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(m.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	% 				['EccentricityOutAv.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	% 				['EccentricityOutAv.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':EccentricityOutAv']);
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(m.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if m.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:EccentricityOutAv');
					delete(ancestor(m.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(EccentricityOutAv.getProps(Category.RESULT))
		for prop = 1:1:EccentricityOutAv.getPropNumber()
	 
			% excluded props
			if any(prop == [EccentricityOutAv.PFM])
				continue
			end
	 
			switch EccentricityOutAv.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						m.isLocked(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~m.isLocked(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = EccentricityOutAv();
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		assert( ...
			~m.isLocked(prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			['EccentricityOutAv.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~m.isLocked(TAG), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			['EccentricityOutAv.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	m.lock()
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					m.isLocked(prop), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~m.isLocked(prop), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = EccentricityOutAv();
	 
	warning_backup = warning('off', 'BRAPH2:EccentricityOutAv');
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		m.lock(prop)
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					m.isLocked(prop), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~m.isLocked(prop), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = EccentricityOutAv();
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		assert( ...
			m.isChecked(prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			['EccentricityOutAv.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			m.isChecked(TAG), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			['EccentricityOutAv.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	m.unchecked()
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		assert( ...
			~m.isChecked(prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			['EccentricityOutAv.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	m.checked()
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		assert( ...
			m.isChecked(prop), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			['EccentricityOutAv.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic EccentricityOutAv
	m_0 = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, EccentricityOutAv.getPropDefault(EccentricityOutAv.TEMPLATE), ...
		EccentricityOutAv.ID, EccentricityOutAv.getPropDefault(EccentricityOutAv.ID), ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, EccentricityOutAv.getPropDefault(EccentricityOutAv.G), ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, EccentricityOutAv.getPropDefault(EccentricityOutAv.PFM), ...
		EccentricityOutAv.RULE, EccentricityOutAv.getPropDefault(EccentricityOutAv.RULE) ...
		);
	 
	% EccentricityOutAv with 1st callbacks
	m_1 = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, m_0.getCallback(4), ..., ...
		EccentricityOutAv.ID, m_0.getCallback(5), ..., ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, m_0.getCallback(13), ..., ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, m_0.getCallback(15), ..., ...
		EccentricityOutAv.RULE, m_0.getCallback(16) ... ...
		);
	 
	prop_number = EccentricityOutAv.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(m_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(m_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% EccentricityOutAv with 2nd callbacks
	m_2 = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, m_1.getCallback(4), ..., ...
		EccentricityOutAv.ID, m_1.getCallback(5), ..., ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, m_1.getCallback(13), ..., ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, m_1.getCallback(15), ..., ...
		EccentricityOutAv.RULE, m_1.getCallback(16) ... ...
		);
	 
	prop_number = EccentricityOutAv.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(m_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(m_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% EccentricityOutAv with 3rd callbacks
	m_3 = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, m_2.getCallback(4), ..., ...
		EccentricityOutAv.ID, m_2.getCallback(5), ..., ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, m_2.getCallback(13), ..., ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, m_2.getCallback(15), ..., ...
		EccentricityOutAv.RULE, m_2.getCallback(16) ... ...
		);
	 
	prop_number = EccentricityOutAv.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(m_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(m_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	m = EccentricityOutAv();
	 
	m_copy = m.copy();
	 
	assert(m_copy ~= m, ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(m_copy, m), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		value = m.getr(prop);
		value_copy = m_copy.getr(prop);
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					'EccentricityOutAv.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
							'EccentricityOutAv.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
							'EccentricityOutAv.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					m_copy.isLocked(prop) == m.isLocked(prop), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					'EccentricityOutAv.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					m_copy.isChecked(prop) == m.isChecked(prop), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					'EccentricityOutAv.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					m_copy.getPropSeed(prop) == m.getPropSeed(prop), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					'EccentricityOutAv.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	m = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, EccentricityOutAv.getPropDefault(EccentricityOutAv.TEMPLATE), ...
		EccentricityOutAv.ID, EccentricityOutAv.getPropDefault(EccentricityOutAv.ID), ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, EccentricityOutAv.getPropDefault(EccentricityOutAv.G), ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, EccentricityOutAv.getPropDefault(EccentricityOutAv.PFM), ...
		EccentricityOutAv.RULE, EccentricityOutAv.getPropDefault(EccentricityOutAv.RULE) ...
		);
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		if EccentricityOutAv.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':EccentricityOutAv']);
			% m.memorize(prop);
			% warning(warning_backup)
		elseif EccentricityOutAv.getPropCategory(prop) == Category.EVANESCENT && m.getPropFormat(prop) == Format.HANDLE
			m.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:EccentricityOutAv');
			delete(ancestor(m.get(prop), 'figure'))
			warning(warning_backup)
		else
			m.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	m_copy = m.copy();
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		value = m.getr(prop);
		value_copy = m_copy.getr(prop);
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					'EccentricityOutAv.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
							'EccentricityOutAv.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
							'EccentricityOutAv.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						m_copy.isLocked(prop) == m.isLocked(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.isChecked(prop) == m.isChecked(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.getPropSeed(prop) == m.getPropSeed(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	m_0 = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, EccentricityOutAv.getPropDefault(EccentricityOutAv.TEMPLATE), ...
		EccentricityOutAv.ID, EccentricityOutAv.getPropDefault(EccentricityOutAv.ID), ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, EccentricityOutAv.getPropDefault(EccentricityOutAv.G), ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, EccentricityOutAv.getPropDefault(EccentricityOutAv.PFM), ...
		EccentricityOutAv.RULE, EccentricityOutAv.getPropDefault(EccentricityOutAv.RULE) ...
		);
	 
	m = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, m_0.getCallback(4), ..., ...
		EccentricityOutAv.ID, m_0.getCallback(5), ..., ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, m_0.getCallback(13), ..., ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, m_0.getCallback(15), ..., ...
		EccentricityOutAv.RULE, m_0.getCallback(16) ... ...
		);
	 
	m_copy = m.copy();
	m_0_copy = m_copy.getr('ID').get('EL');
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
		value = m.getr(prop);
		value_copy = m_copy.getr(prop);
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					'EccentricityOutAv.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
							'EccentricityOutAv.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
							'EccentricityOutAv.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == m_0.getCallback(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The callback should be obtained from EccentricityOutAv.getCallback().' ...
						)
					assert( ...
						value_copy == m_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The callback should be obtained from EccentricityOutAv.getCallback().' ...
						)
				end
	 
					assert( ...
						m_copy.isLocked(prop) == m.isLocked(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.isChecked(prop) == m.isChecked(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.getPropSeed(prop) == m.getPropSeed(prop), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m_template = EccentricityOutAv();
	m = EccentricityOutAv('TEMPLATE', m_template);
	 
	for prop = 1:1:EccentricityOutAv.getPropNumber()
	 
		% excluded props
		if any(prop == [EccentricityOutAv.PFM])
			continue
		end
	 
		TAG = upper(EccentricityOutAv.getPropTag(prop));
		switch EccentricityOutAv.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == EccentricityOutAv.TEMPLATE
					assert( ...
						isa(m.getr(prop), 'EccentricityOutAv'), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv TEMPLATE does not work. EccentricityOutAv.getr(''TEMPLATE'') should be a EccentricityOutAv element.' ...
						)
					assert( ...
						isa(m_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						'EccentricityOutAv TEMPLATE does not work. EccentricityOutAv_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(m.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv TEMPLATE does not work. EccentricityOutAv.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						m.getr(prop).get('EL') == m_template && m.getr(prop).get('PROP') == prop && strcmp(m.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv TEMPLATE does not work. EccentricityOutAv.getr(' TAG ') should be a Callback to m_template.' TAG '.'] ...
						)
					assert( ...
						isa(m_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
						['EccentricityOutAv TEMPLATE does not work. EccentricityOutAv_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv TEMPLATE does not work. EccentricityOutAv.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(m_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
					['EccentricityOutAv TEMPLATE does not work. EccentricityOutAv_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, EccentricityOutAv.getPropDefault(EccentricityOutAv.TEMPLATE), ...
		EccentricityOutAv.ID, EccentricityOutAv.getPropDefault(EccentricityOutAv.ID), ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, EccentricityOutAv.getPropDefault(EccentricityOutAv.G), ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, EccentricityOutAv.getPropDefault(EccentricityOutAv.PFM), ...
		EccentricityOutAv.RULE, EccentricityOutAv.getPropDefault(EccentricityOutAv.RULE) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'eccentricityoutav_to_be_erased.b2'];
	 
	Element.save(m, filename)
	 
	m_loaded = Element.load(filename);
	 
	assert( ...
		isequal(m.copy(), m_loaded), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.save(m) and/or EccentricityOutAv.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = EccentricityOutAv( ...
		EccentricityOutAv.ELCLASS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.NAME, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.DESCRIPTION, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.TEMPLATE, EccentricityOutAv.getPropDefault(EccentricityOutAv.TEMPLATE), ...
		EccentricityOutAv.ID, EccentricityOutAv.getPropDefault(EccentricityOutAv.ID), ...
		EccentricityOutAv.LABEL, EccentricityOutAv.getPropDefault(EccentricityOutAv.LABEL), ...
		EccentricityOutAv.NOTES, EccentricityOutAv.getPropDefault(EccentricityOutAv.NOTES), ...
		EccentricityOutAv.TOSTRING, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SHAPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.SCOPE, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PARAMETRICITY, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.COMPATIBLE_GRAPHS, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.G, EccentricityOutAv.getPropDefault(EccentricityOutAv.G), ...
		EccentricityOutAv.M, EccentricityOutAv.getNoValue(), ...
		EccentricityOutAv.PFM, EccentricityOutAv.getPropDefault(EccentricityOutAv.PFM), ...
		EccentricityOutAv.RULE, EccentricityOutAv.getPropDefault(EccentricityOutAv.RULE) ...
		);
	 
	[json, struct, el_list] = encodeJSON(m);
	[m_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(m_dec ~= m, ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		'EccentricityOutAv.encodeJSON() or EccentricityOutAv.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) EccentricityOutAv.getPropFormat(prop), num2cell(EccentricityOutAv.getProps())) == Format.HANDLE) && all(cellfun(@(prop) EccentricityOutAv.getPropFormat(prop), num2cell(EccentricityOutAv.getProps())) == Format.NET)
		assert(isequal(m_dec, m), ...
			[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
			'EccentricityOutAv.encodeJSON() or EccentricityOutAv.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: GraphWD
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = [
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	    ];
	
	known_eccentricity = {mean([5 10 10 5 0]')};
	
	g = GraphWD('B', B);
	
	m_outside_g = EccentricityOutAv('G', g);
	m_outside_g.set('RULE', 'subgraphs');
	
	assert(isequal(m_outside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'EccentricityOutAv');
	m_inside_g.set('RULE', 'subgraphs');
	assert(isequal(m_inside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 13: GraphBD
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B = [
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	    ];
	
	known_eccentricity = {mean([1 1 1 1 0]')};
	
	g = GraphBD('B', B);
	
	m_outside_g = EccentricityOutAv('G', g);
	m_outside_g.set('RULE', 'subgraphs');
	
	assert(isequal(m_outside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'EccentricityOutAv');
	m_inside_g.set('RULE', 'subgraphs');
	assert(isequal(m_inside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 14: MultiplexWD
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B11 = [
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	      ];
	B22 = [
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	      ];
	B = {
	    B11 B22
	    };
	
	known_eccentricity = {
	    mean([10 5 5 10 0]')
	    mean([10 5 5 10 0]')
	    };
	
	g = MultiplexWD('B', B);
	
	m_outside_g = EccentricityOutAv('G', g);
	m_outside_g.set('RULE', 'subgraphs');
	
	assert(isequal(m_outside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'EccentricityOutAv');
	m_inside_g.set('RULE', 'subgraphs');
	assert(isequal(m_inside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 15: MultiplexBD
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B11 = [
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	      ];
	B22 = [
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	      ];
	B = {
	    B11 B22
	    };
	
	known_eccentricity = {
	    mean([1 1 1 1 0]')
	    mean([1 1 1 1 0]')
	    };
	
	g = MultiplexBD('B', B);
	
	m_outside_g = EccentricityOutAv('G', g);
	m_outside_g.set('RULE', 'subgraphs');
	
	assert(isequal(m_outside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'EccentricityOutAv');
	m_inside_g.set('RULE', 'subgraphs');
	assert(isequal(m_inside_g.get('M'), known_eccentricity), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 16: OrdMxWD
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	B11  =[
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	    ];
	
	B22  =[
	    0   .1  0   0   0
	    .2   0  0   0   0
	    0    0  0  .2   0
	    0    0 .1   0   0
	    0    0  0   0   0
	    ];
	
	B = {B11 B22};
	known_eccentricity_Av = {
	    mean([10 5 5 10 0]')
	    mean([10 5 5 10 0]')
	    };
	
	g = OrdMxWD('B', B);
	
	m_outside_g = EccentricityOutAv('G', g);
	m_outside_g.set('RULE', 'subgraphs');
	
	assert(isequal(m_outside_g.get('M'), known_eccentricity_Av), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'EccentricityOutAv');
	m_inside_g.set('RULE', 'subgraphs');
	assert(isequal(m_inside_g.get('M'), known_eccentricity_Av), ...
	    [BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 17: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':EccentricityOutAv:' BRAPH2.FAIL_TEST], ...
		[' When testing EccentricityOutAv no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 18: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

