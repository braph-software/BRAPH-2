%TEST_DEGREEOUT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	m = DegreeOut();
	 
	% getClass
	assert(strcmp(DegreeOut.getClass(), 'DegreeOut'), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.getClass() should return ''DegreeOut''.')
	assert(strcmp(m.getClass(), 'DegreeOut'), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'm.getClass() should return ''DegreeOut''.')
	assert(strcmp(Element.getClass(m), 'DegreeOut'), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(m) should return ''DegreeOut''.')
	assert(strcmp(Element.getClass('DegreeOut'), 'DegreeOut'), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''DegreeOut'') should return ''DegreeOut''.')
	 
	% getSubclasses()
	assert(isequal(DegreeOut.getSubclasses(), subclasses('DegreeOut', [], [], true)), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.getSubclasses() should return the same result as subclasses(''DegreeOut'', [], [], true).')
	assert(isequal(m.getSubclasses(), subclasses('DegreeOut', [], [], true)), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''DegreeOut'', [], [], true).')
	assert(isequal(Element.getSubclasses(m), subclasses('DegreeOut', [], [], true)), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(m) should return the same result as subclasses(''DegreeOut'', [], [], true).')
	assert(isequal(Element.getSubclasses('DegreeOut'), subclasses('DegreeOut', [], [], true)), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''DegreeOut'') should return the same result as subclasses(''DegreeOut'', [], [], true).')
	 
	% getProps()
	assert(isempty(DegreeOut.getProps()) || isequal(DegreeOut.getProps(), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.getProps() should return a row vector [1:1:N].')
	assert(isempty(DegreeOut.getProps()) || isequal(m.getProps(), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'm.getProps() should return a row vector [1:1:N].')
	assert(isempty(DegreeOut.getProps()) || isequal(Element.getProps(m), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(m) should return a row vector [1:1:N].')
	assert(isempty(DegreeOut.getProps()) || isequal(Element.getProps('DegreeOut'), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''DegreeOut'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) DegreeOut.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(DegreeOut.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.getProps(category) does not work.')
	tmp = cellfun(@(category) m.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(DegreeOut.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'm.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(m, category), categories, 'UniformOutput', false);
	assert(isempty(DegreeOut.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(m, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('DegreeOut', category), categories, 'UniformOutput', false);
	assert(isempty(DegreeOut.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DegreeOut.getProps())), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''DegreeOut'', category) does not work.')
	 
	% getPropNumber()
	assert(DegreeOut.getPropNumber() == length(DegreeOut.getProps()), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.getPropNumber() should return the number of properties.')
	assert(m.getPropNumber() == length(DegreeOut.getProps()), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'm.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(m) == length(DegreeOut.getProps()), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(m) should return the number of properties.')
	assert(Element.getPropNumber('DegreeOut') == length(DegreeOut.getProps()), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''DegreeOut'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) DegreeOut.getPropNumber(category), categories)) == DegreeOut.getPropNumber(), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) m.getPropNumber(category), categories)) == DegreeOut.getPropNumber(), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'm.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(m, category), categories)) == DegreeOut.getPropNumber(), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(m, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('DegreeOut', category), categories)) == DegreeOut.getPropNumber(), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''DegreeOut'', category) does not work.')
	 
	% existsProp(prop)
	assert(~DegreeOut.existsProp(NaN), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.existsProp(prop) does not work.')
	assert(~m.existsProp(NaN), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'm.existsProp(prop) does not work.')
	assert(~Element.existsProp(m, NaN), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(m, prop) does not work.')
	assert(~Element.existsProp('DegreeOut', NaN), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''DegreeOut'', prop) does not work.')
	 
	assert_with_error('DegreeOut.existsProp(NaN)', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsProp(''DegreeOut'', NaN)', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		assert(DegreeOut.existsProp(prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.existsProp(prop) does not work.')
		assert(m.existsProp(prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.existsProp(prop) does not work.')
		assert(Element.existsProp(m, prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(m, prop) does not work.')
		assert(Element.existsProp('DegreeOut', prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''DegreeOut'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~DegreeOut.existsTag(''), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.existsTag(tag) does not work.')
	assert(~m.existsTag(''), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'm.existsTag(tag) does not work.')
	assert(~Element.existsTag(m, ''), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(m, tag) does not work.')
	assert(~Element.existsTag('DegreeOut', ''), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''DegreeOut'', tag) does not work.')
	 
	assert_with_error('DegreeOut.existsTag('''')', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], m)
	assert_with_error('Element.existsTag(''DegreeOut'', '''')', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
		assert(DegreeOut.existsTag(tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.existsTag(tag) does not work.')
		assert(m.existsTag(tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.existsTag(tag) does not work.')
		assert(Element.existsTag(m, tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(m, tga) does not work.')
		assert(Element.existsTag('DegreeOut', tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''DegreeOut'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		assert(DegreeOut.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropProp(prop) does not work.')
		assert(m.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropProp(prop) does not work.')
		assert(Element.getPropProp(m, prop) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(m, prop) does not work.')
		assert(Element.getPropProp('DegreeOut', prop) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''DegreeOut'', prop) does not work.')
	 
		tag = m.getPropTag(prop);
		assert(DegreeOut.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropProp(tag) does not work.')
		assert(m.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropProp(tag) does not work.')
		assert(Element.getPropProp(m, tag) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(m, tag) does not work.')
		assert(Element.getPropProp('DegreeOut', prop) == prop, ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''DegreeOut'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(strcmp(DegreeOut.getPropTag(prop), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropTag(prop) does not work.')
		assert(strcmp(m.getPropTag(prop), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(m, prop), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(m, prop) does not work.')
		assert(strcmp(Element.getPropTag('DegreeOut', prop), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''DegreeOut'', prop) does not work.')
	 
		assert(strcmp(DegreeOut.getPropTag(tag), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropTag(tag) does not work.')
		assert(strcmp(m.getPropTag(tag), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(m, tag), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(m, tag) does not work.')
		assert(strcmp(Element.getPropTag('DegreeOut', prop), tag), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''DegreeOut'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(Category.existsCategory(DegreeOut.getPropCategory(prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(m.getPropCategory(prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(m, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''DegreeOut'', prop) does not work.')
	 
		assert(Category.existsCategory(DegreeOut.getPropCategory(tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(m.getPropCategory(tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(m, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(m, tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''DegreeOut'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(Format.existsFormat(DegreeOut.getPropFormat(prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(m.getPropFormat(prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(m, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''DegreeOut'', prop) does not work.')
	 
		assert(Format.existsFormat(DegreeOut.getPropFormat(tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(m.getPropFormat(tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(m, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(m, tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''DegreeOut'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(ischar(DegreeOut.getPropDescription(prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropDescription(prop) does not work.')
		assert(ischar(m.getPropDescription(prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(m, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(m, prop) does not work.')
		assert(ischar(Element.getPropDescription(m, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''DegreeOut'', prop) does not work.')
	 
		assert(ischar(DegreeOut.getPropDescription(tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.getPropDescription(tag) does not work.')
		assert(ischar(m.getPropDescription(tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(m, tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(m, tag) does not work.')
		assert(ischar(Element.getPropDescription(m, tag)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''DegreeOut'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		settings = DegreeOut.getPropSettings(prop);
		settings = m.getPropSettings(prop);
		settings = Element.getPropSettings(m, prop);
		settings = Element.getPropSettings('DegreeOut', prop);
	 
		settings = DegreeOut.getPropSettings(tag);
		settings = m.getPropSettings(tag);
		settings = Element.getPropSettings(m, tag);
		settings = Element.getPropSettings('DegreeOut', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		default = DegreeOut.getPropDefault(prop);
		default = m.getPropDefault(prop);
		default = Element.getPropDefault(m, prop);
		default = Element.getPropDefault('DegreeOut', prop);
	 
		default = DegreeOut.getPropDefault(tag);
		default = m.getPropDefault(tag);
		default = Element.getPropDefault(m, tag);
		default = Element.getPropDefault('DegreeOut', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		conditioned_default = DegreeOut.getPropDefaultConditioned(prop);
		conditioned_default = m.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(m, prop);
		conditioned_default = Element.getPropDefaultConditioned('DegreeOut', prop);
	 
		conditioned_default = DegreeOut.getPropDefaultConditioned(tag);
		conditioned_default = m.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(m, tag);
		conditioned_default = Element.getPropDefaultConditioned('DegreeOut', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:DegreeOut.getPropNumber()
		tag = m.getPropTag(prop);
	 
		assert(~DegreeOut.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.checkProp(prop, value) does not work.')
		assert(~m.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(m, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, prop, value) does not work.')
		assert(~Element.checkProp('DegreeOut', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DegreeOut'', prop, value) does not work.')
	 
		assert_with_error('DegreeOut.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], prop, m)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], prop, m)
		assert_with_error('Element.checkProp(''DegreeOut'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~DegreeOut.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.checkProp(tag, value) does not work.')
		assert(~m.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(m, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, tag, value) does not work.')
		assert(~Element.checkProp('DegreeOut', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DegreeOut'', tag, value) does not work.')
	 
		assert_with_error('DegreeOut.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], tag, m)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], tag, m)
		assert_with_error('Element.checkProp(''DegreeOut'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DegreeOut:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(DegreeOut.checkProp(prop, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.checkProp(prop, <conditioned default value>) does not work.')
		assert(m.checkProp(prop, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(m, prop, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('DegreeOut', prop, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DegreeOut'', prop, <conditioned default value>) does not work.')
	 
		assert(DegreeOut.checkProp(tag, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.checkProp(tag, <conditioned default value>) does not work.')
		assert(m.checkProp(tag, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'm.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(m, tag, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(m, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('DegreeOut', tag, Element.getPropDefaultConditioned(DegreeOut, prop)), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DegreeOut'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, DegreeOut.getPropDefault(DegreeOut.TEMPLATE), ...
		DegreeOut.ID, DegreeOut.getPropDefault(DegreeOut.ID), ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, DegreeOut.getPropDefault(DegreeOut.G), ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, DegreeOut.getPropDefault(DegreeOut.PFM) ...
		);
	 
	for prop = 1:1:DegreeOut.getPropNumber()
	 
		% excluded props
		if any(prop == [DegreeOut.PFM])
			continue
		end
	 
		TAG = upper(DegreeOut.getPropTag(prop));
		switch DegreeOut.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					m.getr(prop) == DegreeOut.getNoValue(), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['Being a ' DegreeOut.getCategoryName(DegreeOut.getPropCategory(prop)) ', DegreeOut.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DegreeOut.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					m.getr(TAG) == DegreeOut.getNoValue(), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['Being a ' DegreeOut.getCategoryName(DegreeOut.getPropCategory(prop)) ', DegreeOut.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DegreeOut.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(m.getPropSettings(prop))
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					m.getr(prop) == DegreeOut.getNoValue(), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['Being a ' DegreeOut.getCategoryName(DegreeOut.getPropCategory(prop)) ', DegreeOut.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DegreeOut.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					m.getr(TAG) == DegreeOut.getNoValue(), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['Being a ' DegreeOut.getCategoryName(DegreeOut.getPropCategory(prop)) ', DegreeOut.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DegreeOut.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':DegreeOut']);
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(m.getPropSettings(prop))
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(m.getr(prop), DegreeOut.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by DegreeOut.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in DegreeOut.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(m.getr(TAG), DegreeOut.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' TAG ') must be inizialized to its default value ' ...
					'given by DegreeOut.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in DegreeOut.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, DegreeOut.getPropDefault(DegreeOut.TEMPLATE), ...
		DegreeOut.ID, DegreeOut.getPropDefault(DegreeOut.ID), ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, DegreeOut.getPropDefault(DegreeOut.G), ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, DegreeOut.getPropDefault(DegreeOut.PFM) ...
		);
	 
	for prop = 1:1:DegreeOut.getPropNumber()
	 
		% excluded props
		if any(prop == [DegreeOut.PFM])
			continue
		end
	 
		TAG = upper(DegreeOut.getPropTag(prop));
		switch DegreeOut.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(m.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':DegreeOut']);
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':DegreeOut']);
	% 			assert( ...
	% 				~isa(m.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	% 				['DegreeOut.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(m.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	% 				['DegreeOut.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	% 				['DegreeOut.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':DegreeOut']);
				assert( ...
					~isa(m.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(m.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if m.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:DegreeOut');
					delete(ancestor(m.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(DegreeOut.getProps(Category.RESULT))
		for prop = 1:1:DegreeOut.getPropNumber()
	 
			% excluded props
			if any(prop == [DegreeOut.PFM])
				continue
			end
	 
			switch DegreeOut.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						m.isLocked(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~m.isLocked(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = DegreeOut();
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		TAG = upper(DegreeOut.getPropTag(prop));
		assert( ...
			~m.isLocked(prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			['DegreeOut.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~m.isLocked(TAG), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			['DegreeOut.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	m.lock()
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		switch DegreeOut.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					m.isLocked(prop), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~m.isLocked(prop), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = DegreeOut();
	 
	warning_backup = warning('off', 'BRAPH2:DegreeOut');
	for prop = 1:1:DegreeOut.getPropNumber()
		m.lock(prop)
		switch DegreeOut.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					m.isLocked(prop), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~m.isLocked(prop), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = DegreeOut();
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		TAG = upper(DegreeOut.getPropTag(prop));
		assert( ...
			m.isChecked(prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			['DegreeOut.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			m.isChecked(TAG), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			['DegreeOut.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	m.unchecked()
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		assert( ...
			~m.isChecked(prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			['DegreeOut.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	m.checked()
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		assert( ...
			m.isChecked(prop), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			['DegreeOut.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic DegreeOut
	m_0 = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, DegreeOut.getPropDefault(DegreeOut.TEMPLATE), ...
		DegreeOut.ID, DegreeOut.getPropDefault(DegreeOut.ID), ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, DegreeOut.getPropDefault(DegreeOut.G), ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, DegreeOut.getPropDefault(DegreeOut.PFM) ...
		);
	 
	% DegreeOut with 1st callbacks
	m_1 = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, m_0.getCallback(3), ..., ...
		DegreeOut.ID, m_0.getCallback(4), ..., ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, m_0.getCallback(11), ..., ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, m_0.getCallback(13) ... ...
		);
	 
	prop_number = DegreeOut.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(DegreeOut.getPropTag(prop));
		switch DegreeOut.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(m_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(m_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% DegreeOut with 2nd callbacks
	m_2 = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, m_1.getCallback(3), ..., ...
		DegreeOut.ID, m_1.getCallback(4), ..., ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, m_1.getCallback(11), ..., ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, m_1.getCallback(13) ... ...
		);
	 
	prop_number = DegreeOut.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(DegreeOut.getPropTag(prop));
		switch DegreeOut.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(m_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(m_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% DegreeOut with 3rd callbacks
	m_3 = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, m_2.getCallback(3), ..., ...
		DegreeOut.ID, m_2.getCallback(4), ..., ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, m_2.getCallback(11), ..., ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, m_2.getCallback(13) ... ...
		);
	 
	prop_number = DegreeOut.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(DegreeOut.getPropTag(prop));
		switch DegreeOut.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(m_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(m_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	m = DegreeOut();
	 
	m_copy = m.copy();
	 
	assert(m_copy ~= m, ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(m_copy, m), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		value = m.getr(prop);
		value_copy = m_copy.getr(prop);
		switch DegreeOut.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					'DegreeOut.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
							'DegreeOut.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
							'DegreeOut.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					m_copy.isLocked(prop) == m.isLocked(prop), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					'DegreeOut.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					m_copy.isChecked(prop) == m.isChecked(prop), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					'DegreeOut.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					m_copy.getPropSeed(prop) == m.getPropSeed(prop), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					'DegreeOut.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	m = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, DegreeOut.getPropDefault(DegreeOut.TEMPLATE), ...
		DegreeOut.ID, DegreeOut.getPropDefault(DegreeOut.ID), ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, DegreeOut.getPropDefault(DegreeOut.G), ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, DegreeOut.getPropDefault(DegreeOut.PFM) ...
		);
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		if DegreeOut.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':DegreeOut']);
			% m.memorize(prop);
			% warning(warning_backup)
		elseif DegreeOut.getPropCategory(prop) == Category.EVANESCENT && m.getPropFormat(prop) == Format.HANDLE
			m.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:DegreeOut');
			delete(ancestor(m.get(prop), 'figure'))
			warning(warning_backup)
		else
			m.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	m_copy = m.copy();
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		value = m.getr(prop);
		value_copy = m_copy.getr(prop);
		switch DegreeOut.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					'DegreeOut.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
							'DegreeOut.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
							'DegreeOut.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						m_copy.isLocked(prop) == m.isLocked(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.isChecked(prop) == m.isChecked(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.getPropSeed(prop) == m.getPropSeed(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	m_0 = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, DegreeOut.getPropDefault(DegreeOut.TEMPLATE), ...
		DegreeOut.ID, DegreeOut.getPropDefault(DegreeOut.ID), ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, DegreeOut.getPropDefault(DegreeOut.G), ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, DegreeOut.getPropDefault(DegreeOut.PFM) ...
		);
	 
	m = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, m_0.getCallback(3), ..., ...
		DegreeOut.ID, m_0.getCallback(4), ..., ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, m_0.getCallback(11), ..., ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, m_0.getCallback(13) ... ...
		);
	 
	m_copy = m.copy();
	m_0_copy = m_copy.getr('ID').get('EL');
	 
	for prop = 1:1:DegreeOut.getPropNumber()
		value = m.getr(prop);
		value_copy = m_copy.getr(prop);
		switch DegreeOut.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					'DegreeOut.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
							'DegreeOut.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
							'DegreeOut.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == m_0.getCallback(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The callback should be obtained from DegreeOut.getCallback().' ...
						)
					assert( ...
						value_copy == m_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The callback should be obtained from DegreeOut.getCallback().' ...
						)
				end
	 
					assert( ...
						m_copy.isLocked(prop) == m.isLocked(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.isChecked(prop) == m.isChecked(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						m_copy.getPropSeed(prop) == m.getPropSeed(prop), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m_template = DegreeOut();
	m = DegreeOut('TEMPLATE', m_template);
	 
	for prop = 1:1:DegreeOut.getPropNumber()
	 
		% excluded props
		if any(prop == [DegreeOut.PFM])
			continue
		end
	 
		TAG = upper(DegreeOut.getPropTag(prop));
		switch DegreeOut.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == DegreeOut.TEMPLATE
					assert( ...
						isa(m.getr(prop), 'DegreeOut'), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut TEMPLATE does not work. DegreeOut.getr(''TEMPLATE'') should be a DegreeOut element.' ...
						)
					assert( ...
						isa(m_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						'DegreeOut TEMPLATE does not work. DegreeOut_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(m.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut TEMPLATE does not work. DegreeOut.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						m.getr(prop).get('EL') == m_template && m.getr(prop).get('PROP') == prop && strcmp(m.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut TEMPLATE does not work. DegreeOut.getr(' TAG ') should be a Callback to m_template.' TAG '.'] ...
						)
					assert( ...
						isa(m_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
						['DegreeOut TEMPLATE does not work. DegreeOut_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(m.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut TEMPLATE does not work. DegreeOut.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(m_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
					['DegreeOut TEMPLATE does not work. DegreeOut_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, DegreeOut.getPropDefault(DegreeOut.TEMPLATE), ...
		DegreeOut.ID, DegreeOut.getPropDefault(DegreeOut.ID), ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, DegreeOut.getPropDefault(DegreeOut.G), ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, DegreeOut.getPropDefault(DegreeOut.PFM) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'degreeout_to_be_erased.b2'];
	 
	Element.save(m, filename)
	 
	m_loaded = Element.load(filename);
	 
	assert( ...
		isequal(m.copy(), m_loaded), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.save(m) and/or DegreeOut.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m = DegreeOut( ...
		DegreeOut.NAME, DegreeOut.getNoValue(), ...
		DegreeOut.DESCRIPTION, DegreeOut.getNoValue(), ...
		DegreeOut.TEMPLATE, DegreeOut.getPropDefault(DegreeOut.TEMPLATE), ...
		DegreeOut.ID, DegreeOut.getPropDefault(DegreeOut.ID), ...
		DegreeOut.LABEL, DegreeOut.getPropDefault(DegreeOut.LABEL), ...
		DegreeOut.NOTES, DegreeOut.getPropDefault(DegreeOut.NOTES), ...
		DegreeOut.SHAPE, DegreeOut.getNoValue(), ...
		DegreeOut.SCOPE, DegreeOut.getNoValue(), ...
		DegreeOut.PARAMETRICITY, DegreeOut.getNoValue(), ...
		DegreeOut.COMPATIBLE_GRAPHS, DegreeOut.getNoValue(), ...
		DegreeOut.G, DegreeOut.getPropDefault(DegreeOut.G), ...
		DegreeOut.M, DegreeOut.getNoValue(), ...
		DegreeOut.PFM, DegreeOut.getPropDefault(DegreeOut.PFM) ...
		);
	 
	[json, struct, el_list] = encodeJSON(m);
	[m_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(m_dec ~= m, ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		'DegreeOut.encodeJSON() or DegreeOut.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) DegreeOut.getPropFormat(prop), num2cell(DegreeOut.getProps())) == Format.HANDLE) && all(cellfun(@(prop) DegreeOut.getPropFormat(prop), num2cell(DegreeOut.getProps())) == Format.NET)
		assert(isequal(m_dec, m), ...
			[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
			'DegreeOut.encodeJSON() or DegreeOut.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: GraphWD
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B = [
	    0   .2  1
	    0   0   .8
	    1   0   0
	    ];
	
	know_out_degree = {[2 1 1]'};
	
	g = GraphWD('B', B);
	
	m_outside_g = DegreeOut('G', g);
	assert(isequal(m_outside_g.get('M'), know_out_degree), ...
	   [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'DegreeOut');
	assert(isequal(m_inside_g.get('M'), know_out_degree), ...
	    [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 13: GraphBD
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B = [
	    0   1   1
	    0   0   0
	    1   0   0
	    ];
	
	know_out_degree = {[2 0 1]'};
	
	g = GraphBD('B', B);
	
	m_outside_g = DegreeOut('G', g);
	assert(isequal(m_outside_g.get('M'), know_out_degree), ...
	   [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'DegreeOut');
	assert(isequal(m_inside_g.get('M'), know_out_degree), ...
	    [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 14: MultiplexWD
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B11 = [
	      0   .2  1
	      0   0   .8
	      1   0   0
	      ];
	B22 = [
	      0  1   .6
	      1  0   .4
	      0  .4  0
	      ];
	B = {B11 B22};
	
	know_out_degree = {
	                  [2 1 1]'
	                  [2 2 1]'
	                  };
	
	g = MultiplexWD('B', B);
	
	m_outside_g = DegreeOut('G', g);
	assert(isequal(m_outside_g.get('M'), know_out_degree), ...
	   [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'DegreeOut');
	assert(isequal(m_inside_g.get('M'), know_out_degree), ...
	    [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 15: MultiplexBD
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B11 = [
	      0  1  1
	      0  0  0
	      1  0  0
	      ];
	B22 = [
	       0  1  0
	       1  0  1
	       1  1  0
	       ];
	B = {B11 B22};
	
	know_out_degree = { 
	                  [2 0 1]'
	                  [1 2 2]'
	                  };
	
	g = MultiplexBD('B', B);
	
	m_outside_g = DegreeOut('G', g);
	assert(isequal(m_outside_g.get('M'), know_out_degree), ...
	   [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'DegreeOut');
	assert(isequal(m_inside_g.get('M'), know_out_degree), ...
	    [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 16: OrdMxWD
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B11 = [
	      0  1  1
	      0  0  0
	      1  0  0
	      ];
	B22 = [
	       0  1  0
	       1  0  1
	       1  1  0
	       ];
	B = {B11 B22};
	
	know_out_degree = { 
	                  [2 0 1]'
	                  [1 2 2]'
	                  };
	
	g = OrdMxWD('B', B);
	
	m_outside_g = DegreeOut('G', g);
	assert(isequal(m_outside_g.get('M'), know_out_degree), ...
	   [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'DegreeOut');
	assert(isequal(m_inside_g.get('M'), know_out_degree), ...
	    [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 17: OrdMxBD
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B11 = [
	      0   .2  1
	      0   0   .8
	      1   0   0
	      ];
	B22 = [
	      0  1   .6
	      1  0   .4
	      0  .4  0
	      ];
	B = {B11 B22};
	
	know_out_degree = {
	                  [2 1 1]'
	                  [2 2 1]'
	                  };
	
	
	g = OrdMxBD('B', B);
	
	m_outside_g = DegreeOut('G', g);
	assert(isequal(m_outside_g.get('M'), know_out_degree), ...
	   [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'DegreeOut');
	assert(isequal(m_inside_g.get('M'), know_out_degree), ...
	    [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 18: OrdMlWD
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	B11 = [
	    0   .2   .7
	    .2   0   .1
	    .7  .1   0
	    ];
	
	B22 = [    
	    0   .2   .7 .5
	    .2   0   .1 .5
	    .7  .1   0  .5
	    .5  .5  .5  0
	    ];
	B33 = [    
	    0   .2   .9 .5
	    .2   0   .1 .5
	    .9  .1   0  .2
	    .5  .5  .2  0
	    ];
	B12 = rand(size(B11,1),size(B22,2));
	B13 = rand(size(B11,1),size(B33,2));
	B23 = rand(size(B22,1),size(B33,2));
	B21 = B12';
	B31 = B13';
	B32 = B23';
	B= {B11 B12 B13;
	    B21 B22 B23;
	    B31 B32 B33};
	
	g = OrdMlWD('B', B);
	
	BUT_graph = g.get('A');
	
	known_out_degree = {
	                  [2 2 2]'
	                  [3 3 3 3]'
	                  [3 3 3 3]'};
	
	m_outside_g = DegreeOut('G', g);
	assert(isequal(m_outside_g.get('M'), known_out_degree), ...
	   [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_outside_g) ' is not being calculated correctly for ' class(g) '.'])
	
	m_inside_g = g.get('MEASURE', 'DegreeOut');
	assert(isequal(m_inside_g.get('M'), known_out_degree), ...
	    [BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
	    [class(m_inside_g) ' is not being calculated correctly for ' class(g) '.'])
end

%% Test 19: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':DegreeOut:' BRAPH2.FAIL_TEST], ...
		[' When testing DegreeOut no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 20: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

