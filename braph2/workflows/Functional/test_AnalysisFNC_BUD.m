% test AnalysisFNC_BUD

br1 = BrainRegion('BR1', 'brain region 1', 'notes 1', 1, 1.1, 1.11);
br2 = BrainRegion('BR2', 'brain region 2', 'notes 2', 2, 2.2, 2.22);
br3 = BrainRegion('BR3', 'brain region 3', 'notes 3', 3, 3.3, 3.33);
br4 = BrainRegion('BR4', 'brain region 4', 'notes 4', 4, 4.4, 4.44);
br5 = BrainRegion('BR5', 'brain region 5', 'notes 5', 5, 5.5, 5.55);
atlas = BrainAtlas('BA', 'brain atlas', 'notes', 'BrainMesh_ICBM152.nv', {br1, br2, br3, br4, br5});

sub11 = SubjectFNC('ID11', 'label 11', 'notes 11', atlas, 'age', 15, 'FNC', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub12 = SubjectFNC('ID12', 'label 12', 'notes 12', atlas, 'age', 15, 'FNC', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub13 = SubjectFNC('ID13', 'label 13', 'notes 13', atlas, 'age', 15, 'FNC', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub14 = SubjectFNC('ID14', 'label 14', 'notes 14', atlas, 'age', 15, 'FNC', .5 + .5 * rand(atlas.getBrainRegions().length()));

group1 = Group('SubjectFNC', 'group 1 id', 'group 1 label', 'group 1 notes', {sub11, sub12, sub13, sub14}, 'GroupName', 'GroupTestFNC1');

sub21 = SubjectFNC('ID21', 'label 21', 'notes 21', atlas, 'age', 15, 'FNC', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub22 = SubjectFNC('ID22', 'label 22', 'notes 22', atlas, 'age', 15, 'FNC', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub23 = SubjectFNC('ID23', 'label 23', 'notes 23', atlas, 'age', 15, 'FNC', .5 + .5 * rand(atlas.getBrainRegions().length()));

group2 = Group('SubjectFNC', 'group 2 id', 'group 2 label', 'group 2 notes', {sub21, sub22, sub23}, 'GroupName', 'GroupTestFNC2');

cohort = Cohort('Cohort FNC', 'cohort label', 'cohort notes', 'SubjectFNC', atlas, {sub11, sub12, sub13, sub14, sub21, sub22, sub23});
cohort.getGroups().add(group1.getID(), group1)
cohort.getGroups().add(group2.getID(), group2)

graph_type = AnalysisFNC_BUD.getGraphType();
measures = Graph.getCompatibleMeasureList(graph_type);

%% Test 1: Instantiation
analysis = AnalysisFNC_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density', 2); %#ok<NASGU>

%% Test 2: Create correct ID
analysis = AnalysisFNC_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density', 2);

measurement_id = analysis.getMeasurementID('Degree', group1, 'density', 2);
expected_value = [ ...
    tostring(analysis.getMeasurementClass()) ' ' ...
    tostring('Degree') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    ['density=' num2str(2)] ...
    ];
assert(ischar(measurement_id), ...
    [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisFNC_BUD.getMeasurementID() not creating an ID')
assert(isequal(measurement_id, expected_value), ...
    [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisFNC_BUD.getMeasurementID() not creating correct ID')

randomcomparison_id = analysis.getRandomComparisonID('PathLength', group1, 'density', 2);
expected_value = [ ...
    tostring(analysis.getRandomComparisonClass()) ' ' ...
    tostring('PathLength') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    ['density=' num2str(2)] ...
    ];
assert(ischar(randomcomparison_id), ...
    [BRAPH2.STR ':AnalysisFNC_BUD:getRandomComparisonID'], ...
    ['AnalysisFNC_BUD.getRandomComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(randomcomparison_id, expected_value), ...
    [BRAPH2.STR ':AnalysisFNC_BUD:getRandomComparisonID'], ...
    ['AnalysisFNC_BUD.getRandomComparisonID() not creating correct ID']) %#ok<*NBRAK>

comparison_id = analysis.getComparisonID('Distance', group1, group2, 'density', 2);
expected_value = [ ...
    tostring(analysis.getComparisonClass()) ' ' ...
    tostring('Distance') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group2)) ' ' ...
    ['density=' num2str(2)] ...
    ];
assert(ischar(comparison_id), ...
    [BRAPH2.STR ':AnalysisFNC_BUD:getComparisonID'], ...
    ['AnalysisFNC_BUD.getComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(comparison_id, expected_value), ...
    [BRAPH2.STR ':AnalysisFNC_BUD:getComparisonID'], ...
    ['AnalysisFNC_BUD.getComparisonID() not creating correct ID']) %#ok<*NBRAK>

%% Test 3: Calculate Measurement
for i = 1:1:length(measures)
    measure = measures{i};
    analysis = AnalysisFNC_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density', 2);
    calculated_measurement = analysis.getMeasurement(measure, group1);
    
    assert(~isempty(calculated_measurement), ...
        [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.BUG_FUNC], ...
        'AnalysisFNC_BUD.getMeasurement() not working')
    
    measurement_keys = analysis.getMeasurements().getKeys();
    
    for j = 1:1:numel(measurement_keys)
        calculated_measurement = analysis.getMeasurements().getValue(measurement_keys{j});
        calculated_value = calculated_measurement.getMeasureValues();
        
        if Measure.is_global(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisFNC_BUD:calculateMeasurement'], ...
                ['AnalysisFNC_BUD.calculateMeasurement() not working for global']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber) & ...
                all(cellfun(@(x) isequal(size(x), [1, 1]), calculated_value)), ...
                [BRAPH2.STR ':AnalysisFNC_BUD:Instantiation'], ...
                ['AnalysisFNC_BUD does not initialize correctly with global measures.']) %#ok<*NBRAK>
            
        elseif Measure.is_nodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisFNC_BUD:calculateMeasurement'], ...
                ['AnalysisFNC_BUD.calculateMeasurement() not working for nodal']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber) & ...
                all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), calculated_value)), ...
                [BRAPH2.STR ':AnalysisFNC_BUD:Instantiation'], ...
                ['AnalysisFNC_BUD does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
            
        elseif Measure.is_binodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisFNC_BUD:calculateMeasurement'], ...
                ['AnalysisFNC_BUD.calculateMeasurement() not working for binodal']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber) & ...
                all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), calculated_value)), ...
                [BRAPH2.STR ':AnalysisFNC_BUD:Instantiation'], ...
                ['AnalysisFNC_BUD does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        end
    end
end

%% Test 4: Random Compare
for i = 1:1:numel(measures)
    measure = measures{i};
    analysis = AnalysisFNC_BUD('id', 'label', 'notes', cohort, {}, {}, {}, 'density', 2);
    number_of_randomizations = 10;
    calculate_comparison = analysis.getRandomComparison(measure, group1, 'RandomizationNumber', number_of_randomizations);
    
    assert(~isempty(calculate_comparison), ...
        [BRAPH2.STR ':AnalysisFNC_BUD:calculateComparison'], ...
        ['AnalysisFNC_BUD.calculateComparison() not working']) %#ok<*NBRAK>
    
    assert(analysis.getRandomComparisons().length() == 1, ...
        [BRAPH2.STR ':AnalysisFNC_BUD:calculateComparison'], ...
        ['AnalysisFNC_BUD.calculateComparison() not working'])
    
    random_comparison = analysis.getRandomComparisons().getValue(1);
    random_comparison_values_1 = random_comparison.getGroupValue();
    random_comparison_values_2 = random_comparison.getRandomValue();
    random_comparison_difference = random_comparison.getDifference();
    random_comparison_all_differences = random_comparison.getAllDifferences();
    random_comparison_p1 = random_comparison.getP1();
    random_comparison_p2 = random_comparison.getP2();
    random_comparison_confidence_interval_min = random_comparison.getConfidenceIntervalMin();
    random_comparison_confidence_interval_max = random_comparison.getConfidenceIntervalMax();
    
    if Measure.is_global(measures{i})
        assert(iscell(random_comparison_values_1) & ...
            isequal(numel(random_comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_values_1)) & ...
            iscell(random_comparison_values_2) & ...
            isequal(numel(random_comparison_values_2), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_values_2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:Instantiation'], ...
            ['AnalysisFNC_BUD does not initialize correctly with global measures.']) %#ok<*NBRAK>
        
        assert(iscell(random_comparison_difference) && ...
            isequal(numel(random_comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_difference)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(random_comparison_all_differences) && ...
            isequal(numel(random_comparison_all_differences), number_of_randomizations) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_all_differences)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(random_comparison_p1) && ...
            isequal(numel(random_comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_p1)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(random_comparison_p2) && ...
            isequal(numel(random_comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(random_comparison_confidence_interval_min) && ...
            isequal(numel(random_comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(random_comparison_confidence_interval_max) && ...
            isequal(numel(random_comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
    elseif Measure.is_nodal(measures{i})
        assert(iscell(random_comparison_values_1) & ...
            isequal(numel(random_comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_values_1)) & ...
            iscell(random_comparison_values_2) & ...
            isequal(numel(random_comparison_values_2), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_values_2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:Instantiation'], ...
            ['AnalysisFNC_BUD does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        
        assert(iscell(random_comparison_difference) && ...
            isequal(numel(random_comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_difference)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(random_comparison_all_differences) && ...
            isequal(numel(random_comparison_all_differences), number_of_randomizations) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_all_differences)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(random_comparison_p1) && ...
            isequal(numel(random_comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_p1)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(random_comparison_p2) && ...
            isequal(numel(random_comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(random_comparison_confidence_interval_min) && ...
            isequal(numel(random_comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(random_comparison_confidence_interval_max) && ...
            isequal(numel(random_comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
    elseif Measure.is_binodal(measures{i})
        assert(iscell(random_comparison_values_1) & ...
            isequal(numel(random_comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_values_1)), ...
            iscell(random_comparison_values_2) & ...
            isequal(numel(random_comparison_values_2), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_values_2)), ...
            [BRAPH2.STR ':MeasurementMRI:Instantiation'], ...
            ['MeasurementMRI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        assert(iscell(random_comparison_difference) && ...
            isequal(numel(random_comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_difference)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(random_comparison_all_differences) && ...
            isequal(numel(random_comparison_all_differences), number_of_randomizations) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_all_differences)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(random_comparison_p1) && ...
            isequal(numel(random_comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_p1)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(random_comparison_p2) && ...
            isequal(numel(random_comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(random_comparison_confidence_interval_min) && ...
            isequal(numel(random_comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(random_comparison_confidence_interval_max) && ...
            isequal(numel(random_comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
    end
end

%% Test 4: Compare
for i = 1:1:numel(measures)
    measure = measures{i};
    analysis = AnalysisFNC_BUD('id', 'label', 'notes', cohort, {}, {}, {}, 'density', 2);
    number_of_permutations = 10;
    calculate_comparison = analysis.getComparison(measure, group1, group2, 'PermutationNumber', number_of_permutations);
    
    assert(~isempty(calculate_comparison), ...
        [BRAPH2.STR ':AnalysisFNC_BUD:calculateComparison'], ...
        ['AnalysisFNC_BUD.calculateComparison() not working']) %#ok<*NBRAK>
    
    assert(analysis.getComparisons().length() == 1, ...
        [BRAPH2.STR ':AnalysisFNC_BUD:calculateComparison'], ...
        ['AnalysisFNC_BUD.calculateComparison() not working'])
    
    comparison = analysis.getComparisons().getValue(1);
    comparison_values_1 = comparison.getComparisonProperties('ComparisonFNC.values_1');
    comparison_values_2 = comparison.getComparisonProperties('ComparisonFNC.values_2');
    comparison_average_1 = comparison.getComparisonProperties('ComparisonFNC.average_values_1');
    comparison_average_2 = comparison.getComparisonProperties('ComparisonFNC.average_values_2');
    comparison_difference = comparison.getComparisonProperties('ComparisonFNC.difference');
    comparison_all_differences = comparison.getComparisonProperties('ComparisonFNC.all_differences');
    comparison_p1 = comparison.getComparisonProperties('ComparisonFNC.p1');
    comparison_p2 = comparison.getComparisonProperties('ComparisonFNC.p2');
    comparison_confidence_interval_min = comparison.getComparisonProperties('ComparisonFNC.confidence_min');
    comparison_confidence_interval_max = comparison.getComparisonProperties('ComparisonFNC.confidence_max');
    if Measure.is_global(measures{i})
        assert(iscell(comparison_values_1) & ...
            isequal(numel(comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_values_1)) & ...
            iscell(comparison_values_2) & ...
            isequal(numel(comparison_values_2), group2.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_values_2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:Instantiation'], ...
            ['AnalysisFNC_BUD does not initialize correctly with global measures.']) %#ok<*NBRAK>
        
        assert(iscell(comparison_difference) && ...
            isequal(numel(comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_difference)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(comparison_all_differences) && ...
            isequal(numel(comparison_all_differences), number_of_permutations) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_all_differences)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(comparison_p1) && ...
            isequal(numel(comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_p1)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(comparison_p2) && ...
            isequal(numel(comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(comparison_confidence_interval_min) && ...
            isequal(numel(comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
        assert(iscell(comparison_confidence_interval_max) && ...
            isequal(numel(comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with global measures')
        
    elseif Measure.is_nodal(measures{i})
        assert(iscell(comparison_values_1) & ...
            isequal(numel(comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_values_1)) & ...
            iscell(comparison_values_2) & ...
            isequal(numel(comparison_values_2), group2.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_values_2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:Instantiation'], ...
            ['AnalysisFNC_BUD does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        
        assert(iscell(comparison_difference) && ...
            isequal(numel(comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_difference)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(comparison_all_differences) && ...
            isequal(numel(comparison_all_differences), number_of_permutations) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_all_differences)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(comparison_p1) && ...
            isequal(numel(comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_p1)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(comparison_p2) && ...
            isequal(numel(comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(comparison_confidence_interval_min) && ...
            isequal(numel(comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
        assert(iscell(comparison_confidence_interval_max) && ...
            isequal(numel(comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with nodal measures')
        
    elseif Measure.is_binodal(measures{i})
        assert(iscell(comparison_values_1) & ...
            isequal(numel(comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_values_1)), ...
            iscell(comparison_values_2) & ...
            isequal(numel(comparison_values_2), group2.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_values_2)), ...
            [BRAPH2.STR ':MeasurementMRI:Instantiation'], ...
            ['MeasurementMRI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        assert(iscell(comparison_difference) && ...
            isequal(numel(comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_difference)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(comparison_all_differences) && ...
            isequal(numel(comparison_all_differences), number_of_permutations) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_all_differences)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(comparison_p1) && ...
            isequal(numel(comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_p1)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(comparison_p2) && ...
            isequal(numel(comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(comparison_confidence_interval_min) && ...
            isequal(numel(comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
        
        assert(iscell(comparison_confidence_interval_max) && ...
            isequal(numel(comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_BUD.getComparison() not working with binodal measures')
    end
end