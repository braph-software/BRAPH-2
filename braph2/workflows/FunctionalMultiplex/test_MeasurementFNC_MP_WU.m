% test MeasurementFNC_MP_WU

br1 = BrainRegion('BR1', 'brain region 1', 'notes 1', 1, 1.1, 1.11);
br2 = BrainRegion('BR2', 'brain region 2', 'notes 2', 2, 2.2, 2.22);
br3 = BrainRegion('BR3', 'brain region 3', 'notes 3', 3, 3.3, 3.33);
br4 = BrainRegion('BR4', 'brain region 4', 'notes 4', 4, 4.4, 4.44);
br5 = BrainRegion('BR5', 'brain region 5', 'notes 5', 5, 5.5, 5.55);
atlas = BrainAtlas('BA', 'brain atlas', 'notes', 'BrainMesh_ICBM152.nv', {br1, br2, br3, br4, br5});

subject_class = Measurement.getSubjectClass('MeasurementFNC_MP_WU');

sub1 = Subject.getSubject(subject_class, 'id1', 'label 1', 'notes 1', atlas);
sub2 = Subject.getSubject(subject_class, 'id2', 'label 2', 'notes 2', atlas);
sub3 = Subject.getSubject(subject_class, 'id3', 'label 3', 'notes 3', atlas);

group = Group(subject_class, 'id', 'label', 'notes', {sub1, sub2, sub3});

% TODO: get graph type from Analysis
graph_type = 'MultiplexGraphWU';
measures = Graph.getCompatibleMeasureList(graph_type);

%% Test 1: Instantiation
for i = 1:1:numel(measures)
    measurement = MeasurementFNC_MP_WU('m1', 'label', 'notes', atlas, measures{i}, group);
end

%% Test 2: Correct size defaults
for i = 1:1:numel(measures)
    measurement = MeasurementFNC_MP_WU('m1', 'label', 'notes', atlas, measures{i}, group);
    
    layers = 2;  % default
    parameter_values_length = 1;
    
    values = measurement.getMeasureValues();
    average_value = measurement.getGroupAverageValue();
    
    if Measure.is_superglobal(measures{i})  % superglobal measure
        rows = 1;
        columns = 1;
    elseif Measure.is_unilayer(measures{i})  % unilayer measure
        rows = layers;
        columns = 1;
    elseif Measure.is_bilayer(measures{i})  % bilayer measure
        rows = layers;
        columns = layers;
    end
    
    if Measure.is_global(measures{i})
        assert(iscell(values) && ...
            isequal(size(values), [1, rows, columns, group.subjectnumber]) && ...
            all(all(cellfun(@(x) isequal(size(x, 1), 1), values))) && ...
            all(all(cellfun(@(x) isequal(size(x, 2), 1), values)))&& ...
            all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), values))), ...
            [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
            'MeasurementFNC_MP_WU does not initialize correctly with global measures')
        assert(isequal(numel(average_value), 1), ...
            [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
            'MeasurementFNC_MP_WU does not initialize correctly with global measures')
    elseif Measure.is_nodal(measures{i})
        assert(iscell(values) && ...
            isequal(size(values), [1, rows, columns, group.subjectnumber]) && ...
            all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), values))) && ...
            all(all(cellfun(@(x) isequal(size(x, 2), 1), values))) && ...
            all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), values))), ...
            [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
            'MeasurementFNC_MP_WU does not initialize correctly with nodal measures')
        assert(isequal(size(average_value), [atlas.getBrainRegions().length(), 1]), ...
            [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
            'MeasurementFNC_MP_WU does not initialize correctly with nodal measures')
    elseif Measure.is_binodal(measures{i})
        assert(iscell(values) && ...
            isequal(size(values), [1, rows, columns, group.subjectnumber]) && ...
            all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), values))) && ...
            all(all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), values)))&& ...
            all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), values))), ...
            [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
            'MeasurementFNC_MP_WU does not initialize correctly with binodal measures')
        assert(isequal(size(average_value), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), ...
            [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
            'MeasurementFNC_MP_WU does not initialize correctly with binodal measures')
    end
end

%% Test 3: Initialize with values
% for i = 1:1:numel(measures)
%     % setup
%     for j = 1:1:group.subjectnumber()
%         A = rand(atlas.getBrainRegions().length());
%         g = Graph.getGraph('GraphWU', A);
%         m  = Measure.getMeasure(measures{i}, g);
%         values{j} =  cell2mat(m.getValue());
%     end
%     average_value = mean(reshape(cell2mat(values), [size(values{1}, 1), size(values{1}, 2), group.subjectnumber()]), 3);
%     
%     % act
%     measurement = MeasurementFNC_MP_WU('m1', 'label', 'notes', atlas, measures{i}, group, ...
%         'MeasurementFNC_MP_WU.values', values, ...
%         'MeasurementFNC_MP_WU.average_value', average_value ...
%         );
%     
%     layers = 2;  % default
%     parameter_values_length = 1;
%     
%     values = measurement.getMeasureValues();
%     average_value = measurement.getGroupAverageValue();
%     
%     if Measure.is_superglobal(measures{i})  % superglobal measure
%         rows = 1;
%         columns = 1;
%     elseif Measure.is_unilayer(measures{i})  % unilayer measure
%         rows = layers;
%         columns = 1;
%     elseif Measure.is_bilayer(measures{i})  % bilayer measure
%         rows = layers;
%         columns = layers;
%     end
%     
%     if Measure.is_global(measures{i})
%         assert(iscell(values) && ...
%             isequal(size(values), [1, rows, columns, group.subjectnumber]) && ...
%             all(all(cellfun(@(x) isequal(size(x, 1), 1), values))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 2), 1), values)))&& ...
%             all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), values))), ...
%             [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
%             'MeasurementFNC_MP_WU does not initialize correctly with global measures')
%         assert(isequal(numel(average_value), 1), ...
%             [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
%             'MeasurementFNC_MP_WU does not initialize correctly with global measures')
%     elseif Measure.is_nodal(measures{i})
%         assert(iscell(values) && ...
%             isequal(size(values), [1, rows, columns, group.subjectnumber]) && ...
%             all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), values))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 2), 1), values))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), values))), ...
%             [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
%             'MeasurementFNC_MP_WU does not initialize correctly with nodal measures')
%         assert(isequal(size(average_value), [atlas.getBrainRegions().length(), 1]), ...
%             [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
%             'MeasurementFNC_MP_WU does not initialize correctly with nodal measures')
%     elseif Measure.is_binodal(measures{i})
%         assert(iscell(values) && ...
%             isequal(size(values), [1, rows, columns, group.subjectnumber]) && ...
%             all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), values))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), values)))&& ...
%             all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), values))), ...
%             [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
%             'MeasurementFNC_MP_WU does not initialize correctly with binodal measures')
%         assert(isequal(size(average_value), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), ...
%             [BRAPH2.STR ':MeasurementFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
%             'MeasurementFNC_MP_WU does not initialize correctly with binodal measures')
%     end
% end