% test AnalysisFNC_MP_WU

root = fileparts(which('SubjectFNC_MP'));
example = [root filesep() 'example data FNC_MP' filesep() 'desikan_atlas.xlsx'];
atlas = BrainAtlas.load_from_xls('File', example);

sub1 = SubjectFNC_MP('id1', 'label1', 'notes1', atlas, 'FNC_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length()), 'FNC_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub2 = SubjectFNC_MP('id2', 'label2', 'notes2', atlas, 'FNC_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length()), 'FNC_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub3 = SubjectFNC_MP('id3', 'label3', 'notes3', atlas, 'FNC_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length()), 'FNC_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub4 = SubjectFNC_MP('id4', 'label4', 'notes4', atlas, 'FNC_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length()), 'FNC_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub5 = SubjectFNC_MP('id5', 'label5', 'notes5', atlas, 'FNC_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length()), 'FNC_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub6 = SubjectFNC_MP('id6', 'label6', 'notes6', atlas, 'FNC_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length()), 'FNC_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length()));

group1 = Group('SubjectFNC_MP', 'group 1 id', 'group 1 label', 'group 1 notes', {sub1, sub2, sub3}, 'GroupName', 'GroupTestFNC_MP_1');
group2 = Group('SubjectFNC_MP', 'group 2 id', 'group 2 label', 'group 2 notes', {sub4, sub5, sub6}, 'GroupName', 'GroupTestFNC_MP_2');


cohort = Cohort('Cohort FNC MP', 'cohort label', 'cohort notes', 'SubjectFNC_MP', atlas, {sub1, sub2, sub3, sub4, sub5, sub6});
cohort.getGroups().add(group1.getID(), group1)
cohort.getGroups().add(group2.getID(), group2)

graph_type = AnalysisFNC_MP_WU.getGraphType();
measures = Graph.getCompatibleMeasureList(graph_type);

%% Test 1: Instantiation
analysis = AnalysisFNC_MP_WU('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}); %#ok<NASGU>

%% Test 2: Create correct ID
analysis = AnalysisFNC_MP_WU('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {});

measurement_id = analysis.getMeasurementID('Degree', group1);
expected_value = [ ...
    tostring(analysis.getMeasurementClass()) ' ' ...
    tostring('Degree') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ...
    ];
assert(ischar(measurement_id), ...
    [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisFNC_MP_WU.getMeasurementID() not creating an ID')
assert(isequal(measurement_id, expected_value), ...
    [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisFNC_MP_WU.getMeasurementID() not creating correct ID')

randomcomparison_id = analysis.getRandomComparisonID('PathLength', group1);
expected_value = [ ...
    tostring(analysis.getRandomComparisonClass()) ' ' ...
    tostring('PathLength') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ...
    ];
assert(ischar(randomcomparison_id), ...
    [BRAPH2.STR ':AnalysisFNC_MP_WU:getRandomComparisonID'], ...
    ['AnalysisFNC_MP_WU.getRandomComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(randomcomparison_id, expected_value), ...
    [BRAPH2.STR ':AnalysisFNC_MP_WU:getRandomComparisonID'], ...
    ['AnalysisFNC_MP_WU.getRandomComparisonID() not creating correct ID']) %#ok<*NBRAK>

comparison_id = analysis.getComparisonID('Distance', group1, group2);
expected_value = [ ...
    tostring(analysis.getComparisonClass()) ' ' ...
    tostring('Distance') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group2)) ...
    ];
assert(ischar(comparison_id), ...
    [BRAPH2.STR ':AnalysisFNC_MP_WU:getComparisonID'], ...
    ['AnalysisFNC_MP_WU.getComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(comparison_id, expected_value), ...
    [BRAPH2.STR ':AnalysisFNC_MP_WU:getComparisonID'], ...
    ['AnalysisFNC_MP_WU.getComparisonID() not creating correct ID']) %#ok<*NBRAK>

%% Test 3: Calculate Measurement
for i = 1:1:length(measures)
    measure = measures{i};
    analysis = AnalysisFNC_MP_WU('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {});
    calculated_measurement = analysis.getMeasurement(measure, group1);
    parameter_values_length = 1;
    
    assert(~isempty(calculated_measurement), ...
        [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.BUG_FUNC], ...
        'AnalysisFNC_MP_WU.getMeasurement() not working')
    
    measurement_keys = analysis.getMeasurements().getKeys();
    sub1 = analysis.getCohort().getSubjects().getValue(1);
    layers = sub1.getNumberOfLayers();
    
    if Measure.is_superglobal(measure)  % superglobal measure
        rows = 1;
        columns = 1;
    elseif Measure.is_unilayer(measure)  % unilayer measure
        rows = layers;
        columns = 1;
    elseif Measure.is_bilayer(measure)  % bilayer measure
        rows = layers;
        columns = layers;
    end

    
    for j = 1:1:numel(measurement_keys)
        calculated_measurement = analysis.getMeasurements().getValue(measurement_keys{j});
        calculated_value = calculated_measurement.getMeasureValues();
        
        if Measure.is_global(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisFNC_MP_WU:calculateMeasurement'], ...
                ['AnalysisFNC_MP_WU.calculateMeasurement() not working for global']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber * rows) & ...
                all(all(cellfun(@(x) isequal(size(x, 1), 1), calculated_measurement.getMeasureValues()))) & ...
                all(all(cellfun(@(x) isequal(size(x, 2), 1), calculated_measurement.getMeasureValues()))) & ...
                all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), calculated_measurement.getMeasureValues()))), ...
                [BRAPH2.STR ':AnalysisFNC_MP_WU:Instantiation'], ...
                ['AnalysisFNC_MP_WU does not initialize correctly with global measures.']) %#ok<*NBRAK>
            
        elseif Measure.is_nodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisFNC_MP_WU:calculateMeasurement'], ...
                ['AnalysisFNC_MP_WU.calculateMeasurement() not working for nodal']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber * rows) & ...
                all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), calculated_measurement.getMeasureValues()))) & ...
                all(all(cellfun(@(x) isequal(size(x, 2), 1), calculated_measurement.getMeasureValues()))) & ...
                all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), calculated_measurement.getMeasureValues()))), ...
                [BRAPH2.STR ':AnalysisFNC_MP_WU:Instantiation'], ...
                ['AnalysisFNC_MP_WU does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        
        elseif Measure.is_binodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisFNC_MP_WU:calculateMeasurement'], ...
                ['AnalysisFNC_MP_WU.calculateMeasurement() not working for binodal']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber*rows) & ...
                all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), calculated_measurement.getMeasureValues()))) & ...
                all(all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), calculated_measurement.getMeasureValues()))) & ...
                all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), calculated_measurement.getMeasureValues()))), ...
                [BRAPH2.STR ':AnalysisFNC_MP_WU:Instantiation'], ...
                ['AnalysisFNC_MP_WU does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        end
    end
end
 
%% Test 4: Random Compare
for i = 1:1:numel(measures)
    measure = measures{i};
    analysis = AnalysisFNC_MP_WU('id', 'label', 'notes', cohort, {}, {}, {});
    number_of_randomizations = 2;
    calculate_comparison = analysis.getRandomComparison(measure, group1, 'RandomizationNumber', number_of_randomizations);
    
    assert(~isempty(calculate_comparison), ...
        [BRAPH2.STR ':AnalysisFNC_MP_WU:calculateComparison'], ...
        ['AnalysisFNC_MP_WU.calculateComparison() not working']) %#ok<*NBRAK>
    
    assert(analysis.getRandomComparisons().length() == 1, ...
        [BRAPH2.STR ':AnalysisFNC_MP_WU:calculateComparison'], ...
        ['AnalysisFNC_MP_WU.calculateComparison() not working'])
    
    random_comparison = analysis.getRandomComparisons().getValue(1);
    random_comparison_values_1 = random_comparison.getGroupValue();
    random_comparison_values_2 = random_comparison.getRandomValue();
    random_comparison_difference = random_comparison.getDifference();
    random_comparison_all_differences = random_comparison.getAllDifferences();
    random_comparison_p1 = random_comparison.getP1();
    random_comparison_p2 = random_comparison.getP2();
    random_comparison_confidence_interval_min = random_comparison.getConfidenceIntervalMin();
    random_comparison_confidence_interval_max = random_comparison.getConfidenceIntervalMax();
    
    if Measure.is_global(measures{i})
        assert(iscell(random_comparison_values_1) & ...
            isequal(numel(random_comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_values_1)) & ...
            iscell(random_comparison_values_2) & ...
            isequal(numel(random_comparison_values_2), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_values_2)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:Instantiation'], ...
            ['AnalysisFNC_MP_WU does not initialize correctly with global measures.']) %#ok<*NBRAK>
        
        assert(iscell(random_comparison_difference) && ...
            isequal(numel(random_comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_difference)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
        
        assert(iscell(random_comparison_all_differences) && ...
            isequal(numel(random_comparison_all_differences), number_of_randomizations) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_all_differences)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
        
        assert(iscell(random_comparison_p1) && ...
            isequal(numel(random_comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_p1)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with global measures') 

        assert(iscell(random_comparison_p2) && ...
            isequal(numel(random_comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
        
        assert(iscell(random_comparison_confidence_interval_min) && ...
            isequal(numel(random_comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with global measures') 

        assert(iscell(random_comparison_confidence_interval_max) && ...
            isequal(numel(random_comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), random_comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
        
    elseif Measure.is_nodal(measures{i})
        assert(iscell(random_comparison_values_1) & ...
            isequal(numel(random_comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_values_1)) & ...
            iscell(random_comparison_values_2) & ...
            isequal(numel(random_comparison_values_2), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_values_2)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:Instantiation'], ...
            ['AnalysisFNC_MP_WU does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        
        assert(iscell(random_comparison_difference) && ...
            isequal(numel(random_comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_difference)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 
        
        assert(iscell(random_comparison_all_differences) && ...
            isequal(numel(random_comparison_all_differences), number_of_randomizations) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_all_differences)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with nodal measures')  
        
        assert(iscell(random_comparison_p1) && ...
            isequal(numel(random_comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_p1)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 

        assert(iscell(random_comparison_p2) && ...
            isequal(numel(random_comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 
        
        assert(iscell(random_comparison_confidence_interval_min) && ...
            isequal(numel(random_comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 

        assert(iscell(random_comparison_confidence_interval_max) && ...
            isequal(numel(random_comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), random_comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 

    elseif Measure.is_binodal(measures{i})
       assert(iscell(random_comparison_values_1) & ...
            isequal(numel(random_comparison_values_1), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_values_1)), ...
            iscell(random_comparison_values_2) & ...
            isequal(numel(random_comparison_values_2), group1.subjectnumber()) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_values_2)), ...
            [BRAPH2.STR ':MeasurementMRI:Instantiation'], ...
            ['MeasurementMRI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        assert(iscell(random_comparison_difference) && ...
            isequal(numel(random_comparison_difference), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_difference)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
        
        assert(iscell(random_comparison_all_differences) && ...
            isequal(numel(random_comparison_all_differences), number_of_randomizations) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_all_differences)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
        
        assert(iscell(random_comparison_p1) && ...
            isequal(numel(random_comparison_p1), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_p1)), ...        
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 

        assert(iscell(random_comparison_p2) && ...
            isequal(numel(random_comparison_p2), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_p2)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
        
        assert(iscell(random_comparison_confidence_interval_min) && ...
            isequal(numel(random_comparison_confidence_interval_min), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 

        assert(iscell(random_comparison_confidence_interval_max) && ...
            isequal(numel(random_comparison_confidence_interval_max), 1) && ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), random_comparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
    end
end

% %% Test 4: Compare
% for i = 1:1:numel(measures)
%     measure = measures{i};
%     analysis = AnalysisFNC_MP_WU('id', 'label', 'notes', cohort, {}, {}, {});
%     statistic = 'PermutationTest';
%     
%     number_of_permutations = 10;
%     calculate_comparison = analysis.getComparison(measure, group1, group2, 'PermutationNumber', number_of_permutations);
%     
%     assert(~isempty(calculate_comparison), ...
%         [BRAPH2.STR ':AnalysisFNC_MP_WU:calculateComparison'], ...
%         ['AnalysisFNC_MP_WU.calculateComparison() not working']) %#ok<*NBRAK>
%     
%     assert(analysis.getComparisons().length() == 1, ...
%         [BRAPH2.STR ':AnalysisFNC_MP_WU:calculateComparison'], ...
%         ['AnalysisFNC_MP_WU.calculateComparison() not working'])
%     
%     comparison = analysis.getComparisons().getValue(1);
%     comparison_values_1 = comparison.getComparisonProperties('ComparisonFNC.values_1');
%     comparison_values_2 = comparison.getComparisonProperties('ComparisonFNC.values_2');
%     comparison_average_1 = comparison.getComparisonProperties('ComparisonFNC.average_values_1');
%     comparison_average_2 = comparison.getComparisonProperties('ComparisonFNC.average_values_2');
%     comparison_difference = comparison.getComparisonProperties('ComparisonFNC.difference');
%     comparison_all_differences = comparison.getComparisonProperties('ComparisonFNC.all_differences');
%     comparison_p1 = comparison.getComparisonProperties('ComparisonFNC.p1');
%     comparison_p2 = comparison.getComparisonProperties('ComparisonFNC.p2');
%     comparison_confidence_interval_min = comparison.getComparisonProperties('ComparisonFNC.confidence_min');
%     comparison_confidence_interval_max = comparison.getComparisonProperties('ComparisonFNC.confidence_max');
%     
%      if Measure.is_global(measures{i})
%         assert(iscell(comparison_values_1) & ...
%             isequal(numel(comparison_values_1), group1.subjectnumber()) & ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_values_1)) & ...
%             iscell(comparison_values_2) & ...
%             isequal(numel(comparison_values_2), group2.subjectnumber()) & ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_values_2)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:Instantiation'], ...
%             ['AnalysisFNC_MP_WU does not initialize correctly with global measures.']) %#ok<*NBRAK>
%         
%         assert(iscell(comparison_difference) && ...
%             isequal(numel(comparison_difference), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_difference)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_all_differences) && ...
%             isequal(numel(comparison_all_differences), number_of_permutations) && ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_all_differences)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_p1) && ...
%             isequal(numel(comparison_p1), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_p1)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
% 
%         assert(iscell(comparison_p2) && ...
%             isequal(numel(comparison_p2), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_p2)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_confidence_interval_min) && ...
%             isequal(numel(comparison_confidence_interval_min), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_confidence_interval_min)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
% 
%         assert(iscell(comparison_confidence_interval_max) && ...
%             isequal(numel(comparison_confidence_interval_max), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_confidence_interval_max)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with global measures') 
%         
%     elseif Measure.is_nodal(measures{i})
%         assert(iscell(comparison_values_1) & ...
%             isequal(numel(comparison_values_1), group1.subjectnumber()) & ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_values_1)) & ...
%             iscell(comparison_values_2) & ...
%             isequal(numel(comparison_values_2), group2.subjectnumber()) & ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_values_2)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:Instantiation'], ...
%             ['AnalysisFNC_MP_WU does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
%         
%         assert(iscell(comparison_difference) && ...
%             isequal(numel(comparison_difference), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_difference)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 
%         
%         assert(iscell(comparison_all_differences) && ...
%             isequal(numel(comparison_all_differences), number_of_permutations) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_all_differences)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with nodal measures')  
%         
%         assert(iscell(comparison_p1) && ...
%             isequal(numel(comparison_p1), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_p1)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 
% 
%         assert(iscell(comparison_p2) && ...
%             isequal(numel(comparison_p2), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_p2)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 
%         
%         assert(iscell(comparison_confidence_interval_min) && ...
%             isequal(numel(comparison_confidence_interval_min), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_confidence_interval_min)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 
% 
%         assert(iscell(comparison_confidence_interval_max) && ...
%             isequal(numel(comparison_confidence_interval_max), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_confidence_interval_max)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with nodal measures') 
% 
%     elseif Measure.is_binodal(measures{i})
%        assert(iscell(comparison_values_1) & ...
%             isequal(numel(comparison_values_1), group1.subjectnumber()) & ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_values_1)), ...
%             iscell(comparison_values_2) & ...
%             isequal(numel(comparison_values_2), group2.subjectnumber()) & ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_values_2)), ...
%             [BRAPH2.STR ':MeasurementMRI:Instantiation'], ...
%             ['MeasurementMRI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
%         assert(iscell(comparison_difference) && ...
%             isequal(numel(comparison_difference), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_difference)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
%         
%         assert(iscell(comparison_all_differences) && ...
%             isequal(numel(comparison_all_differences), number_of_permutations) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_all_differences)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
%         
%         assert(iscell(comparison_p1) && ...
%             isequal(numel(comparison_p1), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_p1)), ...        
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
% 
%         assert(iscell(comparison_p2) && ...
%             isequal(numel(comparison_p2), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_p2)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
%         
%         assert(iscell(comparison_confidence_interval_min) && ...
%             isequal(numel(comparison_confidence_interval_min), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_confidence_interval_min)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
% 
%         assert(iscell(comparison_confidence_interval_max) && ...
%             isequal(numel(comparison_confidence_interval_max), 1) && ...
%             all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_confidence_interval_max)), ...
%             [BRAPH2.STR ':AnalysisFNC_MP_WU:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisFNC_MP_WU.getComparison() not working with binodal measures') 
%     end
% end

% %% Save to xls 
% % setup
% save_dir_rule = 'RootDirectory';
% analysis = AnalysisFNC_MP_WU('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {});
% save_dir_path = [fileparts(which('test_braph2')) filesep analysis.getID()];
% calculated_measurement = analysis.getMeasurement('Degree', group1);
% calculated_comparison = analysis.getComparison('Degree', group1, group2);
% calculated_random_comparison = analysis.getRandomComparison('Degree', group1);
% 
% % act
% AnalysisFNC_MP_WU.save_to_xls(analysis, save_dir_rule, save_dir_path);
% analysis_load = AnalysisFNC_MP_WU.load_from_xls(cohort, save_dir_rule, save_dir_path);
% 
% % assert
% assert( ~isempty(analysis_load), ...
%     ['BRAPH:AnalysisFNC_MP_WU:save_to_xls'], ...
%     ['AnalysisFNC_MP_WU.save_to_xls() not working properly'])
% 
% rmdir(save_dir_path, 's')

% %% Save to json
% % setup
% save_dir_rule = 'File';
% analysis = AnalysisFNC_MP_WU('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {});
% save_dir_path = [fileparts(which('test_braph2')) filesep analysis.getID() '.json'];
% calculated_measurement = analysis.getMeasurement('Degree', group1);
% calculated_comparison = analysis.getComparison('Degree', group1, group2);
% calculated_random_comparison = analysis.getRandomComparison('Degree', group1);
% 
% % act
% JSON.Serialize(AnalysisFNC_MP_WU.save_to_json(analysis), save_dir_rule, save_dir_path);
% analysis_load = AnalysisFNC_MP_WU.load_from_json(cohort, save_dir_rule, save_dir_path);
% 
% % assert
% assert( ~isempty(analysis_load), ...
%     ['BRAPH:AnalysisFNC_MP_WU:save_to_json'], ...
%     ['AnalysisFNC_MP_WU.save_to_json() not working properly'])
% 
% delete(save_dir_path)
% 
% %% GUIAnalysisSettings Pass a FNC cohort
% cohort_file = [fileparts(which('example_workflow_FNC_WU.m')) filesep() 'example data FNC (fMRI)' filesep() 'cohort_example.cohort'];
% temp = load(cohort_file, '-mat', 'cohort', 'selected_group', 'selected_subjects', 'BUILD');
% cohort = temp.cohort;
% 
% GUIAnalysisSettings(cohort, 'AnalysisFNC_MP_WU')
% 
% set(gcf, 'CloseRequestFcn', 'closereq')
% close(gcf)
% 
% %% GUIAnalysis Init FNC
% 
% analysis_file = [fileparts(which('example_workflow_FNC_WU.m')) filesep() 'example data FNC (fMRI)' filesep() 'analysis_example_FNC_BUT.analysis'];
% temp = load(analysis_file, '-mat', 'ga', 'BUILD');
% ga = temp.ga;
% 
% GUIAnalysis(ga)
% 
% set(gcf, 'CloseRequestFcn', 'closereq')
% close(gcf)