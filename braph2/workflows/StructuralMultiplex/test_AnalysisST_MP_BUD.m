% test AnalysisST_MP_BUD
 
root = fileparts(which('SubjectST_MP'));
example = [root filesep() 'example_data_ST_MP' filesep() 'desikan_atlas.xlsx'];
atlas = BrainAtlas.load_from_xls('File', example);

% first 10 subjects, 5 brain regions. abs value
sub1 = SubjectST_MP('id1', 'label1', 'notes1', atlas, 'ST_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length(), 1), 'ST_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length(), 1));
sub2 = SubjectST_MP('id2', 'label2', 'notes2', atlas, 'ST_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length(), 1), 'ST_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length(), 1));
sub3 = SubjectST_MP('id3', 'label3', 'notes3', atlas, 'ST_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length(), 1), 'ST_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length(), 1));
sub4 = SubjectST_MP('id4', 'label4', 'notes4', atlas, 'ST_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length(), 1), 'ST_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length(), 1));
sub5 = SubjectST_MP('id5', 'label5', 'notes5', atlas, 'ST_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length(), 1), 'ST_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length(), 1));
sub6 = SubjectST_MP('id6', 'label6', 'notes6', atlas, 'ST_MP_1', .5 + .5 * rand(atlas.getBrainRegions().length(), 1), 'ST_MP_2', .5 + .5 * rand(atlas.getBrainRegions().length(), 1));

group1 = Group('SubjectST_MP', 'group 1 id', 'group 1 label', 'group 1 notes', {sub1, sub2, sub3}, 'GroupName', 'GroupTestST_MP_1');
group2 = Group('SubjectST_MP', 'group 2 id', 'group 2 label', 'group 2 notes', {sub4, sub5, sub6}, 'GroupName', 'GroupTestST_MP_2');

cohort = Cohort('Cohort ST MP WU', 'cohort label', 'cohort notes', 'SubjectST_MP', atlas, {sub1, sub2, sub3, sub4, sub5, sub6});
cohort.getGroups().add(group1.getID(), group1)
cohort.getGroups().add(group2.getID(), group2)

graph_type = AnalysisST_MP_BUD.getGraphType();
measures = Graph.getCompatibleMeasureList(graph_type);

%% Test 1: Instantiation
analysis = AnalysisST_MP_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density', 0.7); %#ok<NASGU>

%% Test 2: Create correct ID
analysis = AnalysisST_MP_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density', 0.7);

measurement_id = analysis.getMeasurementID('Degree', group1, 'density', 0.7);
expected_value = [ ...
    tostring(analysis.getMeasurementClass()) ' ' ...
    tostring('Degree') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    ['density=' num2str(0.7)], ...
    ];
assert(ischar(measurement_id), ...
    [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisST_MP_BUD.getMeasurementID() not creating an ID')
assert(isequal(measurement_id, expected_value), ...
    [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisST_MP_BUD.getMeasurementID() not creating correct ID')

randomcomparison_id = analysis.getRandomComparisonID('Degree', group1, 'density', 0.7);
expected_value = [ ...
    tostring(analysis.getRandomComparisonClass()) ' ' ...
    tostring('Degree') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    ['density=' num2str(0.7)], ...
    ];
assert(ischar(randomcomparison_id), ...
    [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisST_MP_BUD.getRandomComparisonID() not creating an ID')
assert(isequal(randomcomparison_id, expected_value), ...
    [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisST_MP_BUD.getRandomComparisonID() not creating correct ID')

comparison_id = analysis.getComparisonID('Distance', group1, group2, 'density', 0.7);
expected_value = [ ...
    tostring(analysis.getComparisonClass()) ' ' ...
    tostring('Distance') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group2)) ' ' ...
    ['density=' num2str(0.7)], ...
    ];
assert(ischar(comparison_id), ...
    [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisST_MP_BUD.getComparisonID() not creating an ID')
assert(isequal(comparison_id, expected_value), ...
    [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
    'AnalysisST_MP_BUD.getComparisonID() not creating correct ID')

%% Test 3: Measurement
for i = 1:1:length(measures)
    measure = measures{i};
    % I can do it with settings or just pssing to the measurement.
    analysis = AnalysisST_MP_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density', .6);
    calculated_measurement = analysis.getMeasurement(measure, group1, 'density', .6);
    
    assert(~isempty(calculated_measurement), ...
        [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
        'AnalysisST_MP_BUD.getMeasurement() not working')
    
    measurement_keys = analysis.getMeasurements().getKeys();
    sub1 = analysis.getCohort().getSubjects().getValue(1);
    layers = sub1.getNumberOfLayers();
    
    if Measure.is_superglobal(measure)
        num_elements = 1;
    elseif Measure.is_unilayer(measure)
        num_elements = layers;
    elseif Measure.is_bilayer(measure)
        num_elements = 2*layers;
    end
    
    for j = 1:1:numel(measurement_keys)
        calculated_measurement = analysis.getMeasurements().getValue(measurement_keys{j});
        calculated_value = calculated_measurement.getMeasureValue();
        parameter_values = calculated_measurement.getMeasureParameterValues();
        parameter_values_length = max(1, length(parameter_values));
        
        if Measure.is_global(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
                'AnalysisST_MP_BUD.calculateMeasurement() not working for global')
            assert(iscell(calculated_value) && ...
                isequal(numel(calculated_value), num_elements) && ...
                all(cellfun(@(x) isequal(size(x, 1), 1), calculated_value)) && ...
                all(cellfun(@(x) isequal(size(x, 2), 1), calculated_value)) && ...
                all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), calculated_value)), ...
                [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
                'AnalysisST_MP_BUD does not initialize correctly with global measures')
            
        elseif Measure.is_nodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisST_MP_BUD:calculateMeasurement'], ...
                'AnalysisST_MP_BUD.calculateMeasurement() not working for nodal')
            assert(iscell(calculated_value) && ...
                isequal(numel(calculated_value), num_elements) && ...
                all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), calculated_value)) && ...
                all(cellfun(@(x) isequal(size(x, 2), 1), calculated_value)) && ...
                all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), calculated_value)), ...
                [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
                'AnalysisST_MP_BUD does not initialize correctly with nodal measures')
        
        elseif Measure.is_binodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
                'AnalysisST_MP_BUD.calculateMeasurement() not working for binodal')
            assert(iscell(calculated_value) && ...
                isequal(numel(calculated_value), num_elements) && ...
                all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), calculated_value)) && ...
                all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), calculated_value)) && ...
                all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), calculated_value)), ...
                [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
                'AnalysisST_MP_BUD does not initialize correctly with binodal measures')
        end
    end
end

%% Test 4: Random Compare
for i = 1:1:numel(measures)
    measure = measures{i};
    analysis = AnalysisST_MP_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density1', .6, 'density2', .5);

    measurement_group = analysis.getMeasurement(measure, group1, 'density1', .6, 'density2', .5);
    parameter_value_group = measurement_group.getMeasureParameterValues();
    parameter_values_length = max(1, length(parameter_value_group)); 

    number_of_randomizations = 10;
    calculated_comparison = analysis.getRandomComparison(measure, group1, 'RandomizationNumber', number_of_randomizations, 'RandomComparisonST_MP.ParameterValues', parameter_value_group, 'density1', .6, 'density2', .5);

    assert(~isempty(calculated_comparison), ...
        [BRAPH2.STR ':AnalysisST_MP_BUD:calculateComparison'], ...
        ['AnalysisST_MP_BUD.calculateComparison() not working']) %#ok<*NBRAK>
    
    assert(analysis.getRandomComparisons().length() == 1, ...
        [BRAPH2.STR ':AnalysisST_MP_BUD:calculateComparison'], ...
        ['AnalysisST_MP_BUD.calculateComparison() not working'])
    
    randomcomparison = analysis.getRandomComparisons().getValue(1);
    randomcomparison_value_group = randomcomparison.getGroupValue();
    randomcomparison_value_random = randomcomparison.getRandomValue();
    randomcomparison_difference = randomcomparison.getDifference();
    randomcomparison_all_differences = randomcomparison.getAllDifferences();
    randomcomparison_p1 = randomcomparison.getP1();
    randomcomparison_p2 = randomcomparison.getP2();
    randomcomparison_confidence_interval_min = randomcomparison.getConfidenceIntervalMin();
    randomcomparison_confidence_interval_max = randomcomparison.getConfidenceIntervalMax();
    randomcomparison_parameter_values = randomcomparison.getMeasureParameterValues(); 
    randomcomparison_parameter_values_length = max(1, length(randomcomparison_parameter_values));
    
    assert(isequal(parameter_values_length, randomcomparison_parameter_values_length),  ... 
    [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
    'AnalysisST_MP_BUD.getRandomComparison() does not initialize correctly the parameter of the measures')

    sub1 = analysis.getCohort().getSubjects().getValue(1);
    layers = sub1.getNumberOfLayers();
    
    if Measure.is_superglobal(measure)
        num_elements = 1;
    elseif Measure.is_unilayer(measure)
        num_elements = layers;
    elseif Measure.is_bilayer(measure)
        num_elements = 2*layers;
    end
    
    if Measure.is_global(measure)
        assert(iscell(randomcomparison_value_group) && ...
            isequal(numel(randomcomparison_value_group), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_value_group)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_value_group)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_value_group)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 

        assert(iscell(randomcomparison_value_random) && ...
            isequal(numel(randomcomparison_value_random), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_value_random)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_value_random)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_value_random)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 
        
        assert(iscell(randomcomparison_difference) && ...
            isequal(numel(randomcomparison_difference), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_difference)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_difference)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_difference)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 

        assert(iscell(randomcomparison_all_differences) && ...
            isequal(numel(randomcomparison_all_differences), num_elements*number_of_randomizations) && ...
            all(all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_all_differences))) && ...
            all(all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_all_differences))) && ...
            all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_all_differences))), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 

        assert(iscell(randomcomparison_p1) && ...
            isequal(numel(randomcomparison_p1), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_p1)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_p1)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_p1)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 

        assert(iscell(randomcomparison_p2) && ...
            isequal(numel(randomcomparison_p2), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_p2)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_p2)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_p2)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 

        assert(iscell(randomcomparison_confidence_interval_min) && ...
            isequal(numel(randomcomparison_confidence_interval_min), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_confidence_interval_min)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_confidence_interval_min)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 

        assert(iscell(randomcomparison_confidence_interval_max) && ...
            isequal(numel(randomcomparison_confidence_interval_max), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), 1), randomcomparison_confidence_interval_max)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_confidence_interval_max)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with global measures') 
        
    elseif Measure.is_nodal(measure)
        assert(iscell(randomcomparison_value_group) && ...
            isequal(numel(randomcomparison_value_group), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_value_group)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_value_group)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_value_group)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 

        assert(iscell(randomcomparison_value_random) && ...
            isequal(numel(randomcomparison_value_random), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_value_random)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_value_random)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_value_random)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 
        
        assert(iscell(randomcomparison_difference) && ...
            isequal(numel(randomcomparison_difference), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_difference)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_difference)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_difference)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 

        assert(iscell(randomcomparison_all_differences) && ...
            isequal(numel(randomcomparison_all_differences), num_elements*number_of_randomizations) && ...
            all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_all_differences))) && ...
            all(all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_all_differences))) && ...
            all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_all_differences))), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 

        assert(iscell(randomcomparison_p1) && ...
            isequal(numel(randomcomparison_p1), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_p1)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_p1)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_p1)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 

        assert(iscell(randomcomparison_p2) && ...
            isequal(numel(randomcomparison_p2), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_p2)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_p2)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_p2)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 

        assert(iscell(randomcomparison_confidence_interval_min) && ...
            isequal(numel(randomcomparison_confidence_interval_min), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_confidence_interval_min)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_confidence_interval_min)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 

        assert(iscell(randomcomparison_confidence_interval_max) && ...
            isequal(numel(randomcomparison_confidence_interval_max), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_confidence_interval_max)) && ...
            all(cellfun(@(x) isequal(size(x, 2), 1), randomcomparison_confidence_interval_max)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with nodal measures') 
        
    elseif Measure.is_binodal(measure)
        assert(iscell(randomcomparison_value_group) && ...
            isequal(numel(randomcomparison_value_group), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_value_group)) && ...
            all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_value_group)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_value_group)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures') 

        assert(iscell(randomcomparison_value_random) && ...
            isequal(numel(randomcomparison_value_random), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_value_random)) && ...
            all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_value_random)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_value_random)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures') 
        
        assert(iscell(randomcomparison_difference) && ...
            isequal(numel(randomcomparison_difference), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_difference)) && ...
            all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_difference)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_difference)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures') 

        assert(iscell(randomcomparison_all_differences) && ...
            isequal(numel(randomcomparison_all_differences), num_elements*number_of_randomizations) && ...
            all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_all_differences))) && ...
            all(all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_all_differences))) && ...
            all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_all_differences))), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures') 

        assert(iscell(randomcomparison_p1) && ...
            isequal(numel(randomcomparison_p1), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_p1)) && ...
            all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_p1)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_p1)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures') 

        assert(iscell(randomcomparison_p2) && ...
            isequal(numel(randomcomparison_p2), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_p2)) && ...
            all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_p2)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_p2)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures') 

        assert(iscell(randomcomparison_confidence_interval_min) && ...
            isequal(numel(randomcomparison_confidence_interval_min), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_confidence_interval_min)) && ...
            all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_confidence_interval_min)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_confidence_interval_min)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures') 

        assert(iscell(randomcomparison_confidence_interval_max) && ...
            isequal(numel(randomcomparison_confidence_interval_max), num_elements) && ...
            all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), randomcomparison_confidence_interval_max)) && ...
            all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), randomcomparison_confidence_interval_max)) && ...
            all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), randomcomparison_confidence_interval_max)), ...
            [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
            'AnalysisST_MP_BUD.getRandomComparison() not working with binodal measures')  
    end
end

% %% Test 5: Compare
% for i = 1:1:numel(measures)
%     measure = measures{i};
%     analysis = AnalysisST_MP_BUD('analysis id', 'analysis label', 'analysis notes', cohort, {}, {}, {}, 'density1', .6, 'density2', .5);
% 
%     measurement_group = analysis.getMeasurement(measure, group1, 'density1', .6, 'density2', .5);
%     parameter_value_group = measurement_group.getMeasureParameterValues();
%     parameter_values_length = max(1, length(parameter_value_group));
% 
%     number_of_permutations = 10;
%     
%     calculated_comparison = analysis.getComparison(measure, group1, group2, 'PermutationNumber', number_of_permutations, 'ComparisonST_MP.ParameterValues', parameter_value_group, 'density1', .6, 'density2', .5);
%     
%     assert(~isempty(calculated_comparison), ...
%         [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
%         'AnalysisST_MP_BUD.getComparison() not working')
%     
%     assert(analysis.getComparisons().length() == 1, ...
%         [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
%         'AnalysisST_MP_BUD.getComparison() not working')
%     
%     comparison = analysis.getComparisons().getValue(1);
%     comparison_values_1 = comparison.getGroupValue(1);
%     comparison_values_2 = comparison.getGroupValue(2);
%     comparison_difference = comparison.getDifference();
%     comparison_all_differences = comparison.getAllDifferences();
%     comparison_p1 = comparison.getP1();
%     comparison_p2 = comparison.getP2();
%     comparison_confidence_interval_min = comparison.getConfidenceIntervalMin();
%     comparison_confidence_interval_max = comparison.getConfidenceIntervalMax();
%     comparison_parameter_values = comparison.getMeasureParameterValues();
%     comparison_parameter_values_length = max(1, length(comparison_parameter_values));
%       
%     assert(isequal(parameter_values_length, comparison_parameter_values_length),  ... 
%     [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.BUG_FUNC], ...
%     'AnalysisST_MP_BUD.getComparison() does not initialize correctly the parameter of the measures')
% 
%     if Measure.is_superglobal(measure)
%         num_elements = 1;
%     elseif Measure.is_unilayer(measure)
%         num_elements = 2;
%     elseif Measure.is_bilayer(measure)
%         num_elements = 4;
%     end
%         
%     if Measure.is_global(measure)
%         assert(iscell(comparison_values_1) && ...
%             isequal(numel(comparison_values_1), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), 1), comparison_values_1)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_values_1)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_values_1)), ...
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_values_2) && ...
%             isequal(numel(comparison_values_2), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), 1), comparison_values_2)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_values_2)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_values_2)), ...         
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_difference) && ...
%             isequal(numel(comparison_difference), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), 1), comparison_difference)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_difference)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_difference)), ...      
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_all_differences) && ...
%             isequal(numel(comparison_all_differences), num_elements*number_of_permutations) && ...
%             all(all(cellfun(@(x) isequal(size(x, 1), 1), comparison_all_differences))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 2), 1), comparison_all_differences))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_all_differences))), ...        
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_p1) && ...
%             isequal(numel(comparison_p1), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), 1), comparison_p1)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_p1)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_p1)), ...        
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures') 
% 
%         assert(iscell(comparison_p2) && ...
%             isequal(numel(comparison_p2), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), 1), comparison_p2)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_p2)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_p2)), ... 
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures') 
%         
%         assert(iscell(comparison_confidence_interval_min) && ...
%             isequal(numel(comparison_confidence_interval_min), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), 1), comparison_confidence_interval_min)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_confidence_interval_min)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_confidence_interval_min)), ...  
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures') 
% 
%         assert(iscell(comparison_confidence_interval_max) && ...
%             isequal(numel(comparison_confidence_interval_max), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), 1), comparison_confidence_interval_max)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_confidence_interval_max)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_confidence_interval_max)), ... 
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with global measures')
% 
%     elseif Measure.is_nodal(measure)
%         assert(iscell(comparison_values_1) && ...
%             isequal(numel(comparison_values_1), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_values_1)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_values_1)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_values_1)), ...
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures') 
%         
%         assert(iscell(comparison_values_2) && ...
%             isequal(numel(comparison_values_2), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_values_2)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_values_2)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_values_2)), ... 
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures') 
%         
%         assert(iscell(comparison_difference) && ...
%             isequal(numel(comparison_difference), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_difference)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_difference)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_difference)), ...         
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures') 
%         
%         assert(iscell(comparison_all_differences) && ...
%             isequal(numel(comparison_all_differences), num_elements*number_of_permutations) && ...
%             all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_all_differences))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 2), 1), comparison_all_differences))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_all_differences))), ...         
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures')  
%         
%         assert(iscell(comparison_p1) && ...
%             isequal(numel(comparison_p1), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_p1)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_p1)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_p1)), ...           
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures') 
% 
%         assert(iscell(comparison_p2) && ...
%             isequal(numel(comparison_p2), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_p2)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_p2)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_p2)), ... 
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures') 
%         
%         assert(iscell(comparison_confidence_interval_min) && ...
%             isequal(numel(comparison_confidence_interval_min), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_confidence_interval_min)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_confidence_interval_min)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_confidence_interval_min)), ... 
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures') 
% 
%         assert(iscell(comparison_confidence_interval_max) && ...
%             isequal(numel(comparison_confidence_interval_max), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_confidence_interval_max)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), 1), comparison_confidence_interval_max)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_confidence_interval_max)), ...
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with nodal measures') 
%         
%     elseif Measure.is_binodal(measure)
%         assert(iscell(comparison_values_1) && ...
%             isequal(numel(comparison_values_1), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_values_1)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_values_1)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_values_1)), ...
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures') 
%         
%         assert(iscell(comparison_values_2) && ...
%             isequal(numel(comparison_values_2), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_values_2)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_values_2)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_values_2)), ...
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures')  
%         
%         assert(iscell(comparison_difference) && ...
%             isequal(numel(comparison_difference), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_difference)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_difference)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_difference)), ...            
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures') 
%         
%         assert(iscell(comparison_all_differences) && ...
%             isequal(numel(comparison_all_differences), num_elements*number_of_permutations) && ...
%             all(all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_all_differences))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_all_differences))) && ...
%             all(all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_all_differences))), ...        
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures') 
%         
%         assert(iscell(comparison_p1) && ...
%             isequal(numel(comparison_p1), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_p1)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_p1)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_p1)), ...          
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures') 
% 
%         assert(iscell(comparison_p2) && ...
%             isequal(numel(comparison_p2), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_p2)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_p2)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_p2)), ...
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures') 
%         
%         assert(iscell(comparison_confidence_interval_min) && ...
%             isequal(numel(comparison_confidence_interval_min), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_confidence_interval_min)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_confidence_interval_min)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_confidence_interval_min)), ...  
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures') 
% 
%         assert(iscell(comparison_confidence_interval_max) && ...
%             isequal(numel(comparison_confidence_interval_max), num_elements) && ...
%             all(cellfun(@(x) isequal(size(x, 1), atlas.getBrainRegions().length()), comparison_confidence_interval_max)) && ...
%             all(cellfun(@(x) isequal(size(x, 2), atlas.getBrainRegions().length()), comparison_confidence_interval_max)) && ...
%             all(cellfun(@(x) isequal(size(x, 3), parameter_values_length), comparison_confidence_interval_max)), ...    
%             [BRAPH2.STR ':AnalysisST_MP_BUD:' BRAPH2.WRONG_OUTPUT], ...
%             'AnalysisST_MP_BUD.getComparison() not working with binodal measures') 
%     end
% end